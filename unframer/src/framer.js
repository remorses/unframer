import {
  __commonJS,
  __decorateElement,
  __decoratorMetadata,
  __decoratorStart,
  __export,
  __privateAdd,
  __privateGet,
  __privateMethod,
  __privateSet,
  __publicField,
  __runInitializers,
  __toESM,
  framer_motion_inject_exports,
} from './framer-chunks/chunk-22NYTOTD.js';

// /:https://app.framerstatic.com/chunk-BLFSVU7M.mjs
import { createContext, } from 'react';
import { useEffect, useLayoutEffect, } from 'react';
import { useCallback, useContext, useId, } from 'react';
import { Fragment, jsx as jsx3, } from 'react/jsx-runtime';
import { useMemo as useMemo2, useRef as useRef3, useState, } from 'react';
import * as React2 from 'react';
import { useInsertionEffect, } from 'react';
import { Children, isValidElement, } from 'react';
import { jsxs, } from 'react/jsx-runtime';
import { forwardRef, } from 'react';
import { createElement, } from 'react';
import { Component as Component2, } from 'react';
var __unframerNavigator = typeof window !== 'undefined' ? navigator : void 0;
var require_memoize_browser_cjs = __commonJS({
  '../../../node_modules/@emotion/memoize/dist/memoize.browser.cjs.js'(exports,) {
    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true,
    },);
    function memoize3(fn,) {
      var cache2 = {};
      return function (arg,) {
        if (cache2[arg] === void 0) cache2[arg] = fn(arg,);
        return cache2[arg];
      };
    }
    exports.default = memoize3;
  },
},);
var require_is_prop_valid_browser_cjs = __commonJS({
  '../../../node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.cjs.js'(exports,) {
    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true,
    },);
    function _interopDefault(ex,) {
      return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
    }
    var memoize3 = _interopDefault(require_memoize_browser_cjs(),);
    var reactPropsRegex2 =
      /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
    var index = memoize3(function (prop,) {
      return reactPropsRegex2.test(prop,) || prop.charCodeAt(0,) === 111 && prop.charCodeAt(1,) === 110 && prop.charCodeAt(2,) < 91;
    },/* Z+1 */
    );
    exports.default = index;
  },
},);
var LayoutGroupContext = createContext({},);
var isBrowser = typeof window !== 'undefined';
var useIsomorphicLayoutEffect = isBrowser ? useLayoutEffect : useEffect;
var PresenceContext = /* @__PURE__ */ createContext(null,);
function addUniqueItem(arr, item,) {
  if (arr.indexOf(item,) === -1) arr.push(item,);
}
function removeItem(arr, item,) {
  const index = arr.indexOf(item,);
  if (index > -1) arr.splice(index, 1,);
}
function moveItem([...arr], fromIndex, toIndex,) {
  const startIndex = fromIndex < 0 ? arr.length + fromIndex : fromIndex;
  if (startIndex >= 0 && startIndex < arr.length) {
    const endIndex = toIndex < 0 ? arr.length + toIndex : toIndex;
    const [item,] = arr.splice(fromIndex, 1,);
    arr.splice(endIndex, 0, item,);
  }
  return arr;
}
var clamp = (min, max, v,) => {
  if (v > max) return max;
  if (v < min) return min;
  return v;
};
var warning = () => {};
var invariant = () => {};
if (false) {
  warning = (check, message,) => {
    if (!check && typeof console !== 'undefined') {
      console.warn(message,);
    }
  };
  invariant = (check, message,) => {
    if (!check) {
      throw new Error(message,);
    }
  };
}
var MotionGlobalConfig = {};
var isNumericalString = (v) => /^-?(?:\d+(?:\.\d+)?|\.\d+)$/u.test(v,);
function isObject(value,) {
  return typeof value === 'object' && value !== null;
}
var isZeroValueString = (v) => /^0[^.\s]+$/u.test(v,);
// @__NO_SIDE_EFFECTS__
function memo(callback,) {
  let result;
  return () => {
    if (result === void 0) result = callback();
    return result;
  };
}
var noop = /* @__NO_SIDE_EFFECTS__ */ (any) => any;
var combineFunctions = (a, b,) => (v) => b(a(v,),);
var pipe = (...transformers) => transformers.reduce(combineFunctions,);
var progress = /* @__NO_SIDE_EFFECTS__ */ (from, to, value,) => {
  const toFromDifference = to - from;
  return toFromDifference === 0 ? 1 : (value - from) / toFromDifference;
};
var SubscriptionManager = class {
  constructor() {
    this.subscriptions = [];
  }
  add(handler,) {
    addUniqueItem(this.subscriptions, handler,);
    return () => removeItem(this.subscriptions, handler,);
  }
  notify(a, b, c,) {
    const numSubscriptions = this.subscriptions.length;
    if (!numSubscriptions) return;
    if (numSubscriptions === 1) {
      this.subscriptions[0](a, b, c,);
    } else {
      for (let i = 0; i < numSubscriptions; i++) {
        const handler = this.subscriptions[i];
        handler && handler(a, b, c,);
      }
    }
  }
  getSize() {
    return this.subscriptions.length;
  }
  clear() {
    this.subscriptions.length = 0;
  }
};
var secondsToMilliseconds = /* @__NO_SIDE_EFFECTS__ */ (seconds) => seconds * 1e3;
var millisecondsToSeconds = /* @__NO_SIDE_EFFECTS__ */ (milliseconds) => milliseconds / 1e3;
function velocityPerSecond(velocity, frameDuration,) {
  return frameDuration ? velocity * (1e3 / frameDuration) : 0;
}
var warned = /* @__PURE__ */ new Set();
function hasWarned(message,) {
  return warned.has(message,);
}
function warnOnce(condition, message, element,) {
  if (condition || warned.has(message,)) return;
  console.warn(message,);
  if (element) console.warn(element,);
  warned.add(message,);
}
var wrap = (min, max, v,) => {
  const rangeSize = max - min;
  return ((v - min) % rangeSize + rangeSize) % rangeSize + min;
};
var calcBezier = (t, a1, a2,) => (((1 - 3 * a2 + 3 * a1) * t + (3 * a2 - 6 * a1)) * t + 3 * a1) * t;
var subdivisionPrecision = 1e-7;
var subdivisionMaxIterations = 12;
function binarySubdivide(x, lowerBound, upperBound, mX1, mX2,) {
  let currentX;
  let currentT;
  let i = 0;
  do {
    currentT = lowerBound + (upperBound - lowerBound) / 2;
    currentX = calcBezier(currentT, mX1, mX2,) - x;
    if (currentX > 0) {
      upperBound = currentT;
    } else {
      lowerBound = currentT;
    }
  } while (Math.abs(currentX,) > subdivisionPrecision && ++i < subdivisionMaxIterations);
  return currentT;
}
function cubicBezier(mX1, mY1, mX2, mY2,) {
  if (mX1 === mY1 && mX2 === mY2) return noop;
  const getTForX = (aX) => binarySubdivide(aX, 0, 1, mX1, mX2,);
  return (t) => t === 0 || t === 1 ? t : calcBezier(getTForX(t,), mY1, mY2,);
}
var mirrorEasing = (easing) => (p) => p <= 0.5 ? easing(2 * p,) / 2 : (2 - easing(2 * (1 - p),)) / 2;
var reverseEasing = (easing) => (p) => 1 - easing(1 - p,);
var backOut = /* @__PURE__ */ cubicBezier(0.33, 1.53, 0.69, 0.99,);
var backIn = /* @__PURE__ */ reverseEasing(backOut,);
var backInOut = /* @__PURE__ */ mirrorEasing(backIn,);
var anticipate = (p) => (p *= 2) < 1 ? 0.5 * backIn(p,) : 0.5 * (2 - Math.pow(2, -10 * (p - 1),));
var circIn = (p) => 1 - Math.sin(Math.acos(p,),);
var circOut = reverseEasing(circIn,);
var circInOut = mirrorEasing(circIn,);
var easeIn = /* @__PURE__ */ cubicBezier(0.42, 0, 1, 1,);
var easeOut = /* @__PURE__ */ cubicBezier(0, 0, 0.58, 1,);
var easeInOut = /* @__PURE__ */ cubicBezier(0.42, 0, 0.58, 1,);
function steps(numSteps, direction = 'end',) {
  return (progress2) => {
    progress2 = direction === 'end' ? Math.min(progress2, 0.999,) : Math.max(progress2, 1e-3,);
    const expanded = progress2 * numSteps;
    const rounded = direction === 'end' ? Math.floor(expanded,) : Math.ceil(expanded,);
    return clamp(0, 1, rounded / numSteps,);
  };
}
var isEasingArray = (ease2) => {
  return Array.isArray(ease2,) && typeof ease2[0] !== 'number';
};
function getEasingForSegment(easing, i,) {
  return isEasingArray(easing,) ? easing[wrap(0, easing.length, i,)] : easing;
}
var isBezierDefinition = (easing) => Array.isArray(easing,) && typeof easing[0] === 'number';
var easingLookup = {
  linear: noop,
  easeIn,
  easeInOut,
  easeOut,
  circIn,
  circInOut,
  circOut,
  backIn,
  backInOut,
  backOut,
  anticipate,
};
var isValidEasing = (easing) => {
  return typeof easing === 'string';
};
var easingDefinitionToFunction = (definition) => {
  if (isBezierDefinition(definition,)) {
    invariant(definition.length === 4, `Cubic bezier arrays must contain four numerical values.`,);
    const [x1, y1, x2, y2,] = definition;
    return cubicBezier(x1, y1, x2, y2,);
  } else if (isValidEasing(definition,)) {
    invariant(easingLookup[definition] !== void 0, `Invalid easing type '${definition}'`,);
    return easingLookup[definition];
  }
  return definition;
};
var statsBuffer = {
  value: null,
  addProjectionMetrics: null,
};
var stepsOrder = [
  'setup',
  // Compute
  'read',
  // Read
  'resolveKeyframes',
  // Write/Read/Write/Read
  'preUpdate',
  // Compute
  'update',
  // Compute
  'preRender',
  // Compute
  'render',
  // Write
  'postRender',
  // Compute
];
function createRenderStep(runNextFrame, stepName,) {
  let thisFrame = /* @__PURE__ */ new Set();
  let nextFrame = /* @__PURE__ */ new Set();
  let isProcessing = false;
  let flushNextFrame = false;
  const toKeepAlive = /* @__PURE__ */ new WeakSet();
  let latestFrameData = {
    delta: 0,
    timestamp: 0,
    isProcessing: false,
  };
  let numCalls = 0;
  function triggerCallback(callback,) {
    if (toKeepAlive.has(callback,)) {
      step2.schedule(callback,);
      runNextFrame();
    }
    numCalls++;
    callback(latestFrameData,);
  }
  const step2 = {
    /**
     * Schedule a process to run on the next frame.
     */
    schedule: (callback, keepAlive = false, immediate = false,) => {
      const addToCurrentFrame = immediate && isProcessing;
      const queue = addToCurrentFrame ? thisFrame : nextFrame;
      if (keepAlive) toKeepAlive.add(callback,);
      if (!queue.has(callback,)) queue.add(callback,);
      return callback;
    },
    /**
     * Cancel the provided callback from running on the next frame.
     */
    cancel: (callback) => {
      nextFrame.delete(callback,);
      toKeepAlive.delete(callback,);
    },
    /**
     * Execute all schedule callbacks.
     */
    process: (frameData2) => {
      latestFrameData = frameData2;
      if (isProcessing) {
        flushNextFrame = true;
        return;
      }
      isProcessing = true;
      [thisFrame, nextFrame,] = [nextFrame, thisFrame,];
      thisFrame.forEach(triggerCallback,);
      if (stepName && statsBuffer.value) {
        statsBuffer.value.frameloop[stepName].push(numCalls,);
      }
      numCalls = 0;
      thisFrame.clear();
      isProcessing = false;
      if (flushNextFrame) {
        flushNextFrame = false;
        step2.process(frameData2,);
      }
    },
  };
  return step2;
}
var maxElapsed = 40;
function createRenderBatcher(scheduleNextBatch, allowKeepAlive,) {
  let runNextFrame = false;
  let useDefaultElapsed = true;
  const state = {
    delta: 0,
    timestamp: 0,
    isProcessing: false,
  };
  const flagRunNextFrame = () => runNextFrame = true;
  const steps2 = stepsOrder.reduce((acc, key7,) => {
    acc[key7] = createRenderStep(flagRunNextFrame, allowKeepAlive ? key7 : void 0,);
    return acc;
  }, {},);
  const {
    setup,
    read,
    resolveKeyframes,
    preUpdate,
    update,
    preRender,
    render,
    postRender,
  } = steps2;
  const processBatch = () => {
    const timestamp = MotionGlobalConfig.useManualTiming ? state.timestamp : performance.now();
    runNextFrame = false;
    if (!MotionGlobalConfig.useManualTiming) {
      state.delta = useDefaultElapsed ? 1e3 / 60 : Math.max(Math.min(timestamp - state.timestamp, maxElapsed,), 1,);
    }
    state.timestamp = timestamp;
    state.isProcessing = true;
    setup.process(state,);
    read.process(state,);
    resolveKeyframes.process(state,);
    preUpdate.process(state,);
    update.process(state,);
    preRender.process(state,);
    render.process(state,);
    postRender.process(state,);
    state.isProcessing = false;
    if (runNextFrame && allowKeepAlive) {
      useDefaultElapsed = false;
      scheduleNextBatch(processBatch,);
    }
  };
  const wake = () => {
    runNextFrame = true;
    useDefaultElapsed = true;
    if (!state.isProcessing) {
      scheduleNextBatch(processBatch,);
    }
  };
  const schedule = stepsOrder.reduce((acc, key7,) => {
    const step2 = steps2[key7];
    acc[key7] = (process2, keepAlive = false, immediate = false,) => {
      if (!runNextFrame) wake();
      return step2.schedule(process2, keepAlive, immediate,);
    };
    return acc;
  }, {},);
  const cancel = (process2) => {
    for (let i = 0; i < stepsOrder.length; i++) {
      steps2[stepsOrder[i]].cancel(process2,);
    }
  };
  return {
    schedule,
    cancel,
    state,
    steps: steps2,
  };
}
var {
  schedule: frame,
  cancel: cancelFrame,
  state: frameData,
  steps: frameSteps,
} = /* @__PURE__ */ createRenderBatcher(typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame : noop, true,);
var now;
function clearTime() {
  now = void 0;
}
var time = {
  now: () => {
    if (now === void 0) {
      time.set(frameData.isProcessing || MotionGlobalConfig.useManualTiming ? frameData.timestamp : performance.now(),);
    }
    return now;
  },
  set: (newTime) => {
    now = newTime;
    queueMicrotask(clearTime,);
  },
};
var activeAnimations = {
  layout: 0,
  mainThread: 0,
  waapi: 0,
};
var checkStringStartsWith = (token) => (key7) => typeof key7 === 'string' && key7.startsWith(token,);
var isCSSVariableName = /* @__PURE__ */ checkStringStartsWith('--',);
var startsAsVariableToken = /* @__PURE__ */ checkStringStartsWith('var(--',);
var isCSSVariableToken = (value) => {
  const startsWithToken = startsAsVariableToken(value,);
  if (!startsWithToken) return false;
  return singleCssVariableRegex.test(value.split('/*',)[0].trim(),);
};
var singleCssVariableRegex = /var\(--(?:[\w-]+\s*|[\w-]+\s*,(?:\s*[^)(\s]|\s*\((?:[^)(]|\([^)(]*\))*\))+\s*)\)$/iu;
var number = {
  test: (v) => typeof v === 'number',
  parse: parseFloat,
  transform: (v) => v,
};
var alpha = {
  ...number,
  transform: (v) => clamp(0, 1, v,),
};
var scale = {
  ...number,
  default: 1,
};
var sanitize = (v) => Math.round(v * 1e5,) / 1e5;
var floatRegex = /-?(?:\d+(?:\.\d+)?|\.\d+)/gu;
function isNullish(v,) {
  return v == null;
}
var singleColorRegex =
  /^(?:#[\da-f]{3,8}|(?:rgb|hsl)a?\((?:-?[\d.]+%?[,\s]+){2}-?[\d.]+%?\s*(?:[,/]\s*)?(?:\b\d+(?:\.\d+)?|\.\d+)?%?\))$/iu;
var isColorString = (type, testProp,) => (v) => {
  return Boolean(
    typeof v === 'string' && singleColorRegex.test(v,) && v.startsWith(type,) ||
      testProp && !isNullish(v,) && Object.prototype.hasOwnProperty.call(v, testProp,),
  );
};
var splitColor = (aName, bName, cName,) => (v) => {
  if (typeof v !== 'string') return v;
  const [a, b, c, alpha2,] = v.match(floatRegex,);
  return {
    [aName]: parseFloat(a,),
    [bName]: parseFloat(b,),
    [cName]: parseFloat(c,),
    alpha: alpha2 !== void 0 ? parseFloat(alpha2,) : 1,
  };
};
var clampRgbUnit = (v) => clamp(0, 255, v,);
var rgbUnit = {
  ...number,
  transform: (v) => Math.round(clampRgbUnit(v,),),
};
var rgba = {
  test: /* @__PURE__ */ isColorString('rgb', 'red',),
  parse: /* @__PURE__ */ splitColor('red', 'green', 'blue',),
  transform: ({
    red,
    green,
    blue,
    alpha: alpha$1 = 1,
  },) =>
    'rgba(' + rgbUnit.transform(red,) + ', ' + rgbUnit.transform(green,) + ', ' + rgbUnit.transform(blue,) + ', ' +
    sanitize(alpha.transform(alpha$1,),) + ')',
};
function parseHex(v,) {
  let r = '';
  let g = '';
  let b = '';
  let a = '';
  if (v.length > 5) {
    r = v.substring(1, 3,);
    g = v.substring(3, 5,);
    b = v.substring(5, 7,);
    a = v.substring(7, 9,);
  } else {
    r = v.substring(1, 2,);
    g = v.substring(2, 3,);
    b = v.substring(3, 4,);
    a = v.substring(4, 5,);
    r += r;
    g += g;
    b += b;
    a += a;
  }
  return {
    red: parseInt(r, 16,),
    green: parseInt(g, 16,),
    blue: parseInt(b, 16,),
    alpha: a ? parseInt(a, 16,) / 255 : 1,
  };
}
var hex = {
  test: /* @__PURE__ */ isColorString('#',),
  parse: parseHex,
  transform: rgba.transform,
};
var createUnitType = /* @__NO_SIDE_EFFECTS__ */ (unit) => ({
  test: (v) => typeof v === 'string' && v.endsWith(unit,) && v.split(' ',).length === 1,
  parse: parseFloat,
  transform: (v) => `${v}${unit}`,
});
var degrees = /* @__PURE__ */ createUnitType('deg',);
var percent = /* @__PURE__ */ createUnitType('%',);
var px = /* @__PURE__ */ createUnitType('px',);
var vh = /* @__PURE__ */ createUnitType('vh',);
var vw = /* @__PURE__ */ createUnitType('vw',);
var progressPercentage = /* @__PURE__ */ (() => ({
  ...percent,
  parse: (v) => percent.parse(v,) / 100,
  transform: (v) => percent.transform(v * 100,),
}))();
var hsla = {
  test: /* @__PURE__ */ isColorString('hsl', 'hue',),
  parse: /* @__PURE__ */ splitColor('hue', 'saturation', 'lightness',),
  transform: ({
    hue,
    saturation,
    lightness,
    alpha: alpha$1 = 1,
  },) => {
    return 'hsla(' + Math.round(hue,) + ', ' + percent.transform(sanitize(saturation,),) + ', ' + percent.transform(sanitize(lightness,),) +
      ', ' + sanitize(alpha.transform(alpha$1,),) + ')';
  },
};
var color = {
  test: (v) => rgba.test(v,) || hex.test(v,) || hsla.test(v,),
  parse: (v) => {
    if (rgba.test(v,)) {
      return rgba.parse(v,);
    } else if (hsla.test(v,)) {
      return hsla.parse(v,);
    } else {
      return hex.parse(v,);
    }
  },
  transform: (v) => {
    return typeof v === 'string' ? v : v.hasOwnProperty('red',) ? rgba.transform(v,) : hsla.transform(v,);
  },
};
var colorRegex = /(?:#[\da-f]{3,8}|(?:rgb|hsl)a?\((?:-?[\d.]+%?[,\s]+){2}-?[\d.]+%?\s*(?:[,/]\s*)?(?:\b\d+(?:\.\d+)?|\.\d+)?%?\))/giu;
function test(v,) {
  var _a, _b;
  return isNaN(v,) && typeof v === 'string' &&
    (((_a = v.match(floatRegex,)) == null ? void 0 : _a.length) || 0) + (((_b = v.match(colorRegex,)) == null ? void 0 : _b.length) || 0) >
      0;
}
var NUMBER_TOKEN = 'number';
var COLOR_TOKEN = 'color';
var VAR_TOKEN = 'var';
var VAR_FUNCTION_TOKEN = 'var(';
var SPLIT_TOKEN = '${}';
var complexRegex =
  /var\s*\(\s*--(?:[\w-]+\s*|[\w-]+\s*,(?:\s*[^)(\s]|\s*\((?:[^)(]|\([^)(]*\))*\))+\s*)\)|#[\da-f]{3,8}|(?:rgb|hsl)a?\((?:-?[\d.]+%?[,\s]+){2}-?[\d.]+%?\s*(?:[,/]\s*)?(?:\b\d+(?:\.\d+)?|\.\d+)?%?\)|-?(?:\d+(?:\.\d+)?|\.\d+)/giu;
function analyseComplexValue(value,) {
  const originalValue = value.toString();
  const values = [];
  const indexes = {
    color: [],
    number: [],
    var: [],
  };
  const types = [];
  let i = 0;
  const tokenised = originalValue.replace(complexRegex, (parsedValue) => {
    if (color.test(parsedValue,)) {
      indexes.color.push(i,);
      types.push(COLOR_TOKEN,);
      values.push(color.parse(parsedValue,),);
    } else if (parsedValue.startsWith(VAR_FUNCTION_TOKEN,)) {
      indexes.var.push(i,);
      types.push(VAR_TOKEN,);
      values.push(parsedValue,);
    } else {
      indexes.number.push(i,);
      types.push(NUMBER_TOKEN,);
      values.push(parseFloat(parsedValue,),);
    }
    ++i;
    return SPLIT_TOKEN;
  },);
  const split = tokenised.split(SPLIT_TOKEN,);
  return {
    values,
    split,
    indexes,
    types,
  };
}
function parseComplexValue(v,) {
  return analyseComplexValue(v,).values;
}
function createTransformer(source,) {
  const {
    split,
    types,
  } = analyseComplexValue(source,);
  const numSections = split.length;
  return (v) => {
    let output = '';
    for (let i = 0; i < numSections; i++) {
      output += split[i];
      if (v[i] !== void 0) {
        const type = types[i];
        if (type === NUMBER_TOKEN) {
          output += sanitize(v[i],);
        } else if (type === COLOR_TOKEN) {
          output += color.transform(v[i],);
        } else {
          output += v[i];
        }
      }
    }
    return output;
  };
}
var convertNumbersToZero = (v) => typeof v === 'number' ? 0 : v;
function getAnimatableNone(v,) {
  const parsed = parseComplexValue(v,);
  const transformer = createTransformer(v,);
  return transformer(parsed.map(convertNumbersToZero,),);
}
var complex = {
  test,
  parse: parseComplexValue,
  createTransformer,
  getAnimatableNone,
};
function hueToRgb(p, q, t,) {
  if (t < 0) t += 1;
  if (t > 1) t -= 1;
  if (t < 1 / 6) return p + (q - p) * 6 * t;
  if (t < 1 / 2) return q;
  if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
  return p;
}
function hslaToRgba({
  hue,
  saturation,
  lightness,
  alpha: alpha2,
},) {
  hue /= 360;
  saturation /= 100;
  lightness /= 100;
  let red = 0;
  let green = 0;
  let blue = 0;
  if (!saturation) {
    red = green = blue = lightness;
  } else {
    const q = lightness < 0.5 ? lightness * (1 + saturation) : lightness + saturation - lightness * saturation;
    const p = 2 * lightness - q;
    red = hueToRgb(p, q, hue + 1 / 3,);
    green = hueToRgb(p, q, hue,);
    blue = hueToRgb(p, q, hue - 1 / 3,);
  }
  return {
    red: Math.round(red * 255,),
    green: Math.round(green * 255,),
    blue: Math.round(blue * 255,),
    alpha: alpha2,
  };
}
function mixImmediate(a, b,) {
  return (p) => p > 0 ? b : a;
}
var mixNumber = (from, to, progress2,) => {
  return from + (to - from) * progress2;
};
var mixLinearColor = (from, to, v,) => {
  const fromExpo = from * from;
  const expo = v * (to * to - fromExpo) + fromExpo;
  return expo < 0 ? 0 : Math.sqrt(expo,);
};
var colorTypes = [hex, rgba, hsla,];
var getColorType = (v) => colorTypes.find((type) => type.test(v,));
function asRGBA(color2,) {
  const type = getColorType(color2,);
  warning(Boolean(type,), `'${color2}' is not an animatable color. Use the equivalent color code instead.`,);
  if (!Boolean(type,)) return false;
  let model = type.parse(color2,);
  if (type === hsla) {
    model = hslaToRgba(model,);
  }
  return model;
}
var mixColor = (from, to,) => {
  const fromRGBA = asRGBA(from,);
  const toRGBA = asRGBA(to,);
  if (!fromRGBA || !toRGBA) {
    return mixImmediate(from, to,);
  }
  const blended = {
    ...fromRGBA,
  };
  return (v) => {
    blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v,);
    blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v,);
    blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v,);
    blended.alpha = mixNumber(fromRGBA.alpha, toRGBA.alpha, v,);
    return rgba.transform(blended,);
  };
};
var invisibleValues = /* @__PURE__ */ new Set(['none', 'hidden',],);
function mixVisibility(origin, target,) {
  if (invisibleValues.has(origin,)) {
    return (p) => p <= 0 ? origin : target;
  } else {
    return (p) => p >= 1 ? target : origin;
  }
}
function mixNumber2(a, b,) {
  return (p) => mixNumber(a, b, p,);
}
function getMixer(a,) {
  if (typeof a === 'number') {
    return mixNumber2;
  } else if (typeof a === 'string') {
    return isCSSVariableToken(a,) ? mixImmediate : color.test(a,) ? mixColor : mixComplex;
  } else if (Array.isArray(a,)) {
    return mixArray;
  } else if (typeof a === 'object') {
    return color.test(a,) ? mixColor : mixObject;
  }
  return mixImmediate;
}
function mixArray(a, b,) {
  const output = [...a,];
  const numValues = output.length;
  const blendValue = a.map((v, i,) => getMixer(v,)(v, b[i],));
  return (p) => {
    for (let i = 0; i < numValues; i++) {
      output[i] = blendValue[i](p,);
    }
    return output;
  };
}
function mixObject(a, b,) {
  const output = {
    ...a,
    ...b,
  };
  const blendValue = {};
  for (const key7 in output) {
    if (a[key7] !== void 0 && b[key7] !== void 0) {
      blendValue[key7] = getMixer(a[key7],)(a[key7], b[key7],);
    }
  }
  return (v) => {
    for (const key7 in blendValue) {
      output[key7] = blendValue[key7](v,);
    }
    return output;
  };
}
function matchOrder(origin, target,) {
  const orderedOrigin = [];
  const pointers = {
    color: 0,
    var: 0,
    number: 0,
  };
  for (let i = 0; i < target.values.length; i++) {
    const type = target.types[i];
    const originIndex = origin.indexes[type][pointers[type]];
    const originValue = origin.values[originIndex] ?? 0;
    orderedOrigin[i] = originValue;
    pointers[type]++;
  }
  return orderedOrigin;
}
var mixComplex = (origin, target,) => {
  const template = complex.createTransformer(target,);
  const originStats = analyseComplexValue(origin,);
  const targetStats = analyseComplexValue(target,);
  const canInterpolate = originStats.indexes.var.length === targetStats.indexes.var.length &&
    originStats.indexes.color.length === targetStats.indexes.color.length &&
    originStats.indexes.number.length >= targetStats.indexes.number.length;
  if (canInterpolate) {
    if (invisibleValues.has(origin,) && !targetStats.values.length || invisibleValues.has(target,) && !originStats.values.length) {
      return mixVisibility(origin, target,);
    }
    return pipe(mixArray(matchOrder(originStats, targetStats,), targetStats.values,), template,);
  } else {
    warning(
      true,
      `Complex values '${origin}' and '${target}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`,
    );
    return mixImmediate(origin, target,);
  }
};
function mix(from, to, p,) {
  if (typeof from === 'number' && typeof to === 'number' && typeof p === 'number') {
    return mixNumber(from, to, p,);
  }
  const mixer = getMixer(from,);
  return mixer(from, to,);
}
var generateLinearEasing = (easing, duration, resolution = 10,) => {
  let points = '';
  const numPoints = Math.max(Math.round(duration / resolution,), 2,);
  for (let i = 0; i < numPoints; i++) {
    points += easing(i / (numPoints - 1),) + ', ';
  }
  return `linear(${points.substring(0, points.length - 2,)})`;
};
var maxGeneratorDuration = 2e4;
function calcGeneratorDuration(generator,) {
  let duration = 0;
  const timeStep = 50;
  let state = generator.next(duration,);
  while (!state.done && duration < maxGeneratorDuration) {
    duration += timeStep;
    state = generator.next(duration,);
  }
  return duration >= maxGeneratorDuration ? Infinity : duration;
}
function createGeneratorEasing(options, scale2 = 100, createGenerator,) {
  const generator = createGenerator({
    ...options,
    keyframes: [0, scale2,],
  },);
  const duration = Math.min(calcGeneratorDuration(generator,), maxGeneratorDuration,);
  return {
    type: 'keyframes',
    ease: (progress2) => {
      return generator.next(duration * progress2,).value / scale2;
    },
    duration: millisecondsToSeconds(duration,),
  };
}
var velocitySampleDuration = 5;
function calcGeneratorVelocity(resolveValue, t, current2,) {
  const prevT = Math.max(t - velocitySampleDuration, 0,);
  return velocityPerSecond(current2 - resolveValue(prevT,), t - prevT,);
}
var springDefaults = {
  // Default spring physics
  stiffness: 100,
  damping: 10,
  mass: 1,
  velocity: 0,
  // Default duration/bounce-based options
  duration: 800,
  // in ms
  bounce: 0.3,
  visualDuration: 0.3,
  // in seconds
  // Rest thresholds
  restSpeed: {
    granular: 0.01,
    default: 2,
  },
  restDelta: {
    granular: 5e-3,
    default: 0.5,
  },
  // Limits
  minDuration: 0.01,
  // in seconds
  maxDuration: 10,
  // in seconds
  minDamping: 0.05,
  maxDamping: 1,
};
var safeMin = 1e-3;
function findSpring({
  duration = springDefaults.duration,
  bounce = springDefaults.bounce,
  velocity = springDefaults.velocity,
  mass = springDefaults.mass,
},) {
  let envelope;
  let derivative;
  warning(duration <= secondsToMilliseconds(springDefaults.maxDuration,), 'Spring duration must be 10 seconds or less',);
  let dampingRatio = 1 - bounce;
  dampingRatio = clamp(springDefaults.minDamping, springDefaults.maxDamping, dampingRatio,);
  duration = clamp(springDefaults.minDuration, springDefaults.maxDuration, millisecondsToSeconds(duration,),);
  if (dampingRatio < 1) {
    envelope = (undampedFreq2) => {
      const exponentialDecay = undampedFreq2 * dampingRatio;
      const delta = exponentialDecay * duration;
      const a = exponentialDecay - velocity;
      const b = calcAngularFreq(undampedFreq2, dampingRatio,);
      const c = Math.exp(-delta,);
      return safeMin - a / b * c;
    };
    derivative = (undampedFreq2) => {
      const exponentialDecay = undampedFreq2 * dampingRatio;
      const delta = exponentialDecay * duration;
      const d = delta * velocity + velocity;
      const e = Math.pow(dampingRatio, 2,) * Math.pow(undampedFreq2, 2,) * duration;
      const f = Math.exp(-delta,);
      const g = calcAngularFreq(Math.pow(undampedFreq2, 2,), dampingRatio,);
      const factor = -envelope(undampedFreq2,) + safeMin > 0 ? -1 : 1;
      return factor * ((d - e) * f) / g;
    };
  } else {
    envelope = (undampedFreq2) => {
      const a = Math.exp(-undampedFreq2 * duration,);
      const b = (undampedFreq2 - velocity) * duration + 1;
      return -safeMin + a * b;
    };
    derivative = (undampedFreq2) => {
      const a = Math.exp(-undampedFreq2 * duration,);
      const b = (velocity - undampedFreq2) * (duration * duration);
      return a * b;
    };
  }
  const initialGuess = 5 / duration;
  const undampedFreq = approximateRoot(envelope, derivative, initialGuess,);
  duration = secondsToMilliseconds(duration,);
  if (isNaN(undampedFreq,)) {
    return {
      stiffness: springDefaults.stiffness,
      damping: springDefaults.damping,
      duration,
    };
  } else {
    const stiffness = Math.pow(undampedFreq, 2,) * mass;
    return {
      stiffness,
      damping: dampingRatio * 2 * Math.sqrt(mass * stiffness,),
      duration,
    };
  }
}
var rootIterations = 12;
function approximateRoot(envelope, derivative, initialGuess,) {
  let result = initialGuess;
  for (let i = 1; i < rootIterations; i++) {
    result = result - envelope(result,) / derivative(result,);
  }
  return result;
}
function calcAngularFreq(undampedFreq, dampingRatio,) {
  return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio,);
}
var durationKeys = ['duration', 'bounce',];
var physicsKeys = ['stiffness', 'damping', 'mass',];
function isSpringType(options, keys23,) {
  return keys23.some((key7) => options[key7] !== void 0);
}
function getSpringOptions(options,) {
  let springOptions = {
    velocity: springDefaults.velocity,
    stiffness: springDefaults.stiffness,
    damping: springDefaults.damping,
    mass: springDefaults.mass,
    isResolvedFromDuration: false,
    ...options,
  };
  if (!isSpringType(options, physicsKeys,) && isSpringType(options, durationKeys,)) {
    if (options.visualDuration) {
      const visualDuration = options.visualDuration;
      const root = 2 * Math.PI / (visualDuration * 1.2);
      const stiffness = root * root;
      const damping = 2 * clamp(0.05, 1, 1 - (options.bounce || 0),) * Math.sqrt(stiffness,);
      springOptions = {
        ...springOptions,
        mass: springDefaults.mass,
        stiffness,
        damping,
      };
    } else {
      const derived = findSpring(options,);
      springOptions = {
        ...springOptions,
        ...derived,
        mass: springDefaults.mass,
      };
      springOptions.isResolvedFromDuration = true;
    }
  }
  return springOptions;
}
function spring(optionsOrVisualDuration = springDefaults.visualDuration, bounce = springDefaults.bounce,) {
  const options = typeof optionsOrVisualDuration !== 'object'
    ? {
      visualDuration: optionsOrVisualDuration,
      keyframes: [0, 1,],
      bounce,
    }
    : optionsOrVisualDuration;
  let {
    restSpeed,
    restDelta,
  } = options;
  const origin = options.keyframes[0];
  const target = options.keyframes[options.keyframes.length - 1];
  const state = {
    done: false,
    value: origin,
  };
  const {
    stiffness,
    damping,
    mass,
    duration,
    velocity,
    isResolvedFromDuration,
  } = getSpringOptions({
    ...options,
    velocity: -millisecondsToSeconds(options.velocity || 0,),
  },);
  const initialVelocity = velocity || 0;
  const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass,));
  const initialDelta = target - origin;
  const undampedAngularFreq = millisecondsToSeconds(Math.sqrt(stiffness / mass,),);
  const isGranularScale = Math.abs(initialDelta,) < 5;
  restSpeed || (restSpeed = isGranularScale ? springDefaults.restSpeed.granular : springDefaults.restSpeed.default);
  restDelta || (restDelta = isGranularScale ? springDefaults.restDelta.granular : springDefaults.restDelta.default);
  let resolveSpring;
  if (dampingRatio < 1) {
    const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio,);
    resolveSpring = (t) => {
      const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t,);
      return target -
        envelope *
          ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq * Math.sin(angularFreq * t,) +
            initialDelta * Math.cos(angularFreq * t,));
    };
  } else if (dampingRatio === 1) {
    resolveSpring = (t) =>
      target - Math.exp(-undampedAngularFreq * t,) * (initialDelta + (initialVelocity + undampedAngularFreq * initialDelta) * t);
  } else {
    const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1,);
    resolveSpring = (t) => {
      const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t,);
      const freqForT = Math.min(dampedAngularFreq * t, 300,);
      return target -
        envelope *
          ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) * Math.sinh(freqForT,) +
            dampedAngularFreq * initialDelta * Math.cosh(freqForT,)) /
          dampedAngularFreq;
    };
  }
  const generator = {
    calculatedDuration: isResolvedFromDuration ? duration || null : null,
    next: (t) => {
      const current2 = resolveSpring(t,);
      if (!isResolvedFromDuration) {
        let currentVelocity = t === 0 ? initialVelocity : 0;
        if (dampingRatio < 1) {
          currentVelocity = t === 0 ? secondsToMilliseconds(initialVelocity,) : calcGeneratorVelocity(resolveSpring, t, current2,);
        }
        const isBelowVelocityThreshold = Math.abs(currentVelocity,) <= restSpeed;
        const isBelowDisplacementThreshold = Math.abs(target - current2,) <= restDelta;
        state.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;
      } else {
        state.done = t >= duration;
      }
      state.value = state.done ? target : current2;
      return state;
    },
    toString: () => {
      const calculatedDuration = Math.min(calcGeneratorDuration(generator,), maxGeneratorDuration,);
      const easing = generateLinearEasing((progress2) => generator.next(calculatedDuration * progress2,).value, calculatedDuration, 30,);
      return calculatedDuration + 'ms ' + easing;
    },
    toTransition: () => {},
  };
  return generator;
}
spring.applyToOptions = (options) => {
  const generatorOptions = createGeneratorEasing(options, 100, spring,);
  options.ease = generatorOptions.ease;
  options.duration = secondsToMilliseconds(generatorOptions.duration,);
  options.type = 'keyframes';
  return options;
};
function inertia({
  keyframes: keyframes2,
  velocity = 0,
  power = 0.8,
  timeConstant: timeConstant2 = 325,
  bounceDamping = 10,
  bounceStiffness = 500,
  modifyTarget,
  min,
  max,
  restDelta = 0.5,
  restSpeed,
},) {
  const origin = keyframes2[0];
  const state = {
    done: false,
    value: origin,
  };
  const isOutOfBounds = (v) => min !== void 0 && v < min || max !== void 0 && v > max;
  const nearestBoundary = (v) => {
    if (min === void 0) return max;
    if (max === void 0) return min;
    return Math.abs(min - v,) < Math.abs(max - v,) ? min : max;
  };
  let amplitude = power * velocity;
  const ideal = origin + amplitude;
  const target = modifyTarget === void 0 ? ideal : modifyTarget(ideal,);
  if (target !== ideal) amplitude = target - origin;
  const calcDelta = (t) => -amplitude * Math.exp(-t / timeConstant2,);
  const calcLatest = (t) => target + calcDelta(t,);
  const applyFriction = (t) => {
    const delta = calcDelta(t,);
    const latest = calcLatest(t,);
    state.done = Math.abs(delta,) <= restDelta;
    state.value = state.done ? target : latest;
  };
  let timeReachedBoundary;
  let spring$1;
  const checkCatchBoundary = (t) => {
    if (!isOutOfBounds(state.value,)) return;
    timeReachedBoundary = t;
    spring$1 = spring({
      keyframes: [state.value, nearestBoundary(state.value,),],
      velocity: calcGeneratorVelocity(calcLatest, t, state.value,),
      // TODO: This should be passing * 1000
      damping: bounceDamping,
      stiffness: bounceStiffness,
      restDelta,
      restSpeed,
    },);
  };
  checkCatchBoundary(0,);
  return {
    calculatedDuration: null,
    next: (t) => {
      let hasUpdatedFrame = false;
      if (!spring$1 && timeReachedBoundary === void 0) {
        hasUpdatedFrame = true;
        applyFriction(t,);
        checkCatchBoundary(t,);
      }
      if (timeReachedBoundary !== void 0 && t >= timeReachedBoundary) {
        return spring$1.next(t - timeReachedBoundary,);
      } else {
        !hasUpdatedFrame && applyFriction(t,);
        return state;
      }
    },
  };
}
function createMixers(output, ease2, customMixer,) {
  const mixers = [];
  const mixerFactory = customMixer || MotionGlobalConfig.mix || mix;
  const numMixers = output.length - 1;
  for (let i = 0; i < numMixers; i++) {
    let mixer = mixerFactory(output[i], output[i + 1],);
    if (ease2) {
      const easingFunction = Array.isArray(ease2,) ? ease2[i] || noop : ease2;
      mixer = pipe(easingFunction, mixer,);
    }
    mixers.push(mixer,);
  }
  return mixers;
}
function interpolate(input, output, {
  clamp: isClamp = true,
  ease: ease2,
  mixer,
} = {},) {
  const inputLength = input.length;
  invariant(inputLength === output.length, 'Both input and output ranges must be the same length',);
  if (inputLength === 1) return () => output[0];
  if (inputLength === 2 && output[0] === output[1]) return () => output[1];
  const isZeroDeltaRange = input[0] === input[1];
  if (input[0] > input[inputLength - 1]) {
    input = [...input,].reverse();
    output = [...output,].reverse();
  }
  const mixers = createMixers(output, ease2, mixer,);
  const numMixers = mixers.length;
  const interpolator = (v) => {
    if (isZeroDeltaRange && v < input[0]) return output[0];
    let i = 0;
    if (numMixers > 1) {
      for (; i < input.length - 2; i++) {
        if (v < input[i + 1]) break;
      }
    }
    const progressInRange = progress(input[i], input[i + 1], v,);
    return mixers[i](progressInRange,);
  };
  return isClamp ? (v) => interpolator(clamp(input[0], input[inputLength - 1], v,),) : interpolator;
}
function fillOffset(offset, remaining,) {
  const min = offset[offset.length - 1];
  for (let i = 1; i <= remaining; i++) {
    const offsetProgress = progress(0, remaining, i,);
    offset.push(mixNumber(min, 1, offsetProgress,),);
  }
}
function defaultOffset(arr,) {
  const offset = [0,];
  fillOffset(offset, arr.length - 1,);
  return offset;
}
function convertOffsetToTimes(offset, duration,) {
  return offset.map((o) => o * duration);
}
function defaultEasing(values, easing,) {
  return values.map(() => easing || easeInOut).splice(0, values.length - 1,);
}
function keyframes({
  duration = 300,
  keyframes: keyframeValues,
  times,
  ease: ease2 = 'easeInOut',
},) {
  const easingFunctions = isEasingArray(ease2,) ? ease2.map(easingDefinitionToFunction,) : easingDefinitionToFunction(ease2,);
  const state = {
    done: false,
    value: keyframeValues[0],
  };
  const absoluteTimes = convertOffsetToTimes(
    // Only use the provided offsets if they're the correct length
    // TODO Maybe we should warn here if there's a length mismatch
    times && times.length === keyframeValues.length ? times : defaultOffset(keyframeValues,),
    duration,
  );
  const mapTimeToKeyframe = interpolate(absoluteTimes, keyframeValues, {
    ease: Array.isArray(easingFunctions,) ? easingFunctions : defaultEasing(keyframeValues, easingFunctions,),
  },);
  return {
    calculatedDuration: duration,
    next: (t) => {
      state.value = mapTimeToKeyframe(t,);
      state.done = t >= duration;
      return state;
    },
  };
}
var frameloopDriver = (update) => {
  const passTimestamp = ({
    timestamp,
  },) => update(timestamp,);
  return {
    start: (keepAlive = true,) => frame.update(passTimestamp, keepAlive,),
    stop: () => cancelFrame(passTimestamp,),
    /**
     * If we're processing this frame we can use the
     * framelocked timestamp to keep things in sync.
     */
    now: () => frameData.isProcessing ? frameData.timestamp : time.now(),
  };
};
var isNotNull = (value) => value !== null;
function getFinalKeyframe(
  keyframes2,
  {
    repeat,
    repeatType = 'loop',
  },
  finalKeyframe,
  speed = 1,
) {
  const resolvedKeyframes = keyframes2.filter(isNotNull,);
  const useFirstKeyframe = speed < 0 || repeat && repeatType !== 'loop' && repeat % 2 === 1;
  const index = useFirstKeyframe ? 0 : resolvedKeyframes.length - 1;
  return !index || finalKeyframe === void 0 ? resolvedKeyframes[index] : finalKeyframe;
}
var transitionTypeMap = {
  decay: inertia,
  inertia,
  tween: keyframes,
  keyframes,
  spring,
};
function replaceTransitionType(transition,) {
  if (typeof transition.type === 'string') {
    transition.type = transitionTypeMap[transition.type];
  }
}
var WithPromise = class {
  constructor() {
    this.updateFinished();
  }
  get finished() {
    return this._finished;
  }
  updateFinished() {
    this._finished = new Promise((resolve) => {
      this.resolve = resolve;
    },);
  }
  notifyFinished() {
    this.resolve();
  }
  /**
   * Allows the animation to be awaited.
   *
   * @deprecated Use `finished` instead.
   */
  then(onResolve, onReject,) {
    return this.finished.then(onResolve, onReject,);
  }
};
var percentToProgress = (percent2) => percent2 / 100;
var JSAnimation = class extends WithPromise {
  constructor(options,) {
    super();
    this.state = 'idle';
    this.startTime = null;
    this.isStopped = false;
    this.currentTime = 0;
    this.holdTime = null;
    this.playbackSpeed = 1;
    this.stop = () => {
      var _a, _b;
      const {
        motionValue: motionValue2,
      } = this.options;
      if (motionValue2 && motionValue2.updatedAt !== time.now()) {
        this.tick(time.now(),);
      }
      this.isStopped = true;
      if (this.state === 'idle') return;
      this.teardown();
      (_b = (_a = this.options).onStop) == null ? void 0 : _b.call(_a,);
    };
    activeAnimations.mainThread++;
    this.options = options;
    this.initAnimation();
    this.play();
    if (options.autoplay === false) this.pause();
  }
  initAnimation() {
    const {
      options,
    } = this;
    replaceTransitionType(options,);
    const {
      type = keyframes,
      repeat = 0,
      repeatDelay = 0,
      repeatType,
      velocity = 0,
    } = options;
    let {
      keyframes: keyframes$1,
    } = options;
    const generatorFactory = type || keyframes;
    if (false) {
      invariant(
        keyframes$1.length <= 2,
        `Only two keyframes currently supported with spring and inertia animations. Trying to animate ${keyframes$1}`,
      );
    }
    if (generatorFactory !== keyframes && typeof keyframes$1[0] !== 'number') {
      this.mixKeyframes = pipe(percentToProgress, mix(keyframes$1[0], keyframes$1[1],),);
      keyframes$1 = [0, 100,];
    }
    const generator = generatorFactory({
      ...options,
      keyframes: keyframes$1,
    },);
    if (repeatType === 'mirror') {
      this.mirroredGenerator = generatorFactory({
        ...options,
        keyframes: [...keyframes$1,].reverse(),
        velocity: -velocity,
      },);
    }
    if (generator.calculatedDuration === null) {
      generator.calculatedDuration = calcGeneratorDuration(generator,);
    }
    const {
      calculatedDuration,
    } = generator;
    this.calculatedDuration = calculatedDuration;
    this.resolvedDuration = calculatedDuration + repeatDelay;
    this.totalDuration = this.resolvedDuration * (repeat + 1) - repeatDelay;
    this.generator = generator;
  }
  updateTime(timestamp,) {
    const animationTime = Math.round(timestamp - this.startTime,) * this.playbackSpeed;
    if (this.holdTime !== null) {
      this.currentTime = this.holdTime;
    } else {
      this.currentTime = animationTime;
    }
  }
  tick(timestamp, sample = false,) {
    const {
      generator,
      totalDuration,
      mixKeyframes,
      mirroredGenerator,
      resolvedDuration,
      calculatedDuration,
    } = this;
    if (this.startTime === null) return generator.next(0,);
    const {
      delay: delay2 = 0,
      keyframes: keyframes2,
      repeat,
      repeatType,
      repeatDelay,
      type,
      onUpdate,
      finalKeyframe,
    } = this.options;
    if (this.speed > 0) {
      this.startTime = Math.min(this.startTime, timestamp,);
    } else if (this.speed < 0) {
      this.startTime = Math.min(timestamp - totalDuration / this.speed, this.startTime,);
    }
    if (sample) {
      this.currentTime = timestamp;
    } else {
      this.updateTime(timestamp,);
    }
    const timeWithoutDelay = this.currentTime - delay2 * (this.playbackSpeed >= 0 ? 1 : -1);
    const isInDelayPhase = this.playbackSpeed >= 0 ? timeWithoutDelay < 0 : timeWithoutDelay > totalDuration;
    this.currentTime = Math.max(timeWithoutDelay, 0,);
    if (this.state === 'finished' && this.holdTime === null) {
      this.currentTime = totalDuration;
    }
    let elapsed = this.currentTime;
    let frameGenerator = generator;
    if (repeat) {
      const progress2 = Math.min(this.currentTime, totalDuration,) / resolvedDuration;
      let currentIteration = Math.floor(progress2,);
      let iterationProgress = progress2 % 1;
      if (!iterationProgress && progress2 >= 1) {
        iterationProgress = 1;
      }
      iterationProgress === 1 && currentIteration--;
      currentIteration = Math.min(currentIteration, repeat + 1,);
      const isOddIteration = Boolean(currentIteration % 2,);
      if (isOddIteration) {
        if (repeatType === 'reverse') {
          iterationProgress = 1 - iterationProgress;
          if (repeatDelay) {
            iterationProgress -= repeatDelay / resolvedDuration;
          }
        } else if (repeatType === 'mirror') {
          frameGenerator = mirroredGenerator;
        }
      }
      elapsed = clamp(0, 1, iterationProgress,) * resolvedDuration;
    }
    const state = isInDelayPhase
      ? {
        done: false,
        value: keyframes2[0],
      }
      : frameGenerator.next(elapsed,);
    if (mixKeyframes) {
      state.value = mixKeyframes(state.value,);
    }
    let {
      done,
    } = state;
    if (!isInDelayPhase && calculatedDuration !== null) {
      done = this.playbackSpeed >= 0 ? this.currentTime >= totalDuration : this.currentTime <= 0;
    }
    const isAnimationFinished = this.holdTime === null && (this.state === 'finished' || this.state === 'running' && done);
    if (isAnimationFinished && type !== inertia) {
      state.value = getFinalKeyframe(keyframes2, this.options, finalKeyframe, this.speed,);
    }
    if (onUpdate) {
      onUpdate(state.value,);
    }
    if (isAnimationFinished) {
      this.finish();
    }
    return state;
  }
  /**
   * Allows the returned animation to be awaited or promise-chained. Currently
   * resolves when the animation finishes at all but in a future update could/should
   * reject if its cancels.
   */
  then(resolve, reject,) {
    return this.finished.then(resolve, reject,);
  }
  get duration() {
    return millisecondsToSeconds(this.calculatedDuration,);
  }
  get time() {
    return millisecondsToSeconds(this.currentTime,);
  }
  set time(newTime,) {
    var _a;
    newTime = secondsToMilliseconds(newTime,);
    this.currentTime = newTime;
    if (this.startTime === null || this.holdTime !== null || this.playbackSpeed === 0) {
      this.holdTime = newTime;
    } else if (this.driver) {
      this.startTime = this.driver.now() - newTime / this.playbackSpeed;
    }
    (_a = this.driver) == null ? void 0 : _a.start(false,);
  }
  get speed() {
    return this.playbackSpeed;
  }
  set speed(newSpeed,) {
    this.updateTime(time.now(),);
    const hasChanged = this.playbackSpeed !== newSpeed;
    this.playbackSpeed = newSpeed;
    if (hasChanged) {
      this.time = millisecondsToSeconds(this.currentTime,);
    }
  }
  play() {
    var _a, _b;
    if (this.isStopped) return;
    const {
      driver = frameloopDriver,
      startTime,
    } = this.options;
    if (!this.driver) {
      this.driver = driver((timestamp) => this.tick(timestamp,));
    }
    (_b = (_a = this.options).onPlay) == null ? void 0 : _b.call(_a,);
    const now2 = this.driver.now();
    if (this.state === 'finished') {
      this.updateFinished();
      this.startTime = now2;
    } else if (this.holdTime !== null) {
      this.startTime = now2 - this.holdTime;
    } else if (!this.startTime) {
      this.startTime = startTime ?? now2;
    }
    if (this.state === 'finished' && this.speed < 0) {
      this.startTime += this.calculatedDuration;
    }
    this.holdTime = null;
    this.state = 'running';
    this.driver.start();
  }
  pause() {
    this.state = 'paused';
    this.updateTime(time.now(),);
    this.holdTime = this.currentTime;
  }
  complete() {
    if (this.state !== 'running') {
      this.play();
    }
    this.state = 'finished';
    this.holdTime = null;
  }
  finish() {
    var _a, _b;
    this.notifyFinished();
    this.teardown();
    this.state = 'finished';
    (_b = (_a = this.options).onComplete) == null ? void 0 : _b.call(_a,);
  }
  cancel() {
    var _a, _b;
    this.holdTime = null;
    this.startTime = 0;
    this.tick(0,);
    this.teardown();
    (_b = (_a = this.options).onCancel) == null ? void 0 : _b.call(_a,);
  }
  teardown() {
    this.state = 'idle';
    this.stopDriver();
    this.startTime = this.holdTime = null;
    activeAnimations.mainThread--;
  }
  stopDriver() {
    if (!this.driver) return;
    this.driver.stop();
    this.driver = void 0;
  }
  sample(sampleTime,) {
    this.startTime = 0;
    return this.tick(sampleTime, true,);
  }
  attachTimeline(timeline,) {
    var _a;
    if (this.options.allowFlatten) {
      this.options.type = 'keyframes';
      this.options.ease = 'linear';
      this.initAnimation();
    }
    (_a = this.driver) == null ? void 0 : _a.stop();
    return timeline.observe(this,);
  }
};
function animateValue(options,) {
  return new JSAnimation(options,);
}
function fillWildcards(keyframes2,) {
  for (let i = 1; i < keyframes2.length; i++) {
    keyframes2[i] ?? (keyframes2[i] = keyframes2[i - 1]);
  }
}
var radToDeg = (rad) => rad * 180 / Math.PI;
var rotate = (v) => {
  const angle = radToDeg(Math.atan2(v[1], v[0],),);
  return rebaseAngle(angle,);
};
var matrix2dParsers = {
  x: 4,
  y: 5,
  translateX: 4,
  translateY: 5,
  scaleX: 0,
  scaleY: 3,
  scale: (v) => (Math.abs(v[0],) + Math.abs(v[3],)) / 2,
  rotate,
  rotateZ: rotate,
  skewX: (v) => radToDeg(Math.atan(v[1],),),
  skewY: (v) => radToDeg(Math.atan(v[2],),),
  skew: (v) => (Math.abs(v[1],) + Math.abs(v[2],)) / 2,
};
var rebaseAngle = (angle) => {
  angle = angle % 360;
  if (angle < 0) angle += 360;
  return angle;
};
var rotateZ = rotate;
var scaleX = (v) => Math.sqrt(v[0] * v[0] + v[1] * v[1],);
var scaleY = (v) => Math.sqrt(v[4] * v[4] + v[5] * v[5],);
var matrix3dParsers = {
  x: 12,
  y: 13,
  z: 14,
  translateX: 12,
  translateY: 13,
  translateZ: 14,
  scaleX,
  scaleY,
  scale: (v) => (scaleX(v,) + scaleY(v,)) / 2,
  rotateX: (v) => rebaseAngle(radToDeg(Math.atan2(v[6], v[5],),),),
  rotateY: (v) => rebaseAngle(radToDeg(Math.atan2(-v[2], v[0],),),),
  rotateZ,
  rotate: rotateZ,
  skewX: (v) => radToDeg(Math.atan(v[4],),),
  skewY: (v) => radToDeg(Math.atan(v[1],),),
  skew: (v) => (Math.abs(v[1],) + Math.abs(v[4],)) / 2,
};
function defaultTransformValue(name,) {
  return name.includes('scale',) ? 1 : 0;
}
function parseValueFromTransform(transform2, name,) {
  if (!transform2 || transform2 === 'none') {
    return defaultTransformValue(name,);
  }
  const matrix3dMatch = transform2.match(/^matrix3d\(([-\d.e\s,]+)\)$/u,);
  let parsers;
  let match;
  if (matrix3dMatch) {
    parsers = matrix3dParsers;
    match = matrix3dMatch;
  } else {
    const matrix2dMatch = transform2.match(/^matrix\(([-\d.e\s,]+)\)$/u,);
    parsers = matrix2dParsers;
    match = matrix2dMatch;
  }
  if (!match) {
    return defaultTransformValue(name,);
  }
  const valueParser = parsers[name];
  const values = match[1].split(',',).map(convertTransformToNumber,);
  return typeof valueParser === 'function' ? valueParser(values,) : values[valueParser];
}
var readTransformValue = (instance, name,) => {
  const {
    transform: transform2 = 'none',
  } = getComputedStyle(instance,);
  return parseValueFromTransform(transform2, name,);
};
function convertTransformToNumber(value,) {
  return parseFloat(value.trim(),);
}
var transformPropOrder = [
  'transformPerspective',
  'x',
  'y',
  'z',
  'translateX',
  'translateY',
  'translateZ',
  'scale',
  'scaleX',
  'scaleY',
  'rotate',
  'rotateX',
  'rotateY',
  'rotateZ',
  'skew',
  'skewX',
  'skewY',
];
var transformProps = /* @__PURE__ */ (() => new Set(transformPropOrder,))();
var isNumOrPxType = (v) => v === number || v === px;
var transformKeys = /* @__PURE__ */ new Set(['x', 'y', 'z',],);
var nonTranslationalTransformKeys = transformPropOrder.filter((key7) => !transformKeys.has(key7,));
function removeNonTranslationalTransform(visualElement,) {
  const removedTransforms = [];
  nonTranslationalTransformKeys.forEach((key7) => {
    const value = visualElement.getValue(key7,);
    if (value !== void 0) {
      removedTransforms.push([key7, value.get(),],);
      value.set(key7.startsWith('scale',) ? 1 : 0,);
    }
  },);
  return removedTransforms;
}
var positionalValues = {
  // Dimensions
  width: ({
    x,
  }, {
    paddingLeft = '0',
    paddingRight = '0',
  },) => x.max - x.min - parseFloat(paddingLeft,) - parseFloat(paddingRight,),
  height: ({
    y,
  }, {
    paddingTop = '0',
    paddingBottom = '0',
  },) => y.max - y.min - parseFloat(paddingTop,) - parseFloat(paddingBottom,),
  top: (_bbox, {
    top,
  },) => parseFloat(top,),
  left: (_bbox, {
    left,
  },) => parseFloat(left,),
  bottom: ({
    y,
  }, {
    top,
  },) => parseFloat(top,) + (y.max - y.min),
  right: ({
    x,
  }, {
    left,
  },) => parseFloat(left,) + (x.max - x.min),
  // Transform
  x: (_bbox, {
    transform: transform2,
  },) => parseValueFromTransform(transform2, 'x',),
  y: (_bbox, {
    transform: transform2,
  },) => parseValueFromTransform(transform2, 'y',),
};
positionalValues.translateX = positionalValues.x;
positionalValues.translateY = positionalValues.y;
var toResolve = /* @__PURE__ */ new Set();
var isScheduled = false;
var anyNeedsMeasurement = false;
var isForced = false;
function measureAllKeyframes() {
  if (anyNeedsMeasurement) {
    const resolversToMeasure = Array.from(toResolve,).filter((resolver) => resolver.needsMeasurement);
    const elementsToMeasure = new Set(resolversToMeasure.map((resolver) => resolver.element),);
    const transformsToRestore = /* @__PURE__ */ new Map();
    elementsToMeasure.forEach((element) => {
      const removedTransforms = removeNonTranslationalTransform(element,);
      if (!removedTransforms.length) return;
      transformsToRestore.set(element, removedTransforms,);
      element.render();
    },);
    resolversToMeasure.forEach((resolver) => resolver.measureInitialState());
    elementsToMeasure.forEach((element) => {
      element.render();
      const restore = transformsToRestore.get(element,);
      if (restore) {
        restore.forEach(([key7, value,],) => {
          var _a;
          (_a = element.getValue(key7,)) == null ? void 0 : _a.set(value,);
        },);
      }
    },);
    resolversToMeasure.forEach((resolver) => resolver.measureEndState());
    resolversToMeasure.forEach((resolver) => {
      if (resolver.suspendedScrollY !== void 0) {
        window.scrollTo(0, resolver.suspendedScrollY,);
      }
    },);
  }
  anyNeedsMeasurement = false;
  isScheduled = false;
  toResolve.forEach((resolver) => resolver.complete(isForced,));
  toResolve.clear();
}
function readAllKeyframes() {
  toResolve.forEach((resolver) => {
    resolver.readKeyframes();
    if (resolver.needsMeasurement) {
      anyNeedsMeasurement = true;
    }
  },);
}
function flushKeyframeResolvers() {
  isForced = true;
  readAllKeyframes();
  measureAllKeyframes();
  isForced = false;
}
var KeyframeResolver = class {
  constructor(unresolvedKeyframes, onComplete, name, motionValue2, element, isAsync = false,) {
    this.state = 'pending';
    this.isAsync = false;
    this.needsMeasurement = false;
    this.unresolvedKeyframes = [...unresolvedKeyframes,];
    this.onComplete = onComplete;
    this.name = name;
    this.motionValue = motionValue2;
    this.element = element;
    this.isAsync = isAsync;
  }
  scheduleResolve() {
    this.state = 'scheduled';
    if (this.isAsync) {
      toResolve.add(this,);
      if (!isScheduled) {
        isScheduled = true;
        frame.read(readAllKeyframes,);
        frame.resolveKeyframes(measureAllKeyframes,);
      }
    } else {
      this.readKeyframes();
      this.complete();
    }
  }
  readKeyframes() {
    const {
      unresolvedKeyframes,
      name,
      element,
      motionValue: motionValue2,
    } = this;
    if (unresolvedKeyframes[0] === null) {
      const currentValue = motionValue2 == null ? void 0 : motionValue2.get();
      const finalKeyframe = unresolvedKeyframes[unresolvedKeyframes.length - 1];
      if (currentValue !== void 0) {
        unresolvedKeyframes[0] = currentValue;
      } else if (element && name) {
        const valueAsRead = element.readValue(name, finalKeyframe,);
        if (valueAsRead !== void 0 && valueAsRead !== null) {
          unresolvedKeyframes[0] = valueAsRead;
        }
      }
      if (unresolvedKeyframes[0] === void 0) {
        unresolvedKeyframes[0] = finalKeyframe;
      }
      if (motionValue2 && currentValue === void 0) {
        motionValue2.set(unresolvedKeyframes[0],);
      }
    }
    fillWildcards(unresolvedKeyframes,);
  }
  setFinalKeyframe() {}
  measureInitialState() {}
  renderEndStyles() {}
  measureEndState() {}
  complete(isForcedComplete = false,) {
    this.state = 'complete';
    this.onComplete(this.unresolvedKeyframes, this.finalKeyframe, isForcedComplete,);
    toResolve.delete(this,);
  }
  cancel() {
    if (this.state === 'scheduled') {
      toResolve.delete(this,);
      this.state = 'pending';
    }
  }
  resume() {
    if (this.state === 'pending') this.scheduleResolve();
  }
};
var isCSSVar = (name) => name.startsWith('--',);
function setStyle(element, name, value,) {
  isCSSVar(name,) ? element.style.setProperty(name, value,) : element.style[name] = value;
}
var supportsScrollTimeline = /* @__PURE__ */ memo(() => window.ScrollTimeline !== void 0);
var supportsFlags = {};
function memoSupports(callback, supportsFlag,) {
  const memoized = /* @__PURE__ */ memo(callback,);
  return () => supportsFlags[supportsFlag] ?? memoized();
}
var supportsLinearEasing = /* @__PURE__ */ memoSupports(() => {
  try {
    document.createElement('div',).animate({
      opacity: 0,
    }, {
      easing: 'linear(0, 1)',
    },);
  } catch (e) {
    return false;
  }
  return true;
}, 'linearEasing',);
var cubicBezierAsString = ([a, b, c, d,],) => `cubic-bezier(${a}, ${b}, ${c}, ${d})`;
var supportedWaapiEasing = {
  linear: 'linear',
  ease: 'ease',
  easeIn: 'ease-in',
  easeOut: 'ease-out',
  easeInOut: 'ease-in-out',
  circIn: /* @__PURE__ */ cubicBezierAsString([0, 0.65, 0.55, 1,],),
  circOut: /* @__PURE__ */ cubicBezierAsString([0.55, 0, 1, 0.45,],),
  backIn: /* @__PURE__ */ cubicBezierAsString([0.31, 0.01, 0.66, -0.59,],),
  backOut: /* @__PURE__ */ cubicBezierAsString([0.33, 1.53, 0.69, 0.99,],),
};
function mapEasingToNativeEasing(easing, duration,) {
  if (!easing) {
    return void 0;
  } else if (typeof easing === 'function') {
    return supportsLinearEasing() ? generateLinearEasing(easing, duration,) : 'ease-out';
  } else if (isBezierDefinition(easing,)) {
    return cubicBezierAsString(easing,);
  } else if (Array.isArray(easing,)) {
    return easing.map((segmentEasing) => mapEasingToNativeEasing(segmentEasing, duration,) || supportedWaapiEasing.easeOut);
  } else {
    return supportedWaapiEasing[easing];
  }
}
function startWaapiAnimation(element, valueName, keyframes2, {
  delay: delay2 = 0,
  duration = 300,
  repeat = 0,
  repeatType = 'loop',
  ease: ease2 = 'easeOut',
  times,
} = {}, pseudoElement = void 0,) {
  const keyframeOptions = {
    [valueName]: keyframes2,
  };
  if (times) keyframeOptions.offset = times;
  const easing = mapEasingToNativeEasing(ease2, duration,);
  if (Array.isArray(easing,)) keyframeOptions.easing = easing;
  if (statsBuffer.value) {
    activeAnimations.waapi++;
  }
  const options = {
    delay: delay2,
    duration,
    easing: !Array.isArray(easing,) ? easing : 'linear',
    fill: 'both',
    iterations: repeat + 1,
    direction: repeatType === 'reverse' ? 'alternate' : 'normal',
  };
  if (pseudoElement) options.pseudoElement = pseudoElement;
  const animation = element.animate(keyframeOptions, options,);
  if (statsBuffer.value) {
    animation.finished.finally(() => {
      activeAnimations.waapi--;
    },);
  }
  return animation;
}
function isGenerator(type,) {
  return typeof type === 'function' && 'applyToOptions' in type;
}
function applyGeneratorOptions({
  type,
  ...options
},) {
  if (isGenerator(type,) && supportsLinearEasing()) {
    return type.applyToOptions(options,);
  } else {
    options.duration ?? (options.duration = 300);
    options.ease ?? (options.ease = 'easeOut');
  }
  return options;
}
var NativeAnimation = class extends WithPromise {
  constructor(options,) {
    super();
    this.finishedTime = null;
    this.isStopped = false;
    if (!options) return;
    const {
      element,
      name,
      keyframes: keyframes2,
      pseudoElement,
      allowFlatten = false,
      finalKeyframe,
      onComplete,
    } = options;
    this.isPseudoElement = Boolean(pseudoElement,);
    this.allowFlatten = allowFlatten;
    this.options = options;
    invariant(
      typeof options.type !== 'string',
      `animateMini doesn't support "type" as a string. Did you mean to import { spring } from "motion"?`,
    );
    const transition = applyGeneratorOptions(options,);
    this.animation = startWaapiAnimation(element, name, keyframes2, transition, pseudoElement,);
    if (transition.autoplay === false) {
      this.animation.pause();
    }
    this.animation.onfinish = () => {
      this.finishedTime = this.time;
      if (!pseudoElement) {
        const keyframe = getFinalKeyframe(keyframes2, this.options, finalKeyframe, this.speed,);
        if (this.updateMotionValue) {
          this.updateMotionValue(keyframe,);
        } else {
          setStyle(element, name, keyframe,);
        }
        this.animation.cancel();
      }
      onComplete == null ? void 0 : onComplete();
      this.notifyFinished();
    };
  }
  play() {
    if (this.isStopped) return;
    this.animation.play();
    if (this.state === 'finished') {
      this.updateFinished();
    }
  }
  pause() {
    this.animation.pause();
  }
  complete() {
    var _a, _b;
    (_b = (_a = this.animation).finish) == null ? void 0 : _b.call(_a,);
  }
  cancel() {
    try {
      this.animation.cancel();
    } catch (e) {}
  }
  stop() {
    if (this.isStopped) return;
    this.isStopped = true;
    const {
      state,
    } = this;
    if (state === 'idle' || state === 'finished') {
      return;
    }
    if (this.updateMotionValue) {
      this.updateMotionValue();
    } else {
      this.commitStyles();
    }
    if (!this.isPseudoElement) this.cancel();
  }
  /**
   * WAAPI doesn't natively have any interruption capabilities.
   *
   * In this method, we commit styles back to the DOM before cancelling
   * the animation.
   *
   * This is designed to be overridden by NativeAnimationExtended, which
   * will create a renderless JS animation and sample it twice to calculate
   * its current value, "previous" value, and therefore allow
   * Motion to also correctly calculate velocity for any subsequent animation
   * while deferring the commit until the next animation frame.
   */
  commitStyles() {
    var _a, _b;
    if (!this.isPseudoElement) {
      (_b = (_a = this.animation).commitStyles) == null ? void 0 : _b.call(_a,);
    }
  }
  get duration() {
    var _a, _b;
    const duration =
      ((_b = (_a = this.animation.effect) == null ? void 0 : _a.getComputedTiming) == null ? void 0 : _b.call(_a,).duration) || 0;
    return millisecondsToSeconds(Number(duration,),);
  }
  get time() {
    return millisecondsToSeconds(Number(this.animation.currentTime,) || 0,);
  }
  set time(newTime,) {
    this.finishedTime = null;
    this.animation.currentTime = secondsToMilliseconds(newTime,);
  }
  /**
   * The playback speed of the animation.
   * 1 = normal speed, 2 = double speed, 0.5 = half speed.
   */
  get speed() {
    return this.animation.playbackRate;
  }
  set speed(newSpeed,) {
    if (newSpeed < 0) this.finishedTime = null;
    this.animation.playbackRate = newSpeed;
  }
  get state() {
    return this.finishedTime !== null ? 'finished' : this.animation.playState;
  }
  get startTime() {
    return Number(this.animation.startTime,);
  }
  set startTime(newStartTime,) {
    this.animation.startTime = newStartTime;
  }
  /**
   * Attaches a timeline to the animation, for instance the `ScrollTimeline`.
   */
  attachTimeline({
    timeline,
    observe,
  },) {
    var _a;
    if (this.allowFlatten) {
      (_a = this.animation.effect) == null ? void 0 : _a.updateTiming({
        easing: 'linear',
      },);
    }
    this.animation.onfinish = null;
    if (timeline && supportsScrollTimeline()) {
      this.animation.timeline = timeline;
      return noop;
    } else {
      return observe(this,);
    }
  }
};
var unsupportedEasingFunctions = {
  anticipate,
  backInOut,
  circInOut,
};
function isUnsupportedEase(key7,) {
  return key7 in unsupportedEasingFunctions;
}
function replaceStringEasing(transition,) {
  if (typeof transition.ease === 'string' && isUnsupportedEase(transition.ease,)) {
    transition.ease = unsupportedEasingFunctions[transition.ease];
  }
}
var sampleDelta = 10;
var NativeAnimationExtended = class extends NativeAnimation {
  constructor(options,) {
    replaceStringEasing(options,);
    replaceTransitionType(options,);
    super(options,);
    if (options.startTime) {
      this.startTime = options.startTime;
    }
    this.options = options;
  }
  /**
   * WAAPI doesn't natively have any interruption capabilities.
   *
   * Rather than read commited styles back out of the DOM, we can
   * create a renderless JS animation and sample it twice to calculate
   * its current value, "previous" value, and therefore allow
   * Motion to calculate velocity for any subsequent animation.
   */
  updateMotionValue(value,) {
    const {
      motionValue: motionValue2,
      onUpdate,
      onComplete,
      element,
      ...options
    } = this.options;
    if (!motionValue2) return;
    if (value !== void 0) {
      motionValue2.set(value,);
      return;
    }
    const sampleAnimation = new JSAnimation({
      ...options,
      autoplay: false,
    },);
    const sampleTime = secondsToMilliseconds(this.finishedTime ?? this.time,);
    motionValue2.setWithVelocity(
      sampleAnimation.sample(sampleTime - sampleDelta,).value,
      sampleAnimation.sample(sampleTime,).value,
      sampleDelta,
    );
    sampleAnimation.stop();
  }
};
function isHTMLElement(element,) {
  return isObject(element,) && 'offsetHeight' in element;
}
var acceleratedValues = /* @__PURE__ */ new Set(['opacity', 'clipPath', 'filter', 'transform',// TODO: Could be re-enabled now we have support for linear() easing
  // "background-color"
],);
var supportsWaapi = /* @__PURE__ */ memo(() => Object.hasOwnProperty.call(Element.prototype, 'animate',));
function supportsBrowserAnimation(options,) {
  var _a;
  const {
    motionValue: motionValue2,
    name,
    repeatDelay,
    repeatType,
    damping,
    type,
  } = options;
  if (!isHTMLElement((_a = motionValue2 == null ? void 0 : motionValue2.owner) == null ? void 0 : _a.current,)) {
    return false;
  }
  const {
    onUpdate,
    transformTemplate: transformTemplate2,
  } = motionValue2.owner.getProps();
  return supportsWaapi() && name && acceleratedValues.has(name,) && (name !== 'transform' || !transformTemplate2) &&
    /**
     * If we're outputting values to onUpdate then we can't use WAAPI as there's
     * no way to read the value from WAAPI every frame.
     */
    !onUpdate && !repeatDelay && repeatType !== 'mirror' && damping !== 0 && type !== 'inertia';
}
var isAnimatable = (value, name,) => {
  if (name === 'zIndex') return false;
  if (typeof value === 'number' || Array.isArray(value,)) return true;
  if (
    typeof value === 'string' && (
      // It's animatable if we have a string
      complex.test(value,) || value === '0'
    ) &&
    // And it contains numbers and/or colors
    !value.startsWith('url(',)
  ) {
    return true;
  }
  return false;
};
function hasKeyframesChanged(keyframes2,) {
  const current2 = keyframes2[0];
  if (keyframes2.length === 1) return true;
  for (let i = 0; i < keyframes2.length; i++) {
    if (keyframes2[i] !== current2) return true;
  }
}
function canAnimate(keyframes2, name, type, velocity,) {
  const originKeyframe = keyframes2[0];
  if (originKeyframe === null) return false;
  if (name === 'display' || name === 'visibility') return true;
  const targetKeyframe = keyframes2[keyframes2.length - 1];
  const isOriginAnimatable = isAnimatable(originKeyframe, name,);
  const isTargetAnimatable = isAnimatable(targetKeyframe, name,);
  warning(
    isOriginAnimatable === isTargetAnimatable,
    `You are trying to animate ${name} from "${originKeyframe}" to "${targetKeyframe}". ${originKeyframe} is not an animatable value - to enable this animation set ${originKeyframe} to a value animatable to ${targetKeyframe} via the \`style\` property.`,
  );
  if (!isOriginAnimatable || !isTargetAnimatable) {
    return false;
  }
  return hasKeyframesChanged(keyframes2,) || (type === 'spring' || isGenerator(type,)) && velocity;
}
var MAX_RESOLVE_DELAY = 40;
var AsyncMotionValueAnimation = class extends WithPromise {
  constructor({
    autoplay = true,
    delay: delay2 = 0,
    type = 'keyframes',
    repeat = 0,
    repeatDelay = 0,
    repeatType = 'loop',
    keyframes: keyframes2,
    name,
    motionValue: motionValue2,
    element,
    ...options
  },) {
    var _a;
    super();
    this.stop = () => {
      var _a2, _b;
      if (this._animation) {
        this._animation.stop();
        (_a2 = this.stopTimeline) == null ? void 0 : _a2.call(this,);
      }
      (_b = this.keyframeResolver) == null ? void 0 : _b.cancel();
    };
    this.createdAt = time.now();
    const optionsWithDefaults = {
      autoplay,
      delay: delay2,
      type,
      repeat,
      repeatDelay,
      repeatType,
      name,
      motionValue: motionValue2,
      element,
      ...options,
    };
    const KeyframeResolver$1 = (element == null ? void 0 : element.KeyframeResolver) || KeyframeResolver;
    this.keyframeResolver = new KeyframeResolver$1(
      keyframes2,
      (resolvedKeyframes, finalKeyframe, forced,) =>
        this.onKeyframesResolved(resolvedKeyframes, finalKeyframe, optionsWithDefaults, !forced,),
      name,
      motionValue2,
      element,
    );
    (_a = this.keyframeResolver) == null ? void 0 : _a.scheduleResolve();
  }
  onKeyframesResolved(keyframes2, finalKeyframe, options, sync2,) {
    this.keyframeResolver = void 0;
    const {
      name,
      type,
      velocity,
      delay: delay2,
      isHandoff,
      onUpdate,
    } = options;
    this.resolvedAt = time.now();
    if (!canAnimate(keyframes2, name, type, velocity,)) {
      if (MotionGlobalConfig.instantAnimations || !delay2) {
        onUpdate == null ? void 0 : onUpdate(getFinalKeyframe(keyframes2, options, finalKeyframe,),);
      }
      keyframes2[0] = keyframes2[keyframes2.length - 1];
      options.duration = 0;
      options.repeat = 0;
    }
    const startTime = sync2
      ? !this.resolvedAt ? this.createdAt : this.resolvedAt - this.createdAt > MAX_RESOLVE_DELAY ? this.resolvedAt : this.createdAt
      : void 0;
    const resolvedOptions = {
      startTime,
      finalKeyframe,
      ...options,
      keyframes: keyframes2,
    };
    const animation = !isHandoff && supportsBrowserAnimation(resolvedOptions,)
      ? new NativeAnimationExtended({
        ...resolvedOptions,
        element: resolvedOptions.motionValue.owner.current,
      },)
      : new JSAnimation(resolvedOptions,);
    animation.finished.then(() => this.notifyFinished()).catch(noop,);
    if (this.pendingTimeline) {
      this.stopTimeline = animation.attachTimeline(this.pendingTimeline,);
      this.pendingTimeline = void 0;
    }
    this._animation = animation;
  }
  get finished() {
    if (!this._animation) {
      return this._finished;
    } else {
      return this.animation.finished;
    }
  }
  then(onResolve, _onReject,) {
    return this.finished.finally(onResolve,).then(() => {},);
  }
  get animation() {
    var _a;
    if (!this._animation) {
      (_a = this.keyframeResolver) == null ? void 0 : _a.resume();
      flushKeyframeResolvers();
    }
    return this._animation;
  }
  get duration() {
    return this.animation.duration;
  }
  get time() {
    return this.animation.time;
  }
  set time(newTime,) {
    this.animation.time = newTime;
  }
  get speed() {
    return this.animation.speed;
  }
  get state() {
    return this.animation.state;
  }
  set speed(newSpeed,) {
    this.animation.speed = newSpeed;
  }
  get startTime() {
    return this.animation.startTime;
  }
  attachTimeline(timeline,) {
    if (this._animation) {
      this.stopTimeline = this.animation.attachTimeline(timeline,);
    } else {
      this.pendingTimeline = timeline;
    }
    return () => this.stop();
  }
  play() {
    this.animation.play();
  }
  pause() {
    this.animation.pause();
  }
  complete() {
    this.animation.complete();
  }
  cancel() {
    var _a;
    if (this._animation) {
      this.animation.cancel();
    }
    (_a = this.keyframeResolver) == null ? void 0 : _a.cancel();
  }
};
var GroupAnimation = class {
  constructor(animations2,) {
    this.stop = () => this.runAll('stop',);
    this.animations = animations2.filter(Boolean,);
  }
  get finished() {
    return Promise.all(this.animations.map((animation) => animation.finished),);
  }
  /**
   * TODO: Filter out cancelled or stopped animations before returning
   */
  getAll(propName,) {
    return this.animations[0][propName];
  }
  setAll(propName, newValue,) {
    for (let i = 0; i < this.animations.length; i++) {
      this.animations[i][propName] = newValue;
    }
  }
  attachTimeline(timeline,) {
    const subscriptions = this.animations.map((animation) => animation.attachTimeline(timeline,));
    return () => {
      subscriptions.forEach((cancel, i,) => {
        cancel && cancel();
        this.animations[i].stop();
      },);
    };
  }
  get time() {
    return this.getAll('time',);
  }
  set time(time2,) {
    this.setAll('time', time2,);
  }
  get speed() {
    return this.getAll('speed',);
  }
  set speed(speed,) {
    this.setAll('speed', speed,);
  }
  get state() {
    return this.getAll('state',);
  }
  get startTime() {
    return this.getAll('startTime',);
  }
  get duration() {
    let max = 0;
    for (let i = 0; i < this.animations.length; i++) {
      max = Math.max(max, this.animations[i].duration,);
    }
    return max;
  }
  runAll(methodName,) {
    this.animations.forEach((controls) => controls[methodName]());
  }
  play() {
    this.runAll('play',);
  }
  pause() {
    this.runAll('pause',);
  }
  cancel() {
    this.runAll('cancel',);
  }
  complete() {
    this.runAll('complete',);
  }
};
var GroupAnimationWithThen = class extends GroupAnimation {
  then(onResolve, _onReject,) {
    return this.finished.finally(onResolve,).then(() => {},);
  }
};
var NativeAnimationWrapper = class extends NativeAnimation {
  constructor(animation,) {
    super();
    this.animation = animation;
    animation.onfinish = () => {
      this.finishedTime = this.time;
      this.notifyFinished();
    };
  }
};
var animationMaps = /* @__PURE__ */ new WeakMap();
var animationMapKey = (name, pseudoElement = '',) => `${name}:${pseudoElement}`;
function getAnimationMap(element,) {
  const map2 = animationMaps.get(element,) || /* @__PURE__ */ new Map();
  animationMaps.set(element, map2,);
  return map2;
}
var splitCSSVariableRegex =
  // eslint-disable-next-line redos-detector/no-unsafe-regex -- false positive, as it can match a lot of words
  /^var\(--(?:([\w-]+)|([\w-]+), ?([a-zA-Z\d ()%#.,-]+))\)/u;
function parseCSSVariable(current2,) {
  const match = splitCSSVariableRegex.exec(current2,);
  if (!match) return [,];
  const [, token1, token2, fallback,] = match;
  return [`--${token1 ?? token2}`, fallback,];
}
var maxDepth = 4;
function getVariableValue(current2, element, depth = 1,) {
  invariant(
    depth <= maxDepth,
    `Max CSS variable fallback depth detected in property "${current2}". This may indicate a circular fallback dependency.`,
  );
  const [token, fallback,] = parseCSSVariable(current2,);
  if (!token) return;
  const resolved = window.getComputedStyle(element,).getPropertyValue(token,);
  if (resolved) {
    const trimmed = resolved.trim();
    return isNumericalString(trimmed,) ? parseFloat(trimmed,) : trimmed;
  }
  return isCSSVariableToken(fallback,) ? getVariableValue(fallback, element, depth + 1,) : fallback;
}
function getValueTransition(transition, key7,) {
  return (transition == null ? void 0 : transition[key7]) ?? (transition == null ? void 0 : transition['default']) ?? transition;
}
var positionalKeys = /* @__PURE__ */ new Set(['width', 'height', 'top', 'left', 'right', 'bottom', ...transformPropOrder,],);
var testValueType = (v) => (type) => type.test(v,);
var auto = {
  test: (v) => v === 'auto',
  parse: (v) => v,
};
var dimensionValueTypes = [number, px, percent, degrees, vw, vh, auto,];
var findDimensionValueType = (v) => dimensionValueTypes.find(testValueType(v,),);
var transformValueTypes = {
  rotate: degrees,
  rotateX: degrees,
  rotateY: degrees,
  rotateZ: degrees,
  scale,
  scaleX: scale,
  scaleY: scale,
  scaleZ: scale,
  skew: degrees,
  skewX: degrees,
  skewY: degrees,
  distance: px,
  translateX: px,
  translateY: px,
  translateZ: px,
  x: px,
  y: px,
  z: px,
  perspective: px,
  transformPerspective: px,
  opacity: alpha,
  originX: progressPercentage,
  originY: progressPercentage,
  originZ: px,
};
var int = {
  ...number,
  transform: Math.round,
};
var numberValueTypes = {
  // Border props
  borderWidth: px,
  borderTopWidth: px,
  borderRightWidth: px,
  borderBottomWidth: px,
  borderLeftWidth: px,
  borderRadius: px,
  radius: px,
  borderTopLeftRadius: px,
  borderTopRightRadius: px,
  borderBottomRightRadius: px,
  borderBottomLeftRadius: px,
  // Positioning props
  width: px,
  maxWidth: px,
  height: px,
  maxHeight: px,
  top: px,
  right: px,
  bottom: px,
  left: px,
  // Spacing props
  padding: px,
  paddingTop: px,
  paddingRight: px,
  paddingBottom: px,
  paddingLeft: px,
  margin: px,
  marginTop: px,
  marginRight: px,
  marginBottom: px,
  marginLeft: px,
  // Misc
  backgroundPositionX: px,
  backgroundPositionY: px,
  ...transformValueTypes,
  zIndex: int,
  // SVG
  fillOpacity: alpha,
  strokeOpacity: alpha,
  numOctaves: int,
};
var maxDefaults = /* @__PURE__ */ new Set(['brightness', 'contrast', 'saturate', 'opacity',],);
function applyDefaultFilter(v,) {
  const [name, value,] = v.slice(0, -1,).split('(',);
  if (name === 'drop-shadow') return v;
  const [number2,] = value.match(floatRegex,) || [];
  if (!number2) return v;
  const unit = value.replace(number2, '',);
  let defaultValue = maxDefaults.has(name,) ? 1 : 0;
  if (number2 !== value) defaultValue *= 100;
  return name + '(' + defaultValue + unit + ')';
}
var functionRegex = /\b([a-z-]*)\(.*?\)/gu;
var filter = {
  ...complex,
  getAnimatableNone: (v) => {
    const functions = v.match(functionRegex,);
    return functions ? functions.map(applyDefaultFilter,).join(' ',) : v;
  },
};
var defaultValueTypes = {
  ...numberValueTypes,
  // Color props
  color,
  backgroundColor: color,
  outlineColor: color,
  fill: color,
  stroke: color,
  // Border props
  borderColor: color,
  borderTopColor: color,
  borderRightColor: color,
  borderBottomColor: color,
  borderLeftColor: color,
  filter,
  WebkitFilter: filter,
};
var getDefaultValueType = (key7) => defaultValueTypes[key7];
function getAnimatableNone2(key7, value,) {
  let defaultValueType = getDefaultValueType(key7,);
  if (defaultValueType !== filter) defaultValueType = complex;
  return defaultValueType.getAnimatableNone ? defaultValueType.getAnimatableNone(value,) : void 0;
}
function isNone(value,) {
  if (typeof value === 'number') {
    return value === 0;
  } else if (value !== null) {
    return value === 'none' || value === '0' || isZeroValueString(value,);
  } else {
    return true;
  }
}
var invalidTemplates = /* @__PURE__ */ new Set(['auto', 'none', '0',],);
function makeNoneKeyframesAnimatable(unresolvedKeyframes, noneKeyframeIndexes, name,) {
  let i = 0;
  let animatableTemplate = void 0;
  while (i < unresolvedKeyframes.length && !animatableTemplate) {
    const keyframe = unresolvedKeyframes[i];
    if (typeof keyframe === 'string' && !invalidTemplates.has(keyframe,) && analyseComplexValue(keyframe,).values.length) {
      animatableTemplate = unresolvedKeyframes[i];
    }
    i++;
  }
  if (animatableTemplate && name) {
    for (const noneIndex of noneKeyframeIndexes) {
      unresolvedKeyframes[noneIndex] = getAnimatableNone2(name, animatableTemplate,);
    }
  }
}
var DOMKeyframesResolver = class extends KeyframeResolver {
  constructor(unresolvedKeyframes, onComplete, name, motionValue2, element,) {
    super(unresolvedKeyframes, onComplete, name, motionValue2, element, true,);
  }
  readKeyframes() {
    const {
      unresolvedKeyframes,
      element,
      name,
    } = this;
    if (!element || !element.current) return;
    super.readKeyframes();
    for (let i = 0; i < unresolvedKeyframes.length; i++) {
      let keyframe = unresolvedKeyframes[i];
      if (typeof keyframe === 'string') {
        keyframe = keyframe.trim();
        if (isCSSVariableToken(keyframe,)) {
          const resolved = getVariableValue(keyframe, element.current,);
          if (resolved !== void 0) {
            unresolvedKeyframes[i] = resolved;
          }
          if (i === unresolvedKeyframes.length - 1) {
            this.finalKeyframe = keyframe;
          }
        }
      }
    }
    this.resolveNoneKeyframes();
    if (!positionalKeys.has(name,) || unresolvedKeyframes.length !== 2) {
      return;
    }
    const [origin, target,] = unresolvedKeyframes;
    const originType = findDimensionValueType(origin,);
    const targetType = findDimensionValueType(target,);
    if (originType === targetType) return;
    if (isNumOrPxType(originType,) && isNumOrPxType(targetType,)) {
      for (let i = 0; i < unresolvedKeyframes.length; i++) {
        const value = unresolvedKeyframes[i];
        if (typeof value === 'string') {
          unresolvedKeyframes[i] = parseFloat(value,);
        }
      }
    } else if (positionalValues[name]) {
      this.needsMeasurement = true;
    }
  }
  resolveNoneKeyframes() {
    const {
      unresolvedKeyframes,
      name,
    } = this;
    const noneKeyframeIndexes = [];
    for (let i = 0; i < unresolvedKeyframes.length; i++) {
      if (unresolvedKeyframes[i] === null || isNone(unresolvedKeyframes[i],)) {
        noneKeyframeIndexes.push(i,);
      }
    }
    if (noneKeyframeIndexes.length) {
      makeNoneKeyframesAnimatable(unresolvedKeyframes, noneKeyframeIndexes, name,);
    }
  }
  measureInitialState() {
    const {
      element,
      unresolvedKeyframes,
      name,
    } = this;
    if (!element || !element.current) return;
    if (name === 'height') {
      this.suspendedScrollY = window.pageYOffset;
    }
    this.measuredOrigin = positionalValues[name](element.measureViewportBox(), window.getComputedStyle(element.current,),);
    unresolvedKeyframes[0] = this.measuredOrigin;
    const measureKeyframe = unresolvedKeyframes[unresolvedKeyframes.length - 1];
    if (measureKeyframe !== void 0) {
      element.getValue(name, measureKeyframe,).jump(measureKeyframe, false,);
    }
  }
  measureEndState() {
    var _a;
    const {
      element,
      name,
      unresolvedKeyframes,
    } = this;
    if (!element || !element.current) return;
    const value = element.getValue(name,);
    value && value.jump(this.measuredOrigin, false,);
    const finalKeyframeIndex = unresolvedKeyframes.length - 1;
    const finalKeyframe = unresolvedKeyframes[finalKeyframeIndex];
    unresolvedKeyframes[finalKeyframeIndex] = positionalValues[name](
      element.measureViewportBox(),
      window.getComputedStyle(element.current,),
    );
    if (finalKeyframe !== null && this.finalKeyframe === void 0) {
      this.finalKeyframe = finalKeyframe;
    }
    if ((_a = this.removedTransforms) == null ? void 0 : _a.length) {
      this.removedTransforms.forEach(([unsetTransformName, unsetTransformValue,],) => {
        element.getValue(unsetTransformName,).set(unsetTransformValue,);
      },);
    }
    this.resolveNoneKeyframes();
  }
};
var pxValues = /* @__PURE__ */ new Set([
  // Border props
  'borderWidth',
  'borderTopWidth',
  'borderRightWidth',
  'borderBottomWidth',
  'borderLeftWidth',
  'borderRadius',
  'radius',
  'borderTopLeftRadius',
  'borderTopRightRadius',
  'borderBottomRightRadius',
  'borderBottomLeftRadius',
  // Positioning props
  'width',
  'maxWidth',
  'height',
  'maxHeight',
  'top',
  'right',
  'bottom',
  'left',
  // Spacing props
  'padding',
  'paddingTop',
  'paddingRight',
  'paddingBottom',
  'paddingLeft',
  'margin',
  'marginTop',
  'marginRight',
  'marginBottom',
  'marginLeft',
  // Misc
  'backgroundPositionX',
  'backgroundPositionY',
],);
function applyPxDefaults(keyframes2, name,) {
  for (let i = 0; i < keyframes2.length; i++) {
    if (typeof keyframes2[i] === 'number' && pxValues.has(name,)) {
      keyframes2[i] = keyframes2[i] + 'px';
    }
  }
}
function isWaapiSupportedEasing(easing,) {
  return Boolean(
    typeof easing === 'function' && supportsLinearEasing() || !easing ||
      typeof easing === 'string' && (easing in supportedWaapiEasing || supportsLinearEasing()) || isBezierDefinition(easing,) ||
      Array.isArray(easing,) && easing.every(isWaapiSupportedEasing,),
  );
}
var supportsPartialKeyframes = /* @__PURE__ */ memo(() => {
  try {
    document.createElement('div',).animate({
      opacity: [1,],
    },);
  } catch (e) {
    return false;
  }
  return true;
},);
var acceleratedValues2 = /* @__PURE__ */ new Set(['opacity', 'clipPath', 'filter', 'transform',// TODO: Can be accelerated but currently disabled until https://issues.chromium.org/issues/41491098 is resolved
  // or until we implement support for linear() easing.
  // "background-color"
],);
function resolveElements(elementOrSelector, scope, selectorCache,) {
  if (elementOrSelector instanceof EventTarget) {
    return [elementOrSelector,];
  } else if (typeof elementOrSelector === 'string') {
    let root = document;
    if (scope) {
      root = scope.current;
    }
    const elements = (selectorCache == null ? void 0 : selectorCache[elementOrSelector]) ?? root.querySelectorAll(elementOrSelector,);
    return elements ? Array.from(elements,) : [];
  }
  return Array.from(elementOrSelector,);
}
var getValueAsType = (value, type,) => {
  return type && typeof value === 'number' ? type.transform(value,) : value;
};
function camelToDash(str,) {
  return str.replace(/([A-Z])/g, (match) => `-${match.toLowerCase()}`,);
}
function createSelectorEffect(subjectEffect,) {
  return (subject, values,) => {
    const elements = resolveElements(subject,);
    const subscriptions = [];
    for (const element of elements) {
      const remove2 = subjectEffect(element, values,);
      subscriptions.push(remove2,);
    }
    return () => {
      for (const remove2 of subscriptions) remove2();
    };
  };
}
var MotionValueState = class {
  constructor() {
    this.latest = {};
    this.values = /* @__PURE__ */ new Map();
  }
  set(name, value, render, computed, useDefaultValueType = true,) {
    const existingValue = this.values.get(name,);
    if (existingValue) {
      existingValue.onRemove();
    }
    const onChange = () => {
      const v = value.get();
      if (useDefaultValueType) {
        this.latest[name] = getValueAsType(v, numberValueTypes[name],);
      } else {
        this.latest[name] = v;
      }
      render && frame.render(render,);
    };
    onChange();
    const cancelOnChange = value.on('change', onChange,);
    computed && value.addDependent(computed,);
    const remove2 = () => {
      cancelOnChange();
      render && cancelFrame(render,);
      this.values.delete(name,);
      computed && value.removeDependent(computed,);
    };
    this.values.set(name, {
      value,
      onRemove: remove2,
    },);
    return remove2;
  }
  get(name,) {
    var _a;
    return (_a = this.values.get(name,)) == null ? void 0 : _a.value;
  }
  destroy() {
    for (const value of this.values.values()) {
      value.onRemove();
    }
  }
};
function createEffect(addValue,) {
  const stateCache = /* @__PURE__ */ new WeakMap();
  const subscriptions = [];
  return (subject, values,) => {
    const state = stateCache.get(subject,) ?? new MotionValueState();
    stateCache.set(subject, state,);
    for (const key7 in values) {
      const value = values[key7];
      const remove2 = addValue(subject, state, key7, value,);
      subscriptions.push(remove2,);
    }
    return () => {
      for (const cancel of subscriptions) cancel();
    };
  };
}
function canSetAsProperty(element, name,) {
  if (!(name in element)) return false;
  const descriptor = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(element,), name,) ||
    Object.getOwnPropertyDescriptor(element, name,);
  return descriptor && typeof descriptor.set === 'function';
}
var addAttrValue = (element, state, key7, value,) => {
  const isProp = canSetAsProperty(element, key7,);
  const name = isProp ? key7 : key7.startsWith('data',) || key7.startsWith('aria',) ? camelToDash(key7,) : key7;
  const render = isProp
    ? () => {
      element[name] = state.latest[key7];
    }
    : () => {
      const v = state.latest[key7];
      if (v === null || v === void 0) {
        element.removeAttribute(name,);
      } else {
        element.setAttribute(name, String(v,),);
      }
    };
  return state.set(key7, value, render,);
};
var attrEffect = /* @__PURE__ */ createSelectorEffect(/* @__PURE__ */ createEffect(addAttrValue,),);
var propEffect = /* @__PURE__ */ createEffect((subject, state, key7, value,) => {
  return state.set(
    key7,
    value,
    () => {
      subject[key7] = state.latest[key7];
    },
    void 0,
    false,
  );
},);
var MAX_VELOCITY_DELTA = 30;
var isFloat = (value) => {
  return !isNaN(parseFloat(value,),);
};
var collectMotionValues = {
  current: void 0,
};
var MotionValue = class {
  /**
   * @param init - The initiating value
   * @param config - Optional configuration options
   *
   * -  `transformer`: A function to transform incoming values with.
   */
  constructor(init, options = {},) {
    this.canTrackVelocity = null;
    this.events = {};
    this.updateAndNotify = (v, render = true,) => {
      var _a, _b;
      const currentTime = time.now();
      if (this.updatedAt !== currentTime) {
        this.setPrevFrameValue();
      }
      this.prev = this.current;
      this.setCurrent(v,);
      if (this.current !== this.prev) {
        (_a = this.events.change) == null ? void 0 : _a.notify(this.current,);
        if (this.dependents) {
          for (const dependent of this.dependents) {
            dependent.dirty();
          }
        }
      }
      if (render) {
        (_b = this.events.renderRequest) == null ? void 0 : _b.notify(this.current,);
      }
    };
    this.hasAnimated = false;
    this.setCurrent(init,);
    this.owner = options.owner;
  }
  setCurrent(current2,) {
    this.current = current2;
    this.updatedAt = time.now();
    if (this.canTrackVelocity === null && current2 !== void 0) {
      this.canTrackVelocity = isFloat(this.current,);
    }
  }
  setPrevFrameValue(prevFrameValue = this.current,) {
    this.prevFrameValue = prevFrameValue;
    this.prevUpdatedAt = this.updatedAt;
  }
  /**
   * Adds a function that will be notified when the `MotionValue` is updated.
   *
   * It returns a function that, when called, will cancel the subscription.
   *
   * When calling `onChange` inside a React component, it should be wrapped with the
   * `useEffect` hook. As it returns an unsubscribe function, this should be returned
   * from the `useEffect` function to ensure you don't add duplicate subscribers..
   *
   * ```jsx
   * export const MyComponent = () => {
   *   const x = useMotionValue(0)
   *   const y = useMotionValue(0)
   *   const opacity = useMotionValue(1)
   *
   *   useEffect(() => {
   *     function updateOpacity() {
   *       const maxXY = Math.max(x.get(), y.get())
   *       const newOpacity = transform(maxXY, [0, 100], [1, 0])
   *       opacity.set(newOpacity)
   *     }
   *
   *     const unsubscribeX = x.on("change", updateOpacity)
   *     const unsubscribeY = y.on("change", updateOpacity)
   *
   *     return () => {
   *       unsubscribeX()
   *       unsubscribeY()
   *     }
   *   }, [])
   *
   *   return <motion.div style={{ x }} />
   * }
   * ```
   *
   * @param subscriber - A function that receives the latest value.
   * @returns A function that, when called, will cancel this subscription.
   *
   * @deprecated
   */
  onChange(subscription,) {
    if (false) {
      warnOnce(false, `value.onChange(callback) is deprecated. Switch to value.on("change", callback).`,);
    }
    return this.on('change', subscription,);
  }
  on(eventName, callback,) {
    if (!this.events[eventName]) {
      this.events[eventName] = new SubscriptionManager();
    }
    const unsubscribe = this.events[eventName].add(callback,);
    if (eventName === 'change') {
      return () => {
        unsubscribe();
        frame.read(() => {
          if (!this.events.change.getSize()) {
            this.stop();
          }
        },);
      };
    }
    return unsubscribe;
  }
  clearListeners() {
    for (const eventManagers in this.events) {
      this.events[eventManagers].clear();
    }
  }
  /**
   * Attaches a passive effect to the `MotionValue`.
   */
  attach(passiveEffect, stopPassiveEffect,) {
    this.passiveEffect = passiveEffect;
    this.stopPassiveEffect = stopPassiveEffect;
  }
  /**
   * Sets the state of the `MotionValue`.
   *
   * @remarks
   *
   * ```jsx
   * const x = useMotionValue(0)
   * x.set(10)
   * ```
   *
   * @param latest - Latest value to set.
   * @param render - Whether to notify render subscribers. Defaults to `true`
   *
   * @public
   */
  set(v, render = true,) {
    if (!render || !this.passiveEffect) {
      this.updateAndNotify(v, render,);
    } else {
      this.passiveEffect(v, this.updateAndNotify,);
    }
  }
  setWithVelocity(prev, current2, delta,) {
    this.set(current2,);
    this.prev = void 0;
    this.prevFrameValue = prev;
    this.prevUpdatedAt = this.updatedAt - delta;
  }
  /**
   * Set the state of the `MotionValue`, stopping any active animations,
   * effects, and resets velocity to `0`.
   */
  jump(v, endAnimation = true,) {
    this.updateAndNotify(v,);
    this.prev = v;
    this.prevUpdatedAt = this.prevFrameValue = void 0;
    endAnimation && this.stop();
    if (this.stopPassiveEffect) this.stopPassiveEffect();
  }
  dirty() {
    var _a;
    (_a = this.events.change) == null ? void 0 : _a.notify(this.current,);
  }
  addDependent(dependent,) {
    if (!this.dependents) {
      this.dependents = /* @__PURE__ */ new Set();
    }
    this.dependents.add(dependent,);
  }
  removeDependent(dependent,) {
    if (this.dependents) {
      this.dependents.delete(dependent,);
    }
  }
  /**
   * Returns the latest state of `MotionValue`
   *
   * @returns - The latest state of `MotionValue`
   *
   * @public
   */
  get() {
    if (collectMotionValues.current) {
      collectMotionValues.current.push(this,);
    }
    return this.current;
  }
  /**
   * @public
   */
  getPrevious() {
    return this.prev;
  }
  /**
   * Returns the latest velocity of `MotionValue`
   *
   * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.
   *
   * @public
   */
  getVelocity() {
    const currentTime = time.now();
    if (!this.canTrackVelocity || this.prevFrameValue === void 0 || currentTime - this.updatedAt > MAX_VELOCITY_DELTA) {
      return 0;
    }
    const delta = Math.min(this.updatedAt - this.prevUpdatedAt, MAX_VELOCITY_DELTA,);
    return velocityPerSecond(parseFloat(this.current,) - parseFloat(this.prevFrameValue,), delta,);
  }
  /**
   * Registers a new animation to control this `MotionValue`. Only one
   * animation can drive a `MotionValue` at one time.
   *
   * ```jsx
   * value.start()
   * ```
   *
   * @param animation - A function that starts the provided animation
   */
  start(startAnimation2,) {
    this.stop();
    return new Promise((resolve) => {
      this.hasAnimated = true;
      this.animation = startAnimation2(resolve,);
      if (this.events.animationStart) {
        this.events.animationStart.notify();
      }
    },).then(() => {
      if (this.events.animationComplete) {
        this.events.animationComplete.notify();
      }
      this.clearAnimation();
    },);
  }
  /**
   * Stop the currently active animation.
   *
   * @public
   */
  stop() {
    if (this.animation) {
      this.animation.stop();
      if (this.events.animationCancel) {
        this.events.animationCancel.notify();
      }
    }
    this.clearAnimation();
  }
  /**
   * Returns `true` if this value is currently animating.
   *
   * @public
   */
  isAnimating() {
    return !!this.animation;
  }
  clearAnimation() {
    delete this.animation;
  }
  /**
   * Destroy and clean up subscribers to this `MotionValue`.
   *
   * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically
   * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually
   * created a `MotionValue` via the `motionValue` function.
   *
   * @public
   */
  destroy() {
    var _a, _b;
    (_a = this.dependents) == null ? void 0 : _a.clear();
    (_b = this.events.destroy) == null ? void 0 : _b.notify();
    this.clearListeners();
    this.stop();
    if (this.stopPassiveEffect) {
      this.stopPassiveEffect();
    }
  }
};
function motionValue(init, options,) {
  return new MotionValue(init, options,);
}
var translateAlias = {
  x: 'translateX',
  y: 'translateY',
  z: 'translateZ',
  transformPerspective: 'perspective',
};
function buildTransform(state,) {
  let transform2 = '';
  let transformIsDefault = true;
  for (let i = 0; i < transformPropOrder.length; i++) {
    const key7 = transformPropOrder[i];
    const value = state.latest[key7];
    if (value === void 0) continue;
    let valueIsDefault = true;
    if (typeof value === 'number') {
      valueIsDefault = value === (key7.startsWith('scale',) ? 1 : 0);
    } else {
      valueIsDefault = parseFloat(value,) === 0;
    }
    if (!valueIsDefault) {
      transformIsDefault = false;
      const transformName = translateAlias[key7] || key7;
      const valueToRender = state.latest[key7];
      transform2 += `${transformName}(${valueToRender}) `;
    }
  }
  return transformIsDefault ? 'none' : transform2.trim();
}
var originProps = /* @__PURE__ */ new Set(['originX', 'originY', 'originZ',],);
var addStyleValue = (element, state, key7, value,) => {
  let render = void 0;
  let computed = void 0;
  if (transformProps.has(key7,)) {
    if (!state.get('transform',)) {
      if (!isHTMLElement(element,) && !state.get('transformBox',)) {
        addStyleValue(element, state, 'transformBox', new MotionValue('fill-box',),);
      }
      state.set('transform', new MotionValue('none',), () => {
        element.style.transform = buildTransform(state,);
      },);
    }
    computed = state.get('transform',);
  } else if (originProps.has(key7,)) {
    if (!state.get('transformOrigin',)) {
      state.set('transformOrigin', new MotionValue('',), () => {
        const originX = state.latest.originX ?? '50%';
        const originY = state.latest.originY ?? '50%';
        const originZ = state.latest.originZ ?? 0;
        element.style.transformOrigin = `${originX} ${originY} ${originZ}`;
      },);
    }
    computed = state.get('transformOrigin',);
  } else if (isCSSVar(key7,)) {
    render = () => {
      element.style.setProperty(key7, state.latest[key7],);
    };
  } else {
    render = () => {
      element.style[key7] = state.latest[key7];
    };
  }
  return state.set(key7, value, render, computed,);
};
var styleEffect = /* @__PURE__ */ createSelectorEffect(/* @__PURE__ */ createEffect(addStyleValue,),);
var toPx = px.transform;
function addSVGPathValue(element, state, key7, value,) {
  frame.render(() => element.setAttribute('pathLength', '1',));
  if (key7 === 'pathOffset') {
    return state.set(key7, value, () => element.setAttribute('stroke-dashoffset', toPx(-state.latest[key7],),),);
  } else {
    if (!state.get('stroke-dasharray',)) {
      state.set('stroke-dasharray', new MotionValue('1 1',), () => {
        const {
          pathLength = 1,
          pathSpacing,
        } = state.latest;
        element.setAttribute('stroke-dasharray', `${toPx(pathLength,)} ${toPx(pathSpacing ?? 1 - Number(pathLength,),)}`,);
      },);
    }
    return state.set(key7, value, void 0, state.get('stroke-dasharray',),);
  }
}
var addSVGValue = (element, state, key7, value,) => {
  if (key7.startsWith('path',)) {
    return addSVGPathValue(element, state, key7, value,);
  } else if (key7.startsWith('attr',)) {
    return addAttrValue(element, state, convertAttrKey(key7,), value,);
  }
  const handler = key7 in element.style ? addStyleValue : addAttrValue;
  return handler(element, state, key7, value,);
};
var svgEffect = /* @__PURE__ */ createSelectorEffect(/* @__PURE__ */ createEffect(addSVGValue,),);
function convertAttrKey(key7,) {
  return key7.replace(/^attr([A-Z])/, (_, firstChar,) => firstChar.toLowerCase(),);
}
var {
  schedule: microtask,
  cancel: cancelMicrotask,
} = /* @__PURE__ */ createRenderBatcher(queueMicrotask, false,);
var isDragging = {
  x: false,
  y: false,
};
function isDragActive() {
  return isDragging.x || isDragging.y;
}
function setDragLock(axis,) {
  if (axis === 'x' || axis === 'y') {
    if (isDragging[axis]) {
      return null;
    } else {
      isDragging[axis] = true;
      return () => {
        isDragging[axis] = false;
      };
    }
  } else {
    if (isDragging.x || isDragging.y) {
      return null;
    } else {
      isDragging.x = isDragging.y = true;
      return () => {
        isDragging.x = isDragging.y = false;
      };
    }
  }
}
function setupGesture(elementOrSelector, options,) {
  const elements = resolveElements(elementOrSelector,);
  const gestureAbortController = new AbortController();
  const eventOptions = {
    passive: true,
    ...options,
    signal: gestureAbortController.signal,
  };
  const cancel = () => gestureAbortController.abort();
  return [elements, eventOptions, cancel,];
}
function isValidHover(event,) {
  return !(event.pointerType === 'touch' || isDragActive());
}
function hover(elementOrSelector, onHoverStart, options = {},) {
  const [elements, eventOptions, cancel,] = setupGesture(elementOrSelector, options,);
  const onPointerEnter = (enterEvent) => {
    if (!isValidHover(enterEvent,)) return;
    const {
      target,
    } = enterEvent;
    const onHoverEnd = onHoverStart(target, enterEvent,);
    if (typeof onHoverEnd !== 'function' || !target) return;
    const onPointerLeave = (leaveEvent) => {
      if (!isValidHover(leaveEvent,)) return;
      onHoverEnd(leaveEvent,);
      target.removeEventListener('pointerleave', onPointerLeave,);
    };
    target.addEventListener('pointerleave', onPointerLeave, eventOptions,);
  };
  elements.forEach((element) => {
    element.addEventListener('pointerenter', onPointerEnter, eventOptions,);
  },);
  return cancel;
}
var isNodeOrChild = (parent, child,) => {
  if (!child) {
    return false;
  } else if (parent === child) {
    return true;
  } else {
    return isNodeOrChild(parent, child.parentElement,);
  }
};
var isPrimaryPointer = (event) => {
  if (event.pointerType === 'mouse') {
    return typeof event.button !== 'number' || event.button <= 0;
  } else {
    return event.isPrimary !== false;
  }
};
var focusableElements = /* @__PURE__ */ new Set(['BUTTON', 'INPUT', 'SELECT', 'TEXTAREA', 'A',],);
function isElementKeyboardAccessible(element,) {
  return focusableElements.has(element.tagName,) || element.tabIndex !== -1;
}
var isPressing = /* @__PURE__ */ new WeakSet();
function filterEvents(callback,) {
  return (event) => {
    if (event.key !== 'Enter') return;
    callback(event,);
  };
}
function firePointerEvent(target, type,) {
  target.dispatchEvent(
    new PointerEvent('pointer' + type, {
      isPrimary: true,
      bubbles: true,
    },),
  );
}
var enableKeyboardPress = (focusEvent, eventOptions,) => {
  const element = focusEvent.currentTarget;
  if (!element) return;
  const handleKeydown = filterEvents(() => {
    if (isPressing.has(element,)) return;
    firePointerEvent(element, 'down',);
    const handleKeyup = filterEvents(() => {
      firePointerEvent(element, 'up',);
    },);
    const handleBlur = () => firePointerEvent(element, 'cancel',);
    element.addEventListener('keyup', handleKeyup, eventOptions,);
    element.addEventListener('blur', handleBlur, eventOptions,);
  },);
  element.addEventListener('keydown', handleKeydown, eventOptions,);
  element.addEventListener('blur', () => element.removeEventListener('keydown', handleKeydown,), eventOptions,);
};
function isValidPressEvent(event,) {
  return isPrimaryPointer(event,) && !isDragActive();
}
function press(targetOrSelector, onPressStart, options = {},) {
  const [targets, eventOptions, cancelEvents,] = setupGesture(targetOrSelector, options,);
  const startPress = (startEvent) => {
    const target = startEvent.currentTarget;
    if (!isValidPressEvent(startEvent,)) return;
    isPressing.add(target,);
    const onPressEnd = onPressStart(target, startEvent,);
    const onPointerEnd = (endEvent, success,) => {
      window.removeEventListener('pointerup', onPointerUp,);
      window.removeEventListener('pointercancel', onPointerCancel,);
      if (isPressing.has(target,)) {
        isPressing.delete(target,);
      }
      if (!isValidPressEvent(endEvent,)) {
        return;
      }
      if (typeof onPressEnd === 'function') {
        onPressEnd(endEvent, {
          success,
        },);
      }
    };
    const onPointerUp = (upEvent) => {
      onPointerEnd(upEvent, target === window || target === document || options.useGlobalTarget || isNodeOrChild(target, upEvent.target,),);
    };
    const onPointerCancel = (cancelEvent) => {
      onPointerEnd(cancelEvent, false,);
    };
    window.addEventListener('pointerup', onPointerUp, eventOptions,);
    window.addEventListener('pointercancel', onPointerCancel, eventOptions,);
  };
  targets.forEach((target) => {
    const pointerDownTarget = options.useGlobalTarget ? window : target;
    pointerDownTarget.addEventListener('pointerdown', startPress, eventOptions,);
    if (isHTMLElement(target,)) {
      target.addEventListener('focus', (event) => enableKeyboardPress(event, eventOptions,),);
      if (!isElementKeyboardAccessible(target,) && !target.hasAttribute('tabindex',)) {
        target.tabIndex = 0;
      }
    }
  },);
  return cancelEvents;
}
function getComputedStyle2(element, name,) {
  const computedStyle = window.getComputedStyle(element,);
  return isCSSVar(name,) ? computedStyle.getPropertyValue(name,) : computedStyle[name];
}
function isSVGElement(element,) {
  return isObject(element,) && 'ownerSVGElement' in element;
}
var resizeHandlers = /* @__PURE__ */ new WeakMap();
var observer;
var getSize = (borderBoxAxis, svgAxis, htmlAxis,) => (target, borderBoxSize,) => {
  if (borderBoxSize && borderBoxSize[0]) {
    return borderBoxSize[0][borderBoxAxis + 'Size'];
  } else if (isSVGElement(target,) && 'getBBox' in target) {
    return target.getBBox()[svgAxis];
  } else {
    return target[htmlAxis];
  }
};
var getWidth = /* @__PURE__ */ getSize('inline', 'width', 'offsetWidth',);
var getHeight = /* @__PURE__ */ getSize('block', 'height', 'offsetHeight',);
function notifyTarget({
  target,
  borderBoxSize,
},) {
  var _a;
  (_a = resizeHandlers.get(target,)) == null ? void 0 : _a.forEach((handler) => {
    handler(target, {
      get width() {
        return getWidth(target, borderBoxSize,);
      },
      get height() {
        return getHeight(target, borderBoxSize,);
      },
    },);
  },);
}
function notifyAll(entries,) {
  entries.forEach(notifyTarget,);
}
function createResizeObserver() {
  if (typeof ResizeObserver === 'undefined') return;
  observer = new ResizeObserver(notifyAll,);
}
function resizeElement(target, handler,) {
  if (!observer) createResizeObserver();
  const elements = resolveElements(target,);
  elements.forEach((element) => {
    let elementHandlers = resizeHandlers.get(element,);
    if (!elementHandlers) {
      elementHandlers = /* @__PURE__ */ new Set();
      resizeHandlers.set(element, elementHandlers,);
    }
    elementHandlers.add(handler,);
    observer == null ? void 0 : observer.observe(element,);
  },);
  return () => {
    elements.forEach((element) => {
      const elementHandlers = resizeHandlers.get(element,);
      elementHandlers == null ? void 0 : elementHandlers.delete(handler,);
      if (!(elementHandlers == null ? void 0 : elementHandlers.size)) {
        observer == null ? void 0 : observer.unobserve(element,);
      }
    },);
  };
}
var windowCallbacks = /* @__PURE__ */ new Set();
var windowResizeHandler;
function createWindowResizeHandler() {
  windowResizeHandler = () => {
    const info = {
      get width() {
        return window.innerWidth;
      },
      get height() {
        return window.innerHeight;
      },
    };
    windowCallbacks.forEach((callback) => callback(info,));
  };
  window.addEventListener('resize', windowResizeHandler,);
}
function resizeWindow(callback,) {
  windowCallbacks.add(callback,);
  if (!windowResizeHandler) createWindowResizeHandler();
  return () => {
    windowCallbacks.delete(callback,);
    if (!windowCallbacks.size && typeof windowResizeHandler === 'function') {
      window.removeEventListener('resize', windowResizeHandler,);
      windowResizeHandler = void 0;
    }
  };
}
function resize(a, b,) {
  return typeof a === 'function' ? resizeWindow(a,) : resizeElement(a, b,);
}
function observeTimeline(update, timeline,) {
  let prevProgress;
  const onFrame = () => {
    const {
      currentTime,
    } = timeline;
    const percentage = currentTime === null ? 0 : currentTime.value;
    const progress2 = percentage / 100;
    if (prevProgress !== progress2) {
      update(progress2,);
    }
    prevProgress = progress2;
  };
  frame.preUpdate(onFrame, true,);
  return () => cancelFrame(onFrame,);
}
function record() {
  const {
    value,
  } = statsBuffer;
  if (value === null) {
    cancelFrame(record,);
    return;
  }
  value.frameloop.rate.push(frameData.delta,);
  value.animations.mainThread.push(activeAnimations.mainThread,);
  value.animations.waapi.push(activeAnimations.waapi,);
  value.animations.layout.push(activeAnimations.layout,);
}
function mean(values,) {
  return values.reduce((acc, value,) => acc + value, 0,) / values.length;
}
function summarise(values, calcAverage = mean,) {
  if (values.length === 0) {
    return {
      min: 0,
      max: 0,
      avg: 0,
    };
  }
  return {
    min: Math.min(...values,),
    max: Math.max(...values,),
    avg: calcAverage(values,),
  };
}
var msToFps = (ms) => Math.round(1e3 / ms,);
function clearStatsBuffer() {
  statsBuffer.value = null;
  statsBuffer.addProjectionMetrics = null;
}
function reportStats() {
  const {
    value,
  } = statsBuffer;
  if (!value) {
    throw new Error('Stats are not being measured',);
  }
  clearStatsBuffer();
  cancelFrame(record,);
  const summary = {
    frameloop: {
      setup: summarise(value.frameloop.setup,),
      rate: summarise(value.frameloop.rate,),
      read: summarise(value.frameloop.read,),
      resolveKeyframes: summarise(value.frameloop.resolveKeyframes,),
      preUpdate: summarise(value.frameloop.preUpdate,),
      update: summarise(value.frameloop.update,),
      preRender: summarise(value.frameloop.preRender,),
      render: summarise(value.frameloop.render,),
      postRender: summarise(value.frameloop.postRender,),
    },
    animations: {
      mainThread: summarise(value.animations.mainThread,),
      waapi: summarise(value.animations.waapi,),
      layout: summarise(value.animations.layout,),
    },
    layoutProjection: {
      nodes: summarise(value.layoutProjection.nodes,),
      calculatedTargetDeltas: summarise(value.layoutProjection.calculatedTargetDeltas,),
      calculatedProjections: summarise(value.layoutProjection.calculatedProjections,),
    },
  };
  const {
    rate,
  } = summary.frameloop;
  rate.min = msToFps(rate.min,);
  rate.max = msToFps(rate.max,);
  rate.avg = msToFps(rate.avg,);
  [rate.min, rate.max,] = [rate.max, rate.min,];
  return summary;
}
function recordStats() {
  if (statsBuffer.value) {
    clearStatsBuffer();
    throw new Error('Stats are already being measured',);
  }
  const newStatsBuffer = statsBuffer;
  newStatsBuffer.value = {
    frameloop: {
      setup: [],
      rate: [],
      read: [],
      resolveKeyframes: [],
      preUpdate: [],
      update: [],
      preRender: [],
      render: [],
      postRender: [],
    },
    animations: {
      mainThread: [],
      waapi: [],
      layout: [],
    },
    layoutProjection: {
      nodes: [],
      calculatedTargetDeltas: [],
      calculatedProjections: [],
    },
  };
  newStatsBuffer.addProjectionMetrics = (metrics2) => {
    const {
      layoutProjection,
    } = newStatsBuffer.value;
    layoutProjection.nodes.push(metrics2.nodes,);
    layoutProjection.calculatedTargetDeltas.push(metrics2.calculatedTargetDeltas,);
    layoutProjection.calculatedProjections.push(metrics2.calculatedProjections,);
  };
  frame.postRender(record, true,);
  return reportStats;
}
function isSVGSVGElement(element,) {
  return isSVGElement(element,) && element.tagName === 'svg';
}
function transform(...args) {
  const useImmediate = !Array.isArray(args[0],);
  const argOffset = useImmediate ? 0 : -1;
  const inputValue = args[0 + argOffset];
  const inputRange = args[1 + argOffset];
  const outputRange = args[2 + argOffset];
  const options = args[3 + argOffset];
  const interpolator = interpolate(inputRange, outputRange, options,);
  return useImmediate ? interpolator(inputValue,) : interpolator;
}
function subscribeValue(inputValues, outputValue, getLatest,) {
  const update = () => outputValue.set(getLatest(),);
  const scheduleUpdate = () => frame.preRender(update, false, true,);
  const subscriptions = inputValues.map((v) => v.on('change', scheduleUpdate,));
  outputValue.on('destroy', () => {
    subscriptions.forEach((unsubscribe) => unsubscribe());
    cancelFrame(update,);
  },);
}
function transformValue(transform2,) {
  const collectedValues = [];
  collectMotionValues.current = collectedValues;
  const initialValue = transform2();
  collectMotionValues.current = void 0;
  const value = motionValue(initialValue,);
  subscribeValue(collectedValues, value, transform2,);
  return value;
}
function mapValue(inputValue, inputRange, outputRange, options,) {
  const map2 = transform(inputRange, outputRange, options,);
  return transformValue(() => map2(inputValue.get(),));
}
var isMotionValue = (value) => Boolean(value && value.getVelocity,);
function springValue(source, options,) {
  const initialValue = isMotionValue(source,) ? source.get() : source;
  const value = motionValue(initialValue,);
  attachSpring(value, source, options,);
  return value;
}
function attachSpring(value, source, options,) {
  const initialValue = value.get();
  let activeAnimation = null;
  let latestValue = initialValue;
  let latestSetter;
  const unit = typeof initialValue === 'string' ? initialValue.replace(/[\d.-]/g, '',) : void 0;
  const stopAnimation2 = () => {
    if (activeAnimation) {
      activeAnimation.stop();
      activeAnimation = null;
    }
  };
  const startAnimation2 = () => {
    stopAnimation2();
    activeAnimation = new JSAnimation({
      keyframes: [asNumber(value.get(),), asNumber(latestValue,),],
      velocity: value.getVelocity(),
      type: 'spring',
      restDelta: 1e-3,
      restSpeed: 0.01,
      ...options,
      onUpdate: latestSetter,
    },);
  };
  value.attach((v, set,) => {
    latestValue = v;
    latestSetter = (latest) => set(parseValue(latest, unit,),);
    frame.postRender(startAnimation2,);
    return value.get();
  }, stopAnimation2,);
  let unsubscribe = void 0;
  if (isMotionValue(source,)) {
    unsubscribe = source.on('change', (v) => value.set(parseValue(v, unit,),),);
    value.on('destroy', unsubscribe,);
  }
  return unsubscribe;
}
function parseValue(v, unit,) {
  return unit ? v + unit : v;
}
function asNumber(v,) {
  return typeof v === 'number' ? v : parseFloat(v,);
}
var valueTypes = [...dimensionValueTypes, color, complex,];
var findValueType = (v) => valueTypes.find(testValueType(v,),);
function chooseLayerType(valueName,) {
  if (valueName === 'layout') return 'group';
  if (valueName === 'enter' || valueName === 'new') return 'new';
  if (valueName === 'exit' || valueName === 'old') return 'old';
  return 'group';
}
var pendingRules = {};
var style = null;
var css = {
  set: (selector, values,) => {
    pendingRules[selector] = values;
  },
  commit: () => {
    if (!style) {
      style = document.createElement('style',);
      style.id = 'motion-view';
    }
    let cssText = '';
    for (const selector in pendingRules) {
      const rule = pendingRules[selector];
      cssText += `${selector} {
`;
      for (const [property, value,] of Object.entries(rule,)) {
        cssText += `  ${property}: ${value};
`;
      }
      cssText += '}\n';
    }
    style.textContent = cssText;
    document.head.appendChild(style,);
    pendingRules = {};
  },
  remove: () => {
    if (style && style.parentElement) {
      style.parentElement.removeChild(style,);
    }
  },
};
function getLayerName(pseudoElement,) {
  const match = pseudoElement.match(/::view-transition-(old|new|group|image-pair)\((.*?)\)/,);
  if (!match) return null;
  return {
    layer: match[2],
    type: match[1],
  };
}
function filterViewAnimations(animation,) {
  var _a;
  const {
    effect,
  } = animation;
  if (!effect) return false;
  return effect.target === document.documentElement && ((_a = effect.pseudoElement) == null ? void 0 : _a.startsWith('::view-transition',));
}
function getViewAnimations() {
  return document.getAnimations().filter(filterViewAnimations,);
}
function hasTarget(target, targets,) {
  return targets.has(target,) && Object.keys(targets.get(target,),).length > 0;
}
var definitionNames = ['layout', 'enter', 'exit', 'new', 'old',];
function startViewAnimation(builder,) {
  const {
    update,
    targets,
    options: defaultOptions,
  } = builder;
  if (!document.startViewTransition) {
    return new Promise(async (resolve) => {
      await update();
      resolve(new GroupAnimation([],),);
    },);
  }
  if (!hasTarget('root', targets,)) {
    css.set(':root', {
      'view-transition-name': 'none',
    },);
  }
  css.set('::view-transition-group(*), ::view-transition-old(*), ::view-transition-new(*)', {
    'animation-timing-function': 'linear !important',
  },);
  css.commit();
  const transition = document.startViewTransition(async () => {
    await update();
  },);
  transition.finished.finally(() => {
    css.remove();
  },);
  return new Promise((resolve) => {
    transition.ready.then(() => {
      const generatedViewAnimations = getViewAnimations();
      const animations2 = [];
      targets.forEach((definition, target,) => {
        for (const key7 of definitionNames) {
          if (!definition[key7]) continue;
          const {
            keyframes: keyframes2,
            options,
          } = definition[key7];
          for (let [valueName, valueKeyframes,] of Object.entries(keyframes2,)) {
            if (!valueKeyframes) continue;
            const valueOptions = {
              ...getValueTransition(defaultOptions, valueName,),
              ...getValueTransition(options, valueName,),
            };
            const type = chooseLayerType(key7,);
            if (valueName === 'opacity' && !Array.isArray(valueKeyframes,)) {
              const initialValue = type === 'new' ? 0 : 1;
              valueKeyframes = [initialValue, valueKeyframes,];
            }
            if (typeof valueOptions.delay === 'function') {
              valueOptions.delay = valueOptions.delay(0, 1,);
            }
            valueOptions.duration && (valueOptions.duration = secondsToMilliseconds(valueOptions.duration,));
            valueOptions.delay && (valueOptions.delay = secondsToMilliseconds(valueOptions.delay,));
            const animation = new NativeAnimation({
              ...valueOptions,
              element: document.documentElement,
              name: valueName,
              pseudoElement: `::view-transition-${type}(${target})`,
              keyframes: valueKeyframes,
            },);
            animations2.push(animation,);
          }
        }
      },);
      for (const animation of generatedViewAnimations) {
        if (animation.playState === 'finished') continue;
        const {
          effect,
        } = animation;
        if (!effect || !(effect instanceof KeyframeEffect)) continue;
        const {
          pseudoElement,
        } = effect;
        if (!pseudoElement) continue;
        const name = getLayerName(pseudoElement,);
        if (!name) continue;
        const targetDefinition = targets.get(name.layer,);
        if (!targetDefinition) {
          const transitionName = name.type === 'group' ? 'layout' : '';
          let animationTransition = {
            ...getValueTransition(defaultOptions, transitionName,),
          };
          animationTransition.duration && (animationTransition.duration = secondsToMilliseconds(animationTransition.duration,));
          animationTransition = applyGeneratorOptions(animationTransition,);
          const easing = mapEasingToNativeEasing(animationTransition.ease, animationTransition.duration,);
          effect.updateTiming({
            delay: secondsToMilliseconds(animationTransition.delay ?? 0,),
            duration: animationTransition.duration,
            easing,
          },);
          animations2.push(new NativeAnimationWrapper(animation,),);
        } else if (
          hasOpacity(targetDefinition, 'enter',) && hasOpacity(targetDefinition, 'exit',) &&
          effect.getKeyframes().some((keyframe) => keyframe.mixBlendMode)
        ) {
          animations2.push(new NativeAnimationWrapper(animation,),);
        } else {
          animation.cancel();
        }
      }
      resolve(new GroupAnimation(animations2,),);
    },);
  },);
}
function hasOpacity(target, key7,) {
  var _a;
  return (_a = target == null ? void 0 : target[key7]) == null ? void 0 : _a.keyframes.opacity;
}
var builders = [];
var current = null;
function next() {
  current = null;
  const [nextBuilder,] = builders;
  if (nextBuilder) start(nextBuilder,);
}
function start(builder,) {
  removeItem(builders, builder,);
  current = builder;
  startViewAnimation(builder,).then((animation) => {
    builder.notifyReady(animation,);
    animation.finished.finally(next,);
  },);
}
function processQueue() {
  var _a;
  for (let i = builders.length - 1; i >= 0; i--) {
    const builder = builders[i];
    const {
      interrupt,
    } = builder.options;
    if (interrupt === 'immediate') {
      const batchedUpdates = builders.slice(0, i + 1,).map((b) => b.update);
      const remaining = builders.slice(i + 1,);
      builder.update = () => {
        batchedUpdates.forEach((update) => update());
      };
      builders = [builder, ...remaining,];
      break;
    }
  }
  if (!current || ((_a = builders[0]) == null ? void 0 : _a.options.interrupt) === 'immediate') {
    next();
  }
}
function addToQueue(builder,) {
  builders.push(builder,);
  microtask.render(processQueue,);
}
var ViewTransitionBuilder = class {
  constructor(update, options = {},) {
    this.currentTarget = 'root';
    this.targets = /* @__PURE__ */ new Map();
    this.notifyReady = noop;
    this.readyPromise = new Promise((resolve) => {
      this.notifyReady = resolve;
    },);
    this.update = update;
    this.options = {
      interrupt: 'wait',
      ...options,
    };
    addToQueue(this,);
  }
  get(selector,) {
    this.currentTarget = selector;
    return this;
  }
  layout(keyframes2, options,) {
    this.updateTarget('layout', keyframes2, options,);
    return this;
  }
  new(keyframes2, options,) {
    this.updateTarget('new', keyframes2, options,);
    return this;
  }
  old(keyframes2, options,) {
    this.updateTarget('old', keyframes2, options,);
    return this;
  }
  enter(keyframes2, options,) {
    this.updateTarget('enter', keyframes2, options,);
    return this;
  }
  exit(keyframes2, options,) {
    this.updateTarget('exit', keyframes2, options,);
    return this;
  }
  crossfade(options,) {
    this.updateTarget('enter', {
      opacity: 1,
    }, options,);
    this.updateTarget('exit', {
      opacity: 0,
    }, options,);
    return this;
  }
  updateTarget(target, keyframes2, options = {},) {
    const {
      currentTarget,
      targets,
    } = this;
    if (!targets.has(currentTarget,)) {
      targets.set(currentTarget, {},);
    }
    const targetData = targets.get(currentTarget,);
    targetData[target] = {
      keyframes: keyframes2,
      options,
    };
  }
  then(resolve, reject,) {
    return this.readyPromise.then(resolve, reject,);
  }
};
function animateView(update, defaultOptions = {},) {
  return new ViewTransitionBuilder(update, defaultOptions,);
}
var sync = frame;
var cancelSync = stepsOrder.reduce((acc, key7,) => {
  acc[key7] = (process2) => cancelFrame(process2,);
  return acc;
}, {},);
var MotionConfigContext = createContext({
  transformPagePoint: (p) => p,
  isStatic: false,
  reducedMotion: 'never',
},);
function usePresence(subscribe = true,) {
  const context = useContext(PresenceContext,);
  if (context === null) return [true, null,];
  const {
    isPresent: isPresent2,
    onExitComplete,
    register,
  } = context;
  const id4 = useId();
  useEffect(() => {
    if (subscribe) {
      return register(id4,);
    }
  }, [subscribe,],);
  const safeToRemove = useCallback(() => subscribe && onExitComplete && onExitComplete(id4,), [id4, onExitComplete, subscribe,],);
  return !isPresent2 && onExitComplete ? [false, safeToRemove,] : [true,];
}
function useIsPresent() {
  return isPresent(useContext(PresenceContext,),);
}
function isPresent(context,) {
  return context === null ? true : context.isPresent;
}
function useConstant(init,) {
  const ref = useRef3(null,);
  if (ref.current === null) {
    ref.current = init();
  }
  return ref.current;
}
var PopChildMeasure = class extends React2.Component {
  getSnapshotBeforeUpdate(prevProps,) {
    const element = this.props.childRef.current;
    if (element && prevProps.isPresent && !this.props.isPresent) {
      const parent = element.offsetParent;
      const parentWidth = isHTMLElement(parent,) ? parent.offsetWidth || 0 : 0;
      const size = this.props.sizeRef.current;
      size.height = element.offsetHeight || 0;
      size.width = element.offsetWidth || 0;
      size.top = element.offsetTop;
      size.left = element.offsetLeft;
      size.right = parentWidth - size.width - size.left;
    }
    return null;
  }
  /**
   * Required with getSnapshotBeforeUpdate to stop React complaining.
   */
  componentDidUpdate() {}
  render() {
    return this.props.children;
  }
};
function PopChild({
  children,
  isPresent: isPresent2,
  anchorX,
},) {
  const id4 = useId();
  const ref = useRef3(null,);
  const size = useRef3({
    width: 0,
    height: 0,
    top: 0,
    left: 0,
    right: 0,
  },);
  const {
    nonce,
  } = useContext(MotionConfigContext,);
  useInsertionEffect(() => {
    const {
      width,
      height,
      top,
      left,
      right,
    } = size.current;
    if (isPresent2 || !ref.current || !width || !height) return;
    const x = anchorX === 'left' ? `left: ${left}` : `right: ${right}`;
    ref.current.dataset.motionPopId = id4;
    const style2 = document.createElement('style',);
    if (nonce) style2.nonce = nonce;
    document.head.appendChild(style2,);
    if (style2.sheet) {
      style2.sheet.insertRule(`
          [data-motion-pop-id="${id4}"] {
            position: absolute !important;
            width: ${width}px !important;
            height: ${height}px !important;
            ${x}px !important;
            top: ${top}px !important;
          }
        `,);
    }
    return () => {
      if (document.head.contains(style2,)) {
        document.head.removeChild(style2,);
      }
    };
  }, [isPresent2,],);
  return jsx3(PopChildMeasure, {
    isPresent: isPresent2,
    childRef: ref,
    sizeRef: size,
    children: React2.cloneElement(children, {
      ref,
    },),
  },);
}
var PresenceChild = ({
  children,
  initial,
  isPresent: isPresent2,
  onExitComplete,
  custom,
  presenceAffectsLayout,
  mode,
  anchorX,
},) => {
  const presenceChildren = useConstant(newChildrenMap,);
  const id4 = useId();
  let isReusedContext = true;
  let context = useMemo2(() => {
    isReusedContext = false;
    return {
      id: id4,
      initial,
      isPresent: isPresent2,
      custom,
      onExitComplete: (childId) => {
        presenceChildren.set(childId, true,);
        for (const isComplete of presenceChildren.values()) {
          if (!isComplete) return;
        }
        onExitComplete && onExitComplete();
      },
      register: (childId) => {
        presenceChildren.set(childId, false,);
        return () => presenceChildren.delete(childId,);
      },
    };
  }, [isPresent2, presenceChildren, onExitComplete,],);
  if (presenceAffectsLayout && isReusedContext) {
    context = {
      ...context,
    };
  }
  useMemo2(() => {
    presenceChildren.forEach((_, key7,) => presenceChildren.set(key7, false,));
  }, [isPresent2,],);
  React2.useEffect(() => {
    !isPresent2 && !presenceChildren.size && onExitComplete && onExitComplete();
  }, [isPresent2,],);
  if (mode === 'popLayout') {
    children = jsx3(PopChild, {
      isPresent: isPresent2,
      anchorX,
      children,
    },);
  }
  return jsx3(PresenceContext.Provider, {
    value: context,
    children,
  },);
};
function newChildrenMap() {
  return /* @__PURE__ */ new Map();
}
var getChildKey = (child) => child.key || '';
function onlyElements(children,) {
  const filtered = [];
  Children.forEach(children, (child) => {
    if (isValidElement(child,)) filtered.push(child,);
  },);
  return filtered;
}
var AnimatePresence = ({
  children,
  custom,
  initial = true,
  onExitComplete,
  presenceAffectsLayout = true,
  mode = 'sync',
  propagate = false,
  anchorX = 'left',
},) => {
  const [isParentPresent, safeToRemove,] = usePresence(propagate,);
  const presentChildren = useMemo2(() => onlyElements(children,), [children,],);
  const presentKeys = propagate && !isParentPresent ? [] : presentChildren.map(getChildKey,);
  const isInitialRender = useRef3(true,);
  const pendingPresentChildren = useRef3(presentChildren,);
  const exitComplete = useConstant(() => /* @__PURE__ */ new Map());
  const [diffedChildren, setDiffedChildren,] = useState(presentChildren,);
  const [renderedChildren, setRenderedChildren,] = useState(presentChildren,);
  useIsomorphicLayoutEffect(() => {
    isInitialRender.current = false;
    pendingPresentChildren.current = presentChildren;
    for (let i = 0; i < renderedChildren.length; i++) {
      const key7 = getChildKey(renderedChildren[i],);
      if (!presentKeys.includes(key7,)) {
        if (exitComplete.get(key7,) !== true) {
          exitComplete.set(key7, false,);
        }
      } else {
        exitComplete.delete(key7,);
      }
    }
  }, [renderedChildren, presentKeys.length, presentKeys.join('-',),],);
  const exitingChildren = [];
  if (presentChildren !== diffedChildren) {
    let nextChildren = [...presentChildren,];
    for (let i = 0; i < renderedChildren.length; i++) {
      const child = renderedChildren[i];
      const key7 = getChildKey(child,);
      if (!presentKeys.includes(key7,)) {
        nextChildren.splice(i, 0, child,);
        exitingChildren.push(child,);
      }
    }
    if (mode === 'wait' && exitingChildren.length) {
      nextChildren = exitingChildren;
    }
    setRenderedChildren(onlyElements(nextChildren,),);
    setDiffedChildren(presentChildren,);
    return null;
  }
  if (false) {
    console.warn(
      `You're attempting to animate multiple children within AnimatePresence, but its mode is set to "wait". This will lead to odd visual behaviour.`,
    );
  }
  const {
    forceRender,
  } = useContext(LayoutGroupContext,);
  return jsx3(Fragment, {
    children: renderedChildren.map((child) => {
      const key7 = getChildKey(child,);
      const isPresent2 = propagate && !isParentPresent ? false : presentChildren === renderedChildren || presentKeys.includes(key7,);
      const onExit = () => {
        if (exitComplete.has(key7,)) {
          exitComplete.set(key7, true,);
        } else {
          return;
        }
        let isEveryExitComplete = true;
        exitComplete.forEach((isExitComplete) => {
          if (!isExitComplete) isEveryExitComplete = false;
        },);
        if (isEveryExitComplete) {
          forceRender == null ? void 0 : forceRender();
          setRenderedChildren(pendingPresentChildren.current,);
          propagate && (safeToRemove == null ? void 0 : safeToRemove());
          onExitComplete && onExitComplete();
        }
      };
      return jsx3(PresenceChild, {
        isPresent: isPresent2,
        initial: !isInitialRender.current || initial ? void 0 : false,
        custom,
        presenceAffectsLayout,
        mode,
        onExitComplete: isPresent2 ? void 0 : onExit,
        anchorX,
        children: child,
      }, key7,);
    },),
  },);
};
var DeprecatedLayoutGroupContext = createContext(null,);
function useIsMounted() {
  const isMounted = useRef3(false,);
  useIsomorphicLayoutEffect(() => {
    isMounted.current = true;
    return () => {
      isMounted.current = false;
    };
  }, [],);
  return isMounted;
}
function useForceUpdate() {
  const isMounted = useIsMounted();
  const [forcedRenderCount, setForcedRenderCount,] = useState(0,);
  const forceRender = useCallback(() => {
    isMounted.current && setForcedRenderCount(forcedRenderCount + 1,);
  }, [forcedRenderCount,],);
  const deferredForceRender = useCallback(() => frame.postRender(forceRender,), [forceRender,],);
  return [deferredForceRender, forcedRenderCount,];
}
var notify = (node) => !node.isLayoutDirty && node.willUpdate(false,);
function nodeGroup() {
  const nodes = /* @__PURE__ */ new Set();
  const subscriptions = /* @__PURE__ */ new WeakMap();
  const dirtyAll = () => nodes.forEach(notify,);
  return {
    add: (node) => {
      nodes.add(node,);
      subscriptions.set(node, node.addEventListener('willUpdate', dirtyAll,),);
    },
    remove: (node) => {
      nodes.delete(node,);
      const unsubscribe = subscriptions.get(node,);
      if (unsubscribe) {
        unsubscribe();
        subscriptions.delete(node,);
      }
      dirtyAll();
    },
    dirty: dirtyAll,
  };
}
var shouldInheritGroup = (inherit) => inherit === true;
var shouldInheritId = (inherit) => shouldInheritGroup(inherit === true,) || inherit === 'id';
var LayoutGroup = ({
  children,
  id: id4,
  inherit = true,
},) => {
  const layoutGroupContext = useContext(LayoutGroupContext,);
  const deprecatedLayoutGroupContext = useContext(DeprecatedLayoutGroupContext,);
  const [forceRender, key7,] = useForceUpdate();
  const context = useRef3(null,);
  const upstreamId = layoutGroupContext.id || deprecatedLayoutGroupContext;
  if (context.current === null) {
    if (shouldInheritId(inherit,) && upstreamId) {
      id4 = id4 ? upstreamId + '-' + id4 : upstreamId;
    }
    context.current = {
      id: id4,
      group: shouldInheritGroup(inherit,) ? layoutGroupContext.group || nodeGroup() : nodeGroup(),
    };
  }
  const memoizedContext = useMemo2(() => ({
    ...context.current,
    forceRender,
  }), [key7,],);
  return jsx3(LayoutGroupContext.Provider, {
    value: memoizedContext,
    children,
  },);
};
var LazyContext = createContext({
  strict: false,
},);
var featureProps = {
  animation: ['animate', 'variants', 'whileHover', 'whileTap', 'exit', 'whileInView', 'whileFocus', 'whileDrag',],
  exit: ['exit',],
  drag: ['drag', 'dragControls',],
  focus: ['whileFocus',],
  hover: ['whileHover', 'onHoverStart', 'onHoverEnd',],
  tap: ['whileTap', 'onTap', 'onTapStart', 'onTapCancel',],
  pan: ['onPan', 'onPanStart', 'onPanSessionStart', 'onPanEnd',],
  inView: ['whileInView', 'onViewportEnter', 'onViewportLeave',],
  layout: ['layout', 'layoutId',],
};
var featureDefinitions = {};
for (const key7 in featureProps) {
  featureDefinitions[key7] = {
    isEnabled: (props) => featureProps[key7].some((name) => !!props[name]),
  };
}
function loadFeatures(features,) {
  for (const key7 in features) {
    featureDefinitions[key7] = {
      ...featureDefinitions[key7],
      ...features[key7],
    };
  }
}
function LazyMotion({
  children,
  features,
  strict = false,
},) {
  const [, setIsLoaded,] = useState(!isLazyBundle(features,),);
  const loadedRenderer = useRef3(void 0,);
  if (!isLazyBundle(features,)) {
    const {
      renderer,
      ...loadedFeatures
    } = features;
    loadedRenderer.current = renderer;
    loadFeatures(loadedFeatures,);
  }
  useEffect(() => {
    if (isLazyBundle(features,)) {
      features().then(({
        renderer,
        ...loadedFeatures
      },) => {
        loadFeatures(loadedFeatures,);
        loadedRenderer.current = renderer;
        setIsLoaded(true,);
      },);
    }
  }, [],);
  return jsx3(LazyContext.Provider, {
    value: {
      renderer: loadedRenderer.current,
      strict,
    },
    children,
  },);
}
function isLazyBundle(features,) {
  return typeof features === 'function';
}
var validMotionProps = /* @__PURE__ */ new Set([
  'animate',
  'exit',
  'variants',
  'initial',
  'style',
  'values',
  'variants',
  'transition',
  'transformTemplate',
  'custom',
  'inherit',
  'onBeforeLayoutMeasure',
  'onAnimationStart',
  'onAnimationComplete',
  'onUpdate',
  'onDragStart',
  'onDrag',
  'onDragEnd',
  'onMeasureDragConstraints',
  'onDirectionLock',
  'onDragTransitionEnd',
  '_dragX',
  '_dragY',
  'onHoverStart',
  'onHoverEnd',
  'onViewportEnter',
  'onViewportLeave',
  'globalTapTarget',
  'ignoreStrict',
  'viewport',
],);
function isValidMotionProp(key7,) {
  return key7.startsWith('while',) || key7.startsWith('drag',) && key7 !== 'draggable' || key7.startsWith('layout',) ||
    key7.startsWith('onTap',) || key7.startsWith('onPan',) || key7.startsWith('onLayout',) || validMotionProps.has(key7,);
}
var shouldForward = (key7) => !isValidMotionProp(key7,);
function loadExternalIsValidProp(isValidProp,) {
  if (!isValidProp) return;
  shouldForward = (key7) => key7.startsWith('on',) ? !isValidMotionProp(key7,) : isValidProp(key7,);
}
try {
  loadExternalIsValidProp(require_is_prop_valid_browser_cjs().default,);
} catch {}
function filterProps(props, isDom, forwardMotionProps,) {
  const filteredProps2 = {};
  for (const key7 in props) {
    if (key7 === 'values' && typeof props.values === 'object') continue;
    if (
      shouldForward(key7,) || forwardMotionProps === true && isValidMotionProp(key7,) || !isDom && !isValidMotionProp(key7,) ||
      // If trying to use native HTML drag events, forward drag listeners
      props['draggable'] && key7.startsWith('onDrag',)
    ) {
      filteredProps2[key7] = props[key7];
    }
  }
  return filteredProps2;
}
function MotionConfig({
  children,
  isValidProp,
  ...config
},) {
  isValidProp && loadExternalIsValidProp(isValidProp,);
  config = {
    ...useContext(MotionConfigContext,),
    ...config,
  };
  config.isStatic = useConstant(() => config.isStatic);
  const context = useMemo2(() => config, [JSON.stringify(config.transition,), config.transformPagePoint, config.reducedMotion,],);
  return jsx3(MotionConfigContext.Provider, {
    value: context,
    children,
  },);
}
var MotionContext = /* @__PURE__ */ createContext({},);
var camelToDash2 = (str) => str.replace(/([a-z])([A-Z])/gu, '$1-$2',).toLowerCase();
var optimizedAppearDataId = 'framerAppearId';
var optimizedAppearDataAttribute = 'data-' + camelToDash2(optimizedAppearDataId,);
var SwitchLayoutGroupContext = createContext({},);
function isAnimationControls(v,) {
  return v !== null && typeof v === 'object' && typeof v.start === 'function';
}
function isVariantLabel(v,) {
  return typeof v === 'string' || Array.isArray(v,);
}
var variantPriorityOrder = ['animate', 'whileInView', 'whileFocus', 'whileHover', 'whileTap', 'whileDrag', 'exit',];
var variantProps = ['initial', ...variantPriorityOrder,];
function isControllingVariants(props,) {
  return isAnimationControls(props.animate,) || variantProps.some((name) => isVariantLabel(props[name],));
}
function isVariantNode(props,) {
  return Boolean(isControllingVariants(props,) || props.variants,);
}
function getCurrentTreeVariants(props, context,) {
  if (isControllingVariants(props,)) {
    const {
      initial,
      animate: animate22,
    } = props;
    return {
      initial: initial === false || isVariantLabel(initial,) ? initial : void 0,
      animate: isVariantLabel(animate22,) ? animate22 : void 0,
    };
  }
  return props.inherit !== false ? context : {};
}
function useCreateMotionContext(props,) {
  const {
    initial,
    animate: animate22,
  } = getCurrentTreeVariants(props, useContext(MotionContext,),);
  return useMemo2(() => ({
    initial,
    animate: animate22,
  }), [variantLabelsAsDependency(initial,), variantLabelsAsDependency(animate22,),],);
}
function variantLabelsAsDependency(prop,) {
  return Array.isArray(prop,) ? prop.join(' ',) : prop;
}
var motionComponentSymbol = Symbol.for('motionComponentSymbol',);
function isRefObject(ref,) {
  return ref && typeof ref === 'object' && Object.prototype.hasOwnProperty.call(ref, 'current',);
}
function useMotionRef(visualState, visualElement, externalRef,) {
  return useCallback((instance) => {
    if (instance) {
      visualState.onMount && visualState.onMount(instance,);
    }
    if (visualElement) {
      if (instance) {
        visualElement.mount(instance,);
      } else {
        visualElement.unmount();
      }
    }
    if (externalRef) {
      if (typeof externalRef === 'function') {
        externalRef(instance,);
      } else if (isRefObject(externalRef,)) {
        externalRef.current = instance;
      }
    }
  }, /**
   * Only pass a new ref callback to React if we've received a visual element
   * factory. Otherwise we'll be mounting/remounting every time externalRef
   * or other dependencies change.
   */
  [visualElement,],);
}
function useVisualElement(Component33, visualState, props, createVisualElement, ProjectionNodeConstructor,) {
  var _a, _b;
  const {
    visualElement: parent,
  } = useContext(MotionContext,);
  const lazyContext = useContext(LazyContext,);
  const presenceContext = useContext(PresenceContext,);
  const reducedMotionConfig = useContext(MotionConfigContext,).reducedMotion;
  const visualElementRef = useRef3(null,);
  createVisualElement = createVisualElement || lazyContext.renderer;
  if (!visualElementRef.current && createVisualElement) {
    visualElementRef.current = createVisualElement(Component33, {
      visualState,
      parent,
      props,
      presenceContext,
      blockInitialAnimation: presenceContext ? presenceContext.initial === false : false,
      reducedMotionConfig,
    },);
  }
  const visualElement = visualElementRef.current;
  const initialLayoutGroupConfig = useContext(SwitchLayoutGroupContext,);
  if (
    visualElement && !visualElement.projection && ProjectionNodeConstructor &&
    (visualElement.type === 'html' || visualElement.type === 'svg')
  ) {
    createProjectionNode(visualElementRef.current, props, ProjectionNodeConstructor, initialLayoutGroupConfig,);
  }
  const isMounted = useRef3(false,);
  useInsertionEffect(() => {
    if (visualElement && isMounted.current) {
      visualElement.update(props, presenceContext,);
    }
  },);
  const optimisedAppearId = props[optimizedAppearDataAttribute];
  const wantsHandoff = useRef3(
    Boolean(optimisedAppearId,) && !((_a = window.MotionHandoffIsComplete) == null ? void 0 : _a.call(window, optimisedAppearId,)) &&
      ((_b = window.MotionHasOptimisedAnimation) == null ? void 0 : _b.call(window, optimisedAppearId,)),
  );
  useIsomorphicLayoutEffect(() => {
    if (!visualElement) return;
    isMounted.current = true;
    window.MotionIsMounted = true;
    visualElement.updateFeatures();
    microtask.render(visualElement.render,);
    if (wantsHandoff.current && visualElement.animationState) {
      visualElement.animationState.animateChanges();
    }
  },);
  useEffect(() => {
    if (!visualElement) return;
    if (!wantsHandoff.current && visualElement.animationState) {
      visualElement.animationState.animateChanges();
    }
    if (wantsHandoff.current) {
      queueMicrotask(() => {
        var _a2;
        (_a2 = window.MotionHandoffMarkAsComplete) == null ? void 0 : _a2.call(window, optimisedAppearId,);
      },);
      wantsHandoff.current = false;
    }
  },);
  return visualElement;
}
function createProjectionNode(visualElement, props, ProjectionNodeConstructor, initialPromotionConfig,) {
  const {
    layoutId,
    layout: layout2,
    drag: drag2,
    dragConstraints,
    layoutScroll,
    layoutRoot,
    layoutCrossfade,
  } = props;
  visualElement.projection = new ProjectionNodeConstructor(
    visualElement.latestValues,
    props['data-framer-portal-id'] ? void 0 : getClosestProjectingNode(visualElement.parent,),
  );
  visualElement.projection.setOptions({
    layoutId,
    layout: layout2,
    alwaysMeasureLayout: Boolean(drag2,) || dragConstraints && isRefObject(dragConstraints,),
    visualElement,
    /**
     * TODO: Update options in an effect. This could be tricky as it'll be too late
     * to update by the time layout animations run.
     * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,
     * ensuring it gets called if there's no potential layout animations.
     */
    animationType: typeof layout2 === 'string' ? layout2 : 'both',
    initialPromotionConfig,
    crossfade: layoutCrossfade,
    layoutScroll,
    layoutRoot,
  },);
}
function getClosestProjectingNode(visualElement,) {
  if (!visualElement) return void 0;
  return visualElement.options.allowProjection !== false ? visualElement.projection : getClosestProjectingNode(visualElement.parent,);
}
function createRendererMotionComponent({
  preloadedFeatures,
  createVisualElement,
  useRender,
  useVisualState: useVisualState2,
  Component: Component33,
},) {
  preloadedFeatures && loadFeatures(preloadedFeatures,);
  function MotionComponent(props, externalRef,) {
    let MeasureLayout2;
    const configAndProps = {
      ...useContext(MotionConfigContext,),
      ...props,
      layoutId: useLayoutId(props,),
    };
    const {
      isStatic,
    } = configAndProps;
    const context = useCreateMotionContext(props,);
    const visualState = useVisualState2(props, isStatic,);
    if (!isStatic && isBrowser) {
      useStrictMode(configAndProps, preloadedFeatures,);
      const layoutProjection = getProjectionFunctionality(configAndProps,);
      MeasureLayout2 = layoutProjection.MeasureLayout;
      context.visualElement = useVisualElement(
        Component33,
        visualState,
        configAndProps,
        createVisualElement,
        layoutProjection.ProjectionNode,
      );
    }
    return jsxs(MotionContext.Provider, {
      value: context,
      children: [
        MeasureLayout2 && context.visualElement
          ? jsx3(MeasureLayout2, {
            visualElement: context.visualElement,
            ...configAndProps,
          },)
          : null,
        useRender(
          Component33,
          props,
          useMotionRef(visualState, context.visualElement, externalRef,),
          visualState,
          isStatic,
          context.visualElement,
        ),
      ],
    },);
  }
  MotionComponent.displayName = `motion.${
    typeof Component33 === 'string' ? Component33 : `create(${Component33.displayName ?? Component33.name ?? ''})`
  }`;
  const ForwardRefMotionComponent = forwardRef(MotionComponent,);
  ForwardRefMotionComponent[motionComponentSymbol] = Component33;
  return ForwardRefMotionComponent;
}
function useLayoutId({
  layoutId,
},) {
  const layoutGroupId = useContext(LayoutGroupContext,).id;
  return layoutGroupId && layoutId !== void 0 ? layoutGroupId + '-' + layoutId : layoutId;
}
function useStrictMode(configAndProps, preloadedFeatures,) {
  const isStrict = useContext(LazyContext,).strict;
  if (false) {
    const strictMessage =
      'You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.';
    configAndProps.ignoreStrict ? warning(false, strictMessage,) : invariant(false, strictMessage,);
  }
}
function getProjectionFunctionality(props,) {
  const {
    drag: drag2,
    layout: layout2,
  } = featureDefinitions;
  if (!drag2 && !layout2) return {};
  const combined = {
    ...drag2,
    ...layout2,
  };
  return {
    MeasureLayout: (drag2 == null ? void 0 : drag2.isEnabled(props,)) || (layout2 == null ? void 0 : layout2.isEnabled(props,))
      ? combined.MeasureLayout
      : void 0,
    ProjectionNode: combined.ProjectionNode,
  };
}
var scaleCorrectors = {};
function addScaleCorrector(correctors,) {
  for (const key7 in correctors) {
    scaleCorrectors[key7] = correctors[key7];
    if (isCSSVariableName(key7,)) {
      scaleCorrectors[key7].isCSSVariable = true;
    }
  }
}
var translateAlias2 = {
  x: 'translateX',
  y: 'translateY',
  z: 'translateZ',
  transformPerspective: 'perspective',
};
var numTransforms = transformPropOrder.length;
function buildTransform2(latestValues, transform2, transformTemplate2,) {
  let transformString3 = '';
  let transformIsDefault = true;
  for (let i = 0; i < numTransforms; i++) {
    const key7 = transformPropOrder[i];
    const value = latestValues[key7];
    if (value === void 0) continue;
    let valueIsDefault = true;
    if (typeof value === 'number') {
      valueIsDefault = value === (key7.startsWith('scale',) ? 1 : 0);
    } else {
      valueIsDefault = parseFloat(value,) === 0;
    }
    if (!valueIsDefault || transformTemplate2) {
      const valueAsType = getValueAsType(value, numberValueTypes[key7],);
      if (!valueIsDefault) {
        transformIsDefault = false;
        const transformName = translateAlias2[key7] || key7;
        transformString3 += `${transformName}(${valueAsType}) `;
      }
      if (transformTemplate2) {
        transform2[key7] = valueAsType;
      }
    }
  }
  transformString3 = transformString3.trim();
  if (transformTemplate2) {
    transformString3 = transformTemplate2(transform2, transformIsDefault ? '' : transformString3,);
  } else if (transformIsDefault) {
    transformString3 = 'none';
  }
  return transformString3;
}
function resolveMotionValue(value,) {
  return isMotionValue(value,) ? value.get() : value;
}
function getValueState(visualElement,) {
  const state = [{}, {},];
  visualElement == null ? void 0 : visualElement.values.forEach((value, key7,) => {
    state[0][key7] = value.get();
    state[1][key7] = value.getVelocity();
  },);
  return state;
}
function resolveVariantFromProps(props, definition, custom, visualElement,) {
  if (typeof definition === 'function') {
    const [current2, velocity,] = getValueState(visualElement,);
    definition = definition(custom !== void 0 ? custom : props.custom, current2, velocity,);
  }
  if (typeof definition === 'string') {
    definition = props.variants && props.variants[definition];
  }
  if (typeof definition === 'function') {
    const [current2, velocity,] = getValueState(visualElement,);
    definition = definition(custom !== void 0 ? custom : props.custom, current2, velocity,);
  }
  return definition;
}
function makeState(
  {
    scrapeMotionValuesFromProps: scrapeMotionValuesFromProps3,
    createRenderState,
  },
  props,
  context,
  presenceContext,
) {
  const state = {
    latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps3,),
    renderState: createRenderState(),
  };
  return state;
}
var makeUseVisualState = (config) => (props, isStatic,) => {
  const context = useContext(MotionContext,);
  const presenceContext = useContext(PresenceContext,);
  const make = () => makeState(config, props, context, presenceContext,);
  return isStatic ? make() : useConstant(make,);
};
function makeLatestValues(props, context, presenceContext, scrapeMotionValues,) {
  const values = {};
  const motionValues = scrapeMotionValues(props, {},);
  for (const key7 in motionValues) {
    values[key7] = resolveMotionValue(motionValues[key7],);
  }
  let {
    initial,
    animate: animate22,
  } = props;
  const isControllingVariants$1 = isControllingVariants(props,);
  const isVariantNode$1 = isVariantNode(props,);
  if (context && isVariantNode$1 && !isControllingVariants$1 && props.inherit !== false) {
    if (initial === void 0) initial = context.initial;
    if (animate22 === void 0) animate22 = context.animate;
  }
  let isInitialAnimationBlocked = presenceContext ? presenceContext.initial === false : false;
  isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;
  const variantToSet = isInitialAnimationBlocked ? animate22 : initial;
  if (variantToSet && typeof variantToSet !== 'boolean' && !isAnimationControls(variantToSet,)) {
    const list = Array.isArray(variantToSet,) ? variantToSet : [variantToSet,];
    for (let i = 0; i < list.length; i++) {
      const resolved = resolveVariantFromProps(props, list[i],);
      if (resolved) {
        const {
          transitionEnd,
          transition,
          ...target
        } = resolved;
        for (const key7 in target) {
          let valueTarget = target[key7];
          if (Array.isArray(valueTarget,)) {
            const index = isInitialAnimationBlocked ? valueTarget.length - 1 : 0;
            valueTarget = valueTarget[index];
          }
          if (valueTarget !== null) {
            values[key7] = valueTarget;
          }
        }
        for (const key7 in transitionEnd) {
          values[key7] = transitionEnd[key7];
        }
      }
    }
  }
  return values;
}
function createDOMMotionComponentProxy(componentFactory,) {
  if (typeof Proxy === 'undefined') {
    return componentFactory;
  }
  const componentCache = /* @__PURE__ */ new Map();
  const deprecatedFactoryFunction = (...args) => {
    if (false) {
      warnOnce(false, 'motion() is deprecated. Use motion.create() instead.',);
    }
    return componentFactory(...args,);
  };
  return new Proxy(deprecatedFactoryFunction, {
    /**
     * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.
     * The prop name is passed through as `key` and we can use that to generate a `motion`
     * DOM component with that name.
     */
    get: (_target, key7,) => {
      if (key7 === 'create') return componentFactory;
      if (!componentCache.has(key7,)) {
        componentCache.set(key7, componentFactory(key7,),);
      }
      return componentCache.get(key7,);
    },
  },);
}
function isForcedMotionValue(key7, {
  layout: layout2,
  layoutId,
},) {
  return transformProps.has(key7,) || key7.startsWith('origin',) ||
    (layout2 || layoutId !== void 0) && (!!scaleCorrectors[key7] || key7 === 'opacity');
}
function buildHTMLStyles(state, latestValues, transformTemplate2,) {
  const {
    style: style2,
    vars,
    transformOrigin,
  } = state;
  let hasTransform2 = false;
  let hasTransformOrigin = false;
  for (const key7 in latestValues) {
    const value = latestValues[key7];
    if (transformProps.has(key7,)) {
      hasTransform2 = true;
      continue;
    } else if (isCSSVariableName(key7,)) {
      vars[key7] = value;
      continue;
    } else {
      const valueAsType = getValueAsType(value, numberValueTypes[key7],);
      if (key7.startsWith('origin',)) {
        hasTransformOrigin = true;
        transformOrigin[key7] = valueAsType;
      } else {
        style2[key7] = valueAsType;
      }
    }
  }
  if (!latestValues.transform) {
    if (hasTransform2 || transformTemplate2) {
      style2.transform = buildTransform2(latestValues, state.transform, transformTemplate2,);
    } else if (style2.transform) {
      style2.transform = 'none';
    }
  }
  if (hasTransformOrigin) {
    const {
      originX = '50%',
      originY = '50%',
      originZ = 0,
    } = transformOrigin;
    style2.transformOrigin = `${originX} ${originY} ${originZ}`;
  }
}
var createHtmlRenderState = () => ({
  style: {},
  transform: {},
  transformOrigin: {},
  vars: {},
});
function copyRawValuesOnly(target, source, props,) {
  for (const key7 in source) {
    if (!isMotionValue(source[key7],) && !isForcedMotionValue(key7, props,)) {
      target[key7] = source[key7];
    }
  }
}
function useInitialMotionValues({
  transformTemplate: transformTemplate2,
}, visualState,) {
  return useMemo2(() => {
    const state = createHtmlRenderState();
    buildHTMLStyles(state, visualState, transformTemplate2,);
    return Object.assign({}, state.vars, state.style,);
  }, [visualState,],);
}
function useStyle(props, visualState,) {
  const styleProp = props.style || {};
  const style2 = {};
  copyRawValuesOnly(style2, styleProp, props,);
  Object.assign(style2, useInitialMotionValues(props, visualState,),);
  return style2;
}
function useHTMLProps(props, visualState,) {
  const htmlProps = {};
  const style2 = useStyle(props, visualState,);
  if (props.drag && props.dragListener !== false) {
    htmlProps.draggable = false;
    style2.userSelect = style2.WebkitUserSelect = style2.WebkitTouchCallout = 'none';
    style2.touchAction = props.drag === true ? 'none' : `pan-${props.drag === 'x' ? 'y' : 'x'}`;
  }
  if (props.tabIndex === void 0 && (props.onTap || props.onTapStart || props.whileTap)) {
    htmlProps.tabIndex = 0;
  }
  htmlProps.style = style2;
  return htmlProps;
}
var dashKeys = {
  offset: 'stroke-dashoffset',
  array: 'stroke-dasharray',
};
var camelKeys = {
  offset: 'strokeDashoffset',
  array: 'strokeDasharray',
};
function buildSVGPath(attrs, length, spacing = 1, offset = 0, useDashCase = true,) {
  attrs.pathLength = 1;
  const keys23 = useDashCase ? dashKeys : camelKeys;
  attrs[keys23.offset] = px.transform(-offset,);
  const pathLength = px.transform(length,);
  const pathSpacing = px.transform(spacing,);
  attrs[keys23.array] = `${pathLength} ${pathSpacing}`;
}
function buildSVGAttrs(
  state,
  {
    attrX,
    attrY,
    attrScale,
    pathLength,
    pathSpacing = 1,
    pathOffset = 0,
    // This is object creation, which we try to avoid per-frame.
    ...latest
  },
  isSVGTag2,
  transformTemplate2,
  styleProp,
) {
  buildHTMLStyles(state, latest, transformTemplate2,);
  if (isSVGTag2) {
    if (state.style.viewBox) {
      state.attrs.viewBox = state.style.viewBox;
    }
    return;
  }
  state.attrs = state.style;
  state.style = {};
  const {
    attrs,
    style: style2,
  } = state;
  if (attrs.transform) {
    style2.transform = attrs.transform;
    delete attrs.transform;
  }
  if (style2.transform || attrs.transformOrigin) {
    style2.transformOrigin = attrs.transformOrigin ?? '50% 50%';
    delete attrs.transformOrigin;
  }
  if (style2.transform) {
    style2.transformBox = (styleProp == null ? void 0 : styleProp.transformBox) ?? 'fill-box';
    delete attrs.transformBox;
  }
  if (attrX !== void 0) attrs.x = attrX;
  if (attrY !== void 0) attrs.y = attrY;
  if (attrScale !== void 0) attrs.scale = attrScale;
  if (pathLength !== void 0) {
    buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false,);
  }
}
var createSvgRenderState = () => ({
  ...createHtmlRenderState(),
  attrs: {},
});
var isSVGTag = (tag) => typeof tag === 'string' && tag.toLowerCase() === 'svg';
function useSVGProps(props, visualState, _isStatic, Component33,) {
  const visualProps = useMemo2(() => {
    const state = createSvgRenderState();
    buildSVGAttrs(state, visualState, isSVGTag(Component33,), props.transformTemplate, props.style,);
    return {
      ...state.attrs,
      style: {
        ...state.style,
      },
    };
  }, [visualState,],);
  if (props.style) {
    const rawStyles = {};
    copyRawValuesOnly(rawStyles, props.style, props,);
    visualProps.style = {
      ...rawStyles,
      ...visualProps.style,
    };
  }
  return visualProps;
}
var lowercaseSVGElements = [
  'animate',
  'circle',
  'defs',
  'desc',
  'ellipse',
  'g',
  'image',
  'line',
  'filter',
  'marker',
  'mask',
  'metadata',
  'path',
  'pattern',
  'polygon',
  'polyline',
  'rect',
  'stop',
  'switch',
  'symbol',
  'svg',
  'text',
  'tspan',
  'use',
  'view',
];
function isSVGComponent(Component33,) {
  if (
    /**
     * If it's not a string, it's a custom React component. Currently we only support
     * HTML custom React components.
     */
    typeof Component33 !== 'string' ||
    /**
     * If it contains a dash, the element is a custom HTML webcomponent.
     */
    Component33.includes('-',)
  ) {
    return false;
  } else if (
    /**
     * If it's in our list of lowercase SVG tags, it's an SVG component
     */
    lowercaseSVGElements.indexOf(Component33,) > -1 ||
    /**
     * If it contains a capital letter, it's an SVG component
     */
    /[A-Z]/u.test(Component33,)
  ) {
    return true;
  }
  return false;
}
function createUseRender(forwardMotionProps = false,) {
  const useRender = (Component33, props, ref, {
    latestValues,
  }, isStatic,) => {
    const useVisualProps = isSVGComponent(Component33,) ? useSVGProps : useHTMLProps;
    const visualProps = useVisualProps(props, latestValues, isStatic, Component33,);
    const filteredProps2 = filterProps(props, typeof Component33 === 'string', forwardMotionProps,);
    const elementProps = Component33 !== Fragment
      ? {
        ...filteredProps2,
        ...visualProps,
        ref,
      }
      : {};
    const {
      children,
    } = props;
    const renderedChildren = useMemo2(() => isMotionValue(children,) ? children.get() : children, [children,],);
    return createElement(Component33, {
      ...elementProps,
      children: renderedChildren,
    },);
  };
  return useRender;
}
function scrapeMotionValuesFromProps(props, prevProps, visualElement,) {
  var _a;
  const {
    style: style2,
  } = props;
  const newValues = {};
  for (const key7 in style2) {
    if (
      isMotionValue(style2[key7],) || prevProps.style && isMotionValue(prevProps.style[key7],) || isForcedMotionValue(key7, props,) ||
      ((_a = visualElement == null ? void 0 : visualElement.getValue(key7,)) == null ? void 0 : _a.liveStyle) !== void 0
    ) {
      newValues[key7] = style2[key7];
    }
  }
  return newValues;
}
var htmlMotionConfig = {
  useVisualState: makeUseVisualState({
    scrapeMotionValuesFromProps,
    createRenderState: createHtmlRenderState,
  },),
};
function scrapeMotionValuesFromProps2(props, prevProps, visualElement,) {
  const newValues = scrapeMotionValuesFromProps(props, prevProps, visualElement,);
  for (const key7 in props) {
    if (isMotionValue(props[key7],) || isMotionValue(prevProps[key7],)) {
      const targetKey = transformPropOrder.indexOf(key7,) !== -1 ? 'attr' + key7.charAt(0,).toUpperCase() + key7.substring(1,) : key7;
      newValues[targetKey] = props[key7];
    }
  }
  return newValues;
}
var svgMotionConfig = {
  useVisualState: makeUseVisualState({
    scrapeMotionValuesFromProps: scrapeMotionValuesFromProps2,
    createRenderState: createSvgRenderState,
  },),
};
function createMotionComponentFactory(preloadedFeatures, createVisualElement,) {
  return function createMotionComponent2(Component33, {
    forwardMotionProps,
  } = {
    forwardMotionProps: false,
  },) {
    const baseConfig = isSVGComponent(Component33,) ? svgMotionConfig : htmlMotionConfig;
    const config = {
      ...baseConfig,
      preloadedFeatures,
      useRender: createUseRender(forwardMotionProps,),
      createVisualElement,
      Component: Component33,
    };
    return createRendererMotionComponent(config,);
  };
}
var createMinimalMotionComponent = /* @__PURE__ */ createMotionComponentFactory();
var m = /* @__PURE__ */ createDOMMotionComponentProxy(createMinimalMotionComponent,);
function resolveVariant(visualElement, definition, custom,) {
  const props = visualElement.getProps();
  return resolveVariantFromProps(props, definition, custom !== void 0 ? custom : props.custom, visualElement,);
}
var isKeyframesTarget = (v) => {
  return Array.isArray(v,);
};
function setMotionValue(visualElement, key7, value,) {
  if (visualElement.hasValue(key7,)) {
    visualElement.getValue(key7,).set(value,);
  } else {
    visualElement.addValue(key7, motionValue(value,),);
  }
}
function resolveFinalValueInKeyframes(v,) {
  return isKeyframesTarget(v,) ? v[v.length - 1] || 0 : v;
}
function setTarget(visualElement, definition,) {
  const resolved = resolveVariant(visualElement, definition,);
  let {
    transitionEnd = {},
    transition = {},
    ...target
  } = resolved || {};
  target = {
    ...target,
    ...transitionEnd,
  };
  for (const key7 in target) {
    const value = resolveFinalValueInKeyframes(target[key7],);
    setMotionValue(visualElement, key7, value,);
  }
}
function isWillChangeMotionValue(value,) {
  return Boolean(isMotionValue(value,) && value.add,);
}
function addValueToWillChange(visualElement, key7,) {
  const willChange = visualElement.getValue('willChange',);
  if (isWillChangeMotionValue(willChange,)) {
    return willChange.add(key7,);
  } else if (!willChange && MotionGlobalConfig.WillChange) {
    const newWillChange = new MotionGlobalConfig.WillChange('auto',);
    visualElement.addValue('willChange', newWillChange,);
    newWillChange.add(key7,);
  }
}
function getOptimisedAppearId(visualElement,) {
  return visualElement.props[optimizedAppearDataAttribute];
}
var isNotNull2 = (value) => value !== null;
function getFinalKeyframe2(keyframes2, {
  repeat,
  repeatType = 'loop',
}, finalKeyframe,) {
  const resolvedKeyframes = keyframes2.filter(isNotNull2,);
  const index = repeat && repeatType !== 'loop' && repeat % 2 === 1 ? 0 : resolvedKeyframes.length - 1;
  return !index || finalKeyframe === void 0 ? resolvedKeyframes[index] : finalKeyframe;
}
var underDampedSpring = {
  type: 'spring',
  stiffness: 500,
  damping: 25,
  restSpeed: 10,
};
var criticallyDampedSpring = (target) => ({
  type: 'spring',
  stiffness: 550,
  damping: target === 0 ? 2 * Math.sqrt(550,) : 30,
  restSpeed: 10,
});
var keyframesTransition = {
  type: 'keyframes',
  duration: 0.8,
};
var ease = {
  type: 'keyframes',
  ease: [0.25, 0.1, 0.35, 1,],
  duration: 0.3,
};
var getDefaultTransition = (valueKey, {
  keyframes: keyframes2,
},) => {
  if (keyframes2.length > 2) {
    return keyframesTransition;
  } else if (transformProps.has(valueKey,)) {
    return valueKey.startsWith('scale',) ? criticallyDampedSpring(keyframes2[1],) : underDampedSpring;
  }
  return ease;
};
function isTransitionDefined({
  when,
  delay: _delay,
  delayChildren,
  staggerChildren,
  staggerDirection,
  repeat,
  repeatType,
  repeatDelay,
  from,
  elapsed,
  ...transition
},) {
  return !!Object.keys(transition,).length;
}
var animateMotionValue = (name, value, target, transition = {}, element, isHandoff,) => (onComplete) => {
  const valueTransition = getValueTransition(transition, name,) || {};
  const delay2 = valueTransition.delay || transition.delay || 0;
  let {
    elapsed = 0,
  } = transition;
  elapsed = elapsed - secondsToMilliseconds(delay2,);
  const options = {
    keyframes: Array.isArray(target,) ? target : [null, target,],
    ease: 'easeOut',
    velocity: value.getVelocity(),
    ...valueTransition,
    delay: -elapsed,
    onUpdate: (v) => {
      value.set(v,);
      valueTransition.onUpdate && valueTransition.onUpdate(v,);
    },
    onComplete: () => {
      onComplete();
      valueTransition.onComplete && valueTransition.onComplete();
    },
    name,
    motionValue: value,
    element: isHandoff ? void 0 : element,
  };
  if (!isTransitionDefined(valueTransition,)) {
    Object.assign(options, getDefaultTransition(name, options,),);
  }
  options.duration && (options.duration = secondsToMilliseconds(options.duration,));
  options.repeatDelay && (options.repeatDelay = secondsToMilliseconds(options.repeatDelay,));
  if (options.from !== void 0) {
    options.keyframes[0] = options.from;
  }
  let shouldSkip = false;
  if (options.type === false || options.duration === 0 && !options.repeatDelay) {
    options.duration = 0;
    if (options.delay === 0) {
      shouldSkip = true;
    }
  }
  if (MotionGlobalConfig.instantAnimations || MotionGlobalConfig.skipAnimations) {
    shouldSkip = true;
    options.duration = 0;
    options.delay = 0;
  }
  options.allowFlatten = !valueTransition.type && !valueTransition.ease;
  if (shouldSkip && !isHandoff && value.get() !== void 0) {
    const finalKeyframe = getFinalKeyframe2(options.keyframes, valueTransition,);
    if (finalKeyframe !== void 0) {
      frame.update(() => {
        options.onUpdate(finalKeyframe,);
        options.onComplete();
      },);
      return;
    }
  }
  return valueTransition.isSync ? new JSAnimation(options,) : new AsyncMotionValueAnimation(options,);
};
function shouldBlockAnimation({
  protectedKeys,
  needsAnimating,
}, key7,) {
  const shouldBlock = protectedKeys.hasOwnProperty(key7,) && needsAnimating[key7] !== true;
  needsAnimating[key7] = false;
  return shouldBlock;
}
function animateTarget(visualElement, targetAndTransition, {
  delay: delay2 = 0,
  transitionOverride,
  type,
} = {},) {
  let {
    transition = visualElement.getDefaultTransition(),
    transitionEnd,
    ...target
  } = targetAndTransition;
  if (transitionOverride) transition = transitionOverride;
  const animations2 = [];
  const animationTypeState = type && visualElement.animationState && visualElement.animationState.getState()[type];
  for (const key7 in target) {
    const value = visualElement.getValue(key7, visualElement.latestValues[key7] ?? null,);
    const valueTarget = target[key7];
    if (valueTarget === void 0 || animationTypeState && shouldBlockAnimation(animationTypeState, key7,)) {
      continue;
    }
    const valueTransition = {
      delay: delay2,
      ...getValueTransition(transition || {}, key7,),
    };
    const currentValue = value.get();
    if (
      currentValue !== void 0 && !value.isAnimating && !Array.isArray(valueTarget,) && valueTarget === currentValue &&
      !valueTransition.velocity
    ) {
      continue;
    }
    let isHandoff = false;
    if (window.MotionHandoffAnimation) {
      const appearId = getOptimisedAppearId(visualElement,);
      if (appearId) {
        const startTime = window.MotionHandoffAnimation(appearId, key7, frame,);
        if (startTime !== null) {
          valueTransition.startTime = startTime;
          isHandoff = true;
        }
      }
    }
    addValueToWillChange(visualElement, key7,);
    value.start(animateMotionValue(
      key7,
      value,
      valueTarget,
      visualElement.shouldReduceMotion && positionalKeys.has(key7,)
        ? {
          type: false,
        }
        : valueTransition,
      visualElement,
      isHandoff,
    ),);
    const animation = value.animation;
    if (animation) {
      animations2.push(animation,);
    }
  }
  if (transitionEnd) {
    Promise.all(animations2,).then(() => {
      frame.update(() => {
        transitionEnd && setTarget(visualElement, transitionEnd,);
      },);
    },);
  }
  return animations2;
}
function animateVariant(visualElement, variant, options = {},) {
  var _a;
  const resolved = resolveVariant(
    visualElement,
    variant,
    options.type === 'exit' ? (_a = visualElement.presenceContext) == null ? void 0 : _a.custom : void 0,
  );
  let {
    transition = visualElement.getDefaultTransition() || {},
  } = resolved || {};
  if (options.transitionOverride) {
    transition = options.transitionOverride;
  }
  const getAnimation = resolved ? () => Promise.all(animateTarget(visualElement, resolved, options,),) : () => Promise.resolve();
  const getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size
    ? (forwardDelay = 0,) => {
      const {
        delayChildren = 0,
        staggerChildren,
        staggerDirection,
      } = transition;
      return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options,);
    }
    : () => Promise.resolve();
  const {
    when,
  } = transition;
  if (when) {
    const [first, last,] = when === 'beforeChildren' ? [getAnimation, getChildAnimations,] : [getChildAnimations, getAnimation,];
    return first().then(() => last());
  } else {
    return Promise.all([getAnimation(), getChildAnimations(options.delay,),],);
  }
}
function animateChildren(visualElement, variant, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options,) {
  const animations2 = [];
  const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;
  const generateStaggerDuration = staggerDirection === 1
    ? (i = 0,) => i * staggerChildren
    : (i = 0,) => maxStaggerDuration - i * staggerChildren;
  Array.from(visualElement.variantChildren,).sort(sortByTreeOrder,).forEach((child, i,) => {
    child.notify('AnimationStart', variant,);
    animations2.push(
      animateVariant(child, variant, {
        ...options,
        delay: delayChildren + generateStaggerDuration(i,),
      },).then(() => child.notify('AnimationComplete', variant,)),
    );
  },);
  return Promise.all(animations2,);
}
function sortByTreeOrder(a, b,) {
  return a.sortNodePosition(b,);
}
function animateVisualElement(visualElement, definition, options = {},) {
  visualElement.notify('AnimationStart', definition,);
  let animation;
  if (Array.isArray(definition,)) {
    const animations2 = definition.map((variant) => animateVariant(visualElement, variant, options,));
    animation = Promise.all(animations2,);
  } else if (typeof definition === 'string') {
    animation = animateVariant(visualElement, definition, options,);
  } else {
    const resolvedDefinition = typeof definition === 'function' ? resolveVariant(visualElement, definition, options.custom,) : definition;
    animation = Promise.all(animateTarget(visualElement, resolvedDefinition, options,),);
  }
  return animation.then(() => {
    visualElement.notify('AnimationComplete', definition,);
  },);
}
function shallowCompare(next2, prev,) {
  if (!Array.isArray(prev,)) return false;
  const prevLength = prev.length;
  if (prevLength !== next2.length) return false;
  for (let i = 0; i < prevLength; i++) {
    if (prev[i] !== next2[i]) return false;
  }
  return true;
}
var numVariantProps = variantProps.length;
function getVariantContext(visualElement,) {
  if (!visualElement) return void 0;
  if (!visualElement.isControllingVariants) {
    const context2 = visualElement.parent ? getVariantContext(visualElement.parent,) || {} : {};
    if (visualElement.props.initial !== void 0) {
      context2.initial = visualElement.props.initial;
    }
    return context2;
  }
  const context = {};
  for (let i = 0; i < numVariantProps; i++) {
    const name = variantProps[i];
    const prop = visualElement.props[name];
    if (isVariantLabel(prop,) || prop === false) {
      context[name] = prop;
    }
  }
  return context;
}
var reversePriorityOrder = [...variantPriorityOrder,].reverse();
var numAnimationTypes = variantPriorityOrder.length;
function animateList(visualElement,) {
  return (animations2) =>
    Promise.all(animations2.map(({
      animation,
      options,
    },) => animateVisualElement(visualElement, animation, options,)),);
}
function createAnimationState(visualElement,) {
  let animate22 = animateList(visualElement,);
  let state = createState();
  let isInitialRender = true;
  const buildResolvedTypeValues = (type) => (acc, definition,) => {
    var _a;
    const resolved = resolveVariant(
      visualElement,
      definition,
      type === 'exit' ? (_a = visualElement.presenceContext) == null ? void 0 : _a.custom : void 0,
    );
    if (resolved) {
      const {
        transition,
        transitionEnd,
        ...target
      } = resolved;
      acc = {
        ...acc,
        ...target,
        ...transitionEnd,
      };
    }
    return acc;
  };
  function setAnimateFunction(makeAnimator,) {
    animate22 = makeAnimator(visualElement,);
  }
  function animateChanges(changedActiveType,) {
    const {
      props,
    } = visualElement;
    const context = getVariantContext(visualElement.parent,) || {};
    const animations2 = [];
    const removedKeys = /* @__PURE__ */ new Set();
    let encounteredKeys = {};
    let removedVariantIndex = Infinity;
    for (let i = 0; i < numAnimationTypes; i++) {
      const type = reversePriorityOrder[i];
      const typeState = state[type];
      const prop = props[type] !== void 0 ? props[type] : context[type];
      const propIsVariant = isVariantLabel(prop,);
      const activeDelta = type === changedActiveType ? typeState.isActive : null;
      if (activeDelta === false) removedVariantIndex = i;
      let isInherited = prop === context[type] && prop !== props[type] && propIsVariant;
      if (isInherited && isInitialRender && visualElement.manuallyAnimateOnMount) {
        isInherited = false;
      }
      typeState.protectedKeys = {
        ...encounteredKeys,
      };
      if (
        // If it isn't active and hasn't *just* been set as inactive
        !typeState.isActive && activeDelta === null ||
        // If we didn't and don't have any defined prop for this animation type
        !prop && !typeState.prevProp ||
        // Or if the prop doesn't define an animation
        isAnimationControls(prop,) || typeof prop === 'boolean'
      ) {
        continue;
      }
      const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop,);
      let shouldAnimateType = variantDidChange ||
        // If we're making this variant active, we want to always make it active
        type === changedActiveType && typeState.isActive && !isInherited && propIsVariant ||
        // If we removed a higher-priority variant (i is in reverse order)
        i > removedVariantIndex && propIsVariant;
      let handledRemovedValues = false;
      const definitionList = Array.isArray(prop,) ? prop : [prop,];
      let resolvedValues = definitionList.reduce(buildResolvedTypeValues(type,), {},);
      if (activeDelta === false) resolvedValues = {};
      const {
        prevResolvedValues = {},
      } = typeState;
      const allKeys = {
        ...prevResolvedValues,
        ...resolvedValues,
      };
      const markToAnimate = (key7) => {
        shouldAnimateType = true;
        if (removedKeys.has(key7,)) {
          handledRemovedValues = true;
          removedKeys.delete(key7,);
        }
        typeState.needsAnimating[key7] = true;
        const motionValue2 = visualElement.getValue(key7,);
        if (motionValue2) motionValue2.liveStyle = false;
      };
      for (const key7 in allKeys) {
        const next2 = resolvedValues[key7];
        const prev = prevResolvedValues[key7];
        if (encounteredKeys.hasOwnProperty(key7,)) continue;
        let valueHasChanged = false;
        if (isKeyframesTarget(next2,) && isKeyframesTarget(prev,)) {
          valueHasChanged = !shallowCompare(next2, prev,);
        } else {
          valueHasChanged = next2 !== prev;
        }
        if (valueHasChanged) {
          if (next2 !== void 0 && next2 !== null) {
            markToAnimate(key7,);
          } else {
            removedKeys.add(key7,);
          }
        } else if (next2 !== void 0 && removedKeys.has(key7,)) {
          markToAnimate(key7,);
        } else {
          typeState.protectedKeys[key7] = true;
        }
      }
      typeState.prevProp = prop;
      typeState.prevResolvedValues = resolvedValues;
      if (typeState.isActive) {
        encounteredKeys = {
          ...encounteredKeys,
          ...resolvedValues,
        };
      }
      if (isInitialRender && visualElement.blockInitialAnimation) {
        shouldAnimateType = false;
      }
      const willAnimateViaParent = isInherited && variantDidChange;
      const needsAnimating = !willAnimateViaParent || handledRemovedValues;
      if (shouldAnimateType && needsAnimating) {
        animations2.push(...definitionList.map((animation) => ({
          animation,
          options: {
            type,
          },
        })),);
      }
    }
    if (removedKeys.size) {
      const fallbackAnimation = {};
      if (typeof props.initial !== 'boolean') {
        const initialTransition = resolveVariant(visualElement, Array.isArray(props.initial,) ? props.initial[0] : props.initial,);
        if (initialTransition && initialTransition.transition) {
          fallbackAnimation.transition = initialTransition.transition;
        }
      }
      removedKeys.forEach((key7) => {
        const fallbackTarget = visualElement.getBaseTarget(key7,);
        const motionValue2 = visualElement.getValue(key7,);
        if (motionValue2) motionValue2.liveStyle = true;
        fallbackAnimation[key7] = fallbackTarget ?? null;
      },);
      animations2.push({
        animation: fallbackAnimation,
      },);
    }
    let shouldAnimate = Boolean(animations2.length,);
    if (isInitialRender && (props.initial === false || props.initial === props.animate) && !visualElement.manuallyAnimateOnMount) {
      shouldAnimate = false;
    }
    isInitialRender = false;
    return shouldAnimate ? animate22(animations2,) : Promise.resolve();
  }
  function setActive(type, isActive,) {
    var _a;
    if (state[type].isActive === isActive) return Promise.resolve();
    (_a = visualElement.variantChildren) == null ? void 0 : _a.forEach((child) => {
      var _a2;
      return (_a2 = child.animationState) == null ? void 0 : _a2.setActive(type, isActive,);
    },);
    state[type].isActive = isActive;
    const animations2 = animateChanges(type,);
    for (const key7 in state) {
      state[key7].protectedKeys = {};
    }
    return animations2;
  }
  return {
    animateChanges,
    setActive,
    setAnimateFunction,
    getState: () => state,
    reset: () => {
      state = createState();
      isInitialRender = true;
    },
  };
}
function checkVariantsDidChange(prev, next2,) {
  if (typeof next2 === 'string') {
    return next2 !== prev;
  } else if (Array.isArray(next2,)) {
    return !shallowCompare(next2, prev,);
  }
  return false;
}
function createTypeState(isActive = false,) {
  return {
    isActive,
    protectedKeys: {},
    needsAnimating: {},
    prevResolvedValues: {},
  };
}
function createState() {
  return {
    animate: createTypeState(true,),
    whileInView: createTypeState(),
    whileHover: createTypeState(),
    whileTap: createTypeState(),
    whileDrag: createTypeState(),
    whileFocus: createTypeState(),
    exit: createTypeState(),
  };
}
var Feature = class {
  constructor(node,) {
    this.isMounted = false;
    this.node = node;
  }
  update() {}
};
var AnimationFeature = class extends Feature {
  /**
   * We dynamically generate the AnimationState manager as it contains a reference
   * to the underlying animation library. We only want to load that if we load this,
   * so people can optionally code split it out using the `m` component.
   */
  constructor(node,) {
    super(node,);
    node.animationState || (node.animationState = createAnimationState(node,));
  }
  updateAnimationControlsSubscription() {
    const {
      animate: animate22,
    } = this.node.getProps();
    if (isAnimationControls(animate22,)) {
      this.unmountControls = animate22.subscribe(this.node,);
    }
  }
  /**
   * Subscribe any provided AnimationControls to the component's VisualElement
   */
  mount() {
    this.updateAnimationControlsSubscription();
  }
  update() {
    const {
      animate: animate22,
    } = this.node.getProps();
    const {
      animate: prevAnimate,
    } = this.node.prevProps || {};
    if (animate22 !== prevAnimate) {
      this.updateAnimationControlsSubscription();
    }
  }
  unmount() {
    var _a;
    this.node.animationState.reset();
    (_a = this.unmountControls) == null ? void 0 : _a.call(this,);
  }
};
var id = 0;
var ExitAnimationFeature = class extends Feature {
  constructor() {
    super(...arguments,);
    this.id = id++;
  }
  update() {
    if (!this.node.presenceContext) return;
    const {
      isPresent: isPresent2,
      onExitComplete,
    } = this.node.presenceContext;
    const {
      isPresent: prevIsPresent,
    } = this.node.prevPresenceContext || {};
    if (!this.node.animationState || isPresent2 === prevIsPresent) {
      return;
    }
    const exitAnimation = this.node.animationState.setActive('exit', !isPresent2,);
    if (onExitComplete && !isPresent2) {
      exitAnimation.then(() => {
        onExitComplete(this.id,);
      },);
    }
  }
  mount() {
    const {
      register,
      onExitComplete,
    } = this.node.presenceContext || {};
    if (onExitComplete) {
      onExitComplete(this.id,);
    }
    if (register) {
      this.unmount = register(this.id,);
    }
  }
  unmount() {}
};
var animations = {
  animation: {
    Feature: AnimationFeature,
  },
  exit: {
    Feature: ExitAnimationFeature,
  },
};
function extractEventInfo(event,) {
  return {
    point: {
      x: event.pageX,
      y: event.pageY,
    },
  };
}
var addPointerInfo = (handler) => {
  return (event) => isPrimaryPointer(event,) && handler(event, extractEventInfo(event,),);
};
function addDomEvent(target, eventName, handler, options = {
  passive: true,
},) {
  target.addEventListener(eventName, handler, options,);
  return () => target.removeEventListener(eventName, handler,);
}
function addPointerEvent(target, eventName, handler, options,) {
  return addDomEvent(target, eventName, addPointerInfo(handler,), options,);
}
var SCALE_PRECISION = 1e-4;
var SCALE_MIN = 1 - SCALE_PRECISION;
var SCALE_MAX = 1 + SCALE_PRECISION;
var TRANSLATE_PRECISION = 0.01;
var TRANSLATE_MIN = 0 - TRANSLATE_PRECISION;
var TRANSLATE_MAX = 0 + TRANSLATE_PRECISION;
function calcLength(axis,) {
  return axis.max - axis.min;
}
function isNear(value, target, maxDistance,) {
  return Math.abs(value - target,) <= maxDistance;
}
function calcAxisDelta(delta, source, target, origin = 0.5,) {
  delta.origin = origin;
  delta.originPoint = mixNumber(source.min, source.max, delta.origin,);
  delta.scale = calcLength(target,) / calcLength(source,);
  delta.translate = mixNumber(target.min, target.max, delta.origin,) - delta.originPoint;
  if (delta.scale >= SCALE_MIN && delta.scale <= SCALE_MAX || isNaN(delta.scale,)) {
    delta.scale = 1;
  }
  if (delta.translate >= TRANSLATE_MIN && delta.translate <= TRANSLATE_MAX || isNaN(delta.translate,)) {
    delta.translate = 0;
  }
}
function calcBoxDelta(delta, source, target, origin,) {
  calcAxisDelta(delta.x, source.x, target.x, origin ? origin.originX : void 0,);
  calcAxisDelta(delta.y, source.y, target.y, origin ? origin.originY : void 0,);
}
function calcRelativeAxis(target, relative2, parent,) {
  target.min = parent.min + relative2.min;
  target.max = target.min + calcLength(relative2,);
}
function calcRelativeBox(target, relative2, parent,) {
  calcRelativeAxis(target.x, relative2.x, parent.x,);
  calcRelativeAxis(target.y, relative2.y, parent.y,);
}
function calcRelativeAxisPosition(target, layout2, parent,) {
  target.min = layout2.min - parent.min;
  target.max = target.min + calcLength(layout2,);
}
function calcRelativePosition(target, layout2, parent,) {
  calcRelativeAxisPosition(target.x, layout2.x, parent.x,);
  calcRelativeAxisPosition(target.y, layout2.y, parent.y,);
}
var createAxisDelta = () => ({
  translate: 0,
  scale: 1,
  origin: 0,
  originPoint: 0,
});
var createDelta = () => ({
  x: createAxisDelta(),
  y: createAxisDelta(),
});
var createAxis = () => ({
  min: 0,
  max: 0,
});
var createBox = () => ({
  x: createAxis(),
  y: createAxis(),
});
var distance = (a, b,) => Math.abs(a - b,);
function distance2D(a, b,) {
  const xDelta = distance(a.x, b.x,);
  const yDelta = distance(a.y, b.y,);
  return Math.sqrt(xDelta ** 2 + yDelta ** 2,);
}
var compareByDepth = (a, b,) => a.depth - b.depth;
var FlatTree = class {
  constructor() {
    this.children = [];
    this.isDirty = false;
  }
  add(child,) {
    addUniqueItem(this.children, child,);
    this.isDirty = true;
  }
  remove(child,) {
    removeItem(this.children, child,);
    this.isDirty = true;
  }
  forEach(callback,) {
    this.isDirty && this.children.sort(compareByDepth,);
    this.isDirty = false;
    this.children.forEach(callback,);
  }
};
function delay(callback, timeout,) {
  const start2 = time.now();
  const checkElapsed = ({
    timestamp,
  },) => {
    const elapsed = timestamp - start2;
    if (elapsed >= timeout) {
      cancelFrame(checkElapsed,);
      callback(elapsed - timeout,);
    }
  };
  frame.setup(checkElapsed, true,);
  return () => cancelFrame(checkElapsed,);
}
var visualElementStore = /* @__PURE__ */ new WeakMap();
var prefersReducedMotion = {
  current: null,
};
var hasReducedMotionListener = {
  current: false,
};
function initPrefersReducedMotion() {
  hasReducedMotionListener.current = true;
  if (!isBrowser) return;
  if (window.matchMedia) {
    const motionMediaQuery = window.matchMedia('(prefers-reduced-motion)',);
    const setReducedMotionPreferences = () => prefersReducedMotion.current = motionMediaQuery.matches;
    motionMediaQuery.addListener(setReducedMotionPreferences,);
    setReducedMotionPreferences();
  } else {
    prefersReducedMotion.current = false;
  }
}
function updateMotionValuesFromProps(element, next2, prev,) {
  for (const key7 in next2) {
    const nextValue = next2[key7];
    const prevValue = prev[key7];
    if (isMotionValue(nextValue,)) {
      element.addValue(key7, nextValue,);
    } else if (isMotionValue(prevValue,)) {
      element.addValue(
        key7,
        motionValue(nextValue, {
          owner: element,
        },),
      );
    } else if (prevValue !== nextValue) {
      if (element.hasValue(key7,)) {
        const existingValue = element.getValue(key7,);
        if (existingValue.liveStyle === true) {
          existingValue.jump(nextValue,);
        } else if (!existingValue.hasAnimated) {
          existingValue.set(nextValue,);
        }
      } else {
        const latestValue = element.getStaticValue(key7,);
        element.addValue(
          key7,
          motionValue(latestValue !== void 0 ? latestValue : nextValue, {
            owner: element,
          },),
        );
      }
    }
  }
  for (const key7 in prev) {
    if (next2[key7] === void 0) element.removeValue(key7,);
  }
  return next2;
}
var propEventHandlers = [
  'AnimationStart',
  'AnimationComplete',
  'Update',
  'BeforeLayoutMeasure',
  'LayoutMeasure',
  'LayoutAnimationStart',
  'LayoutAnimationComplete',
];
var VisualElement = class {
  /**
   * This method takes React props and returns found MotionValues. For example, HTML
   * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.
   *
   * This isn't an abstract method as it needs calling in the constructor, but it is
   * intended to be one.
   */
  scrapeMotionValuesFromProps(_props, _prevProps, _visualElement,) {
    return {};
  }
  constructor({
    parent,
    props,
    presenceContext,
    reducedMotionConfig,
    blockInitialAnimation,
    visualState,
  }, options = {},) {
    this.current = null;
    this.children = /* @__PURE__ */ new Set();
    this.isVariantNode = false;
    this.isControllingVariants = false;
    this.shouldReduceMotion = null;
    this.values = /* @__PURE__ */ new Map();
    this.KeyframeResolver = KeyframeResolver;
    this.features = {};
    this.valueSubscriptions = /* @__PURE__ */ new Map();
    this.prevMotionValues = {};
    this.events = {};
    this.propEventSubscriptions = {};
    this.notifyUpdate = () => this.notify('Update', this.latestValues,);
    this.render = () => {
      if (!this.current) return;
      this.triggerBuild();
      this.renderInstance(this.current, this.renderState, this.props.style, this.projection,);
    };
    this.renderScheduledAt = 0;
    this.scheduleRender = () => {
      const now2 = time.now();
      if (this.renderScheduledAt < now2) {
        this.renderScheduledAt = now2;
        frame.render(this.render, false, true,);
      }
    };
    const {
      latestValues,
      renderState,
    } = visualState;
    this.latestValues = latestValues;
    this.baseTarget = {
      ...latestValues,
    };
    this.initialValues = props.initial
      ? {
        ...latestValues,
      }
      : {};
    this.renderState = renderState;
    this.parent = parent;
    this.props = props;
    this.presenceContext = presenceContext;
    this.depth = parent ? parent.depth + 1 : 0;
    this.reducedMotionConfig = reducedMotionConfig;
    this.options = options;
    this.blockInitialAnimation = Boolean(blockInitialAnimation,);
    this.isControllingVariants = isControllingVariants(props,);
    this.isVariantNode = isVariantNode(props,);
    if (this.isVariantNode) {
      this.variantChildren = /* @__PURE__ */ new Set();
    }
    this.manuallyAnimateOnMount = Boolean(parent && parent.current,);
    const {
      willChange,
      ...initialMotionValues
    } = this.scrapeMotionValuesFromProps(props, {}, this,);
    for (const key7 in initialMotionValues) {
      const value = initialMotionValues[key7];
      if (latestValues[key7] !== void 0 && isMotionValue(value,)) {
        value.set(latestValues[key7], false,);
      }
    }
  }
  mount(instance,) {
    this.current = instance;
    visualElementStore.set(instance, this,);
    if (this.projection && !this.projection.instance) {
      this.projection.mount(instance,);
    }
    if (this.parent && this.isVariantNode && !this.isControllingVariants) {
      this.removeFromVariantTree = this.parent.addVariantChild(this,);
    }
    this.values.forEach((value, key7,) => this.bindToMotionValue(key7, value,));
    if (!hasReducedMotionListener.current) {
      initPrefersReducedMotion();
    }
    this.shouldReduceMotion = this.reducedMotionConfig === 'never'
      ? false
      : this.reducedMotionConfig === 'always'
      ? true
      : prefersReducedMotion.current;
    if (false) {
      warnOnce(this.shouldReduceMotion !== true, 'You have Reduced Motion enabled on your device. Animations may not appear as expected.',);
    }
    if (this.parent) this.parent.children.add(this,);
    this.update(this.props, this.presenceContext,);
  }
  unmount() {
    this.projection && this.projection.unmount();
    cancelFrame(this.notifyUpdate,);
    cancelFrame(this.render,);
    this.valueSubscriptions.forEach((remove2) => remove2());
    this.valueSubscriptions.clear();
    this.removeFromVariantTree && this.removeFromVariantTree();
    this.parent && this.parent.children.delete(this,);
    for (const key7 in this.events) {
      this.events[key7].clear();
    }
    for (const key7 in this.features) {
      const feature = this.features[key7];
      if (feature) {
        feature.unmount();
        feature.isMounted = false;
      }
    }
    this.current = null;
  }
  bindToMotionValue(key7, value,) {
    if (this.valueSubscriptions.has(key7,)) {
      this.valueSubscriptions.get(key7,)();
    }
    const valueIsTransform = transformProps.has(key7,);
    if (valueIsTransform && this.onBindTransform) {
      this.onBindTransform();
    }
    const removeOnChange = value.on('change', (latestValue) => {
      this.latestValues[key7] = latestValue;
      this.props.onUpdate && frame.preRender(this.notifyUpdate,);
      if (valueIsTransform && this.projection) {
        this.projection.isTransformDirty = true;
      }
    },);
    const removeOnRenderRequest = value.on('renderRequest', this.scheduleRender,);
    let removeSyncCheck;
    if (window.MotionCheckAppearSync) {
      removeSyncCheck = window.MotionCheckAppearSync(this, key7, value,);
    }
    this.valueSubscriptions.set(key7, () => {
      removeOnChange();
      removeOnRenderRequest();
      if (removeSyncCheck) removeSyncCheck();
      if (value.owner) value.stop();
    },);
  }
  sortNodePosition(other,) {
    if (!this.current || !this.sortInstanceNodePosition || this.type !== other.type) {
      return 0;
    }
    return this.sortInstanceNodePosition(this.current, other.current,);
  }
  updateFeatures() {
    let key7 = 'animation';
    for (key7 in featureDefinitions) {
      const featureDefinition = featureDefinitions[key7];
      if (!featureDefinition) continue;
      const {
        isEnabled,
        Feature: FeatureConstructor,
      } = featureDefinition;
      if (!this.features[key7] && FeatureConstructor && isEnabled(this.props,)) {
        this.features[key7] = new FeatureConstructor(this,);
      }
      if (this.features[key7]) {
        const feature = this.features[key7];
        if (feature.isMounted) {
          feature.update();
        } else {
          feature.mount();
          feature.isMounted = true;
        }
      }
    }
  }
  triggerBuild() {
    this.build(this.renderState, this.latestValues, this.props,);
  }
  /**
   * Measure the current viewport box with or without transforms.
   * Only measures axis-aligned boxes, rotate and skew must be manually
   * removed with a re-render to work.
   */
  measureViewportBox() {
    return this.current ? this.measureInstanceViewportBox(this.current, this.props,) : createBox();
  }
  getStaticValue(key7,) {
    return this.latestValues[key7];
  }
  setStaticValue(key7, value,) {
    this.latestValues[key7] = value;
  }
  /**
   * Update the provided props. Ensure any newly-added motion values are
   * added to our map, old ones removed, and listeners updated.
   */
  update(props, presenceContext,) {
    if (props.transformTemplate || this.props.transformTemplate) {
      this.scheduleRender();
    }
    this.prevProps = this.props;
    this.props = props;
    this.prevPresenceContext = this.presenceContext;
    this.presenceContext = presenceContext;
    for (let i = 0; i < propEventHandlers.length; i++) {
      const key7 = propEventHandlers[i];
      if (this.propEventSubscriptions[key7]) {
        this.propEventSubscriptions[key7]();
        delete this.propEventSubscriptions[key7];
      }
      const listenerName = 'on' + key7;
      const listener = props[listenerName];
      if (listener) {
        this.propEventSubscriptions[key7] = this.on(key7, listener,);
      }
    }
    this.prevMotionValues = updateMotionValuesFromProps(
      this,
      this.scrapeMotionValuesFromProps(props, this.prevProps, this,),
      this.prevMotionValues,
    );
    if (this.handleChildMotionValue) {
      this.handleChildMotionValue();
    }
  }
  getProps() {
    return this.props;
  }
  /**
   * Returns the variant definition with a given name.
   */
  getVariant(name,) {
    return this.props.variants ? this.props.variants[name] : void 0;
  }
  /**
   * Returns the defined default transition on this component.
   */
  getDefaultTransition() {
    return this.props.transition;
  }
  getTransformPagePoint() {
    return this.props.transformPagePoint;
  }
  getClosestVariantNode() {
    return this.isVariantNode ? this : this.parent ? this.parent.getClosestVariantNode() : void 0;
  }
  /**
   * Add a child visual element to our set of children.
   */
  addVariantChild(child,) {
    const closestVariantNode = this.getClosestVariantNode();
    if (closestVariantNode) {
      closestVariantNode.variantChildren && closestVariantNode.variantChildren.add(child,);
      return () => closestVariantNode.variantChildren.delete(child,);
    }
  }
  /**
   * Add a motion value and bind it to this visual element.
   */
  addValue(key7, value,) {
    const existingValue = this.values.get(key7,);
    if (value !== existingValue) {
      if (existingValue) this.removeValue(key7,);
      this.bindToMotionValue(key7, value,);
      this.values.set(key7, value,);
      this.latestValues[key7] = value.get();
    }
  }
  /**
   * Remove a motion value and unbind any active subscriptions.
   */
  removeValue(key7,) {
    this.values.delete(key7,);
    const unsubscribe = this.valueSubscriptions.get(key7,);
    if (unsubscribe) {
      unsubscribe();
      this.valueSubscriptions.delete(key7,);
    }
    delete this.latestValues[key7];
    this.removeValueFromRenderState(key7, this.renderState,);
  }
  /**
   * Check whether we have a motion value for this key
   */
  hasValue(key7,) {
    return this.values.has(key7,);
  }
  getValue(key7, defaultValue,) {
    if (this.props.values && this.props.values[key7]) {
      return this.props.values[key7];
    }
    let value = this.values.get(key7,);
    if (value === void 0 && defaultValue !== void 0) {
      value = motionValue(defaultValue === null ? void 0 : defaultValue, {
        owner: this,
      },);
      this.addValue(key7, value,);
    }
    return value;
  }
  /**
   * If we're trying to animate to a previously unencountered value,
   * we need to check for it in our state and as a last resort read it
   * directly from the instance (which might have performance implications).
   */
  readValue(key7, target,) {
    let value = this.latestValues[key7] !== void 0 || !this.current
      ? this.latestValues[key7]
      : this.getBaseTargetFromProps(this.props, key7,) ?? this.readValueFromInstance(this.current, key7, this.options,);
    if (value !== void 0 && value !== null) {
      if (typeof value === 'string' && (isNumericalString(value,) || isZeroValueString(value,))) {
        value = parseFloat(value,);
      } else if (!findValueType(value,) && complex.test(target,)) {
        value = getAnimatableNone2(key7, target,);
      }
      this.setBaseTarget(key7, isMotionValue(value,) ? value.get() : value,);
    }
    return isMotionValue(value,) ? value.get() : value;
  }
  /**
   * Set the base target to later animate back to. This is currently
   * only hydrated on creation and when we first read a value.
   */
  setBaseTarget(key7, value,) {
    this.baseTarget[key7] = value;
  }
  /**
   * Find the base target for a value thats been removed from all animation
   * props.
   */
  getBaseTarget(key7,) {
    var _a;
    const {
      initial,
    } = this.props;
    let valueFromInitial;
    if (typeof initial === 'string' || typeof initial === 'object') {
      const variant = resolveVariantFromProps(this.props, initial, (_a = this.presenceContext) == null ? void 0 : _a.custom,);
      if (variant) {
        valueFromInitial = variant[key7];
      }
    }
    if (initial && valueFromInitial !== void 0) {
      return valueFromInitial;
    }
    const target = this.getBaseTargetFromProps(this.props, key7,);
    if (target !== void 0 && !isMotionValue(target,)) return target;
    return this.initialValues[key7] !== void 0 && valueFromInitial === void 0 ? void 0 : this.baseTarget[key7];
  }
  on(eventName, callback,) {
    if (!this.events[eventName]) {
      this.events[eventName] = new SubscriptionManager();
    }
    return this.events[eventName].add(callback,);
  }
  notify(eventName, ...args) {
    if (this.events[eventName]) {
      this.events[eventName].notify(...args,);
    }
  }
};
function convertBoundingBoxToBox({
  top,
  left,
  right,
  bottom,
},) {
  return {
    x: {
      min: left,
      max: right,
    },
    y: {
      min: top,
      max: bottom,
    },
  };
}
function convertBoxToBoundingBox({
  x,
  y,
},) {
  return {
    top: y.min,
    right: x.max,
    bottom: y.max,
    left: x.min,
  };
}
function transformBoxPoints(point2, transformPoint2,) {
  if (!transformPoint2) return point2;
  const topLeft = transformPoint2({
    x: point2.left,
    y: point2.top,
  },);
  const bottomRight = transformPoint2({
    x: point2.right,
    y: point2.bottom,
  },);
  return {
    top: topLeft.y,
    left: topLeft.x,
    bottom: bottomRight.y,
    right: bottomRight.x,
  };
}
function eachAxis(callback,) {
  return [callback('x',), callback('y',),];
}
function isIdentityScale(scale2,) {
  return scale2 === void 0 || scale2 === 1;
}
function hasScale({
  scale: scale2,
  scaleX: scaleX2,
  scaleY: scaleY2,
},) {
  return !isIdentityScale(scale2,) || !isIdentityScale(scaleX2,) || !isIdentityScale(scaleY2,);
}
function hasTransform(values,) {
  return hasScale(values,) || has2DTranslate(values,) || values.z || values.rotate || values.rotateX || values.rotateY || values.skewX ||
    values.skewY;
}
function has2DTranslate(values,) {
  return is2DTranslate(values.x,) || is2DTranslate(values.y,);
}
function is2DTranslate(value,) {
  return value && value !== '0%';
}
function scalePoint(point2, scale2, originPoint,) {
  const distanceFromOrigin = point2 - originPoint;
  const scaled = scale2 * distanceFromOrigin;
  return originPoint + scaled;
}
function applyPointDelta(point2, translate, scale2, originPoint, boxScale,) {
  if (boxScale !== void 0) {
    point2 = scalePoint(point2, boxScale, originPoint,);
  }
  return scalePoint(point2, scale2, originPoint,) + translate;
}
function applyAxisDelta(axis, translate = 0, scale2 = 1, originPoint, boxScale,) {
  axis.min = applyPointDelta(axis.min, translate, scale2, originPoint, boxScale,);
  axis.max = applyPointDelta(axis.max, translate, scale2, originPoint, boxScale,);
}
function applyBoxDelta(box, {
  x,
  y,
},) {
  applyAxisDelta(box.x, x.translate, x.scale, x.originPoint,);
  applyAxisDelta(box.y, y.translate, y.scale, y.originPoint,);
}
var TREE_SCALE_SNAP_MIN = 0.999999999999;
var TREE_SCALE_SNAP_MAX = 1.0000000000001;
function applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false,) {
  const treeLength = treePath.length;
  if (!treeLength) return;
  treeScale.x = treeScale.y = 1;
  let node;
  let delta;
  for (let i = 0; i < treeLength; i++) {
    node = treePath[i];
    delta = node.projectionDelta;
    const {
      visualElement,
    } = node.options;
    if (visualElement && visualElement.props.style && visualElement.props.style.display === 'contents') {
      continue;
    }
    if (isSharedTransition && node.options.layoutScroll && node.scroll && node !== node.root) {
      transformBox(box, {
        x: -node.scroll.offset.x,
        y: -node.scroll.offset.y,
      },);
    }
    if (delta) {
      treeScale.x *= delta.x.scale;
      treeScale.y *= delta.y.scale;
      applyBoxDelta(box, delta,);
    }
    if (isSharedTransition && hasTransform(node.latestValues,)) {
      transformBox(box, node.latestValues,);
    }
  }
  if (treeScale.x < TREE_SCALE_SNAP_MAX && treeScale.x > TREE_SCALE_SNAP_MIN) {
    treeScale.x = 1;
  }
  if (treeScale.y < TREE_SCALE_SNAP_MAX && treeScale.y > TREE_SCALE_SNAP_MIN) {
    treeScale.y = 1;
  }
}
function translateAxis(axis, distance2,) {
  axis.min = axis.min + distance2;
  axis.max = axis.max + distance2;
}
function transformAxis(axis, axisTranslate, axisScale, boxScale, axisOrigin = 0.5,) {
  const originPoint = mixNumber(axis.min, axis.max, axisOrigin,);
  applyAxisDelta(axis, axisTranslate, axisScale, originPoint, boxScale,);
}
function transformBox(box, transform2,) {
  transformAxis(box.x, transform2.x, transform2.scaleX, transform2.scale, transform2.originX,);
  transformAxis(box.y, transform2.y, transform2.scaleY, transform2.scale, transform2.originY,);
}
function measureViewportBox(instance, transformPoint2,) {
  return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint2,),);
}
function measurePageBox(element, rootProjectionNode2, transformPagePoint,) {
  const viewportBox = measureViewportBox(element, transformPagePoint,);
  const {
    scroll: scroll2,
  } = rootProjectionNode2;
  if (scroll2) {
    translateAxis(viewportBox.x, scroll2.offset.x,);
    translateAxis(viewportBox.y, scroll2.offset.y,);
  }
  return viewportBox;
}
var getContextWindow = ({
  current: current2,
},) => {
  return current2 ? current2.ownerDocument.defaultView : null;
};
var PanSession = class {
  constructor(event, handlers, {
    transformPagePoint,
    contextWindow,
    dragSnapToOrigin = false,
  } = {},) {
    this.startEvent = null;
    this.lastMoveEvent = null;
    this.lastMoveEventInfo = null;
    this.handlers = {};
    this.contextWindow = window;
    this.updatePoint = () => {
      if (!(this.lastMoveEvent && this.lastMoveEventInfo)) return;
      const info2 = getPanInfo(this.lastMoveEventInfo, this.history,);
      const isPanStarted = this.startEvent !== null;
      const isDistancePastThreshold = distance2D(info2.offset, {
        x: 0,
        y: 0,
      },) >= 3;
      if (!isPanStarted && !isDistancePastThreshold) return;
      const {
        point: point3,
      } = info2;
      const {
        timestamp: timestamp2,
      } = frameData;
      this.history.push({
        ...point3,
        timestamp: timestamp2,
      },);
      const {
        onStart,
        onMove,
      } = this.handlers;
      if (!isPanStarted) {
        onStart && onStart(this.lastMoveEvent, info2,);
        this.startEvent = this.lastMoveEvent;
      }
      onMove && onMove(this.lastMoveEvent, info2,);
    };
    this.handlePointerMove = (event2, info2,) => {
      this.lastMoveEvent = event2;
      this.lastMoveEventInfo = transformPoint(info2, this.transformPagePoint,);
      frame.update(this.updatePoint, true,);
    };
    this.handlePointerUp = (event2, info2,) => {
      this.end();
      const {
        onEnd,
        onSessionEnd,
        resumeAnimation,
      } = this.handlers;
      if (this.dragSnapToOrigin) resumeAnimation && resumeAnimation();
      if (!(this.lastMoveEvent && this.lastMoveEventInfo)) return;
      const panInfo = getPanInfo(
        event2.type === 'pointercancel' ? this.lastMoveEventInfo : transformPoint(info2, this.transformPagePoint,),
        this.history,
      );
      if (this.startEvent && onEnd) {
        onEnd(event2, panInfo,);
      }
      onSessionEnd && onSessionEnd(event2, panInfo,);
    };
    if (!isPrimaryPointer(event,)) return;
    this.dragSnapToOrigin = dragSnapToOrigin;
    this.handlers = handlers;
    this.transformPagePoint = transformPagePoint;
    this.contextWindow = contextWindow || window;
    const info = extractEventInfo(event,);
    const initialInfo = transformPoint(info, this.transformPagePoint,);
    const {
      point: point2,
    } = initialInfo;
    const {
      timestamp,
    } = frameData;
    this.history = [{
      ...point2,
      timestamp,
    },];
    const {
      onSessionStart,
    } = handlers;
    onSessionStart && onSessionStart(event, getPanInfo(initialInfo, this.history,),);
    this.removeListeners = pipe(
      addPointerEvent(this.contextWindow, 'pointermove', this.handlePointerMove,),
      addPointerEvent(this.contextWindow, 'pointerup', this.handlePointerUp,),
      addPointerEvent(this.contextWindow, 'pointercancel', this.handlePointerUp,),
    );
  }
  updateHandlers(handlers,) {
    this.handlers = handlers;
  }
  end() {
    this.removeListeners && this.removeListeners();
    cancelFrame(this.updatePoint,);
  }
};
function transformPoint(info, transformPagePoint,) {
  return transformPagePoint
    ? {
      point: transformPagePoint(info.point,),
    }
    : info;
}
function subtractPoint(a, b,) {
  return {
    x: a.x - b.x,
    y: a.y - b.y,
  };
}
function getPanInfo({
  point: point2,
}, history,) {
  return {
    point: point2,
    delta: subtractPoint(point2, lastDevicePoint(history,),),
    offset: subtractPoint(point2, startDevicePoint(history,),),
    velocity: getVelocity(history, 0.1,),
  };
}
function startDevicePoint(history,) {
  return history[0];
}
function lastDevicePoint(history,) {
  return history[history.length - 1];
}
function getVelocity(history, timeDelta2,) {
  if (history.length < 2) {
    return {
      x: 0,
      y: 0,
    };
  }
  let i = history.length - 1;
  let timestampedPoint = null;
  const lastPoint = lastDevicePoint(history,);
  while (i >= 0) {
    timestampedPoint = history[i];
    if (lastPoint.timestamp - timestampedPoint.timestamp > secondsToMilliseconds(timeDelta2,)) {
      break;
    }
    i--;
  }
  if (!timestampedPoint) {
    return {
      x: 0,
      y: 0,
    };
  }
  const time2 = millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp,);
  if (time2 === 0) {
    return {
      x: 0,
      y: 0,
    };
  }
  const currentVelocity = {
    x: (lastPoint.x - timestampedPoint.x) / time2,
    y: (lastPoint.y - timestampedPoint.y) / time2,
  };
  if (currentVelocity.x === Infinity) {
    currentVelocity.x = 0;
  }
  if (currentVelocity.y === Infinity) {
    currentVelocity.y = 0;
  }
  return currentVelocity;
}
function applyConstraints(point2, {
  min,
  max,
}, elastic,) {
  if (min !== void 0 && point2 < min) {
    point2 = elastic ? mixNumber(min, point2, elastic.min,) : Math.max(point2, min,);
  } else if (max !== void 0 && point2 > max) {
    point2 = elastic ? mixNumber(max, point2, elastic.max,) : Math.min(point2, max,);
  }
  return point2;
}
function calcRelativeAxisConstraints(axis, min, max,) {
  return {
    min: min !== void 0 ? axis.min + min : void 0,
    max: max !== void 0 ? axis.max + max - (axis.max - axis.min) : void 0,
  };
}
function calcRelativeConstraints(layoutBox, {
  top,
  left,
  bottom,
  right,
},) {
  return {
    x: calcRelativeAxisConstraints(layoutBox.x, left, right,),
    y: calcRelativeAxisConstraints(layoutBox.y, top, bottom,),
  };
}
function calcViewportAxisConstraints(layoutAxis, constraintsAxis,) {
  let min = constraintsAxis.min - layoutAxis.min;
  let max = constraintsAxis.max - layoutAxis.max;
  if (constraintsAxis.max - constraintsAxis.min < layoutAxis.max - layoutAxis.min) {
    [min, max,] = [max, min,];
  }
  return {
    min,
    max,
  };
}
function calcViewportConstraints(layoutBox, constraintsBox,) {
  return {
    x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x,),
    y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y,),
  };
}
function calcOrigin(source, target,) {
  let origin = 0.5;
  const sourceLength = calcLength(source,);
  const targetLength = calcLength(target,);
  if (targetLength > sourceLength) {
    origin = progress(target.min, target.max - sourceLength, source.min,);
  } else if (sourceLength > targetLength) {
    origin = progress(source.min, source.max - targetLength, target.min,);
  }
  return clamp(0, 1, origin,);
}
function rebaseAxisConstraints(layout2, constraints,) {
  const relativeConstraints = {};
  if (constraints.min !== void 0) {
    relativeConstraints.min = constraints.min - layout2.min;
  }
  if (constraints.max !== void 0) {
    relativeConstraints.max = constraints.max - layout2.min;
  }
  return relativeConstraints;
}
var defaultElastic = 0.35;
function resolveDragElastic(dragElastic = defaultElastic,) {
  if (dragElastic === false) {
    dragElastic = 0;
  } else if (dragElastic === true) {
    dragElastic = defaultElastic;
  }
  return {
    x: resolveAxisElastic(dragElastic, 'left', 'right',),
    y: resolveAxisElastic(dragElastic, 'top', 'bottom',),
  };
}
function resolveAxisElastic(dragElastic, minLabel, maxLabel,) {
  return {
    min: resolvePointElastic(dragElastic, minLabel,),
    max: resolvePointElastic(dragElastic, maxLabel,),
  };
}
function resolvePointElastic(dragElastic, label,) {
  return typeof dragElastic === 'number' ? dragElastic : dragElastic[label] || 0;
}
var elementDragControls = /* @__PURE__ */ new WeakMap();
var VisualElementDragControls = class {
  constructor(visualElement,) {
    this.openDragLock = null;
    this.isDragging = false;
    this.currentDirection = null;
    this.originPoint = {
      x: 0,
      y: 0,
    };
    this.constraints = false;
    this.hasMutatedConstraints = false;
    this.elastic = createBox();
    this.visualElement = visualElement;
  }
  start(originEvent, {
    snapToCursor = false,
  } = {},) {
    const {
      presenceContext,
    } = this.visualElement;
    if (presenceContext && presenceContext.isPresent === false) return;
    const onSessionStart = (event) => {
      const {
        dragSnapToOrigin: dragSnapToOrigin2,
      } = this.getProps();
      dragSnapToOrigin2 ? this.pauseAnimation() : this.stopAnimation();
      if (snapToCursor) {
        this.snapToCursor(extractEventInfo(event,).point,);
      }
    };
    const onStart = (event, info,) => {
      const {
        drag: drag2,
        dragPropagation,
        onDragStart,
      } = this.getProps();
      if (drag2 && !dragPropagation) {
        if (this.openDragLock) this.openDragLock();
        this.openDragLock = setDragLock(drag2,);
        if (!this.openDragLock) return;
      }
      this.isDragging = true;
      this.currentDirection = null;
      this.resolveConstraints();
      if (this.visualElement.projection) {
        this.visualElement.projection.isAnimationBlocked = true;
        this.visualElement.projection.target = void 0;
      }
      eachAxis((axis) => {
        let current2 = this.getAxisMotionValue(axis,).get() || 0;
        if (percent.test(current2,)) {
          const {
            projection,
          } = this.visualElement;
          if (projection && projection.layout) {
            const measuredAxis = projection.layout.layoutBox[axis];
            if (measuredAxis) {
              const length = calcLength(measuredAxis,);
              current2 = length * (parseFloat(current2,) / 100);
            }
          }
        }
        this.originPoint[axis] = current2;
      },);
      if (onDragStart) {
        frame.postRender(() => onDragStart(event, info,));
      }
      addValueToWillChange(this.visualElement, 'transform',);
      const {
        animationState,
      } = this.visualElement;
      animationState && animationState.setActive('whileDrag', true,);
    };
    const onMove = (event, info,) => {
      const {
        dragPropagation,
        dragDirectionLock,
        onDirectionLock,
        onDrag,
      } = this.getProps();
      if (!dragPropagation && !this.openDragLock) return;
      const {
        offset,
      } = info;
      if (dragDirectionLock && this.currentDirection === null) {
        this.currentDirection = getCurrentDirection(offset,);
        if (this.currentDirection !== null) {
          onDirectionLock && onDirectionLock(this.currentDirection,);
        }
        return;
      }
      this.updateAxis('x', info.point, offset,);
      this.updateAxis('y', info.point, offset,);
      this.visualElement.render();
      onDrag && onDrag(event, info,);
    };
    const onSessionEnd = (event, info,) => this.stop(event, info,);
    const resumeAnimation = () =>
      eachAxis((axis) => {
        var _a;
        return this.getAnimationState(axis,) === 'paused' && ((_a = this.getAxisMotionValue(axis,).animation) == null ? void 0 : _a.play());
      },);
    const {
      dragSnapToOrigin,
    } = this.getProps();
    this.panSession = new PanSession(originEvent, {
      onSessionStart,
      onStart,
      onMove,
      onSessionEnd,
      resumeAnimation,
    }, {
      transformPagePoint: this.visualElement.getTransformPagePoint(),
      dragSnapToOrigin,
      contextWindow: getContextWindow(this.visualElement,),
    },);
  }
  stop(event, info,) {
    const isDragging2 = this.isDragging;
    this.cancel();
    if (!isDragging2) return;
    const {
      velocity,
    } = info;
    this.startAnimation(velocity,);
    const {
      onDragEnd,
    } = this.getProps();
    if (onDragEnd) {
      frame.postRender(() => onDragEnd(event, info,));
    }
  }
  cancel() {
    this.isDragging = false;
    const {
      projection,
      animationState,
    } = this.visualElement;
    if (projection) {
      projection.isAnimationBlocked = false;
    }
    this.panSession && this.panSession.end();
    this.panSession = void 0;
    const {
      dragPropagation,
    } = this.getProps();
    if (!dragPropagation && this.openDragLock) {
      this.openDragLock();
      this.openDragLock = null;
    }
    animationState && animationState.setActive('whileDrag', false,);
  }
  updateAxis(axis, _point, offset,) {
    const {
      drag: drag2,
    } = this.getProps();
    if (!offset || !shouldDrag(axis, drag2, this.currentDirection,)) return;
    const axisValue = this.getAxisMotionValue(axis,);
    let next2 = this.originPoint[axis] + offset[axis];
    if (this.constraints && this.constraints[axis]) {
      next2 = applyConstraints(next2, this.constraints[axis], this.elastic[axis],);
    }
    axisValue.set(next2,);
  }
  resolveConstraints() {
    var _a;
    const {
      dragConstraints,
      dragElastic,
    } = this.getProps();
    const layout2 = this.visualElement.projection && !this.visualElement.projection.layout
      ? this.visualElement.projection.measure(false,)
      : (_a = this.visualElement.projection) == null
      ? void 0
      : _a.layout;
    const prevConstraints = this.constraints;
    if (dragConstraints && isRefObject(dragConstraints,)) {
      if (!this.constraints) {
        this.constraints = this.resolveRefConstraints();
      }
    } else {
      if (dragConstraints && layout2) {
        this.constraints = calcRelativeConstraints(layout2.layoutBox, dragConstraints,);
      } else {
        this.constraints = false;
      }
    }
    this.elastic = resolveDragElastic(dragElastic,);
    if (prevConstraints !== this.constraints && layout2 && this.constraints && !this.hasMutatedConstraints) {
      eachAxis((axis) => {
        if (this.constraints !== false && this.getAxisMotionValue(axis,)) {
          this.constraints[axis] = rebaseAxisConstraints(layout2.layoutBox[axis], this.constraints[axis],);
        }
      },);
    }
  }
  resolveRefConstraints() {
    const {
      dragConstraints: constraints,
      onMeasureDragConstraints,
    } = this.getProps();
    if (!constraints || !isRefObject(constraints,)) return false;
    const constraintsElement = constraints.current;
    invariant(
      constraintsElement !== null,
      'If `dragConstraints` is set as a React ref, that ref must be passed to another component\'s `ref` prop.',
    );
    const {
      projection,
    } = this.visualElement;
    if (!projection || !projection.layout) return false;
    const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint(),);
    let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox,);
    if (onMeasureDragConstraints) {
      const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints,),);
      this.hasMutatedConstraints = !!userConstraints;
      if (userConstraints) {
        measuredConstraints = convertBoundingBoxToBox(userConstraints,);
      }
    }
    return measuredConstraints;
  }
  startAnimation(velocity,) {
    const {
      drag: drag2,
      dragMomentum,
      dragElastic,
      dragTransition,
      dragSnapToOrigin,
      onDragTransitionEnd,
    } = this.getProps();
    const constraints = this.constraints || {};
    const momentumAnimations = eachAxis((axis) => {
      if (!shouldDrag(axis, drag2, this.currentDirection,)) {
        return;
      }
      let transition = constraints && constraints[axis] || {};
      if (dragSnapToOrigin) {
        transition = {
          min: 0,
          max: 0,
        };
      }
      const bounceStiffness = dragElastic ? 200 : 1e6;
      const bounceDamping = dragElastic ? 40 : 1e7;
      const inertia2 = {
        type: 'inertia',
        velocity: dragMomentum ? velocity[axis] : 0,
        bounceStiffness,
        bounceDamping,
        timeConstant: 750,
        restDelta: 1,
        restSpeed: 10,
        ...dragTransition,
        ...transition,
      };
      return this.startAxisValueAnimation(axis, inertia2,);
    },);
    return Promise.all(momentumAnimations,).then(onDragTransitionEnd,);
  }
  startAxisValueAnimation(axis, transition,) {
    const axisValue = this.getAxisMotionValue(axis,);
    addValueToWillChange(this.visualElement, axis,);
    return axisValue.start(animateMotionValue(axis, axisValue, 0, transition, this.visualElement, false,),);
  }
  stopAnimation() {
    eachAxis((axis) => this.getAxisMotionValue(axis,).stop());
  }
  pauseAnimation() {
    eachAxis((axis) => {
      var _a;
      return (_a = this.getAxisMotionValue(axis,).animation) == null ? void 0 : _a.pause();
    },);
  }
  getAnimationState(axis,) {
    var _a;
    return (_a = this.getAxisMotionValue(axis,).animation) == null ? void 0 : _a.state;
  }
  /**
   * Drag works differently depending on which props are provided.
   *
   * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.
   * - Otherwise, we apply the delta to the x/y motion values.
   */
  getAxisMotionValue(axis,) {
    const dragKey = `_drag${axis.toUpperCase()}`;
    const props = this.visualElement.getProps();
    const externalMotionValue = props[dragKey];
    return externalMotionValue
      ? externalMotionValue
      : this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : void 0) || 0,);
  }
  snapToCursor(point2,) {
    eachAxis((axis) => {
      const {
        drag: drag2,
      } = this.getProps();
      if (!shouldDrag(axis, drag2, this.currentDirection,)) return;
      const {
        projection,
      } = this.visualElement;
      const axisValue = this.getAxisMotionValue(axis,);
      if (projection && projection.layout) {
        const {
          min,
          max,
        } = projection.layout.layoutBox[axis];
        axisValue.set(point2[axis] - mixNumber(min, max, 0.5,),);
      }
    },);
  }
  /**
   * When the viewport resizes we want to check if the measured constraints
   * have changed and, if so, reposition the element within those new constraints
   * relative to where it was before the resize.
   */
  scalePositionWithinConstraints() {
    if (!this.visualElement.current) return;
    const {
      drag: drag2,
      dragConstraints,
    } = this.getProps();
    const {
      projection,
    } = this.visualElement;
    if (!isRefObject(dragConstraints,) || !projection || !this.constraints) return;
    this.stopAnimation();
    const boxProgress = {
      x: 0,
      y: 0,
    };
    eachAxis((axis) => {
      const axisValue = this.getAxisMotionValue(axis,);
      if (axisValue && this.constraints !== false) {
        const latest = axisValue.get();
        boxProgress[axis] = calcOrigin({
          min: latest,
          max: latest,
        }, this.constraints[axis],);
      }
    },);
    const {
      transformTemplate: transformTemplate2,
    } = this.visualElement.getProps();
    this.visualElement.current.style.transform = transformTemplate2 ? transformTemplate2({}, '',) : 'none';
    projection.root && projection.root.updateScroll();
    projection.updateLayout();
    this.resolveConstraints();
    eachAxis((axis) => {
      if (!shouldDrag(axis, drag2, null,)) return;
      const axisValue = this.getAxisMotionValue(axis,);
      const {
        min,
        max,
      } = this.constraints[axis];
      axisValue.set(mixNumber(min, max, boxProgress[axis],),);
    },);
  }
  addListeners() {
    if (!this.visualElement.current) return;
    elementDragControls.set(this.visualElement, this,);
    const element = this.visualElement.current;
    const stopPointerListener = addPointerEvent(element, 'pointerdown', (event) => {
      const {
        drag: drag2,
        dragListener = true,
      } = this.getProps();
      drag2 && dragListener && this.start(event,);
    },);
    const measureDragConstraints = () => {
      const {
        dragConstraints,
      } = this.getProps();
      if (isRefObject(dragConstraints,) && dragConstraints.current) {
        this.constraints = this.resolveRefConstraints();
      }
    };
    const {
      projection,
    } = this.visualElement;
    const stopMeasureLayoutListener = projection.addEventListener('measure', measureDragConstraints,);
    if (projection && !projection.layout) {
      projection.root && projection.root.updateScroll();
      projection.updateLayout();
    }
    frame.read(measureDragConstraints,);
    const stopResizeListener = addDomEvent(window, 'resize', () => this.scalePositionWithinConstraints(),);
    const stopLayoutUpdateListener = projection.addEventListener('didUpdate', ({
      delta,
      hasLayoutChanged,
    },) => {
      if (this.isDragging && hasLayoutChanged) {
        eachAxis((axis) => {
          const motionValue2 = this.getAxisMotionValue(axis,);
          if (!motionValue2) return;
          this.originPoint[axis] += delta[axis].translate;
          motionValue2.set(motionValue2.get() + delta[axis].translate,);
        },);
        this.visualElement.render();
      }
    },);
    return () => {
      stopResizeListener();
      stopPointerListener();
      stopMeasureLayoutListener();
      stopLayoutUpdateListener && stopLayoutUpdateListener();
    };
  }
  getProps() {
    const props = this.visualElement.getProps();
    const {
      drag: drag2 = false,
      dragDirectionLock = false,
      dragPropagation = false,
      dragConstraints = false,
      dragElastic = defaultElastic,
      dragMomentum = true,
    } = props;
    return {
      ...props,
      drag: drag2,
      dragDirectionLock,
      dragPropagation,
      dragConstraints,
      dragElastic,
      dragMomentum,
    };
  }
};
function shouldDrag(direction, drag2, currentDirection,) {
  return (drag2 === true || drag2 === direction) && (currentDirection === null || currentDirection === direction);
}
function getCurrentDirection(offset, lockThreshold = 10,) {
  let direction = null;
  if (Math.abs(offset.y,) > lockThreshold) {
    direction = 'y';
  } else if (Math.abs(offset.x,) > lockThreshold) {
    direction = 'x';
  }
  return direction;
}
var DragGesture = class extends Feature {
  constructor(node,) {
    super(node,);
    this.removeGroupControls = noop;
    this.removeListeners = noop;
    this.controls = new VisualElementDragControls(node,);
  }
  mount() {
    const {
      dragControls,
    } = this.node.getProps();
    if (dragControls) {
      this.removeGroupControls = dragControls.subscribe(this.controls,);
    }
    this.removeListeners = this.controls.addListeners() || noop;
  }
  unmount() {
    this.removeGroupControls();
    this.removeListeners();
  }
};
var asyncHandler = (handler) => (event, info,) => {
  if (handler) {
    frame.postRender(() => handler(event, info,));
  }
};
var PanGesture = class extends Feature {
  constructor() {
    super(...arguments,);
    this.removePointerDownListener = noop;
  }
  onPointerDown(pointerDownEvent,) {
    this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), {
      transformPagePoint: this.node.getTransformPagePoint(),
      contextWindow: getContextWindow(this.node,),
    },);
  }
  createPanHandlers() {
    const {
      onPanSessionStart,
      onPanStart,
      onPan,
      onPanEnd,
    } = this.node.getProps();
    return {
      onSessionStart: asyncHandler(onPanSessionStart,),
      onStart: asyncHandler(onPanStart,),
      onMove: onPan,
      onEnd: (event, info,) => {
        delete this.session;
        if (onPanEnd) {
          frame.postRender(() => onPanEnd(event, info,));
        }
      },
    };
  }
  mount() {
    this.removePointerDownListener = addPointerEvent(this.node.current, 'pointerdown', (event) => this.onPointerDown(event,),);
  }
  update() {
    this.session && this.session.updateHandlers(this.createPanHandlers(),);
  }
  unmount() {
    this.removePointerDownListener();
    this.session && this.session.end();
  }
};
var globalProjectionState = {
  /**
   * Global flag as to whether the tree has animated since the last time
   * we resized the window
   */
  hasAnimatedSinceResize: true,
  /**
   * We set this to true once, on the first update. Any nodes added to the tree beyond that
   * update will be given a `data-projection-id` attribute.
   */
  hasEverUpdated: false,
};
function pixelsToPercent(pixels, axis,) {
  if (axis.max === axis.min) return 0;
  return pixels / (axis.max - axis.min) * 100;
}
var correctBorderRadius = {
  correct: (latest, node,) => {
    if (!node.target) return latest;
    if (typeof latest === 'string') {
      if (px.test(latest,)) {
        latest = parseFloat(latest,);
      } else {
        return latest;
      }
    }
    const x = pixelsToPercent(latest, node.target.x,);
    const y = pixelsToPercent(latest, node.target.y,);
    return `${x}% ${y}%`;
  },
};
var correctBoxShadow = {
  correct: (latest, {
    treeScale,
    projectionDelta,
  },) => {
    const original = latest;
    const shadow = complex.parse(latest,);
    if (shadow.length > 5) return original;
    const template = complex.createTransformer(latest,);
    const offset = typeof shadow[0] !== 'number' ? 1 : 0;
    const xScale = projectionDelta.x.scale * treeScale.x;
    const yScale = projectionDelta.y.scale * treeScale.y;
    shadow[0 + offset] /= xScale;
    shadow[1 + offset] /= yScale;
    const averageScale = mixNumber(xScale, yScale, 0.5,);
    if (typeof shadow[2 + offset] === 'number') shadow[2 + offset] /= averageScale;
    if (typeof shadow[3 + offset] === 'number') shadow[3 + offset] /= averageScale;
    return template(shadow,);
  },
};
var MeasureLayoutWithContext = class extends Component2 {
  /**
   * This only mounts projection nodes for components that
   * need measuring, we might want to do it for all components
   * in order to incorporate transforms
   */
  componentDidMount() {
    const {
      visualElement,
      layoutGroup,
      switchLayoutGroup,
      layoutId,
    } = this.props;
    const {
      projection,
    } = visualElement;
    addScaleCorrector(defaultScaleCorrectors,);
    if (projection) {
      if (layoutGroup.group) layoutGroup.group.add(projection,);
      if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {
        switchLayoutGroup.register(projection,);
      }
      projection.root.didUpdate();
      projection.addEventListener('animationComplete', () => {
        this.safeToRemove();
      },);
      projection.setOptions({
        ...projection.options,
        onExitComplete: () => this.safeToRemove(),
      },);
    }
    globalProjectionState.hasEverUpdated = true;
  }
  getSnapshotBeforeUpdate(prevProps,) {
    const {
      layoutDependency,
      visualElement,
      drag: drag2,
      isPresent: isPresent2,
    } = this.props;
    const {
      projection,
    } = visualElement;
    if (!projection) return null;
    projection.isPresent = isPresent2;
    if (drag2 || prevProps.layoutDependency !== layoutDependency || layoutDependency === void 0 || prevProps.isPresent !== isPresent2) {
      projection.willUpdate();
    } else {
      this.safeToRemove();
    }
    if (prevProps.isPresent !== isPresent2) {
      if (isPresent2) {
        projection.promote();
      } else if (!projection.relegate()) {
        frame.postRender(() => {
          const stack = projection.getStack();
          if (!stack || !stack.members.length) {
            this.safeToRemove();
          }
        },);
      }
    }
    return null;
  }
  componentDidUpdate() {
    const {
      projection,
    } = this.props.visualElement;
    if (projection) {
      projection.root.didUpdate();
      microtask.postRender(() => {
        if (!projection.currentAnimation && projection.isLead()) {
          this.safeToRemove();
        }
      },);
    }
  }
  componentWillUnmount() {
    const {
      visualElement,
      layoutGroup,
      switchLayoutGroup: promoteContext,
    } = this.props;
    const {
      projection,
    } = visualElement;
    if (projection) {
      projection.scheduleCheckAfterUnmount();
      if (layoutGroup && layoutGroup.group) layoutGroup.group.remove(projection,);
      if (promoteContext && promoteContext.deregister) promoteContext.deregister(projection,);
    }
  }
  safeToRemove() {
    const {
      safeToRemove,
    } = this.props;
    safeToRemove && safeToRemove();
  }
  render() {
    return null;
  }
};
function MeasureLayout(props,) {
  const [isPresent2, safeToRemove,] = usePresence();
  const layoutGroup = useContext(LayoutGroupContext,);
  return jsx3(MeasureLayoutWithContext, {
    ...props,
    layoutGroup,
    switchLayoutGroup: useContext(SwitchLayoutGroupContext,),
    isPresent: isPresent2,
    safeToRemove,
  },);
}
var defaultScaleCorrectors = {
  borderRadius: {
    ...correctBorderRadius,
    applyTo: ['borderTopLeftRadius', 'borderTopRightRadius', 'borderBottomLeftRadius', 'borderBottomRightRadius',],
  },
  borderTopLeftRadius: correctBorderRadius,
  borderTopRightRadius: correctBorderRadius,
  borderBottomLeftRadius: correctBorderRadius,
  borderBottomRightRadius: correctBorderRadius,
  boxShadow: correctBoxShadow,
};
function animateSingleValue(value, keyframes2, options,) {
  const motionValue$1 = isMotionValue(value,) ? value : motionValue(value,);
  motionValue$1.start(animateMotionValue('', motionValue$1, keyframes2, options,),);
  return motionValue$1.animation;
}
var borders = ['TopLeft', 'TopRight', 'BottomLeft', 'BottomRight',];
var numBorders = borders.length;
var asNumber2 = (value) => typeof value === 'string' ? parseFloat(value,) : value;
var isPx = (value) => typeof value === 'number' || px.test(value,);
function mixValues(target, follow, lead, progress2, shouldCrossfadeOpacity, isOnlyMember,) {
  if (shouldCrossfadeOpacity) {
    target.opacity = mixNumber(0, lead.opacity ?? 1, easeCrossfadeIn(progress2,),);
    target.opacityExit = mixNumber(follow.opacity ?? 1, 0, easeCrossfadeOut(progress2,),);
  } else if (isOnlyMember) {
    target.opacity = mixNumber(follow.opacity ?? 1, lead.opacity ?? 1, progress2,);
  }
  for (let i = 0; i < numBorders; i++) {
    const borderLabel = `border${borders[i]}Radius`;
    let followRadius = getRadius(follow, borderLabel,);
    let leadRadius = getRadius(lead, borderLabel,);
    if (followRadius === void 0 && leadRadius === void 0) continue;
    followRadius || (followRadius = 0);
    leadRadius || (leadRadius = 0);
    const canMix = followRadius === 0 || leadRadius === 0 || isPx(followRadius,) === isPx(leadRadius,);
    if (canMix) {
      target[borderLabel] = Math.max(mixNumber(asNumber2(followRadius,), asNumber2(leadRadius,), progress2,), 0,);
      if (percent.test(leadRadius,) || percent.test(followRadius,)) {
        target[borderLabel] += '%';
      }
    } else {
      target[borderLabel] = leadRadius;
    }
  }
  if (follow.rotate || lead.rotate) {
    target.rotate = mixNumber(follow.rotate || 0, lead.rotate || 0, progress2,);
  }
}
function getRadius(values, radiusName,) {
  return values[radiusName] !== void 0 ? values[radiusName] : values.borderRadius;
}
var easeCrossfadeIn = /* @__PURE__ */ compress(0, 0.5, circOut,);
var easeCrossfadeOut = /* @__PURE__ */ compress(0.5, 0.95, noop,);
function compress(min, max, easing,) {
  return (p) => {
    if (p < min) return 0;
    if (p > max) return 1;
    return easing(progress(min, max, p,),);
  };
}
function copyAxisInto(axis, originAxis,) {
  axis.min = originAxis.min;
  axis.max = originAxis.max;
}
function copyBoxInto(box, originBox,) {
  copyAxisInto(box.x, originBox.x,);
  copyAxisInto(box.y, originBox.y,);
}
function copyAxisDeltaInto(delta, originDelta,) {
  delta.translate = originDelta.translate;
  delta.scale = originDelta.scale;
  delta.originPoint = originDelta.originPoint;
  delta.origin = originDelta.origin;
}
function removePointDelta(point2, translate, scale2, originPoint, boxScale,) {
  point2 -= translate;
  point2 = scalePoint(point2, 1 / scale2, originPoint,);
  if (boxScale !== void 0) {
    point2 = scalePoint(point2, 1 / boxScale, originPoint,);
  }
  return point2;
}
function removeAxisDelta(axis, translate = 0, scale2 = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis,) {
  if (percent.test(translate,)) {
    translate = parseFloat(translate,);
    const relativeProgress = mixNumber(sourceAxis.min, sourceAxis.max, translate / 100,);
    translate = relativeProgress - sourceAxis.min;
  }
  if (typeof translate !== 'number') return;
  let originPoint = mixNumber(originAxis.min, originAxis.max, origin,);
  if (axis === originAxis) originPoint -= translate;
  axis.min = removePointDelta(axis.min, translate, scale2, originPoint, boxScale,);
  axis.max = removePointDelta(axis.max, translate, scale2, originPoint, boxScale,);
}
function removeAxisTransforms(axis, transforms, [key7, scaleKey, originKey,], origin, sourceAxis,) {
  removeAxisDelta(axis, transforms[key7], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis,);
}
var xKeys = ['x', 'scaleX', 'originX',];
var yKeys = ['y', 'scaleY', 'originY',];
function removeBoxTransforms(box, transforms, originBox, sourceBox,) {
  removeAxisTransforms(box.x, transforms, xKeys, originBox ? originBox.x : void 0, sourceBox ? sourceBox.x : void 0,);
  removeAxisTransforms(box.y, transforms, yKeys, originBox ? originBox.y : void 0, sourceBox ? sourceBox.y : void 0,);
}
function isAxisDeltaZero(delta,) {
  return delta.translate === 0 && delta.scale === 1;
}
function isDeltaZero(delta,) {
  return isAxisDeltaZero(delta.x,) && isAxisDeltaZero(delta.y,);
}
function axisEquals(a, b,) {
  return a.min === b.min && a.max === b.max;
}
function boxEquals(a, b,) {
  return axisEquals(a.x, b.x,) && axisEquals(a.y, b.y,);
}
function axisEqualsRounded(a, b,) {
  return Math.round(a.min,) === Math.round(b.min,) && Math.round(a.max,) === Math.round(b.max,);
}
function boxEqualsRounded(a, b,) {
  return axisEqualsRounded(a.x, b.x,) && axisEqualsRounded(a.y, b.y,);
}
function aspectRatio(box,) {
  return calcLength(box.x,) / calcLength(box.y,);
}
function axisDeltaEquals(a, b,) {
  return a.translate === b.translate && a.scale === b.scale && a.originPoint === b.originPoint;
}
var NodeStack = class {
  constructor() {
    this.members = [];
  }
  add(node,) {
    addUniqueItem(this.members, node,);
    node.scheduleRender();
  }
  remove(node,) {
    removeItem(this.members, node,);
    if (node === this.prevLead) {
      this.prevLead = void 0;
    }
    if (node === this.lead) {
      const prevLead = this.members[this.members.length - 1];
      if (prevLead) {
        this.promote(prevLead,);
      }
    }
  }
  relegate(node,) {
    const indexOfNode = this.members.findIndex((member) => node === member);
    if (indexOfNode === 0) return false;
    let prevLead;
    for (let i = indexOfNode; i >= 0; i--) {
      const member = this.members[i];
      if (member.isPresent !== false) {
        prevLead = member;
        break;
      }
    }
    if (prevLead) {
      this.promote(prevLead,);
      return true;
    } else {
      return false;
    }
  }
  promote(node, preserveFollowOpacity,) {
    const prevLead = this.lead;
    if (node === prevLead) return;
    this.prevLead = prevLead;
    this.lead = node;
    node.show();
    if (prevLead) {
      prevLead.instance && prevLead.scheduleRender();
      node.scheduleRender();
      node.resumeFrom = prevLead;
      if (preserveFollowOpacity) {
        node.resumeFrom.preserveOpacity = true;
      }
      if (prevLead.snapshot) {
        node.snapshot = prevLead.snapshot;
        node.snapshot.latestValues = prevLead.animationValues || prevLead.latestValues;
      }
      if (node.root && node.root.isUpdating) {
        node.isLayoutDirty = true;
      }
      const {
        crossfade,
      } = node.options;
      if (crossfade === false) {
        prevLead.hide();
      }
    }
  }
  exitAnimationComplete() {
    this.members.forEach((node) => {
      const {
        options,
        resumingFrom,
      } = node;
      options.onExitComplete && options.onExitComplete();
      if (resumingFrom) {
        resumingFrom.options.onExitComplete && resumingFrom.options.onExitComplete();
      }
    },);
  }
  scheduleRender() {
    this.members.forEach((node) => {
      node.instance && node.scheduleRender(false,);
    },);
  }
  /**
   * Clear any leads that have been removed this render to prevent them from being
   * used in future animations and to prevent memory leaks
   */
  removeLeadSnapshot() {
    if (this.lead && this.lead.snapshot) {
      this.lead.snapshot = void 0;
    }
  }
};
function buildProjectionTransform(delta, treeScale, latestTransform,) {
  let transform2 = '';
  const xTranslate = delta.x.translate / treeScale.x;
  const yTranslate = delta.y.translate / treeScale.y;
  const zTranslate = (latestTransform == null ? void 0 : latestTransform.z) || 0;
  if (xTranslate || yTranslate || zTranslate) {
    transform2 = `translate3d(${xTranslate}px, ${yTranslate}px, ${zTranslate}px) `;
  }
  if (treeScale.x !== 1 || treeScale.y !== 1) {
    transform2 += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;
  }
  if (latestTransform) {
    const {
      transformPerspective,
      rotate: rotate2,
      rotateX,
      rotateY,
      skewX,
      skewY,
    } = latestTransform;
    if (transformPerspective) transform2 = `perspective(${transformPerspective}px) ${transform2}`;
    if (rotate2) transform2 += `rotate(${rotate2}deg) `;
    if (rotateX) transform2 += `rotateX(${rotateX}deg) `;
    if (rotateY) transform2 += `rotateY(${rotateY}deg) `;
    if (skewX) transform2 += `skewX(${skewX}deg) `;
    if (skewY) transform2 += `skewY(${skewY}deg) `;
  }
  const elementScaleX = delta.x.scale * treeScale.x;
  const elementScaleY = delta.y.scale * treeScale.y;
  if (elementScaleX !== 1 || elementScaleY !== 1) {
    transform2 += `scale(${elementScaleX}, ${elementScaleY})`;
  }
  return transform2 || 'none';
}
var metrics = {
  nodes: 0,
  calculatedTargetDeltas: 0,
  calculatedProjections: 0,
};
var transformAxes = ['', 'X', 'Y', 'Z',];
var hiddenVisibility = {
  visibility: 'hidden',
};
var animationTarget = 1e3;
var id2 = 0;
function resetDistortingTransform(key7, visualElement, values, sharedAnimationValues,) {
  const {
    latestValues,
  } = visualElement;
  if (latestValues[key7]) {
    values[key7] = latestValues[key7];
    visualElement.setStaticValue(key7, 0,);
    if (sharedAnimationValues) {
      sharedAnimationValues[key7] = 0;
    }
  }
}
function cancelTreeOptimisedTransformAnimations(projectionNode,) {
  projectionNode.hasCheckedOptimisedAppear = true;
  if (projectionNode.root === projectionNode) return;
  const {
    visualElement,
  } = projectionNode.options;
  if (!visualElement) return;
  const appearId = getOptimisedAppearId(visualElement,);
  if (window.MotionHasOptimisedAnimation(appearId, 'transform',)) {
    const {
      layout: layout2,
      layoutId,
    } = projectionNode.options;
    window.MotionCancelOptimisedAnimation(appearId, 'transform', frame, !(layout2 || layoutId),);
  }
  const {
    parent,
  } = projectionNode;
  if (parent && !parent.hasCheckedOptimisedAppear) {
    cancelTreeOptimisedTransformAnimations(parent,);
  }
}
function createProjectionNode2({
  attachResizeListener,
  defaultParent,
  measureScroll,
  checkIsScrollRoot,
  resetTransform,
},) {
  return class ProjectionNode {
    constructor(latestValues = {}, parent = defaultParent == null ? void 0 : defaultParent(),) {
      this.id = id2++;
      this.animationId = 0;
      this.children = /* @__PURE__ */ new Set();
      this.options = {};
      this.isTreeAnimating = false;
      this.isAnimationBlocked = false;
      this.isLayoutDirty = false;
      this.isProjectionDirty = false;
      this.isSharedProjectionDirty = false;
      this.isTransformDirty = false;
      this.updateManuallyBlocked = false;
      this.updateBlockedByResize = false;
      this.isUpdating = false;
      this.isSVG = false;
      this.needsReset = false;
      this.shouldResetTransform = false;
      this.hasCheckedOptimisedAppear = false;
      this.treeScale = {
        x: 1,
        y: 1,
      };
      this.eventHandlers = /* @__PURE__ */ new Map();
      this.hasTreeAnimated = false;
      this.updateScheduled = false;
      this.scheduleUpdate = () => this.update();
      this.projectionUpdateScheduled = false;
      this.checkUpdateFailed = () => {
        if (this.isUpdating) {
          this.isUpdating = false;
          this.clearAllSnapshots();
        }
      };
      this.updateProjection = () => {
        this.projectionUpdateScheduled = false;
        if (statsBuffer.value) {
          metrics.nodes = metrics.calculatedTargetDeltas = metrics.calculatedProjections = 0;
        }
        this.nodes.forEach(propagateDirtyNodes,);
        this.nodes.forEach(resolveTargetDelta,);
        this.nodes.forEach(calcProjection,);
        this.nodes.forEach(cleanDirtyNodes,);
        if (statsBuffer.addProjectionMetrics) {
          statsBuffer.addProjectionMetrics(metrics,);
        }
      };
      this.resolvedRelativeTargetAt = 0;
      this.hasProjected = false;
      this.isVisible = true;
      this.animationProgress = 0;
      this.sharedNodes = /* @__PURE__ */ new Map();
      this.latestValues = latestValues;
      this.root = parent ? parent.root || parent : this;
      this.path = parent ? [...parent.path, parent,] : [];
      this.parent = parent;
      this.depth = parent ? parent.depth + 1 : 0;
      for (let i = 0; i < this.path.length; i++) {
        this.path[i].shouldResetTransform = true;
      }
      if (this.root === this) this.nodes = new FlatTree();
    }
    addEventListener(name, handler,) {
      if (!this.eventHandlers.has(name,)) {
        this.eventHandlers.set(name, new SubscriptionManager(),);
      }
      return this.eventHandlers.get(name,).add(handler,);
    }
    notifyListeners(name, ...args) {
      const subscriptionManager = this.eventHandlers.get(name,);
      subscriptionManager && subscriptionManager.notify(...args,);
    }
    hasListeners(name,) {
      return this.eventHandlers.has(name,);
    }
    /**
     * Lifecycles
     */
    mount(instance,) {
      if (this.instance) return;
      this.isSVG = isSVGElement(instance,) && !isSVGSVGElement(instance,);
      this.instance = instance;
      const {
        layoutId,
        layout: layout2,
        visualElement,
      } = this.options;
      if (visualElement && !visualElement.current) {
        visualElement.mount(instance,);
      }
      this.root.nodes.add(this,);
      this.parent && this.parent.children.add(this,);
      if (this.root.hasTreeAnimated && (layout2 || layoutId)) {
        this.isLayoutDirty = true;
      }
      if (attachResizeListener) {
        let cancelDelay;
        const resizeUnblockUpdate = () => this.root.updateBlockedByResize = false;
        attachResizeListener(instance, () => {
          this.root.updateBlockedByResize = true;
          cancelDelay && cancelDelay();
          cancelDelay = delay(resizeUnblockUpdate, 250,);
          if (globalProjectionState.hasAnimatedSinceResize) {
            globalProjectionState.hasAnimatedSinceResize = false;
            this.nodes.forEach(finishAnimation,);
          }
        },);
      }
      if (layoutId) {
        this.root.registerSharedNode(layoutId, this,);
      }
      if (this.options.animate !== false && visualElement && (layoutId || layout2)) {
        this.addEventListener('didUpdate', ({
          delta,
          hasLayoutChanged,
          hasRelativeLayoutChanged,
          layout: newLayout,
        },) => {
          if (this.isTreeAnimationBlocked()) {
            this.target = void 0;
            this.relativeTarget = void 0;
            return;
          }
          const layoutTransition = this.options.transition || visualElement.getDefaultTransition() || defaultLayoutTransition;
          const {
            onLayoutAnimationStart,
            onLayoutAnimationComplete,
          } = visualElement.getProps();
          const hasTargetChanged = !this.targetLayout || !boxEqualsRounded(this.targetLayout, newLayout,);
          const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeLayoutChanged;
          if (
            this.options.layoutRoot || this.resumeFrom || hasOnlyRelativeTargetChanged ||
            hasLayoutChanged && (hasTargetChanged || !this.currentAnimation)
          ) {
            if (this.resumeFrom) {
              this.resumingFrom = this.resumeFrom;
              this.resumingFrom.resumingFrom = void 0;
            }
            const animationOptions = {
              ...getValueTransition(layoutTransition, 'layout',),
              onPlay: onLayoutAnimationStart,
              onComplete: onLayoutAnimationComplete,
            };
            if (visualElement.shouldReduceMotion || this.options.layoutRoot) {
              animationOptions.delay = 0;
              animationOptions.type = false;
            }
            this.startAnimation(animationOptions,);
            this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged,);
          } else {
            if (!hasLayoutChanged) {
              finishAnimation(this,);
            }
            if (this.isLead() && this.options.onExitComplete) {
              this.options.onExitComplete();
            }
          }
          this.targetLayout = newLayout;
        },);
      }
    }
    unmount() {
      this.options.layoutId && this.willUpdate();
      this.root.nodes.remove(this,);
      const stack = this.getStack();
      stack && stack.remove(this,);
      this.parent && this.parent.children.delete(this,);
      this.instance = void 0;
      this.eventHandlers.clear();
      cancelFrame(this.updateProjection,);
    }
    // only on the root
    blockUpdate() {
      this.updateManuallyBlocked = true;
    }
    unblockUpdate() {
      this.updateManuallyBlocked = false;
    }
    isUpdateBlocked() {
      return this.updateManuallyBlocked || this.updateBlockedByResize;
    }
    isTreeAnimationBlocked() {
      return this.isAnimationBlocked || this.parent && this.parent.isTreeAnimationBlocked() || false;
    }
    // Note: currently only running on root node
    startUpdate() {
      if (this.isUpdateBlocked()) return;
      this.isUpdating = true;
      this.nodes && this.nodes.forEach(resetSkewAndRotation,);
      this.animationId++;
    }
    getTransformTemplate() {
      const {
        visualElement,
      } = this.options;
      return visualElement && visualElement.getProps().transformTemplate;
    }
    willUpdate(shouldNotifyListeners = true,) {
      this.root.hasTreeAnimated = true;
      if (this.root.isUpdateBlocked()) {
        this.options.onExitComplete && this.options.onExitComplete();
        return;
      }
      if (window.MotionCancelOptimisedAnimation && !this.hasCheckedOptimisedAppear) {
        cancelTreeOptimisedTransformAnimations(this,);
      }
      !this.root.isUpdating && this.root.startUpdate();
      if (this.isLayoutDirty) return;
      this.isLayoutDirty = true;
      for (let i = 0; i < this.path.length; i++) {
        const node = this.path[i];
        node.shouldResetTransform = true;
        node.updateScroll('snapshot',);
        if (node.options.layoutRoot) {
          node.willUpdate(false,);
        }
      }
      const {
        layoutId,
        layout: layout2,
      } = this.options;
      if (layoutId === void 0 && !layout2) return;
      const transformTemplate2 = this.getTransformTemplate();
      this.prevTransformTemplateValue = transformTemplate2 ? transformTemplate2(this.latestValues, '',) : void 0;
      this.updateSnapshot();
      shouldNotifyListeners && this.notifyListeners('willUpdate',);
    }
    update() {
      this.updateScheduled = false;
      const updateWasBlocked = this.isUpdateBlocked();
      if (updateWasBlocked) {
        this.unblockUpdate();
        this.clearAllSnapshots();
        this.nodes.forEach(clearMeasurements,);
        return;
      }
      if (!this.isUpdating) {
        this.nodes.forEach(clearIsLayoutDirty,);
      }
      this.isUpdating = false;
      this.nodes.forEach(resetTransformStyle,);
      this.nodes.forEach(updateLayout,);
      this.nodes.forEach(notifyLayoutUpdate,);
      this.clearAllSnapshots();
      const now2 = time.now();
      frameData.delta = clamp(0, 1e3 / 60, now2 - frameData.timestamp,);
      frameData.timestamp = now2;
      frameData.isProcessing = true;
      frameSteps.update.process(frameData,);
      frameSteps.preRender.process(frameData,);
      frameSteps.render.process(frameData,);
      frameData.isProcessing = false;
    }
    didUpdate() {
      if (!this.updateScheduled) {
        this.updateScheduled = true;
        microtask.read(this.scheduleUpdate,);
      }
    }
    clearAllSnapshots() {
      this.nodes.forEach(clearSnapshot,);
      this.sharedNodes.forEach(removeLeadSnapshots,);
    }
    scheduleUpdateProjection() {
      if (!this.projectionUpdateScheduled) {
        this.projectionUpdateScheduled = true;
        frame.preRender(this.updateProjection, false, true,);
      }
    }
    scheduleCheckAfterUnmount() {
      frame.postRender(() => {
        if (this.isLayoutDirty) {
          this.root.didUpdate();
        } else {
          this.root.checkUpdateFailed();
        }
      },);
    }
    /**
     * Update measurements
     */
    updateSnapshot() {
      if (this.snapshot || !this.instance) return;
      this.snapshot = this.measure();
      if (this.snapshot && !calcLength(this.snapshot.measuredBox.x,) && !calcLength(this.snapshot.measuredBox.y,)) {
        this.snapshot = void 0;
      }
    }
    updateLayout() {
      if (!this.instance) return;
      this.updateScroll();
      if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {
        return;
      }
      if (this.resumeFrom && !this.resumeFrom.instance) {
        for (let i = 0; i < this.path.length; i++) {
          const node = this.path[i];
          node.updateScroll();
        }
      }
      const prevLayout = this.layout;
      this.layout = this.measure(false,);
      this.layoutCorrected = createBox();
      this.isLayoutDirty = false;
      this.projectionDelta = void 0;
      this.notifyListeners('measure', this.layout.layoutBox,);
      const {
        visualElement,
      } = this.options;
      visualElement && visualElement.notify('LayoutMeasure', this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : void 0,);
    }
    updateScroll(phase = 'measure',) {
      let needsMeasurement = Boolean(this.options.layoutScroll && this.instance,);
      if (this.scroll && this.scroll.animationId === this.root.animationId && this.scroll.phase === phase) {
        needsMeasurement = false;
      }
      if (needsMeasurement && this.instance) {
        const isRoot = checkIsScrollRoot(this.instance,);
        this.scroll = {
          animationId: this.root.animationId,
          phase,
          isRoot,
          offset: measureScroll(this.instance,),
          wasRoot: this.scroll ? this.scroll.isRoot : isRoot,
        };
      }
    }
    resetTransform() {
      if (!resetTransform) return;
      const isResetRequested = this.isLayoutDirty || this.shouldResetTransform || this.options.alwaysMeasureLayout;
      const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta,);
      const transformTemplate2 = this.getTransformTemplate();
      const transformTemplateValue = transformTemplate2 ? transformTemplate2(this.latestValues, '',) : void 0;
      const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;
      if (isResetRequested && this.instance && (hasProjection || hasTransform(this.latestValues,) || transformTemplateHasChanged)) {
        resetTransform(this.instance, transformTemplateValue,);
        this.shouldResetTransform = false;
        this.scheduleRender();
      }
    }
    measure(removeTransform = true,) {
      const pageBox = this.measurePageBox();
      let layoutBox = this.removeElementScroll(pageBox,);
      if (removeTransform) {
        layoutBox = this.removeTransform(layoutBox,);
      }
      roundBox(layoutBox,);
      return {
        animationId: this.root.animationId,
        measuredBox: pageBox,
        layoutBox,
        latestValues: {},
        source: this.id,
      };
    }
    measurePageBox() {
      var _a;
      const {
        visualElement,
      } = this.options;
      if (!visualElement) return createBox();
      const box = visualElement.measureViewportBox();
      const wasInScrollRoot = ((_a = this.scroll) == null ? void 0 : _a.wasRoot) || this.path.some(checkNodeWasScrollRoot,);
      if (!wasInScrollRoot) {
        const {
          scroll: scroll2,
        } = this.root;
        if (scroll2) {
          translateAxis(box.x, scroll2.offset.x,);
          translateAxis(box.y, scroll2.offset.y,);
        }
      }
      return box;
    }
    removeElementScroll(box,) {
      var _a;
      const boxWithoutScroll = createBox();
      copyBoxInto(boxWithoutScroll, box,);
      if ((_a = this.scroll) == null ? void 0 : _a.wasRoot) {
        return boxWithoutScroll;
      }
      for (let i = 0; i < this.path.length; i++) {
        const node = this.path[i];
        const {
          scroll: scroll2,
          options,
        } = node;
        if (node !== this.root && scroll2 && options.layoutScroll) {
          if (scroll2.wasRoot) {
            copyBoxInto(boxWithoutScroll, box,);
          }
          translateAxis(boxWithoutScroll.x, scroll2.offset.x,);
          translateAxis(boxWithoutScroll.y, scroll2.offset.y,);
        }
      }
      return boxWithoutScroll;
    }
    applyTransform(box, transformOnly = false,) {
      const withTransforms = createBox();
      copyBoxInto(withTransforms, box,);
      for (let i = 0; i < this.path.length; i++) {
        const node = this.path[i];
        if (!transformOnly && node.options.layoutScroll && node.scroll && node !== node.root) {
          transformBox(withTransforms, {
            x: -node.scroll.offset.x,
            y: -node.scroll.offset.y,
          },);
        }
        if (!hasTransform(node.latestValues,)) continue;
        transformBox(withTransforms, node.latestValues,);
      }
      if (hasTransform(this.latestValues,)) {
        transformBox(withTransforms, this.latestValues,);
      }
      return withTransforms;
    }
    removeTransform(box,) {
      const boxWithoutTransform = createBox();
      copyBoxInto(boxWithoutTransform, box,);
      for (let i = 0; i < this.path.length; i++) {
        const node = this.path[i];
        if (!node.instance) continue;
        if (!hasTransform(node.latestValues,)) continue;
        hasScale(node.latestValues,) && node.updateSnapshot();
        const sourceBox = createBox();
        const nodeBox = node.measurePageBox();
        copyBoxInto(sourceBox, nodeBox,);
        removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : void 0, sourceBox,);
      }
      if (hasTransform(this.latestValues,)) {
        removeBoxTransforms(boxWithoutTransform, this.latestValues,);
      }
      return boxWithoutTransform;
    }
    setTargetDelta(delta,) {
      this.targetDelta = delta;
      this.root.scheduleUpdateProjection();
      this.isProjectionDirty = true;
    }
    setOptions(options,) {
      this.options = {
        ...this.options,
        ...options,
        crossfade: options.crossfade !== void 0 ? options.crossfade : true,
      };
    }
    clearMeasurements() {
      this.scroll = void 0;
      this.layout = void 0;
      this.snapshot = void 0;
      this.prevTransformTemplateValue = void 0;
      this.targetDelta = void 0;
      this.target = void 0;
      this.isLayoutDirty = false;
    }
    forceRelativeParentToResolveTarget() {
      if (!this.relativeParent) return;
      if (this.relativeParent.resolvedRelativeTargetAt !== frameData.timestamp) {
        this.relativeParent.resolveTargetDelta(true,);
      }
    }
    resolveTargetDelta(forceRecalculation = false,) {
      var _a;
      const lead = this.getLead();
      this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);
      this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);
      this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);
      const isShared = Boolean(this.resumingFrom,) || this !== lead;
      const canSkip =
        !(forceRecalculation || isShared && this.isSharedProjectionDirty || this.isProjectionDirty ||
          ((_a = this.parent) == null ? void 0 : _a.isProjectionDirty) || this.attemptToResolveRelativeTarget ||
          this.root.updateBlockedByResize);
      if (canSkip) return;
      const {
        layout: layout2,
        layoutId,
      } = this.options;
      if (!this.layout || !(layout2 || layoutId)) return;
      this.resolvedRelativeTargetAt = frameData.timestamp;
      if (!this.targetDelta && !this.relativeTarget) {
        const relativeParent = this.getClosestProjectingParent();
        if (relativeParent && relativeParent.layout && this.animationProgress !== 1) {
          this.relativeParent = relativeParent;
          this.forceRelativeParentToResolveTarget();
          this.relativeTarget = createBox();
          this.relativeTargetOrigin = createBox();
          calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox,);
          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin,);
        } else {
          this.relativeParent = this.relativeTarget = void 0;
        }
      }
      if (!this.relativeTarget && !this.targetDelta) return;
      if (!this.target) {
        this.target = createBox();
        this.targetWithTransforms = createBox();
      }
      if (this.relativeTarget && this.relativeTargetOrigin && this.relativeParent && this.relativeParent.target) {
        this.forceRelativeParentToResolveTarget();
        calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target,);
      } else if (this.targetDelta) {
        if (Boolean(this.resumingFrom,)) {
          this.target = this.applyTransform(this.layout.layoutBox,);
        } else {
          copyBoxInto(this.target, this.layout.layoutBox,);
        }
        applyBoxDelta(this.target, this.targetDelta,);
      } else {
        copyBoxInto(this.target, this.layout.layoutBox,);
      }
      if (this.attemptToResolveRelativeTarget) {
        this.attemptToResolveRelativeTarget = false;
        const relativeParent = this.getClosestProjectingParent();
        if (
          relativeParent && Boolean(relativeParent.resumingFrom,) === Boolean(this.resumingFrom,) && !relativeParent.options.layoutScroll &&
          relativeParent.target && this.animationProgress !== 1
        ) {
          this.relativeParent = relativeParent;
          this.forceRelativeParentToResolveTarget();
          this.relativeTarget = createBox();
          this.relativeTargetOrigin = createBox();
          calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target,);
          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin,);
        } else {
          this.relativeParent = this.relativeTarget = void 0;
        }
      }
      if (statsBuffer.value) {
        metrics.calculatedTargetDeltas++;
      }
    }
    getClosestProjectingParent() {
      if (!this.parent || hasScale(this.parent.latestValues,) || has2DTranslate(this.parent.latestValues,)) {
        return void 0;
      }
      if (this.parent.isProjecting()) {
        return this.parent;
      } else {
        return this.parent.getClosestProjectingParent();
      }
    }
    isProjecting() {
      return Boolean((this.relativeTarget || this.targetDelta || this.options.layoutRoot) && this.layout,);
    }
    calcProjection() {
      var _a;
      const lead = this.getLead();
      const isShared = Boolean(this.resumingFrom,) || this !== lead;
      let canSkip = true;
      if (this.isProjectionDirty || ((_a = this.parent) == null ? void 0 : _a.isProjectionDirty)) {
        canSkip = false;
      }
      if (isShared && (this.isSharedProjectionDirty || this.isTransformDirty)) {
        canSkip = false;
      }
      if (this.resolvedRelativeTargetAt === frameData.timestamp) {
        canSkip = false;
      }
      if (canSkip) return;
      const {
        layout: layout2,
        layoutId,
      } = this.options;
      this.isTreeAnimating = Boolean(this.parent && this.parent.isTreeAnimating || this.currentAnimation || this.pendingAnimation,);
      if (!this.isTreeAnimating) {
        this.targetDelta = this.relativeTarget = void 0;
      }
      if (!this.layout || !(layout2 || layoutId)) return;
      copyBoxInto(this.layoutCorrected, this.layout.layoutBox,);
      const prevTreeScaleX = this.treeScale.x;
      const prevTreeScaleY = this.treeScale.y;
      applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared,);
      if (lead.layout && !lead.target && (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {
        lead.target = lead.layout.layoutBox;
        lead.targetWithTransforms = createBox();
      }
      const {
        target,
      } = lead;
      if (!target) {
        if (this.prevProjectionDelta) {
          this.createProjectionDeltas();
          this.scheduleRender();
        }
        return;
      }
      if (!this.projectionDelta || !this.prevProjectionDelta) {
        this.createProjectionDeltas();
      } else {
        copyAxisDeltaInto(this.prevProjectionDelta.x, this.projectionDelta.x,);
        copyAxisDeltaInto(this.prevProjectionDelta.y, this.projectionDelta.y,);
      }
      calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues,);
      if (
        this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY ||
        !axisDeltaEquals(this.projectionDelta.x, this.prevProjectionDelta.x,) ||
        !axisDeltaEquals(this.projectionDelta.y, this.prevProjectionDelta.y,)
      ) {
        this.hasProjected = true;
        this.scheduleRender();
        this.notifyListeners('projectionUpdate', target,);
      }
      if (statsBuffer.value) {
        metrics.calculatedProjections++;
      }
    }
    hide() {
      this.isVisible = false;
    }
    show() {
      this.isVisible = true;
    }
    scheduleRender(notifyAll2 = true,) {
      var _a;
      (_a = this.options.visualElement) == null ? void 0 : _a.scheduleRender();
      if (notifyAll2) {
        const stack = this.getStack();
        stack && stack.scheduleRender();
      }
      if (this.resumingFrom && !this.resumingFrom.instance) {
        this.resumingFrom = void 0;
      }
    }
    createProjectionDeltas() {
      this.prevProjectionDelta = createDelta();
      this.projectionDelta = createDelta();
      this.projectionDeltaWithTransform = createDelta();
    }
    setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false,) {
      const snapshot = this.snapshot;
      const snapshotLatestValues = snapshot ? snapshot.latestValues : {};
      const mixedValues = {
        ...this.latestValues,
      };
      const targetDelta = createDelta();
      if (!this.relativeParent || !this.relativeParent.options.layoutRoot) {
        this.relativeTarget = this.relativeTargetOrigin = void 0;
      }
      this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;
      const relativeLayout = createBox();
      const snapshotSource = snapshot ? snapshot.source : void 0;
      const layoutSource = this.layout ? this.layout.source : void 0;
      const isSharedLayoutAnimation = snapshotSource !== layoutSource;
      const stack = this.getStack();
      const isOnlyMember = !stack || stack.members.length <= 1;
      const shouldCrossfadeOpacity = Boolean(
        isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade,),
      );
      this.animationProgress = 0;
      let prevRelativeTarget;
      this.mixTargetDelta = (latest) => {
        const progress2 = latest / 1e3;
        mixAxisDelta(targetDelta.x, delta.x, progress2,);
        mixAxisDelta(targetDelta.y, delta.y, progress2,);
        this.setTargetDelta(targetDelta,);
        if (this.relativeTarget && this.relativeTargetOrigin && this.layout && this.relativeParent && this.relativeParent.layout) {
          calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox,);
          mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress2,);
          if (prevRelativeTarget && boxEquals(this.relativeTarget, prevRelativeTarget,)) {
            this.isProjectionDirty = false;
          }
          if (!prevRelativeTarget) prevRelativeTarget = createBox();
          copyBoxInto(prevRelativeTarget, this.relativeTarget,);
        }
        if (isSharedLayoutAnimation) {
          this.animationValues = mixedValues;
          mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress2, shouldCrossfadeOpacity, isOnlyMember,);
        }
        this.root.scheduleUpdateProjection();
        this.scheduleRender();
        this.animationProgress = progress2;
      };
      this.mixTargetDelta(this.options.layoutRoot ? 1e3 : 0,);
    }
    startAnimation(options,) {
      var _a, _b, _c;
      this.notifyListeners('animationStart',);
      (_a = this.currentAnimation) == null ? void 0 : _a.stop();
      (_c = (_b = this.resumingFrom) == null ? void 0 : _b.currentAnimation) == null ? void 0 : _c.stop();
      if (this.pendingAnimation) {
        cancelFrame(this.pendingAnimation,);
        this.pendingAnimation = void 0;
      }
      this.pendingAnimation = frame.update(() => {
        globalProjectionState.hasAnimatedSinceResize = true;
        activeAnimations.layout++;
        this.motionValue || (this.motionValue = motionValue(0,));
        this.currentAnimation = animateSingleValue(this.motionValue, [0, 1e3,], {
          ...options,
          velocity: 0,
          isSync: true,
          onUpdate: (latest) => {
            this.mixTargetDelta(latest,);
            options.onUpdate && options.onUpdate(latest,);
          },
          onStop: () => {
            activeAnimations.layout--;
          },
          onComplete: () => {
            activeAnimations.layout--;
            options.onComplete && options.onComplete();
            this.completeAnimation();
          },
        },);
        if (this.resumingFrom) {
          this.resumingFrom.currentAnimation = this.currentAnimation;
        }
        this.pendingAnimation = void 0;
      },);
    }
    completeAnimation() {
      if (this.resumingFrom) {
        this.resumingFrom.currentAnimation = void 0;
        this.resumingFrom.preserveOpacity = void 0;
      }
      const stack = this.getStack();
      stack && stack.exitAnimationComplete();
      this.resumingFrom = this.currentAnimation = this.animationValues = void 0;
      this.notifyListeners('animationComplete',);
    }
    finishAnimation() {
      if (this.currentAnimation) {
        this.mixTargetDelta && this.mixTargetDelta(animationTarget,);
        this.currentAnimation.stop();
      }
      this.completeAnimation();
    }
    applyTransformsToTarget() {
      const lead = this.getLead();
      let {
        targetWithTransforms,
        target,
        layout: layout2,
        latestValues,
      } = lead;
      if (!targetWithTransforms || !target || !layout2) return;
      if (
        this !== lead && this.layout && layout2 &&
        shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout2.layoutBox,)
      ) {
        target = this.target || createBox();
        const xLength = calcLength(this.layout.layoutBox.x,);
        target.x.min = lead.target.x.min;
        target.x.max = target.x.min + xLength;
        const yLength = calcLength(this.layout.layoutBox.y,);
        target.y.min = lead.target.y.min;
        target.y.max = target.y.min + yLength;
      }
      copyBoxInto(targetWithTransforms, target,);
      transformBox(targetWithTransforms, latestValues,);
      calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues,);
    }
    registerSharedNode(layoutId, node,) {
      if (!this.sharedNodes.has(layoutId,)) {
        this.sharedNodes.set(layoutId, new NodeStack(),);
      }
      const stack = this.sharedNodes.get(layoutId,);
      stack.add(node,);
      const config = node.options.initialPromotionConfig;
      node.promote({
        transition: config ? config.transition : void 0,
        preserveFollowOpacity: config && config.shouldPreserveFollowOpacity ? config.shouldPreserveFollowOpacity(node,) : void 0,
      },);
    }
    isLead() {
      const stack = this.getStack();
      return stack ? stack.lead === this : true;
    }
    getLead() {
      var _a;
      const {
        layoutId,
      } = this.options;
      return layoutId ? ((_a = this.getStack()) == null ? void 0 : _a.lead) || this : this;
    }
    getPrevLead() {
      var _a;
      const {
        layoutId,
      } = this.options;
      return layoutId ? (_a = this.getStack()) == null ? void 0 : _a.prevLead : void 0;
    }
    getStack() {
      const {
        layoutId,
      } = this.options;
      if (layoutId) return this.root.sharedNodes.get(layoutId,);
    }
    promote({
      needsReset,
      transition,
      preserveFollowOpacity,
    } = {},) {
      const stack = this.getStack();
      if (stack) stack.promote(this, preserveFollowOpacity,);
      if (needsReset) {
        this.projectionDelta = void 0;
        this.needsReset = true;
      }
      if (transition) {
        this.setOptions({
          transition,
        },);
      }
    }
    relegate() {
      const stack = this.getStack();
      if (stack) {
        return stack.relegate(this,);
      } else {
        return false;
      }
    }
    resetSkewAndRotation() {
      const {
        visualElement,
      } = this.options;
      if (!visualElement) return;
      let hasDistortingTransform = false;
      const {
        latestValues,
      } = visualElement;
      if (
        latestValues.z || latestValues.rotate || latestValues.rotateX || latestValues.rotateY || latestValues.rotateZ ||
        latestValues.skewX || latestValues.skewY
      ) {
        hasDistortingTransform = true;
      }
      if (!hasDistortingTransform) return;
      const resetValues = {};
      if (latestValues.z) {
        resetDistortingTransform('z', visualElement, resetValues, this.animationValues,);
      }
      for (let i = 0; i < transformAxes.length; i++) {
        resetDistortingTransform(`rotate${transformAxes[i]}`, visualElement, resetValues, this.animationValues,);
        resetDistortingTransform(`skew${transformAxes[i]}`, visualElement, resetValues, this.animationValues,);
      }
      visualElement.render();
      for (const key7 in resetValues) {
        visualElement.setStaticValue(key7, resetValues[key7],);
        if (this.animationValues) {
          this.animationValues[key7] = resetValues[key7];
        }
      }
      visualElement.scheduleRender();
    }
    getProjectionStyles(styleProp,) {
      if (!this.instance || this.isSVG) return void 0;
      if (!this.isVisible) {
        return hiddenVisibility;
      }
      const styles4 = {
        visibility: '',
      };
      const transformTemplate2 = this.getTransformTemplate();
      if (this.needsReset) {
        this.needsReset = false;
        styles4.opacity = '';
        styles4.pointerEvents = resolveMotionValue(styleProp == null ? void 0 : styleProp.pointerEvents,) || '';
        styles4.transform = transformTemplate2 ? transformTemplate2(this.latestValues, '',) : 'none';
        return styles4;
      }
      const lead = this.getLead();
      if (!this.projectionDelta || !this.layout || !lead.target) {
        const emptyStyles = {};
        if (this.options.layoutId) {
          emptyStyles.opacity = this.latestValues.opacity !== void 0 ? this.latestValues.opacity : 1;
          emptyStyles.pointerEvents = resolveMotionValue(styleProp == null ? void 0 : styleProp.pointerEvents,) || '';
        }
        if (this.hasProjected && !hasTransform(this.latestValues,)) {
          emptyStyles.transform = transformTemplate2 ? transformTemplate2({}, '',) : 'none';
          this.hasProjected = false;
        }
        return emptyStyles;
      }
      const valuesToRender = lead.animationValues || lead.latestValues;
      this.applyTransformsToTarget();
      styles4.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender,);
      if (transformTemplate2) {
        styles4.transform = transformTemplate2(valuesToRender, styles4.transform,);
      }
      const {
        x,
        y,
      } = this.projectionDelta;
      styles4.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;
      if (lead.animationValues) {
        styles4.opacity = lead === this
          ? valuesToRender.opacity ?? this.latestValues.opacity ?? 1
          : this.preserveOpacity
          ? this.latestValues.opacity
          : valuesToRender.opacityExit;
      } else {
        styles4.opacity = lead === this
          ? valuesToRender.opacity !== void 0 ? valuesToRender.opacity : ''
          : valuesToRender.opacityExit !== void 0
          ? valuesToRender.opacityExit
          : 0;
      }
      for (const key7 in scaleCorrectors) {
        if (valuesToRender[key7] === void 0) continue;
        const {
          correct,
          applyTo,
          isCSSVariable,
        } = scaleCorrectors[key7];
        const corrected = styles4.transform === 'none' ? valuesToRender[key7] : correct(valuesToRender[key7], lead,);
        if (applyTo) {
          const num = applyTo.length;
          for (let i = 0; i < num; i++) {
            styles4[applyTo[i]] = corrected;
          }
        } else {
          if (isCSSVariable) {
            this.options.visualElement.renderState.vars[key7] = corrected;
          } else {
            styles4[key7] = corrected;
          }
        }
      }
      if (this.options.layoutId) {
        styles4.pointerEvents = lead === this ? resolveMotionValue(styleProp == null ? void 0 : styleProp.pointerEvents,) || '' : 'none';
      }
      return styles4;
    }
    clearSnapshot() {
      this.resumeFrom = this.snapshot = void 0;
    }
    // Only run on root
    resetTree() {
      this.root.nodes.forEach((node) => {
        var _a;
        return (_a = node.currentAnimation) == null ? void 0 : _a.stop();
      },);
      this.root.nodes.forEach(clearMeasurements,);
      this.root.sharedNodes.clear();
    }
  };
}
function updateLayout(node,) {
  node.updateLayout();
}
function notifyLayoutUpdate(node,) {
  var _a;
  const snapshot = ((_a = node.resumeFrom) == null ? void 0 : _a.snapshot) || node.snapshot;
  if (node.isLead() && node.layout && snapshot && node.hasListeners('didUpdate',)) {
    const {
      layoutBox: layout2,
      measuredBox: measuredLayout,
    } = node.layout;
    const {
      animationType,
    } = node.options;
    const isShared = snapshot.source !== node.layout.source;
    if (animationType === 'size') {
      eachAxis((axis) => {
        const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];
        const length = calcLength(axisSnapshot,);
        axisSnapshot.min = layout2[axis].min;
        axisSnapshot.max = axisSnapshot.min + length;
      },);
    } else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout2,)) {
      eachAxis((axis) => {
        const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];
        const length = calcLength(layout2[axis],);
        axisSnapshot.max = axisSnapshot.min + length;
        if (node.relativeTarget && !node.currentAnimation) {
          node.isProjectionDirty = true;
          node.relativeTarget[axis].max = node.relativeTarget[axis].min + length;
        }
      },);
    }
    const layoutDelta = createDelta();
    calcBoxDelta(layoutDelta, layout2, snapshot.layoutBox,);
    const visualDelta = createDelta();
    if (isShared) {
      calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true,), snapshot.measuredBox,);
    } else {
      calcBoxDelta(visualDelta, layout2, snapshot.layoutBox,);
    }
    const hasLayoutChanged = !isDeltaZero(layoutDelta,);
    let hasRelativeLayoutChanged = false;
    if (!node.resumeFrom) {
      const relativeParent = node.getClosestProjectingParent();
      if (relativeParent && !relativeParent.resumeFrom) {
        const {
          snapshot: parentSnapshot,
          layout: parentLayout,
        } = relativeParent;
        if (parentSnapshot && parentLayout) {
          const relativeSnapshot = createBox();
          calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox,);
          const relativeLayout = createBox();
          calcRelativePosition(relativeLayout, layout2, parentLayout.layoutBox,);
          if (!boxEqualsRounded(relativeSnapshot, relativeLayout,)) {
            hasRelativeLayoutChanged = true;
          }
          if (relativeParent.options.layoutRoot) {
            node.relativeTarget = relativeLayout;
            node.relativeTargetOrigin = relativeSnapshot;
            node.relativeParent = relativeParent;
          }
        }
      }
    }
    node.notifyListeners('didUpdate', {
      layout: layout2,
      snapshot,
      delta: visualDelta,
      layoutDelta,
      hasLayoutChanged,
      hasRelativeLayoutChanged,
    },);
  } else if (node.isLead()) {
    const {
      onExitComplete,
    } = node.options;
    onExitComplete && onExitComplete();
  }
  node.options.transition = void 0;
}
function propagateDirtyNodes(node,) {
  if (statsBuffer.value) {
    metrics.nodes++;
  }
  if (!node.parent) return;
  if (!node.isProjecting()) {
    node.isProjectionDirty = node.parent.isProjectionDirty;
  }
  node.isSharedProjectionDirty ||
    (node.isSharedProjectionDirty = Boolean(
      node.isProjectionDirty || node.parent.isProjectionDirty || node.parent.isSharedProjectionDirty,
    ));
  node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);
}
function cleanDirtyNodes(node,) {
  node.isProjectionDirty = node.isSharedProjectionDirty = node.isTransformDirty = false;
}
function clearSnapshot(node,) {
  node.clearSnapshot();
}
function clearMeasurements(node,) {
  node.clearMeasurements();
}
function clearIsLayoutDirty(node,) {
  node.isLayoutDirty = false;
}
function resetTransformStyle(node,) {
  const {
    visualElement,
  } = node.options;
  if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {
    visualElement.notify('BeforeLayoutMeasure',);
  }
  node.resetTransform();
}
function finishAnimation(node,) {
  node.finishAnimation();
  node.targetDelta = node.relativeTarget = node.target = void 0;
  node.isProjectionDirty = true;
}
function resolveTargetDelta(node,) {
  node.resolveTargetDelta();
}
function calcProjection(node,) {
  node.calcProjection();
}
function resetSkewAndRotation(node,) {
  node.resetSkewAndRotation();
}
function removeLeadSnapshots(stack,) {
  stack.removeLeadSnapshot();
}
function mixAxisDelta(output, delta, p,) {
  output.translate = mixNumber(delta.translate, 0, p,);
  output.scale = mixNumber(delta.scale, 1, p,);
  output.origin = delta.origin;
  output.originPoint = delta.originPoint;
}
function mixAxis(output, from, to, p,) {
  output.min = mixNumber(from.min, to.min, p,);
  output.max = mixNumber(from.max, to.max, p,);
}
function mixBox(output, from, to, p,) {
  mixAxis(output.x, from.x, to.x, p,);
  mixAxis(output.y, from.y, to.y, p,);
}
function hasOpacityCrossfade(node,) {
  return node.animationValues && node.animationValues.opacityExit !== void 0;
}
var defaultLayoutTransition = {
  duration: 0.45,
  ease: [0.4, 0, 0.1, 1,],
};
var userAgentContains = (string) =>
  typeof __unframerNavigator !== 'undefined' && __unframerNavigator.userAgent &&
  __unframerNavigator.userAgent.toLowerCase().includes(string,);
var roundPoint = userAgentContains('applewebkit/',) && !userAgentContains('chrome/',) ? Math.round : noop;
function roundAxis(axis,) {
  axis.min = roundPoint(axis.min,);
  axis.max = roundPoint(axis.max,);
}
function roundBox(box,) {
  roundAxis(box.x,);
  roundAxis(box.y,);
}
function shouldAnimatePositionOnly(animationType, snapshot, layout2,) {
  return animationType === 'position' ||
    animationType === 'preserve-aspect' && !isNear(aspectRatio(snapshot,), aspectRatio(layout2,), 0.2,);
}
function checkNodeWasScrollRoot(node,) {
  var _a;
  return node !== node.root && ((_a = node.scroll) == null ? void 0 : _a.wasRoot);
}
var DocumentProjectionNode = createProjectionNode2({
  attachResizeListener: (ref, notify2,) => addDomEvent(ref, 'resize', notify2,),
  measureScroll: () => ({
    x: document.documentElement.scrollLeft || document.body.scrollLeft,
    y: document.documentElement.scrollTop || document.body.scrollTop,
  }),
  checkIsScrollRoot: () => true,
},);
var rootProjectionNode = {
  current: void 0,
};
var HTMLProjectionNode = createProjectionNode2({
  measureScroll: (instance) => ({
    x: instance.scrollLeft,
    y: instance.scrollTop,
  }),
  defaultParent: () => {
    if (!rootProjectionNode.current) {
      const documentNode = new DocumentProjectionNode({},);
      documentNode.mount(window,);
      documentNode.setOptions({
        layoutScroll: true,
      },);
      rootProjectionNode.current = documentNode;
    }
    return rootProjectionNode.current;
  },
  resetTransform: (instance, value,) => {
    instance.style.transform = value !== void 0 ? value : 'none';
  },
  checkIsScrollRoot: (instance) => Boolean(window.getComputedStyle(instance,).position === 'fixed',),
},);
var drag = {
  pan: {
    Feature: PanGesture,
  },
  drag: {
    Feature: DragGesture,
    ProjectionNode: HTMLProjectionNode,
    MeasureLayout,
  },
};
function handleHoverEvent(node, event, lifecycle,) {
  const {
    props,
  } = node;
  if (node.animationState && props.whileHover) {
    node.animationState.setActive('whileHover', lifecycle === 'Start',);
  }
  const eventName = 'onHover' + lifecycle;
  const callback = props[eventName];
  if (callback) {
    frame.postRender(() => callback(event, extractEventInfo(event,),));
  }
}
var HoverGesture = class extends Feature {
  mount() {
    const {
      current: current2,
    } = this.node;
    if (!current2) return;
    this.unmount = hover(current2, (_element, startEvent,) => {
      handleHoverEvent(this.node, startEvent, 'Start',);
      return (endEvent) => handleHoverEvent(this.node, endEvent, 'End',);
    },);
  }
  unmount() {}
};
var FocusGesture = class extends Feature {
  constructor() {
    super(...arguments,);
    this.isActive = false;
  }
  onFocus() {
    let isFocusVisible = false;
    try {
      isFocusVisible = this.node.current.matches(':focus-visible',);
    } catch (e) {
      isFocusVisible = true;
    }
    if (!isFocusVisible || !this.node.animationState) return;
    this.node.animationState.setActive('whileFocus', true,);
    this.isActive = true;
  }
  onBlur() {
    if (!this.isActive || !this.node.animationState) return;
    this.node.animationState.setActive('whileFocus', false,);
    this.isActive = false;
  }
  mount() {
    this.unmount = pipe(
      addDomEvent(this.node.current, 'focus', () => this.onFocus(),),
      addDomEvent(this.node.current, 'blur', () => this.onBlur(),),
    );
  }
  unmount() {}
};
function handlePressEvent(node, event, lifecycle,) {
  const {
    props,
  } = node;
  if (node.current instanceof HTMLButtonElement && node.current.disabled) {
    return;
  }
  if (node.animationState && props.whileTap) {
    node.animationState.setActive('whileTap', lifecycle === 'Start',);
  }
  const eventName = 'onTap' + (lifecycle === 'End' ? '' : lifecycle);
  const callback = props[eventName];
  if (callback) {
    frame.postRender(() => callback(event, extractEventInfo(event,),));
  }
}
var PressGesture = class extends Feature {
  mount() {
    const {
      current: current2,
    } = this.node;
    if (!current2) return;
    this.unmount = press(current2, (_element, startEvent,) => {
      handlePressEvent(this.node, startEvent, 'Start',);
      return (endEvent, {
        success,
      },) => handlePressEvent(this.node, endEvent, success ? 'End' : 'Cancel',);
    }, {
      useGlobalTarget: this.node.props.globalTapTarget,
    },);
  }
  unmount() {}
};
var observerCallbacks = /* @__PURE__ */ new WeakMap();
var observers = /* @__PURE__ */ new WeakMap();
var fireObserverCallback = (entry) => {
  const callback = observerCallbacks.get(entry.target,);
  callback && callback(entry,);
};
var fireAllObserverCallbacks = (entries) => {
  entries.forEach(fireObserverCallback,);
};
function initIntersectionObserver({
  root,
  ...options
},) {
  const lookupRoot = root || document;
  if (!observers.has(lookupRoot,)) {
    observers.set(lookupRoot, {},);
  }
  const rootObservers = observers.get(lookupRoot,);
  const key7 = JSON.stringify(options,);
  if (!rootObservers[key7]) {
    rootObservers[key7] = new IntersectionObserver(fireAllObserverCallbacks, {
      root,
      ...options,
    },);
  }
  return rootObservers[key7];
}
function observeIntersection(element, options, callback,) {
  const rootInteresectionObserver = initIntersectionObserver(options,);
  observerCallbacks.set(element, callback,);
  rootInteresectionObserver.observe(element,);
  return () => {
    observerCallbacks.delete(element,);
    rootInteresectionObserver.unobserve(element,);
  };
}
var thresholdNames = {
  some: 0,
  all: 1,
};
var InViewFeature = class extends Feature {
  constructor() {
    super(...arguments,);
    this.hasEnteredView = false;
    this.isInView = false;
  }
  startObserver() {
    this.unmount();
    const {
      viewport = {},
    } = this.node.getProps();
    const {
      root,
      margin: rootMargin,
      amount = 'some',
      once,
    } = viewport;
    const options = {
      root: root ? root.current : void 0,
      rootMargin,
      threshold: typeof amount === 'number' ? amount : thresholdNames[amount],
    };
    const onIntersectionUpdate = (entry) => {
      const {
        isIntersecting,
      } = entry;
      if (this.isInView === isIntersecting) return;
      this.isInView = isIntersecting;
      if (once && !isIntersecting && this.hasEnteredView) {
        return;
      } else if (isIntersecting) {
        this.hasEnteredView = true;
      }
      if (this.node.animationState) {
        this.node.animationState.setActive('whileInView', isIntersecting,);
      }
      const {
        onViewportEnter,
        onViewportLeave,
      } = this.node.getProps();
      const callback = isIntersecting ? onViewportEnter : onViewportLeave;
      callback && callback(entry,);
    };
    return observeIntersection(this.node.current, options, onIntersectionUpdate,);
  }
  mount() {
    this.startObserver();
  }
  update() {
    if (typeof IntersectionObserver === 'undefined') return;
    const {
      props,
      prevProps,
    } = this.node;
    const hasOptionsChanged = ['amount', 'margin', 'root',].some(hasViewportOptionChanged(props, prevProps,),);
    if (hasOptionsChanged) {
      this.startObserver();
    }
  }
  unmount() {}
};
function hasViewportOptionChanged({
  viewport = {},
}, {
  viewport: prevViewport = {},
} = {},) {
  return (name) => viewport[name] !== prevViewport[name];
}
var gestureAnimations = {
  inView: {
    Feature: InViewFeature,
  },
  tap: {
    Feature: PressGesture,
  },
  focus: {
    Feature: FocusGesture,
  },
  hover: {
    Feature: HoverGesture,
  },
};
var layout = {
  layout: {
    ProjectionNode: HTMLProjectionNode,
    MeasureLayout,
  },
};
var DOMVisualElement = class extends VisualElement {
  constructor() {
    super(...arguments,);
    this.KeyframeResolver = DOMKeyframesResolver;
  }
  sortInstanceNodePosition(a, b,) {
    return a.compareDocumentPosition(b,) & 2 ? 1 : -1;
  }
  getBaseTargetFromProps(props, key7,) {
    return props.style ? props.style[key7] : void 0;
  }
  removeValueFromRenderState(key7, {
    vars,
    style: style2,
  },) {
    delete vars[key7];
    delete style2[key7];
  }
  handleChildMotionValue() {
    if (this.childSubscription) {
      this.childSubscription();
      delete this.childSubscription;
    }
    const {
      children,
    } = this.props;
    if (isMotionValue(children,)) {
      this.childSubscription = children.on('change', (latest) => {
        if (this.current) {
          this.current.textContent = `${latest}`;
        }
      },);
    }
  }
};
function renderHTML(
  element,
  {
    style: style2,
    vars,
  },
  styleProp,
  projection,
) {
  Object.assign(element.style, style2, projection && projection.getProjectionStyles(styleProp,),);
  for (const key7 in vars) {
    element.style.setProperty(key7, vars[key7],);
  }
}
function getComputedStyle3(element,) {
  return window.getComputedStyle(element,);
}
var HTMLVisualElement = class extends DOMVisualElement {
  constructor() {
    super(...arguments,);
    this.type = 'html';
    this.renderInstance = renderHTML;
  }
  readValueFromInstance(instance, key7,) {
    var _a;
    if (transformProps.has(key7,)) {
      return ((_a = this.projection) == null ? void 0 : _a.isProjecting)
        ? defaultTransformValue(key7,)
        : readTransformValue(instance, key7,);
    } else {
      const computedStyle = getComputedStyle3(instance,);
      const value = (isCSSVariableName(key7,) ? computedStyle.getPropertyValue(key7,) : computedStyle[key7]) || 0;
      return typeof value === 'string' ? value.trim() : value;
    }
  }
  measureInstanceViewportBox(instance, {
    transformPagePoint,
  },) {
    return measureViewportBox(instance, transformPagePoint,);
  }
  build(renderState, latestValues, props,) {
    buildHTMLStyles(renderState, latestValues, props.transformTemplate,);
  }
  scrapeMotionValuesFromProps(props, prevProps, visualElement,) {
    return scrapeMotionValuesFromProps(props, prevProps, visualElement,);
  }
};
var camelCaseAttributes = /* @__PURE__ */ new Set([
  'baseFrequency',
  'diffuseConstant',
  'kernelMatrix',
  'kernelUnitLength',
  'keySplines',
  'keyTimes',
  'limitingConeAngle',
  'markerHeight',
  'markerWidth',
  'numOctaves',
  'targetX',
  'targetY',
  'surfaceScale',
  'specularConstant',
  'specularExponent',
  'stdDeviation',
  'tableValues',
  'viewBox',
  'gradientTransform',
  'pathLength',
  'startOffset',
  'textLength',
  'lengthAdjust',
],);
function renderSVG(element, renderState, _styleProp, projection,) {
  renderHTML(element, renderState, void 0, projection,);
  for (const key7 in renderState.attrs) {
    element.setAttribute(!camelCaseAttributes.has(key7,) ? camelToDash2(key7,) : key7, renderState.attrs[key7],);
  }
}
var SVGVisualElement = class extends DOMVisualElement {
  constructor() {
    super(...arguments,);
    this.type = 'svg';
    this.isSVGTag = false;
    this.measureInstanceViewportBox = createBox;
  }
  getBaseTargetFromProps(props, key7,) {
    return props[key7];
  }
  readValueFromInstance(instance, key7,) {
    if (transformProps.has(key7,)) {
      const defaultType = getDefaultValueType(key7,);
      return defaultType ? defaultType.default || 0 : 0;
    }
    key7 = !camelCaseAttributes.has(key7,) ? camelToDash2(key7,) : key7;
    return instance.getAttribute(key7,);
  }
  scrapeMotionValuesFromProps(props, prevProps, visualElement,) {
    return scrapeMotionValuesFromProps2(props, prevProps, visualElement,);
  }
  build(renderState, latestValues, props,) {
    buildSVGAttrs(renderState, latestValues, this.isSVGTag, props.transformTemplate, props.style,);
  }
  renderInstance(instance, renderState, styleProp, projection,) {
    renderSVG(instance, renderState, styleProp, projection,);
  }
  mount(instance,) {
    this.isSVGTag = isSVGTag(instance.tagName,);
    super.mount(instance,);
  }
};
var createDomVisualElement = (Component33, options,) => {
  return isSVGComponent(Component33,) ? new SVGVisualElement(options,) : new HTMLVisualElement(options, {
    allowProjection: Component33 !== Fragment,
  },);
};
var createMotionComponent = /* @__PURE__ */ createMotionComponentFactory({
  ...animations,
  ...gestureAnimations,
  ...drag,
  ...layout,
}, createDomVisualElement,);
var motion = /* @__PURE__ */ createDOMMotionComponentProxy(createMotionComponent,);
function useUnmountEffect(callback,) {
  return useEffect(() => () => callback(), [],);
}
var domAnimation = {
  renderer: createDomVisualElement,
  ...animations,
  ...gestureAnimations,
};
var domMax = {
  ...domAnimation,
  ...drag,
  ...layout,
};
var domMin = {
  renderer: createDomVisualElement,
  ...animations,
};
function useMotionValueEvent(value, event, callback,) {
  useInsertionEffect(() => value.on(event, callback,), [value, event, callback,],);
}
var maxElapsed2 = 50;
var createAxisInfo = () => ({
  current: 0,
  offset: [],
  progress: 0,
  scrollLength: 0,
  targetOffset: 0,
  targetLength: 0,
  containerLength: 0,
  velocity: 0,
});
var createScrollInfo = () => ({
  time: 0,
  x: createAxisInfo(),
  y: createAxisInfo(),
});
var keys = {
  x: {
    length: 'Width',
    position: 'Left',
  },
  y: {
    length: 'Height',
    position: 'Top',
  },
};
function updateAxisInfo(element, axisName, info, time2,) {
  const axis = info[axisName];
  const {
    length,
    position,
  } = keys[axisName];
  const prev = axis.current;
  const prevTime = info.time;
  axis.current = element[`scroll${position}`];
  axis.scrollLength = element[`scroll${length}`] - element[`client${length}`];
  axis.offset.length = 0;
  axis.offset[0] = 0;
  axis.offset[1] = axis.scrollLength;
  axis.progress = progress(0, axis.scrollLength, axis.current,);
  const elapsed = time2 - prevTime;
  axis.velocity = elapsed > maxElapsed2 ? 0 : velocityPerSecond(axis.current - prev, elapsed,);
}
function updateScrollInfo(element, info, time2,) {
  updateAxisInfo(element, 'x', info, time2,);
  updateAxisInfo(element, 'y', info, time2,);
  info.time = time2;
}
function calcInset(element, container,) {
  const inset2 = {
    x: 0,
    y: 0,
  };
  let current2 = element;
  while (current2 && current2 !== container) {
    if (isHTMLElement(current2,)) {
      inset2.x += current2.offsetLeft;
      inset2.y += current2.offsetTop;
      current2 = current2.offsetParent;
    } else if (current2.tagName === 'svg') {
      const svgBoundingBox = current2.getBoundingClientRect();
      current2 = current2.parentElement;
      const parentBoundingBox = current2.getBoundingClientRect();
      inset2.x += svgBoundingBox.left - parentBoundingBox.left;
      inset2.y += svgBoundingBox.top - parentBoundingBox.top;
    } else if (current2 instanceof SVGGraphicsElement) {
      const {
        x,
        y,
      } = current2.getBBox();
      inset2.x += x;
      inset2.y += y;
      let svg = null;
      let parent = current2.parentNode;
      while (!svg) {
        if (parent.tagName === 'svg') {
          svg = parent;
        }
        parent = current2.parentNode;
      }
      current2 = svg;
    } else {
      break;
    }
  }
  return inset2;
}
var namedEdges = {
  start: 0,
  center: 0.5,
  end: 1,
};
function resolveEdge(edge, length, inset2 = 0,) {
  let delta = 0;
  if (edge in namedEdges) {
    edge = namedEdges[edge];
  }
  if (typeof edge === 'string') {
    const asNumber3 = parseFloat(edge,);
    if (edge.endsWith('px',)) {
      delta = asNumber3;
    } else if (edge.endsWith('%',)) {
      edge = asNumber3 / 100;
    } else if (edge.endsWith('vw',)) {
      delta = asNumber3 / 100 * document.documentElement.clientWidth;
    } else if (edge.endsWith('vh',)) {
      delta = asNumber3 / 100 * document.documentElement.clientHeight;
    } else {
      edge = asNumber3;
    }
  }
  if (typeof edge === 'number') {
    delta = length * edge;
  }
  return inset2 + delta;
}
var defaultOffset2 = [0, 0,];
function resolveOffset(offset, containerLength, targetLength, targetInset,) {
  let offsetDefinition = Array.isArray(offset,) ? offset : defaultOffset2;
  let targetPoint = 0;
  let containerPoint = 0;
  if (typeof offset === 'number') {
    offsetDefinition = [offset, offset,];
  } else if (typeof offset === 'string') {
    offset = offset.trim();
    if (offset.includes(' ',)) {
      offsetDefinition = offset.split(' ',);
    } else {
      offsetDefinition = [offset, namedEdges[offset] ? offset : `0`,];
    }
  }
  targetPoint = resolveEdge(offsetDefinition[0], targetLength, targetInset,);
  containerPoint = resolveEdge(offsetDefinition[1], containerLength,);
  return targetPoint - containerPoint;
}
var ScrollOffset = {
  Enter: [[0, 1,], [1, 1,],],
  Exit: [[0, 0,], [1, 0,],],
  Any: [[1, 0,], [0, 1,],],
  All: [[0, 0,], [1, 1,],],
};
var point = {
  x: 0,
  y: 0,
};
function getTargetSize(target,) {
  return 'getBBox' in target && target.tagName !== 'svg' ? target.getBBox() : {
    width: target.clientWidth,
    height: target.clientHeight,
  };
}
function resolveOffsets(container, info, options,) {
  const {
    offset: offsetDefinition = ScrollOffset.All,
  } = options;
  const {
    target = container,
    axis = 'y',
  } = options;
  const lengthLabel = axis === 'y' ? 'height' : 'width';
  const inset2 = target !== container ? calcInset(target, container,) : point;
  const targetSize = target === container
    ? {
      width: container.scrollWidth,
      height: container.scrollHeight,
    }
    : getTargetSize(target,);
  const containerSize = {
    width: container.clientWidth,
    height: container.clientHeight,
  };
  info[axis].offset.length = 0;
  let hasChanged = !info[axis].interpolate;
  const numOffsets = offsetDefinition.length;
  for (let i = 0; i < numOffsets; i++) {
    const offset = resolveOffset(offsetDefinition[i], containerSize[lengthLabel], targetSize[lengthLabel], inset2[axis],);
    if (!hasChanged && offset !== info[axis].interpolatorOffsets[i]) {
      hasChanged = true;
    }
    info[axis].offset[i] = offset;
  }
  if (hasChanged) {
    info[axis].interpolate = interpolate(info[axis].offset, defaultOffset(offsetDefinition,), {
      clamp: false,
    },);
    info[axis].interpolatorOffsets = [...info[axis].offset,];
  }
  info[axis].progress = clamp(0, 1, info[axis].interpolate(info[axis].current,),);
}
function measure(container, target = container, info,) {
  info.x.targetOffset = 0;
  info.y.targetOffset = 0;
  if (target !== container) {
    let node = target;
    while (node && node !== container) {
      info.x.targetOffset += node.offsetLeft;
      info.y.targetOffset += node.offsetTop;
      node = node.offsetParent;
    }
  }
  info.x.targetLength = target === container ? target.scrollWidth : target.clientWidth;
  info.y.targetLength = target === container ? target.scrollHeight : target.clientHeight;
  info.x.containerLength = container.clientWidth;
  info.y.containerLength = container.clientHeight;
  if (false) {
    if (container && target && target !== container) {
      warnOnce(
        getComputedStyle(container,).position !== 'static',
        'Please ensure that the container has a non-static position, like \'relative\', \'fixed\', or \'absolute\' to ensure scroll offset is calculated correctly.',
      );
    }
  }
}
function createOnScrollHandler(element, onScroll, info, options = {},) {
  return {
    measure: (time2) => {
      measure(element, options.target, info,);
      updateScrollInfo(element, info, time2,);
      if (options.offset || options.target) {
        resolveOffsets(element, info, options,);
      }
    },
    notify: () => onScroll(info,),
  };
}
var scrollListeners = /* @__PURE__ */ new WeakMap();
var resizeListeners = /* @__PURE__ */ new WeakMap();
var onScrollHandlers = /* @__PURE__ */ new WeakMap();
var getEventTarget = (element) => element === document.scrollingElement ? window : element;
function scrollInfo(onScroll, {
  container = document.scrollingElement,
  ...options
} = {},) {
  if (!container) return noop;
  let containerHandlers = onScrollHandlers.get(container,);
  if (!containerHandlers) {
    containerHandlers = /* @__PURE__ */ new Set();
    onScrollHandlers.set(container, containerHandlers,);
  }
  const info = createScrollInfo();
  const containerHandler = createOnScrollHandler(container, onScroll, info, options,);
  containerHandlers.add(containerHandler,);
  if (!scrollListeners.has(container,)) {
    const measureAll = () => {
      for (const handler of containerHandlers) {
        handler.measure(frameData.timestamp,);
      }
      frame.preUpdate(notifyAll2,);
    };
    const notifyAll2 = () => {
      for (const handler of containerHandlers) {
        handler.notify();
      }
    };
    const listener2 = () => frame.read(measureAll,);
    scrollListeners.set(container, listener2,);
    const target = getEventTarget(container,);
    window.addEventListener('resize', listener2, {
      passive: true,
    },);
    if (container !== document.documentElement) {
      resizeListeners.set(container, resize(container, listener2,),);
    }
    target.addEventListener('scroll', listener2, {
      passive: true,
    },);
    listener2();
  }
  const listener = scrollListeners.get(container,);
  frame.read(listener, false, true,);
  return () => {
    var _a;
    cancelFrame(listener,);
    const currentHandlers = onScrollHandlers.get(container,);
    if (!currentHandlers) return;
    currentHandlers.delete(containerHandler,);
    if (currentHandlers.size) return;
    const scrollListener = scrollListeners.get(container,);
    scrollListeners.delete(container,);
    if (scrollListener) {
      getEventTarget(container,).removeEventListener('scroll', scrollListener,);
      (_a = resizeListeners.get(container,)) == null ? void 0 : _a();
      window.removeEventListener('resize', scrollListener,);
    }
  };
}
var timelineCache = /* @__PURE__ */ new Map();
function scrollTimelineFallback(options,) {
  const currentTime = {
    value: 0,
  };
  const cancel = scrollInfo((info) => {
    currentTime.value = info[options.axis].progress * 100;
  }, options,);
  return {
    currentTime,
    cancel,
  };
}
function getTimeline({
  source,
  container,
  ...options
},) {
  const {
    axis,
  } = options;
  if (source) container = source;
  const containerCache = timelineCache.get(container,) ?? /* @__PURE__ */ new Map();
  timelineCache.set(container, containerCache,);
  const targetKey = options.target ?? 'self';
  const targetCache = containerCache.get(targetKey,) ?? {};
  const axisKey = axis + (options.offset ?? []).join(',',);
  if (!targetCache[axisKey]) {
    targetCache[axisKey] = !options.target && supportsScrollTimeline()
      ? new ScrollTimeline({
        source: container,
        axis,
      },)
      : scrollTimelineFallback({
        container,
        ...options,
      },);
  }
  return targetCache[axisKey];
}
function attachToAnimation(animation, options,) {
  const timeline = getTimeline(options,);
  return animation.attachTimeline({
    timeline: options.target ? void 0 : timeline,
    observe: (valueAnimation) => {
      valueAnimation.pause();
      return observeTimeline((progress2) => {
        valueAnimation.time = valueAnimation.duration * progress2;
      }, timeline,);
    },
  },);
}
function isOnScrollWithInfo(onScroll,) {
  return onScroll.length === 2;
}
function attachToFunction(onScroll, options,) {
  if (isOnScrollWithInfo(onScroll,)) {
    return scrollInfo((info) => {
      onScroll(info[options.axis].progress, info,);
    }, options,);
  } else {
    return observeTimeline(onScroll, getTimeline(options,),);
  }
}
function scroll(onScroll, {
  axis = 'y',
  container = document.scrollingElement,
  ...options
} = {},) {
  if (!container) return noop;
  const optionsWithDefaults = {
    axis,
    container,
    ...options,
  };
  return typeof onScroll === 'function'
    ? attachToFunction(onScroll, optionsWithDefaults,)
    : attachToAnimation(onScroll, optionsWithDefaults,);
}
function refWarning(name, ref,) {
  warning(
    Boolean(!ref || ref.current,),
    `You have defined a ${name} options but the provided ref is not yet hydrated, probably because it's defined higher up the tree. Try calling useScroll() in the same component as the ref, or setting its \`layoutEffect: false\` option.`,
  );
}
var createScrollMotionValues = () => ({
  scrollX: motionValue(0,),
  scrollY: motionValue(0,),
  scrollXProgress: motionValue(0,),
  scrollYProgress: motionValue(0,),
});
function useScroll({
  container,
  target,
  layoutEffect = true,
  ...options
} = {},) {
  const values = useConstant(createScrollMotionValues,);
  const useLifecycleEffect = layoutEffect ? useIsomorphicLayoutEffect : useEffect;
  useLifecycleEffect(() => {
    refWarning('target', target,);
    refWarning('container', container,);
    return scroll((_progress, {
      x,
      y,
    },) => {
      values.scrollX.set(x.current,);
      values.scrollXProgress.set(x.progress,);
      values.scrollY.set(y.current,);
      values.scrollYProgress.set(y.progress,);
    }, {
      ...options,
      container: (container == null ? void 0 : container.current) || void 0,
      target: (target == null ? void 0 : target.current) || void 0,
    },);
  }, [container, target, JSON.stringify(options.offset,),],);
  return values;
}
function useElementScroll(ref,) {
  if (false) {
    warnOnce(false, 'useElementScroll is deprecated. Convert to useScroll({ container: ref }).',);
  }
  return useScroll({
    container: ref,
  },);
}
function useViewportScroll() {
  if (false) {
    warnOnce(false, 'useViewportScroll is deprecated. Convert to useScroll().',);
  }
  return useScroll();
}
function useMotionValue(initial,) {
  const value = useConstant(() => motionValue(initial,));
  const {
    isStatic,
  } = useContext(MotionConfigContext,);
  if (isStatic) {
    const [, setLatest,] = useState(initial,);
    useEffect(() => value.on('change', setLatest,), [],);
  }
  return value;
}
function useCombineMotionValues(values, combineValues,) {
  const value = useMotionValue(combineValues(),);
  const updateValue = () => value.set(combineValues(),);
  updateValue();
  useIsomorphicLayoutEffect(() => {
    const scheduleUpdate = () => frame.preRender(updateValue, false, true,);
    const subscriptions = values.map((v) => v.on('change', scheduleUpdate,));
    return () => {
      subscriptions.forEach((unsubscribe) => unsubscribe());
      cancelFrame(updateValue,);
    };
  },);
  return value;
}
function useMotionTemplate(fragments, ...values) {
  const numFragments = fragments.length;
  function buildValue() {
    let output = ``;
    for (let i = 0; i < numFragments; i++) {
      output += fragments[i];
      const value = values[i];
      if (value) {
        output += isMotionValue(value,) ? value.get() : value;
      }
    }
    return output;
  }
  return useCombineMotionValues(values.filter(isMotionValue,), buildValue,);
}
function useComputed(compute,) {
  collectMotionValues.current = [];
  compute();
  const value = useCombineMotionValues(collectMotionValues.current, compute,);
  collectMotionValues.current = void 0;
  return value;
}
function useTransform(input, inputRangeOrTransformer, outputRange, options,) {
  if (typeof input === 'function') {
    return useComputed(input,);
  }
  const transformer = typeof inputRangeOrTransformer === 'function'
    ? inputRangeOrTransformer
    : transform(inputRangeOrTransformer, outputRange, options,);
  return Array.isArray(input,) ? useListTransform(input, transformer,) : useListTransform([input,], ([latest,],) => transformer(latest,),);
}
function useListTransform(values, transformer,) {
  const latest = useConstant(() => []);
  return useCombineMotionValues(values, () => {
    latest.length = 0;
    const numValues = values.length;
    for (let i = 0; i < numValues; i++) {
      latest[i] = values[i].get();
    }
    return transformer(latest,);
  },);
}
function useSpring(source, options = {},) {
  const {
    isStatic,
  } = useContext(MotionConfigContext,);
  const getFromSource = () => isMotionValue(source,) ? source.get() : source;
  if (isStatic) {
    return useTransform(getFromSource,);
  }
  const value = useMotionValue(getFromSource(),);
  useInsertionEffect(() => {
    return attachSpring(value, source, options,);
  }, [value, JSON.stringify(options,),],);
  return value;
}
function useAnimationFrame(callback,) {
  const initialTimestamp = useRef3(0,);
  const {
    isStatic,
  } = useContext(MotionConfigContext,);
  useEffect(() => {
    if (isStatic) return;
    const provideTimeSinceStart = ({
      timestamp,
      delta,
    },) => {
      if (!initialTimestamp.current) initialTimestamp.current = timestamp;
      callback(timestamp - initialTimestamp.current, delta,);
    };
    frame.update(provideTimeSinceStart, true,);
    return () => cancelFrame(provideTimeSinceStart,);
  }, [callback,],);
}
function useTime() {
  const time2 = useMotionValue(0,);
  useAnimationFrame((t) => time2.set(t,));
  return time2;
}
function useVelocity(value,) {
  const velocity = useMotionValue(value.getVelocity(),);
  const updateVelocity = () => {
    const latest = value.getVelocity();
    velocity.set(latest,);
    if (latest) frame.update(updateVelocity,);
  };
  useMotionValueEvent(value, 'change', () => {
    frame.update(updateVelocity, false, true,);
  },);
  return velocity;
}
var WillChangeMotionValue = class extends MotionValue {
  constructor() {
    super(...arguments,);
    this.isEnabled = false;
  }
  add(name,) {
    if (transformProps.has(name,) || acceleratedValues2.has(name,)) {
      this.isEnabled = true;
      this.update();
    }
  }
  update() {
    this.set(this.isEnabled ? 'transform' : 'auto',);
  }
};
function useWillChange() {
  return useConstant(() => new WillChangeMotionValue('auto',));
}
function useReducedMotion() {
  !hasReducedMotionListener.current && initPrefersReducedMotion();
  const [shouldReduceMotion,] = useState(prefersReducedMotion.current,);
  if (false) {
    warnOnce(shouldReduceMotion !== true, 'You have Reduced Motion enabled on your device. Animations may not appear as expected.',);
  }
  return shouldReduceMotion;
}
function useReducedMotionConfig() {
  const reducedMotionPreference = useReducedMotion();
  const {
    reducedMotion,
  } = useContext(MotionConfigContext,);
  if (reducedMotion === 'never') {
    return false;
  } else if (reducedMotion === 'always') {
    return true;
  } else {
    return reducedMotionPreference;
  }
}
function stopAnimation(visualElement,) {
  visualElement.values.forEach((value) => value.stop());
}
function setVariants(visualElement, variantLabels,) {
  const reversedLabels = [...variantLabels,].reverse();
  reversedLabels.forEach((key7) => {
    const variant = visualElement.getVariant(key7,);
    variant && setTarget(visualElement, variant,);
    if (visualElement.variantChildren) {
      visualElement.variantChildren.forEach((child) => {
        setVariants(child, variantLabels,);
      },);
    }
  },);
}
function setValues(visualElement, definition,) {
  if (Array.isArray(definition,)) {
    return setVariants(visualElement, definition,);
  } else if (typeof definition === 'string') {
    return setVariants(visualElement, [definition,],);
  } else {
    setTarget(visualElement, definition,);
  }
}
function animationControls() {
  let hasMounted = false;
  const subscribers = /* @__PURE__ */ new Set();
  const controls = {
    subscribe(visualElement,) {
      subscribers.add(visualElement,);
      return () => void subscribers.delete(visualElement,);
    },
    start(definition, transitionOverride,) {
      invariant(
        hasMounted,
        'controls.start() should only be called after a component has mounted. Consider calling within a useEffect hook.',
      );
      const animations2 = [];
      subscribers.forEach((visualElement) => {
        animations2.push(animateVisualElement(visualElement, definition, {
          transitionOverride,
        },),);
      },);
      return Promise.all(animations2,);
    },
    set(definition,) {
      invariant(
        hasMounted,
        'controls.set() should only be called after a component has mounted. Consider calling within a useEffect hook.',
      );
      return subscribers.forEach((visualElement) => {
        setValues(visualElement, definition,);
      },);
    },
    stop() {
      subscribers.forEach((visualElement) => {
        stopAnimation(visualElement,);
      },);
    },
    mount() {
      hasMounted = true;
      return () => {
        hasMounted = false;
        controls.stop();
      };
    },
  };
  return controls;
}
function isDOMKeyframes(keyframes2,) {
  return typeof keyframes2 === 'object' && !Array.isArray(keyframes2,);
}
function resolveSubjects(subject, keyframes2, scope, selectorCache,) {
  if (typeof subject === 'string' && isDOMKeyframes(keyframes2,)) {
    return resolveElements(subject, scope, selectorCache,);
  } else if (subject instanceof NodeList) {
    return Array.from(subject,);
  } else if (Array.isArray(subject,)) {
    return subject;
  } else {
    return [subject,];
  }
}
function calculateRepeatDuration(duration, repeat, _repeatDelay,) {
  return duration * (repeat + 1);
}
function calcNextTime(current2, next2, prev, labels,) {
  if (typeof next2 === 'number') {
    return next2;
  } else if (next2.startsWith('-',) || next2.startsWith('+',)) {
    return Math.max(0, current2 + parseFloat(next2,),);
  } else if (next2 === '<') {
    return prev;
  } else {
    return labels.get(next2,) ?? current2;
  }
}
function eraseKeyframes(sequence2, startTime, endTime,) {
  for (let i = 0; i < sequence2.length; i++) {
    const keyframe = sequence2[i];
    if (keyframe.at > startTime && keyframe.at < endTime) {
      removeItem(sequence2, keyframe,);
      i--;
    }
  }
}
function addKeyframes(sequence2, keyframes2, easing, offset, startTime, endTime,) {
  eraseKeyframes(sequence2, startTime, endTime,);
  for (let i = 0; i < keyframes2.length; i++) {
    sequence2.push({
      value: keyframes2[i],
      at: mixNumber(startTime, endTime, offset[i],),
      easing: getEasingForSegment(easing, i,),
    },);
  }
}
function normalizeTimes(times, repeat,) {
  for (let i = 0; i < times.length; i++) {
    times[i] = times[i] / (repeat + 1);
  }
}
function compareByTime(a, b,) {
  if (a.at === b.at) {
    if (a.value === null) return 1;
    if (b.value === null) return -1;
    return 0;
  } else {
    return a.at - b.at;
  }
}
var defaultSegmentEasing = 'easeInOut';
var MAX_REPEAT = 20;
function createAnimationsFromSequence(
  sequence2,
  {
    defaultTransition = {},
    ...sequenceTransition
  } = {},
  scope,
  generators,
) {
  const defaultDuration = defaultTransition.duration || 0.3;
  const animationDefinitions = /* @__PURE__ */ new Map();
  const sequences = /* @__PURE__ */ new Map();
  const elementCache = {};
  const timeLabels = /* @__PURE__ */ new Map();
  let prevTime = 0;
  let currentTime = 0;
  let totalDuration = 0;
  for (let i = 0; i < sequence2.length; i++) {
    const segment = sequence2[i];
    if (typeof segment === 'string') {
      timeLabels.set(segment, currentTime,);
      continue;
    } else if (!Array.isArray(segment,)) {
      timeLabels.set(segment.name, calcNextTime(currentTime, segment.at, prevTime, timeLabels,),);
      continue;
    }
    let [subject, keyframes2, transition = {},] = segment;
    if (transition.at !== void 0) {
      currentTime = calcNextTime(currentTime, transition.at, prevTime, timeLabels,);
    }
    let maxDuration3 = 0;
    const resolveValueSequence = (valueKeyframes, valueTransition, valueSequence, elementIndex = 0, numSubjects = 0,) => {
      const valueKeyframesAsList = keyframesAsList(valueKeyframes,);
      const {
        delay: delay2 = 0,
        times = defaultOffset(valueKeyframesAsList,),
        type = 'keyframes',
        repeat,
        repeatType,
        repeatDelay = 0,
        ...remainingTransition
      } = valueTransition;
      let {
        ease: ease2 = defaultTransition.ease || 'easeOut',
        duration,
      } = valueTransition;
      const calculatedDelay = typeof delay2 === 'function' ? delay2(elementIndex, numSubjects,) : delay2;
      const numKeyframes = valueKeyframesAsList.length;
      const createGenerator = isGenerator(type,) ? type : generators == null ? void 0 : generators[type];
      if (numKeyframes <= 2 && createGenerator) {
        let absoluteDelta = 100;
        if (numKeyframes === 2 && isNumberKeyframesArray(valueKeyframesAsList,)) {
          const delta = valueKeyframesAsList[1] - valueKeyframesAsList[0];
          absoluteDelta = Math.abs(delta,);
        }
        const springTransition = {
          ...remainingTransition,
        };
        if (duration !== void 0) {
          springTransition.duration = secondsToMilliseconds(duration,);
        }
        const springEasing = createGeneratorEasing(springTransition, absoluteDelta, createGenerator,);
        ease2 = springEasing.ease;
        duration = springEasing.duration;
      }
      duration ?? (duration = defaultDuration);
      const startTime = currentTime + calculatedDelay;
      if (times.length === 1 && times[0] === 0) {
        times[1] = 1;
      }
      const remainder = times.length - valueKeyframesAsList.length;
      remainder > 0 && fillOffset(times, remainder,);
      valueKeyframesAsList.length === 1 && valueKeyframesAsList.unshift(null,);
      if (repeat) {
        invariant(repeat < MAX_REPEAT, 'Repeat count too high, must be less than 20',);
        duration = calculateRepeatDuration(duration, repeat,);
        const originalKeyframes = [...valueKeyframesAsList,];
        const originalTimes = [...times,];
        ease2 = Array.isArray(ease2,) ? [...ease2,] : [ease2,];
        const originalEase = [...ease2,];
        for (let repeatIndex = 0; repeatIndex < repeat; repeatIndex++) {
          valueKeyframesAsList.push(...originalKeyframes,);
          for (let keyframeIndex = 0; keyframeIndex < originalKeyframes.length; keyframeIndex++) {
            times.push(originalTimes[keyframeIndex] + (repeatIndex + 1),);
            ease2.push(keyframeIndex === 0 ? 'linear' : getEasingForSegment(originalEase, keyframeIndex - 1,),);
          }
        }
        normalizeTimes(times, repeat,);
      }
      const targetTime = startTime + duration;
      addKeyframes(valueSequence, valueKeyframesAsList, ease2, times, startTime, targetTime,);
      maxDuration3 = Math.max(calculatedDelay + duration, maxDuration3,);
      totalDuration = Math.max(targetTime, totalDuration,);
    };
    if (isMotionValue(subject,)) {
      const subjectSequence = getSubjectSequence(subject, sequences,);
      resolveValueSequence(keyframes2, transition, getValueSequence('default', subjectSequence,),);
    } else {
      const subjects = resolveSubjects(subject, keyframes2, scope, elementCache,);
      const numSubjects = subjects.length;
      for (let subjectIndex = 0; subjectIndex < numSubjects; subjectIndex++) {
        keyframes2 = keyframes2;
        transition = transition;
        const thisSubject = subjects[subjectIndex];
        const subjectSequence = getSubjectSequence(thisSubject, sequences,);
        for (const key7 in keyframes2) {
          resolveValueSequence(
            keyframes2[key7],
            getValueTransition2(transition, key7,),
            getValueSequence(key7, subjectSequence,),
            subjectIndex,
            numSubjects,
          );
        }
      }
    }
    prevTime = currentTime;
    currentTime += maxDuration3;
  }
  sequences.forEach((valueSequences, element,) => {
    for (const key7 in valueSequences) {
      const valueSequence = valueSequences[key7];
      valueSequence.sort(compareByTime,);
      const keyframes2 = [];
      const valueOffset = [];
      const valueEasing = [];
      for (let i = 0; i < valueSequence.length; i++) {
        const {
          at,
          value,
          easing,
        } = valueSequence[i];
        keyframes2.push(value,);
        valueOffset.push(progress(0, totalDuration, at,),);
        valueEasing.push(easing || 'easeOut',);
      }
      if (valueOffset[0] !== 0) {
        valueOffset.unshift(0,);
        keyframes2.unshift(keyframes2[0],);
        valueEasing.unshift(defaultSegmentEasing,);
      }
      if (valueOffset[valueOffset.length - 1] !== 1) {
        valueOffset.push(1,);
        keyframes2.push(null,);
      }
      if (!animationDefinitions.has(element,)) {
        animationDefinitions.set(element, {
          keyframes: {},
          transition: {},
        },);
      }
      const definition = animationDefinitions.get(element,);
      definition.keyframes[key7] = keyframes2;
      definition.transition[key7] = {
        ...defaultTransition,
        duration: totalDuration,
        ease: valueEasing,
        times: valueOffset,
        ...sequenceTransition,
      };
    }
  },);
  return animationDefinitions;
}
function getSubjectSequence(subject, sequences,) {
  !sequences.has(subject,) && sequences.set(subject, {},);
  return sequences.get(subject,);
}
function getValueSequence(name, sequences,) {
  if (!sequences[name]) sequences[name] = [];
  return sequences[name];
}
function keyframesAsList(keyframes2,) {
  return Array.isArray(keyframes2,) ? keyframes2 : [keyframes2,];
}
function getValueTransition2(transition, key7,) {
  return transition && transition[key7]
    ? {
      ...transition,
      ...transition[key7],
    }
    : {
      ...transition,
    };
}
var isNumber = (keyframe) => typeof keyframe === 'number';
var isNumberKeyframesArray = (keyframes2) => keyframes2.every(isNumber,);
function isObjectKey(key7, object,) {
  return key7 in object;
}
var ObjectVisualElement = class extends VisualElement {
  constructor() {
    super(...arguments,);
    this.type = 'object';
  }
  readValueFromInstance(instance, key7,) {
    if (isObjectKey(key7, instance,)) {
      const value = instance[key7];
      if (typeof value === 'string' || typeof value === 'number') {
        return value;
      }
    }
    return void 0;
  }
  getBaseTargetFromProps() {
    return void 0;
  }
  removeValueFromRenderState(key7, renderState,) {
    delete renderState.output[key7];
  }
  measureInstanceViewportBox() {
    return createBox();
  }
  build(renderState, latestValues,) {
    Object.assign(renderState.output, latestValues,);
  }
  renderInstance(instance, {
    output,
  },) {
    Object.assign(instance, output,);
  }
  sortInstanceNodePosition() {
    return 0;
  }
};
function createDOMVisualElement(element,) {
  const options = {
    presenceContext: null,
    props: {},
    visualState: {
      renderState: {
        transform: {},
        transformOrigin: {},
        style: {},
        vars: {},
        attrs: {},
      },
      latestValues: {},
    },
  };
  const node = isSVGElement(element,) && !isSVGSVGElement(element,) ? new SVGVisualElement(options,) : new HTMLVisualElement(options,);
  node.mount(element,);
  visualElementStore.set(element, node,);
}
function createObjectVisualElement(subject,) {
  const options = {
    presenceContext: null,
    props: {},
    visualState: {
      renderState: {
        output: {},
      },
      latestValues: {},
    },
  };
  const node = new ObjectVisualElement(options,);
  node.mount(subject,);
  visualElementStore.set(subject, node,);
}
function isSingleValue(subject, keyframes2,) {
  return isMotionValue(subject,) || typeof subject === 'number' || typeof subject === 'string' && !isDOMKeyframes(keyframes2,);
}
function animateSubject(subject, keyframes2, options, scope,) {
  const animations2 = [];
  if (isSingleValue(subject, keyframes2,)) {
    animations2.push(
      animateSingleValue(
        subject,
        isDOMKeyframes(keyframes2,) ? keyframes2.default || keyframes2 : keyframes2,
        options ? options.default || options : options,
      ),
    );
  } else {
    const subjects = resolveSubjects(subject, keyframes2, scope,);
    const numSubjects = subjects.length;
    invariant(Boolean(numSubjects,), 'No valid elements provided.',);
    for (let i = 0; i < numSubjects; i++) {
      const thisSubject = subjects[i];
      const createVisualElement = thisSubject instanceof Element ? createDOMVisualElement : createObjectVisualElement;
      if (!visualElementStore.has(thisSubject,)) {
        createVisualElement(thisSubject,);
      }
      const visualElement = visualElementStore.get(thisSubject,);
      const transition = {
        ...options,
      };
      if ('delay' in transition && typeof transition.delay === 'function') {
        transition.delay = transition.delay(i, numSubjects,);
      }
      animations2.push(...animateTarget(visualElement, {
        ...keyframes2,
        transition,
      }, {},),);
    }
  }
  return animations2;
}
function animateSequence(sequence2, options, scope,) {
  const animations2 = [];
  const animationDefinitions = createAnimationsFromSequence(sequence2, options, scope, {
    spring,
  },);
  animationDefinitions.forEach(({
    keyframes: keyframes2,
    transition,
  }, subject,) => {
    animations2.push(...animateSubject(subject, keyframes2, transition,),);
  },);
  return animations2;
}
function isSequence(value,) {
  return Array.isArray(value,) && value.some(Array.isArray,);
}
function createScopedAnimate(scope,) {
  function scopedAnimate(subjectOrSequence, optionsOrKeyframes, options,) {
    let animations2 = [];
    if (isSequence(subjectOrSequence,)) {
      animations2 = animateSequence(subjectOrSequence, optionsOrKeyframes, scope,);
    } else {
      animations2 = animateSubject(subjectOrSequence, optionsOrKeyframes, options, scope,);
    }
    const animation = new GroupAnimationWithThen(animations2,);
    if (scope) {
      scope.animations.push(animation,);
    }
    return animation;
  }
  return scopedAnimate;
}
var animate = createScopedAnimate();
function useAnimate() {
  const scope = useConstant(() => ({
    current: null,
    // Will be hydrated by React
    animations: [],
  }));
  const animate22 = useConstant(() => createScopedAnimate(scope,));
  useUnmountEffect(() => {
    scope.animations.forEach((animation) => animation.stop());
  },);
  return [scope, animate22,];
}
function animateElements(elementOrSelector, keyframes2, options, scope,) {
  const elements = resolveElements(elementOrSelector, scope,);
  const numElements = elements.length;
  invariant(Boolean(numElements,), 'No valid element provided.',);
  const animationDefinitions = [];
  for (let i = 0; i < numElements; i++) {
    const element = elements[i];
    const elementTransition = {
      ...options,
    };
    if (typeof elementTransition.delay === 'function') {
      elementTransition.delay = elementTransition.delay(i, numElements,);
    }
    for (const valueName in keyframes2) {
      let valueKeyframes = keyframes2[valueName];
      if (!Array.isArray(valueKeyframes,)) {
        valueKeyframes = [valueKeyframes,];
      }
      const valueOptions = {
        ...getValueTransition(elementTransition, valueName,),
      };
      valueOptions.duration && (valueOptions.duration = secondsToMilliseconds(valueOptions.duration,));
      valueOptions.delay && (valueOptions.delay = secondsToMilliseconds(valueOptions.delay,));
      const map2 = getAnimationMap(element,);
      const key7 = animationMapKey(valueName, valueOptions.pseudoElement || '',);
      const currentAnimation = map2.get(key7,);
      currentAnimation && currentAnimation.stop();
      animationDefinitions.push({
        map: map2,
        key: key7,
        unresolvedKeyframes: valueKeyframes,
        options: {
          ...valueOptions,
          element,
          name: valueName,
          allowFlatten: !elementTransition.type && !elementTransition.ease,
        },
      },);
    }
  }
  for (let i = 0; i < animationDefinitions.length; i++) {
    const {
      unresolvedKeyframes,
      options: animationOptions,
    } = animationDefinitions[i];
    const {
      element,
      name,
      pseudoElement,
    } = animationOptions;
    if (!pseudoElement && unresolvedKeyframes[0] === null) {
      unresolvedKeyframes[0] = getComputedStyle2(element, name,);
    }
    fillWildcards(unresolvedKeyframes,);
    applyPxDefaults(unresolvedKeyframes, name,);
    if (!pseudoElement && unresolvedKeyframes.length < 2) {
      unresolvedKeyframes.unshift(getComputedStyle2(element, name,),);
    }
    animationOptions.keyframes = unresolvedKeyframes;
  }
  const animations2 = [];
  for (let i = 0; i < animationDefinitions.length; i++) {
    const {
      map: map2,
      key: key7,
      options: animationOptions,
    } = animationDefinitions[i];
    const animation = new NativeAnimation(animationOptions,);
    map2.set(key7, animation,);
    animation.finished.finally(() => map2.delete(key7,));
    animations2.push(animation,);
  }
  return animations2;
}
var createScopedWaapiAnimate = (scope) => {
  function scopedAnimate(elementOrSelector, keyframes2, options,) {
    return new GroupAnimationWithThen(animateElements(elementOrSelector, keyframes2, options, scope,),);
  }
  return scopedAnimate;
};
var animateMini = /* @__PURE__ */ createScopedWaapiAnimate();
function useAnimateMini() {
  const scope = useConstant(() => ({
    current: null,
    // Will be hydrated by React
    animations: [],
  }));
  const animate22 = useConstant(() => createScopedWaapiAnimate(scope,));
  useUnmountEffect(() => {
    scope.animations.forEach((animation) => animation.stop());
  },);
  return [scope, animate22,];
}
function useAnimationControls() {
  const controls = useConstant(animationControls,);
  useIsomorphicLayoutEffect(controls.mount, [],);
  return controls;
}
var useAnimation = useAnimationControls;
function usePresenceData() {
  const context = useContext(PresenceContext,);
  return context ? context.custom : void 0;
}
function useDomEvent(ref, eventName, handler, options,) {
  useEffect(() => {
    const element = ref.current;
    if (handler && element) {
      return addDomEvent(element, eventName, handler, options,);
    }
  }, [ref, eventName, handler, options,],);
}
var DragControls = class {
  constructor() {
    this.componentControls = /* @__PURE__ */ new Set();
  }
  /**
   * Subscribe a component's internal `VisualElementDragControls` to the user-facing API.
   *
   * @internal
   */
  subscribe(controls,) {
    this.componentControls.add(controls,);
    return () => this.componentControls.delete(controls,);
  }
  /**
   * Start a drag gesture on every `motion` component that has this set of drag controls
   * passed into it via the `dragControls` prop.
   *
   * ```jsx
   * dragControls.start(e, {
   *   snapToCursor: true
   * })
   * ```
   *
   * @param event - PointerEvent
   * @param options - Options
   *
   * @public
   */
  start(event, options,) {
    this.componentControls.forEach((controls) => {
      controls.start(event.nativeEvent || event, options,);
    },);
  }
};
var createDragControls = () => new DragControls();
function useDragControls() {
  return useConstant(createDragControls,);
}
function isMotionComponent(component,) {
  return component !== null && typeof component === 'object' && motionComponentSymbol in component;
}
function unwrapMotionComponent(component,) {
  if (isMotionComponent(component,)) {
    return component[motionComponentSymbol];
  }
  return void 0;
}
function useInstantLayoutTransition() {
  return startTransition;
}
function startTransition(callback,) {
  if (!rootProjectionNode.current) return;
  rootProjectionNode.current.isUpdating = false;
  rootProjectionNode.current.blockUpdate();
  callback && callback();
}
function useResetProjection() {
  const reset = useCallback(() => {
    const root = rootProjectionNode.current;
    if (!root) return;
    root.resetTree();
  }, [],);
  return reset;
}
function useCycle(...items) {
  const index = useRef3(0,);
  const [item, setItem,] = useState(items[index.current],);
  const runCycle = useCallback((next2) => {
    index.current = typeof next2 !== 'number' ? wrap(0, items.length, index.current + 1,) : next2;
    setItem(items[index.current],);
  }, // The array will change on each call, but by putting items.length at
  // the front of this array, we guarantee the dependency comparison will match up
  // eslint-disable-next-line react-hooks/exhaustive-deps
  [items.length, ...items,],);
  return [item, runCycle,];
}
var thresholds = {
  some: 0,
  all: 1,
};
function inView(elementOrSelector, onStart, {
  root,
  margin: rootMargin,
  amount = 'some',
} = {},) {
  const elements = resolveElements(elementOrSelector,);
  const activeIntersections = /* @__PURE__ */ new WeakMap();
  const onIntersectionChange = (entries) => {
    entries.forEach((entry) => {
      const onEnd = activeIntersections.get(entry.target,);
      if (entry.isIntersecting === Boolean(onEnd,)) return;
      if (entry.isIntersecting) {
        const newOnEnd = onStart(entry.target, entry,);
        if (typeof newOnEnd === 'function') {
          activeIntersections.set(entry.target, newOnEnd,);
        } else {
          observer2.unobserve(entry.target,);
        }
      } else if (typeof onEnd === 'function') {
        onEnd(entry,);
        activeIntersections.delete(entry.target,);
      }
    },);
  };
  const observer2 = new IntersectionObserver(onIntersectionChange, {
    root,
    rootMargin,
    threshold: typeof amount === 'number' ? amount : thresholds[amount],
  },);
  elements.forEach((element) => observer2.observe(element,));
  return () => observer2.disconnect();
}
function useInView(ref, {
  root,
  margin,
  amount,
  once = false,
  initial = false,
} = {},) {
  const [isInView, setInView,] = useState(initial,);
  useEffect(() => {
    if (!ref.current || once && isInView) return;
    const onEnter = () => {
      setInView(true,);
      return once ? void 0 : () => setInView(false,);
    };
    const options = {
      root: root && root.current || void 0,
      margin,
      amount,
    };
    return inView(ref.current, onEnter, options,);
  }, [root, ref, margin, once, amount,],);
  return isInView;
}
function useInstantTransition() {
  const [forceUpdate, forcedRenderCount,] = useForceUpdate();
  const startInstantLayoutTransition = useInstantLayoutTransition();
  const unlockOnFrameRef = useRef3(-1,);
  useEffect(() => {
    frame.postRender(() =>
      frame.postRender(() => {
        if (forcedRenderCount !== unlockOnFrameRef.current) return;
        MotionGlobalConfig.instantAnimations = false;
      },)
    );
  }, [forcedRenderCount,],);
  return (callback) => {
    startInstantLayoutTransition(() => {
      MotionGlobalConfig.instantAnimations = true;
      forceUpdate();
      callback();
      unlockOnFrameRef.current = forcedRenderCount + 1;
    },);
  };
}
function disableInstantTransitions() {
  MotionGlobalConfig.instantAnimations = false;
}
var appearAnimationStore = /* @__PURE__ */ new Map();
var appearComplete = /* @__PURE__ */ new Map();
var appearStoreId = (elementId, valueName,) => {
  const key7 = transformProps.has(valueName,) ? 'transform' : valueName;
  return `${elementId}: ${key7}`;
};
function handoffOptimizedAppearAnimation(elementId, valueName, frame2,) {
  var _a;
  const storeId = appearStoreId(elementId, valueName,);
  const optimisedAnimation = appearAnimationStore.get(storeId,);
  if (!optimisedAnimation) {
    return null;
  }
  const {
    animation,
    startTime,
  } = optimisedAnimation;
  function cancelAnimation() {
    var _a2;
    (_a2 = window.MotionCancelOptimisedAnimation) == null ? void 0 : _a2.call(window, elementId, valueName, frame2,);
  }
  animation.onfinish = cancelAnimation;
  if (startTime === null || ((_a = window.MotionHandoffIsComplete) == null ? void 0 : _a.call(window, elementId,))) {
    cancelAnimation();
    return null;
  } else {
    return startTime;
  }
}
var startFrameTime;
var readyAnimation;
var suspendedAnimations = /* @__PURE__ */ new Set();
function resumeSuspendedAnimations() {
  suspendedAnimations.forEach((data2) => {
    data2.animation.play();
    data2.animation.startTime = data2.startTime;
  },);
  suspendedAnimations.clear();
}
function startOptimizedAppearAnimation(element, name, keyframes2, options, onReady,) {
  if (window.MotionIsMounted) {
    return;
  }
  const id4 = element.dataset[optimizedAppearDataId];
  if (!id4) return;
  window.MotionHandoffAnimation = handoffOptimizedAppearAnimation;
  const storeId = appearStoreId(id4, name,);
  if (!readyAnimation) {
    readyAnimation = startWaapiAnimation(element, name, [keyframes2[0], keyframes2[0],], /**
     * 10 secs is basically just a super-safe duration to give Chrome
     * long enough to get the animation ready.
     */
    {
      duration: 1e4,
      ease: 'linear',
    },);
    appearAnimationStore.set(storeId, {
      animation: readyAnimation,
      startTime: null,
    },);
    window.MotionHandoffAnimation = handoffOptimizedAppearAnimation;
    window.MotionHasOptimisedAnimation = (elementId, valueName,) => {
      if (!elementId) return false;
      if (!valueName) {
        return appearComplete.has(elementId,);
      }
      const animationId = appearStoreId(elementId, valueName,);
      return Boolean(appearAnimationStore.get(animationId,),);
    };
    window.MotionHandoffMarkAsComplete = (elementId) => {
      if (appearComplete.has(elementId,)) {
        appearComplete.set(elementId, true,);
      }
    };
    window.MotionHandoffIsComplete = (elementId) => {
      return appearComplete.get(elementId,) === true;
    };
    window.MotionCancelOptimisedAnimation = (elementId, valueName, frame2, canResume,) => {
      const animationId = appearStoreId(elementId, valueName,);
      const data2 = appearAnimationStore.get(animationId,);
      if (!data2) return;
      if (frame2 && canResume === void 0) {
        frame2.postRender(() => {
          frame2.postRender(() => {
            data2.animation.cancel();
          },);
        },);
      } else {
        data2.animation.cancel();
      }
      if (frame2 && canResume) {
        suspendedAnimations.add(data2,);
        frame2.render(resumeSuspendedAnimations,);
      } else {
        appearAnimationStore.delete(animationId,);
        if (!appearAnimationStore.size) {
          window.MotionCancelOptimisedAnimation = void 0;
        }
      }
    };
    window.MotionCheckAppearSync = (visualElement, valueName, value,) => {
      var _a, _b;
      const appearId = getOptimisedAppearId(visualElement,);
      if (!appearId) return;
      const valueIsOptimised = (_a = window.MotionHasOptimisedAnimation) == null ? void 0 : _a.call(window, appearId, valueName,);
      const externalAnimationValue = (_b = visualElement.props.values) == null ? void 0 : _b[valueName];
      if (!valueIsOptimised || !externalAnimationValue) return;
      const removeSyncCheck = value.on('change', (latestValue) => {
        var _a2;
        if (externalAnimationValue.get() !== latestValue) {
          (_a2 = window.MotionCancelOptimisedAnimation) == null ? void 0 : _a2.call(window, appearId, valueName,);
          removeSyncCheck();
        }
      },);
      return removeSyncCheck;
    };
  }
  const startAnimation2 = () => {
    readyAnimation.cancel();
    const appearAnimation = startWaapiAnimation(element, name, keyframes2, options,);
    if (startFrameTime === void 0) {
      startFrameTime = performance.now();
    }
    appearAnimation.startTime = startFrameTime;
    appearAnimationStore.set(storeId, {
      animation: appearAnimation,
      startTime: startFrameTime,
    },);
    if (onReady) onReady(appearAnimation,);
  };
  appearComplete.set(id4, false,);
  if (readyAnimation.ready) {
    readyAnimation.ready.then(startAnimation2,).catch(noop,);
  } else {
    startAnimation2();
  }
}
var createObject = () => ({});
var StateVisualElement = class extends VisualElement {
  constructor() {
    super(...arguments,);
    this.measureInstanceViewportBox = createBox;
  }
  build() {}
  resetTransform() {}
  restoreTransform() {}
  removeValueFromRenderState() {}
  renderInstance() {}
  scrapeMotionValuesFromProps() {
    return createObject();
  }
  getBaseTargetFromProps() {
    return void 0;
  }
  readValueFromInstance(_state, key7, options,) {
    return options.initialState[key7] || 0;
  }
  sortInstanceNodePosition() {
    return 0;
  }
};
var useVisualState = makeUseVisualState({
  scrapeMotionValuesFromProps: createObject,
  createRenderState: createObject,
},);
function useAnimatedState(initialState2,) {
  const [animationState, setAnimationState,] = useState(initialState2,);
  const visualState = useVisualState({}, false,);
  const element = useConstant(() => {
    return new StateVisualElement({
      props: {
        onUpdate: (v) => {
          setAnimationState({
            ...v,
          },);
        },
      },
      visualState,
      presenceContext: null,
    }, {
      initialState: initialState2,
    },);
  },);
  useLayoutEffect(() => {
    element.mount({},);
    return () => element.unmount();
  }, [element,],);
  const startAnimation2 = useConstant(() => (animationDefinition) => {
    return animateVisualElement(element, animationDefinition,);
  });
  return [animationState, startAnimation2,];
}
var maxScale = 1e5;
var invertScale = (scale2) => scale2 > 1e-3 ? 1 / scale2 : maxScale;
var hasWarned2 = false;
function useInvertedScale(scale2,) {
  let parentScaleX = useMotionValue(1,);
  let parentScaleY = useMotionValue(1,);
  const {
    visualElement,
  } = useContext(MotionContext,);
  invariant(
    !!(scale2 || visualElement),
    'If no scale values are provided, useInvertedScale must be used within a child of another motion component.',
  );
  warning(hasWarned2, 'useInvertedScale is deprecated and will be removed in 3.0. Use the layout prop instead.',);
  hasWarned2 = true;
  if (scale2) {
    parentScaleX = scale2.scaleX || parentScaleX;
    parentScaleY = scale2.scaleY || parentScaleY;
  } else if (visualElement) {
    parentScaleX = visualElement.getValue('scaleX', 1,);
    parentScaleY = visualElement.getValue('scaleY', 1,);
  }
  const scaleX2 = useTransform(parentScaleX, invertScale,);
  const scaleY2 = useTransform(parentScaleY, invertScale,);
  return {
    scaleX: scaleX2,
    scaleY: scaleY2,
  };
}
var namespace_exports = {};
__export(namespace_exports, {
  Group: () => ReorderGroup,
  Item: () => ReorderItem,
},);
var ReorderContext = createContext(null,);
function checkReorder(order, value, offset, velocity,) {
  if (!velocity) return order;
  const index = order.findIndex((item2) => item2.value === value);
  if (index === -1) return order;
  const nextOffset = velocity > 0 ? 1 : -1;
  const nextItem = order[index + nextOffset];
  if (!nextItem) return order;
  const item = order[index];
  const nextLayout = nextItem.layout;
  const nextItemCenter = mixNumber(nextLayout.min, nextLayout.max, 0.5,);
  if (nextOffset === 1 && item.layout.max + offset > nextItemCenter || nextOffset === -1 && item.layout.min + offset < nextItemCenter) {
    return moveItem(order, index, index + nextOffset,);
  }
  return order;
}
function ReorderGroupComponent({
  children,
  as = 'ul',
  axis = 'y',
  onReorder,
  values,
  ...props
}, externalRef,) {
  const Component33 = useConstant(() => motion[as]);
  const order = [];
  const isReordering = useRef3(false,);
  invariant(Boolean(values,), 'Reorder.Group must be provided a values prop',);
  const context = {
    axis,
    registerItem: (value, layout2,) => {
      const idx = order.findIndex((entry) => value === entry.value);
      if (idx !== -1) {
        order[idx].layout = layout2[axis];
      } else {
        order.push({
          value,
          layout: layout2[axis],
        },);
      }
      order.sort(compareMin,);
    },
    updateOrder: (item, offset, velocity,) => {
      if (isReordering.current) return;
      const newOrder = checkReorder(order, item, offset, velocity,);
      if (order !== newOrder) {
        isReordering.current = true;
        onReorder(newOrder.map(getValue,).filter((value) => values.indexOf(value,) !== -1),);
      }
    },
  };
  useEffect(() => {
    isReordering.current = false;
  },);
  return jsx3(Component33, {
    ...props,
    ref: externalRef,
    ignoreStrict: true,
    children: jsx3(ReorderContext.Provider, {
      value: context,
      children,
    },),
  },);
}
var ReorderGroup = /* @__PURE__ */ forwardRef(ReorderGroupComponent,);
function getValue(item,) {
  return item.value;
}
function compareMin(a, b,) {
  return a.layout.min - b.layout.min;
}
function useDefaultMotionValue(value, defaultValue = 0,) {
  return isMotionValue(value,) ? value : useMotionValue(defaultValue,);
}
function ReorderItemComponent({
  children,
  style: style2 = {},
  value,
  as = 'li',
  onDrag,
  layout: layout2 = true,
  ...props
}, externalRef,) {
  const Component33 = useConstant(() => motion[as]);
  const context = useContext(ReorderContext,);
  const point2 = {
    x: useDefaultMotionValue(style2.x,),
    y: useDefaultMotionValue(style2.y,),
  };
  const zIndex = useTransform([point2.x, point2.y,], ([latestX, latestY,],) => latestX || latestY ? 1 : 'unset',);
  invariant(Boolean(context,), 'Reorder.Item must be a child of Reorder.Group',);
  const {
    axis,
    registerItem,
    updateOrder,
  } = context;
  return jsx3(Component33, {
    drag: axis,
    ...props,
    dragSnapToOrigin: true,
    style: {
      ...style2,
      x: point2.x,
      y: point2.y,
      zIndex,
    },
    layout: layout2,
    onDrag: (event, gesturePoint,) => {
      const {
        velocity,
      } = gesturePoint;
      velocity[axis] && updateOrder(value, point2[axis].get(), velocity[axis],);
      onDrag && onDrag(event, gesturePoint,);
    },
    onLayoutMeasure: (measured) => registerItem(value, measured,),
    ref: externalRef,
    ignoreStrict: true,
    children,
  },);
}
var ReorderItem = /* @__PURE__ */ forwardRef(ReorderItemComponent,);
function getOriginIndex(from, total,) {
  if (from === 'first') {
    return 0;
  } else {
    const lastIndex = total - 1;
    return from === 'last' ? lastIndex : lastIndex / 2;
  }
}
function stagger(duration = 0.1, {
  startDelay = 0,
  from = 0,
  ease: ease2,
} = {},) {
  return (i, total,) => {
    const fromIndex = typeof from === 'number' ? from : getOriginIndex(from, total,);
    const distance2 = Math.abs(fromIndex - i,);
    let delay2 = duration * distance2;
    if (ease2) {
      const maxDelay = total * duration;
      const easingFunction = easingDefinitionToFunction(ease2,);
      delay2 = easingFunction(delay2 / maxDelay,) * maxDelay;
    }
    return startDelay + delay2;
  };
}

// /:https://app.framerstatic.com/framer.6RBAH774.mjs
import { lazy as ReactLazy, } from 'react';
import React4 from 'react';
import { startTransition as startTransition2, } from 'react';
import { Suspense as Suspense2, } from 'react';
import { memo as memo2, } from 'react';
import ReactDOM from 'react-dom';
import { createRef, } from 'react';
import { useTransition, } from 'react';
import { cloneElement as cloneElement32, } from 'react';
var __unframerNavigator2 = typeof window !== 'undefined' ? navigator : void 0;
var require_hsluv = __commonJS({
  '../../../node_modules/hsluv/dist/hsluv.cjs'(exports,) {
    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true,
    },);
    exports.Hsluv = void 0;
    var Hsluv2 = class _Hsluv {
      constructor() {
        this.hex = '#000000';
        this.rgb_r = 0;
        this.rgb_g = 0;
        this.rgb_b = 0;
        this.xyz_x = 0;
        this.xyz_y = 0;
        this.xyz_z = 0;
        this.luv_l = 0;
        this.luv_u = 0;
        this.luv_v = 0;
        this.lch_l = 0;
        this.lch_c = 0;
        this.lch_h = 0;
        this.hsluv_h = 0;
        this.hsluv_s = 0;
        this.hsluv_l = 0;
        this.hpluv_h = 0;
        this.hpluv_p = 0;
        this.hpluv_l = 0;
        this.r0s = 0;
        this.r0i = 0;
        this.r1s = 0;
        this.r1i = 0;
        this.g0s = 0;
        this.g0i = 0;
        this.g1s = 0;
        this.g1i = 0;
        this.b0s = 0;
        this.b0i = 0;
        this.b1s = 0;
        this.b1i = 0;
      }
      static fromLinear(c,) {
        if (c <= 31308e-7) {
          return 12.92 * c;
        } else {
          return 1.055 * Math.pow(c, 1 / 2.4,) - 0.055;
        }
      }
      static toLinear(c,) {
        if (c > 0.04045) {
          return Math.pow((c + 0.055) / 1.055, 2.4,);
        } else {
          return c / 12.92;
        }
      }
      static yToL(Y,) {
        if (Y <= _Hsluv.epsilon) {
          return Y / _Hsluv.refY * _Hsluv.kappa;
        } else {
          return 116 * Math.pow(Y / _Hsluv.refY, 1 / 3,) - 16;
        }
      }
      static lToY(L,) {
        if (L <= 8) {
          return _Hsluv.refY * L / _Hsluv.kappa;
        } else {
          return _Hsluv.refY * Math.pow((L + 16) / 116, 3,);
        }
      }
      static rgbChannelToHex(chan,) {
        const c = Math.round(chan * 255,);
        const digit2 = c % 16;
        const digit1 = (c - digit2) / 16 | 0;
        return _Hsluv.hexChars.charAt(digit1,) + _Hsluv.hexChars.charAt(digit2,);
      }
      static hexToRgbChannel(hex2, offset,) {
        const digit1 = _Hsluv.hexChars.indexOf(hex2.charAt(offset,),);
        const digit2 = _Hsluv.hexChars.indexOf(hex2.charAt(offset + 1,),);
        const n = digit1 * 16 + digit2;
        return n / 255;
      }
      static distanceFromOriginAngle(slope, intercept, angle,) {
        const d = intercept / (Math.sin(angle,) - slope * Math.cos(angle,));
        if (d < 0) {
          return Infinity;
        } else {
          return d;
        }
      }
      static distanceFromOrigin(slope, intercept,) {
        return Math.abs(intercept,) / Math.sqrt(Math.pow(slope, 2,) + 1,);
      }
      static min6(f1, f2, f3, f4, f5, f6,) {
        return Math.min(f1, Math.min(f2, Math.min(f3, Math.min(f4, Math.min(f5, f6,),),),),);
      }
      rgbToHex() {
        this.hex = '#';
        this.hex += _Hsluv.rgbChannelToHex(this.rgb_r,);
        this.hex += _Hsluv.rgbChannelToHex(this.rgb_g,);
        this.hex += _Hsluv.rgbChannelToHex(this.rgb_b,);
      }
      hexToRgb() {
        this.hex = this.hex.toLowerCase();
        this.rgb_r = _Hsluv.hexToRgbChannel(this.hex, 1,);
        this.rgb_g = _Hsluv.hexToRgbChannel(this.hex, 3,);
        this.rgb_b = _Hsluv.hexToRgbChannel(this.hex, 5,);
      }
      xyzToRgb() {
        this.rgb_r = _Hsluv.fromLinear(_Hsluv.m_r0 * this.xyz_x + _Hsluv.m_r1 * this.xyz_y + _Hsluv.m_r2 * this.xyz_z,);
        this.rgb_g = _Hsluv.fromLinear(_Hsluv.m_g0 * this.xyz_x + _Hsluv.m_g1 * this.xyz_y + _Hsluv.m_g2 * this.xyz_z,);
        this.rgb_b = _Hsluv.fromLinear(_Hsluv.m_b0 * this.xyz_x + _Hsluv.m_b1 * this.xyz_y + _Hsluv.m_b2 * this.xyz_z,);
      }
      rgbToXyz() {
        const lr = _Hsluv.toLinear(this.rgb_r,);
        const lg = _Hsluv.toLinear(this.rgb_g,);
        const lb = _Hsluv.toLinear(this.rgb_b,);
        this.xyz_x = 0.41239079926595 * lr + 0.35758433938387 * lg + 0.18048078840183 * lb;
        this.xyz_y = 0.21263900587151 * lr + 0.71516867876775 * lg + 0.072192315360733 * lb;
        this.xyz_z = 0.019330818715591 * lr + 0.11919477979462 * lg + 0.95053215224966 * lb;
      }
      xyzToLuv() {
        const divider = this.xyz_x + 15 * this.xyz_y + 3 * this.xyz_z;
        let varU = 4 * this.xyz_x;
        let varV = 9 * this.xyz_y;
        if (divider !== 0) {
          varU /= divider;
          varV /= divider;
        } else {
          varU = NaN;
          varV = NaN;
        }
        this.luv_l = _Hsluv.yToL(this.xyz_y,);
        if (this.luv_l === 0) {
          this.luv_u = 0;
          this.luv_v = 0;
        } else {
          this.luv_u = 13 * this.luv_l * (varU - _Hsluv.refU);
          this.luv_v = 13 * this.luv_l * (varV - _Hsluv.refV);
        }
      }
      luvToXyz() {
        if (this.luv_l === 0) {
          this.xyz_x = 0;
          this.xyz_y = 0;
          this.xyz_z = 0;
          return;
        }
        const varU = this.luv_u / (13 * this.luv_l) + _Hsluv.refU;
        const varV = this.luv_v / (13 * this.luv_l) + _Hsluv.refV;
        this.xyz_y = _Hsluv.lToY(this.luv_l,);
        this.xyz_x = 0 - 9 * this.xyz_y * varU / ((varU - 4) * varV - varU * varV);
        this.xyz_z = (9 * this.xyz_y - 15 * varV * this.xyz_y - varV * this.xyz_x) / (3 * varV);
      }
      luvToLch() {
        this.lch_l = this.luv_l;
        this.lch_c = Math.sqrt(this.luv_u * this.luv_u + this.luv_v * this.luv_v,);
        if (this.lch_c < 1e-8) {
          this.lch_h = 0;
        } else {
          const hrad = Math.atan2(this.luv_v, this.luv_u,);
          this.lch_h = hrad * 180 / Math.PI;
          if (this.lch_h < 0) {
            this.lch_h = 360 + this.lch_h;
          }
        }
      }
      lchToLuv() {
        const hrad = this.lch_h / 180 * Math.PI;
        this.luv_l = this.lch_l;
        this.luv_u = Math.cos(hrad,) * this.lch_c;
        this.luv_v = Math.sin(hrad,) * this.lch_c;
      }
      calculateBoundingLines(l,) {
        const sub1 = Math.pow(l + 16, 3,) / 1560896;
        const sub2 = sub1 > _Hsluv.epsilon ? sub1 : l / _Hsluv.kappa;
        const s1r = sub2 * (284517 * _Hsluv.m_r0 - 94839 * _Hsluv.m_r2);
        const s2r = sub2 * (838422 * _Hsluv.m_r2 + 769860 * _Hsluv.m_r1 + 731718 * _Hsluv.m_r0);
        const s3r = sub2 * (632260 * _Hsluv.m_r2 - 126452 * _Hsluv.m_r1);
        const s1g = sub2 * (284517 * _Hsluv.m_g0 - 94839 * _Hsluv.m_g2);
        const s2g = sub2 * (838422 * _Hsluv.m_g2 + 769860 * _Hsluv.m_g1 + 731718 * _Hsluv.m_g0);
        const s3g = sub2 * (632260 * _Hsluv.m_g2 - 126452 * _Hsluv.m_g1);
        const s1b = sub2 * (284517 * _Hsluv.m_b0 - 94839 * _Hsluv.m_b2);
        const s2b = sub2 * (838422 * _Hsluv.m_b2 + 769860 * _Hsluv.m_b1 + 731718 * _Hsluv.m_b0);
        const s3b = sub2 * (632260 * _Hsluv.m_b2 - 126452 * _Hsluv.m_b1);
        this.r0s = s1r / s3r;
        this.r0i = s2r * l / s3r;
        this.r1s = s1r / (s3r + 126452);
        this.r1i = (s2r - 769860) * l / (s3r + 126452);
        this.g0s = s1g / s3g;
        this.g0i = s2g * l / s3g;
        this.g1s = s1g / (s3g + 126452);
        this.g1i = (s2g - 769860) * l / (s3g + 126452);
        this.b0s = s1b / s3b;
        this.b0i = s2b * l / s3b;
        this.b1s = s1b / (s3b + 126452);
        this.b1i = (s2b - 769860) * l / (s3b + 126452);
      }
      calcMaxChromaHpluv() {
        const r0 = _Hsluv.distanceFromOrigin(this.r0s, this.r0i,);
        const r1 = _Hsluv.distanceFromOrigin(this.r1s, this.r1i,);
        const g0 = _Hsluv.distanceFromOrigin(this.g0s, this.g0i,);
        const g1 = _Hsluv.distanceFromOrigin(this.g1s, this.g1i,);
        const b0 = _Hsluv.distanceFromOrigin(this.b0s, this.b0i,);
        const b1 = _Hsluv.distanceFromOrigin(this.b1s, this.b1i,);
        return _Hsluv.min6(r0, r1, g0, g1, b0, b1,);
      }
      calcMaxChromaHsluv(h,) {
        const hueRad = h / 360 * Math.PI * 2;
        const r0 = _Hsluv.distanceFromOriginAngle(this.r0s, this.r0i, hueRad,);
        const r1 = _Hsluv.distanceFromOriginAngle(this.r1s, this.r1i, hueRad,);
        const g0 = _Hsluv.distanceFromOriginAngle(this.g0s, this.g0i, hueRad,);
        const g1 = _Hsluv.distanceFromOriginAngle(this.g1s, this.g1i, hueRad,);
        const b0 = _Hsluv.distanceFromOriginAngle(this.b0s, this.b0i, hueRad,);
        const b1 = _Hsluv.distanceFromOriginAngle(this.b1s, this.b1i, hueRad,);
        return _Hsluv.min6(r0, r1, g0, g1, b0, b1,);
      }
      hsluvToLch() {
        if (this.hsluv_l > 99.9999999) {
          this.lch_l = 100;
          this.lch_c = 0;
        } else if (this.hsluv_l < 1e-8) {
          this.lch_l = 0;
          this.lch_c = 0;
        } else {
          this.lch_l = this.hsluv_l;
          this.calculateBoundingLines(this.hsluv_l,);
          const max = this.calcMaxChromaHsluv(this.hsluv_h,);
          this.lch_c = max / 100 * this.hsluv_s;
        }
        this.lch_h = this.hsluv_h;
      }
      lchToHsluv() {
        if (this.lch_l > 99.9999999) {
          this.hsluv_s = 0;
          this.hsluv_l = 100;
        } else if (this.lch_l < 1e-8) {
          this.hsluv_s = 0;
          this.hsluv_l = 0;
        } else {
          this.calculateBoundingLines(this.lch_l,);
          const max = this.calcMaxChromaHsluv(this.lch_h,);
          this.hsluv_s = this.lch_c / max * 100;
          this.hsluv_l = this.lch_l;
        }
        this.hsluv_h = this.lch_h;
      }
      hpluvToLch() {
        if (this.hpluv_l > 99.9999999) {
          this.lch_l = 100;
          this.lch_c = 0;
        } else if (this.hpluv_l < 1e-8) {
          this.lch_l = 0;
          this.lch_c = 0;
        } else {
          this.lch_l = this.hpluv_l;
          this.calculateBoundingLines(this.hpluv_l,);
          const max = this.calcMaxChromaHpluv();
          this.lch_c = max / 100 * this.hpluv_p;
        }
        this.lch_h = this.hpluv_h;
      }
      lchToHpluv() {
        if (this.lch_l > 99.9999999) {
          this.hpluv_p = 0;
          this.hpluv_l = 100;
        } else if (this.lch_l < 1e-8) {
          this.hpluv_p = 0;
          this.hpluv_l = 0;
        } else {
          this.calculateBoundingLines(this.lch_l,);
          const max = this.calcMaxChromaHpluv();
          this.hpluv_p = this.lch_c / max * 100;
          this.hpluv_l = this.lch_l;
        }
        this.hpluv_h = this.lch_h;
      }
      hsluvToRgb() {
        this.hsluvToLch();
        this.lchToLuv();
        this.luvToXyz();
        this.xyzToRgb();
      }
      hpluvToRgb() {
        this.hpluvToLch();
        this.lchToLuv();
        this.luvToXyz();
        this.xyzToRgb();
      }
      hsluvToHex() {
        this.hsluvToRgb();
        this.rgbToHex();
      }
      hpluvToHex() {
        this.hpluvToRgb();
        this.rgbToHex();
      }
      rgbToHsluv() {
        this.rgbToXyz();
        this.xyzToLuv();
        this.luvToLch();
        this.lchToHpluv();
        this.lchToHsluv();
      }
      rgbToHpluv() {
        this.rgbToXyz();
        this.xyzToLuv();
        this.luvToLch();
        this.lchToHpluv();
        this.lchToHpluv();
      }
      hexToHsluv() {
        this.hexToRgb();
        this.rgbToHsluv();
      }
      hexToHpluv() {
        this.hexToRgb();
        this.rgbToHpluv();
      }
    };
    exports.Hsluv = Hsluv2;
    Hsluv2.hexChars = '0123456789abcdef';
    Hsluv2.refY = 1;
    Hsluv2.refU = 0.19783000664283;
    Hsluv2.refV = 0.46831999493879;
    Hsluv2.kappa = 903.2962962;
    Hsluv2.epsilon = 0.0088564516;
    Hsluv2.m_r0 = 3.240969941904521;
    Hsluv2.m_r1 = -1.537383177570093;
    Hsluv2.m_r2 = -0.498610760293;
    Hsluv2.m_g0 = -0.96924363628087;
    Hsluv2.m_g1 = 1.87596750150772;
    Hsluv2.m_g2 = 0.041555057407175;
    Hsluv2.m_b0 = 0.055630079696993;
    Hsluv2.m_b1 = -0.20397695888897;
    Hsluv2.m_b2 = 1.056971514242878;
  },
},);
var require_eventemitter3 = __commonJS({
  '../../../node_modules/eventemitter3/index.js'(exports, module,) {
    'use strict';

    var has = Object.prototype.hasOwnProperty;
    var prefix2 = '~';
    function Events() {}
    if (Object.create) {
      Events.prototype = /* @__PURE__ */ Object.create(null,);
      if (!new Events().__proto__) prefix2 = false;
    }
    function EE(fn, context, once,) {
      this.fn = fn;
      this.context = context;
      this.once = once || false;
    }
    function addListener(emitter, event, fn, context, once,) {
      if (typeof fn !== 'function') {
        throw new TypeError('The listener must be a function',);
      }
      var listener = new EE(fn, context || emitter, once,),
        evt = prefix2 ? prefix2 + event : event;
      if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
      else if (!emitter._events[evt].fn) emitter._events[evt].push(listener,);
      else emitter._events[evt] = [emitter._events[evt], listener,];
      return emitter;
    }
    function clearEvent(emitter, evt,) {
      if (--emitter._eventsCount === 0) emitter._events = new Events();
      else delete emitter._events[evt];
    }
    function EventEmitter2() {
      this._events = new Events();
      this._eventsCount = 0;
    }
    EventEmitter2.prototype.eventNames = function eventNames() {
      var names = [],
        events,
        name;
      if (this._eventsCount === 0) return names;
      for (name in events = this._events) {
        if (has.call(events, name,)) names.push(prefix2 ? name.slice(1,) : name,);
      }
      if (Object.getOwnPropertySymbols) {
        return names.concat(Object.getOwnPropertySymbols(events,),);
      }
      return names;
    };
    EventEmitter2.prototype.listeners = function listeners(event,) {
      var evt = prefix2 ? prefix2 + event : event,
        handlers = this._events[evt];
      if (!handlers) return [];
      if (handlers.fn) return [handlers.fn,];
      for (var i = 0, l = handlers.length, ee = new Array(l,); i < l; i++) {
        ee[i] = handlers[i].fn;
      }
      return ee;
    };
    EventEmitter2.prototype.listenerCount = function listenerCount(event,) {
      var evt = prefix2 ? prefix2 + event : event,
        listeners = this._events[evt];
      if (!listeners) return 0;
      if (listeners.fn) return 1;
      return listeners.length;
    };
    EventEmitter2.prototype.emit = function emit(event, a1, a2, a3, a4, a5,) {
      var evt = prefix2 ? prefix2 + event : event;
      if (!this._events[evt]) return false;
      var listeners = this._events[evt],
        len = arguments.length,
        args,
        i;
      if (listeners.fn) {
        if (listeners.once) this.removeListener(event, listeners.fn, void 0, true,);
        switch (len) {
          case 1:
            return listeners.fn.call(listeners.context,), true;
          case 2:
            return listeners.fn.call(listeners.context, a1,), true;
          case 3:
            return listeners.fn.call(listeners.context, a1, a2,), true;
          case 4:
            return listeners.fn.call(listeners.context, a1, a2, a3,), true;
          case 5:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4,), true;
          case 6:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5,), true;
        }
        for (i = 1, args = new Array(len - 1,); i < len; i++) {
          args[i - 1] = arguments[i];
        }
        listeners.fn.apply(listeners.context, args,);
      } else {
        var length = listeners.length,
          j;
        for (i = 0; i < length; i++) {
          if (listeners[i].once) this.removeListener(event, listeners[i].fn, void 0, true,);
          switch (len) {
            case 1:
              listeners[i].fn.call(listeners[i].context,);
              break;
            case 2:
              listeners[i].fn.call(listeners[i].context, a1,);
              break;
            case 3:
              listeners[i].fn.call(listeners[i].context, a1, a2,);
              break;
            case 4:
              listeners[i].fn.call(listeners[i].context, a1, a2, a3,);
              break;
            default:
              if (!args) {
                for (j = 1, args = new Array(len - 1,); j < len; j++) {
                  args[j - 1] = arguments[j];
                }
              }
              listeners[i].fn.apply(listeners[i].context, args,);
          }
        }
      }
      return true;
    };
    EventEmitter2.prototype.on = function on(event, fn, context,) {
      return addListener(this, event, fn, context, false,);
    };
    EventEmitter2.prototype.once = function once(event, fn, context,) {
      return addListener(this, event, fn, context, true,);
    };
    EventEmitter2.prototype.removeListener = function removeListener(event, fn, context, once,) {
      var evt = prefix2 ? prefix2 + event : event;
      if (!this._events[evt]) return this;
      if (!fn) {
        clearEvent(this, evt,);
        return this;
      }
      var listeners = this._events[evt];
      if (listeners.fn) {
        if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
          clearEvent(this, evt,);
        }
      } else {
        for (var i = 0, events = [], length = listeners.length; i < length; i++) {
          if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
            events.push(listeners[i],);
          }
        }
        if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
        else clearEvent(this, evt,);
      }
      return this;
    };
    EventEmitter2.prototype.removeAllListeners = function removeAllListeners(event,) {
      var evt;
      if (event) {
        evt = prefix2 ? prefix2 + event : event;
        if (this._events[evt]) clearEvent(this, evt,);
      } else {
        this._events = new Events();
        this._eventsCount = 0;
      }
      return this;
    };
    EventEmitter2.prototype.off = EventEmitter2.prototype.removeListener;
    EventEmitter2.prototype.addListener = EventEmitter2.prototype.on;
    EventEmitter2.prefixed = prefix2;
    EventEmitter2.EventEmitter = EventEmitter2;
    if ('undefined' !== typeof module) {
      module.exports = EventEmitter2;
    }
  },
},);
var require_react_is_production_min = __commonJS({
  '../../../node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.production.min.js'(exports,) {
    'use strict';

    var b = 'function' === typeof Symbol && Symbol.for;
    var c = b ? Symbol.for('react.element',) : 60103;
    var d = b ? Symbol.for('react.portal',) : 60106;
    var e = b ? Symbol.for('react.fragment',) : 60107;
    var f = b ? Symbol.for('react.strict_mode',) : 60108;
    var g = b ? Symbol.for('react.profiler',) : 60114;
    var h = b ? Symbol.for('react.provider',) : 60109;
    var k = b ? Symbol.for('react.context',) : 60110;
    var l = b ? Symbol.for('react.async_mode',) : 60111;
    var m2 = b ? Symbol.for('react.concurrent_mode',) : 60111;
    var n = b ? Symbol.for('react.forward_ref',) : 60112;
    var p = b ? Symbol.for('react.suspense',) : 60113;
    var q = b ? Symbol.for('react.suspense_list',) : 60120;
    var r = b ? Symbol.for('react.memo',) : 60115;
    var t = b ? Symbol.for('react.lazy',) : 60116;
    var v = b ? Symbol.for('react.block',) : 60121;
    var w = b ? Symbol.for('react.fundamental',) : 60117;
    var x = b ? Symbol.for('react.responder',) : 60118;
    var y = b ? Symbol.for('react.scope',) : 60119;
    function z(a,) {
      if ('object' === typeof a && null !== a) {
        var u = a.$$typeof;
        switch (u) {
          case c:
            switch (a = a.type, a) {
              case l:
              case m2:
              case e:
              case g:
              case f:
              case p:
                return a;
              default:
                switch (a = a && a.$$typeof, a) {
                  case k:
                  case n:
                  case t:
                  case r:
                  case h:
                    return a;
                  default:
                    return u;
                }
            }
          case d:
            return u;
        }
      }
    }
    function A(a,) {
      return z(a,) === m2;
    }
    exports.AsyncMode = l;
    exports.ConcurrentMode = m2;
    exports.ContextConsumer = k;
    exports.ContextProvider = h;
    exports.Element = c;
    exports.ForwardRef = n;
    exports.Fragment = e;
    exports.Lazy = t;
    exports.Memo = r;
    exports.Portal = d;
    exports.Profiler = g;
    exports.StrictMode = f;
    exports.Suspense = p;
    exports.isAsyncMode = function (a,) {
      return A(a,) || z(a,) === l;
    };
    exports.isConcurrentMode = A;
    exports.isContextConsumer = function (a,) {
      return z(a,) === k;
    };
    exports.isContextProvider = function (a,) {
      return z(a,) === h;
    };
    exports.isElement = function (a,) {
      return 'object' === typeof a && null !== a && a.$$typeof === c;
    };
    exports.isForwardRef = function (a,) {
      return z(a,) === n;
    };
    exports.isFragment = function (a,) {
      return z(a,) === e;
    };
    exports.isLazy = function (a,) {
      return z(a,) === t;
    };
    exports.isMemo = function (a,) {
      return z(a,) === r;
    };
    exports.isPortal = function (a,) {
      return z(a,) === d;
    };
    exports.isProfiler = function (a,) {
      return z(a,) === g;
    };
    exports.isStrictMode = function (a,) {
      return z(a,) === f;
    };
    exports.isSuspense = function (a,) {
      return z(a,) === p;
    };
    exports.isValidElementType = function (a,) {
      return 'string' === typeof a || 'function' === typeof a || a === e || a === m2 || a === g || a === f || a === p || a === q ||
        'object' === typeof a && null !== a &&
          (a.$$typeof === t || a.$$typeof === r || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n || a.$$typeof === w ||
            a.$$typeof === x || a.$$typeof === y || a.$$typeof === v);
    };
    exports.typeOf = z;
  },
},);
var require_react_is = __commonJS({
  '../../../node_modules/hoist-non-react-statics/node_modules/react-is/index.js'(exports, module,) {
    'use strict';

    if (true) {
      module.exports = require_react_is_production_min();
    } else {
      module.exports = null;
    }
  },
},);
var require_hoist_non_react_statics_cjs = __commonJS({
  '../../../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js'(exports, module,) {
    'use strict';

    var reactIs = require_react_is();
    var REACT_STATICS = {
      childContextTypes: true,
      contextType: true,
      contextTypes: true,
      defaultProps: true,
      displayName: true,
      getDefaultProps: true,
      getDerivedStateFromError: true,
      getDerivedStateFromProps: true,
      mixins: true,
      propTypes: true,
      type: true,
    };
    var KNOWN_STATICS = {
      name: true,
      length: true,
      prototype: true,
      caller: true,
      callee: true,
      arguments: true,
      arity: true,
    };
    var FORWARD_REF_STATICS = {
      '$$typeof': true,
      render: true,
      defaultProps: true,
      displayName: true,
      propTypes: true,
    };
    var MEMO_STATICS = {
      '$$typeof': true,
      compare: true,
      defaultProps: true,
      displayName: true,
      propTypes: true,
      type: true,
    };
    var TYPE_STATICS = {};
    TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
    TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
    function getStatics(component,) {
      if (reactIs.isMemo(component,)) {
        return MEMO_STATICS;
      }
      return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
    }
    var defineProperty = Object.defineProperty;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getPrototypeOf = Object.getPrototypeOf;
    var objectPrototype = Object.prototype;
    function hoistNonReactStatics(targetComponent, sourceComponent, blacklist,) {
      if (typeof sourceComponent !== 'string') {
        if (objectPrototype) {
          var inheritedComponent = getPrototypeOf(sourceComponent,);
          if (inheritedComponent && inheritedComponent !== objectPrototype) {
            hoistNonReactStatics(targetComponent, inheritedComponent, blacklist,);
          }
        }
        var keys3 = getOwnPropertyNames(sourceComponent,);
        if (getOwnPropertySymbols) {
          keys3 = keys3.concat(getOwnPropertySymbols(sourceComponent,),);
        }
        var targetStatics = getStatics(targetComponent,);
        var sourceStatics = getStatics(sourceComponent,);
        for (var i = 0; i < keys3.length; ++i) {
          var key7 = keys3[i];
          if (
            !KNOWN_STATICS[key7] && !(blacklist && blacklist[key7]) && !(sourceStatics && sourceStatics[key7]) &&
            !(targetStatics && targetStatics[key7])
          ) {
            var descriptor = getOwnPropertyDescriptor(sourceComponent, key7,);
            try {
              defineProperty(targetComponent, key7, descriptor,);
            } catch (e) {}
          }
        }
      }
      return targetComponent;
    }
    module.exports = hoistNonReactStatics;
  },
},);
var require_fontfaceobserver_standalone = __commonJS({
  '../../../node_modules/fontfaceobserver/fontfaceobserver.standalone.js'(exports, module,) {
    'use strict';

    (function () {
      function p(a, c,) {
        document.addEventListener ? a.addEventListener('scroll', c, false,) : a.attachEvent('scroll', c,);
      }
      function u(a,) {
        document.body ? a() : document.addEventListener
          ? document.addEventListener('DOMContentLoaded', function b() {
            document.removeEventListener('DOMContentLoaded', b,);
            a();
          },)
          : document.attachEvent('onreadystatechange', function g() {
            if ('interactive' == document.readyState || 'complete' == document.readyState) {
              document.detachEvent('onreadystatechange', g,), a();
            }
          },);
      }

      function w(a,) {
        this.g = document.createElement('div',);
        this.g.setAttribute('aria-hidden', 'true',);
        this.g.appendChild(document.createTextNode(a,),);
        this.h = document.createElement('span',);
        this.i = document.createElement('span',);
        this.m = document.createElement('span',);
        this.j = document.createElement('span',);
        this.l = -1;
        this.h.style.cssText =
          'max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;';
        this.i.style.cssText =
          'max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;';
        this.j.style.cssText =
          'max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;';
        this.m.style.cssText = 'display:inline-block;width:200%;height:200%;font-size:16px;max-width:none;';
        this.h.appendChild(this.m,);
        this.i.appendChild(this.j,);
        this.g.appendChild(this.h,);
        this.g.appendChild(this.i,);
      }
      function x(a, c,) {
        a.g.style.cssText =
          'max-width:none;min-width:20px;min-height:20px;display:inline-block;overflow:hidden;position:absolute;width:auto;margin:0;padding:0;top:-999px;white-space:nowrap;font-synthesis:none;font:' +
          c + ';';
      }
      function B(a,) {
        var c = a.g.offsetWidth,
          b = c + 100;
        a.j.style.width = b + 'px';
        a.i.scrollLeft = b;
        a.h.scrollLeft = a.h.scrollWidth + 100;
        return a.l !== c ? (a.l = c, true) : false;
      }
      function C(a, c,) {
        function b() {
          var e = g;
          B(e,) && null !== e.g.parentNode && c(e.l,);
        }
        var g = a;
        p(a.h, b,);
        p(a.i, b,);
        B(a,);
      }

      function D(a, c, b,) {
        c = c || {};
        b = b || window;
        this.family = a;
        this.style = c.style || 'normal';
        this.weight = c.weight || 'normal';
        this.stretch = c.stretch || 'normal';
        this.context = b;
      }
      var E = null,
        F = null,
        G = null,
        H = null;
      function I(a,) {
        null === F &&
          (M(a,) && /Apple/.test(window.navigator.vendor,)
            ? (a = /AppleWebKit\/([0-9]+)(?:\.([0-9]+))(?:\.([0-9]+))/.exec(window.navigator.userAgent,),
              F = !!a && 603 > parseInt(a[1], 10,))
            : F = false);
        return F;
      }
      function M(a,) {
        null === H && (H = !!a.document.fonts);
        return H;
      }
      function N(a, c,) {
        var b = a.style,
          g = a.weight;
        if (null === G) {
          var e = document.createElement('div',);
          try {
            e.style.font = 'condensed 100px sans-serif';
          } catch (q) {}
          G = '' !== e.style.font;
        }
        return [b, g, G ? a.stretch : '', '100px', c,].join(' ',);
      }
      D.prototype.load = function (a, c,) {
        var b = this,
          g = a || 'BESbswy',
          e = 0,
          q = c || 3e3,
          J = (/* @__PURE__ */ new Date()).getTime();
        return new Promise(function (K, L,) {
          if (M(b.context,) && !I(b.context,)) {
            var O = new Promise(function (r, t,) {
                function h() {
                  (/* @__PURE__ */ new Date()).getTime() - J >= q
                    ? t(Error('' + q + 'ms timeout exceeded',),)
                    : b.context.document.fonts.load(N(b, '"' + b.family + '"',), g,).then(function (n,) {
                      1 <= n.length ? r() : setTimeout(h, 25,);
                    }, t,);
                }
                h();
              },),
              P = new Promise(function (r, t,) {
                e = setTimeout(function () {
                  t(Error('' + q + 'ms timeout exceeded',),);
                }, q,);
              },);
            Promise.race([P, O,],).then(function () {
              clearTimeout(e,);
              K(b,);
            }, L,);
          } else {u(function () {
              function r() {
                var d;
                if (d = -1 != k && -1 != l || -1 != k && -1 != m2 || -1 != l && -1 != m2) {
                  (d = k != l && k != m2 && l != m2) ||
                  (null === E &&
                    (d = /AppleWebKit\/([0-9]+)(?:\.([0-9]+))/.exec(window.navigator.userAgent,),
                      E = !!d && (536 > parseInt(d[1], 10,) || 536 === parseInt(d[1], 10,) && 11 >= parseInt(d[2], 10,))),
                    d = E && (k == y && l == y && m2 == y || k == z && l == z && m2 == z || k == A && l == A && m2 == A)), d = !d;
                }
                d && (null !== f.parentNode && f.parentNode.removeChild(f,), clearTimeout(e,), K(b,));
              }
              function t() {
                if ((/* @__PURE__ */ new Date()).getTime() - J >= q) {
                  null !== f.parentNode && f.parentNode.removeChild(f,), L(Error('' + q + 'ms timeout exceeded',),);
                } else {
                  var d = b.context.document.hidden;
                  if (true === d || void 0 === d) k = h.g.offsetWidth, l = n.g.offsetWidth, m2 = v.g.offsetWidth, r();
                  e = setTimeout(t, 50,);
                }
              }
              var h = new w(g,),
                n = new w(g,),
                v = new w(g,),
                k = -1,
                l = -1,
                m2 = -1,
                y = -1,
                z = -1,
                A = -1,
                f = document.createElement('div',);
              f.dir = 'ltr';
              x(h, N(b, 'sans-serif',),);
              x(n, N(b, 'serif',),);
              x(v, N(b, 'monospace',),);
              f.appendChild(h.g,);
              f.appendChild(n.g,);
              f.appendChild(v.g,);
              b.context.document.body.appendChild(f,);
              y = h.g.offsetWidth;
              z = n.g.offsetWidth;
              A = v.g.offsetWidth;
              t();
              C(h, function (d,) {
                k = d;
                r();
              },);
              x(h, N(b, '"' + b.family + '",sans-serif',),);
              C(n, function (d,) {
                l = d;
                r();
              },);
              x(n, N(b, '"' + b.family + '",serif',),);
              C(v, function (d,) {
                m2 = d;
                r();
              },);
              x(v, N(b, '"' + b.family + '",monospace',),);
            },);}
        },);
      };
      'object' === typeof module
        ? module.exports = D
        : (window.FontFaceObserver = D, window.FontFaceObserver.prototype.load = D.prototype.load);
    })();
  },
},);
var preloadKey = 'preload';
function isLazyComponentType(componentType,) {
  return typeof componentType === 'object' && componentType !== null && !isValidElement(componentType,) && preloadKey in componentType;
}
function lazy(factory,) {
  const LazyComponent = ReactLazy(factory,);
  let factoryPromise;
  let LoadedComponent;
  let hasRendered = false;
  const Component17 = forwardRef(function LazyWithPreload(props, ref,) {
    useEffect(() => {
      hasRendered = true;
    }, [],);
    const Comp = LoadedComponent ?? LazyComponent;
    return /* @__PURE__ */ jsx3(Comp, {
      ref,
      ...props,
    },);
  },);
  Component17.preload = () => {
    if (!factoryPromise) {
      factoryPromise = factory().then((module) => {
        LoadedComponent = module.default;
        return LoadedComponent;
      },);
    }
    return factoryPromise;
  };
  Component17.getStatus = () => {
    return {
      hasLoaded: LoadedComponent !== void 0,
      hasRendered,
    };
  };
  return Component17;
}
var objectKeys = Object.keys;
function hasProp(o, prop,) {
  return Object.prototype.hasOwnProperty.call(o, prop,);
}
var equalsKey = 'equals';
function withEquals(o,) {
  if (o === null) return false;
  if (!(equalsKey in o)) return false;
  return typeof o.equals === 'function';
}
function valueEqual(a, b,) {
  if (a === b) return true;
  return a !== a && b !== b;
}
function arrayShallowEqual(a, b,) {
  const length = a.length;
  if (length !== b.length) return false;
  for (let i = length; i-- !== 0;) {
    if (!valueEqual(a[i], b[i],)) return false;
  }
  return true;
}
function arrayDeepEqual(a, b,) {
  const length = a.length;
  if (length !== b.length) return false;
  for (let i = length; i-- !== 0;) {
    if (!equal(a[i], b[i], true,)) return false;
  }
  return true;
}
function mapShallowEqual(a, b,) {
  if (a.size !== b.size) return false;
  for (const [key7, aValue,] of a.entries()) {
    if (!valueEqual(aValue, b.get(key7,),)) return false;
  }
  return true;
}
function mapDeepEqual(a, b,) {
  if (a.size !== b.size) return false;
  for (const [key7, aValue,] of a.entries()) {
    if (!equal(aValue, b.get(key7,), true,)) return false;
  }
  return true;
}
function setEqual(a, b,) {
  if (a.size !== b.size) return false;
  for (const aValue of a.keys()) {
    if (!b.has(aValue,)) return false;
  }
  return true;
}
function objectShallowEqual(a, b,) {
  const keys3 = objectKeys(a,);
  if (keys3.length !== objectKeys(b,).length) return false;
  for (const key7 of keys3) {
    if (!hasProp(b, key7,)) return false;
    if (key7 === '_owner' && hasProp(a, '$$typeof',) && a.$$typeof) {
      continue;
    }
    if (!valueEqual(a[key7], b[key7],)) return false;
  }
  return true;
}
function objectDeepEqual(a, b,) {
  const keys3 = objectKeys(a,);
  if (keys3.length !== objectKeys(b,).length) return false;
  for (const key7 of keys3) {
    if (!hasProp(b, key7,)) return false;
    if (key7 === '_owner' && hasProp(a, '$$typeof',) && a.$$typeof) {
      continue;
    }
    if (!equal(a[key7], b[key7], true,)) return false;
  }
  return true;
}
function equal(a, b, deep,) {
  if (a === b) return true;
  if (!a || !b) return a !== a && b !== b;
  const typeA = typeof a;
  const typeB = typeof b;
  if (typeA !== typeB) return false;
  if (typeA !== 'object') return false;
  const aIsArray = Array.isArray(a,);
  const bIsArray = Array.isArray(b,);
  if (aIsArray && bIsArray) {
    if (deep) {
      return arrayDeepEqual(a, b,);
    } else {
      return arrayShallowEqual(a, b,);
    }
  } else if (aIsArray !== bIsArray) {
    return false;
  }
  const aIsMap = a instanceof Map;
  const bIsMap = b instanceof Map;
  if (aIsMap && bIsMap) {
    if (deep) {
      return mapDeepEqual(a, b,);
    } else {
      return mapShallowEqual(a, b,);
    }
  } else if (aIsMap !== bIsMap) {
    return false;
  }
  const aIsSet = a instanceof Set;
  const bIsSet = b instanceof Set;
  if (aIsSet && bIsSet) {
    return setEqual(a, b,);
  } else if (aIsSet !== bIsSet) {
    return false;
  }
  const dateA = a instanceof Date;
  const dateB = b instanceof Date;
  if (dateA && dateB) {
    return a.getTime() === b.getTime();
  } else if (dateA !== dateB) {
    return false;
  }
  const regexpA = a instanceof RegExp;
  const regexpB = b instanceof RegExp;
  if (regexpA && regexpB) {
    return a.toString() === b.toString();
  } else if (regexpA !== regexpB) {
    return false;
  }
  if (withEquals(a,) && withEquals(b,)) {
    return a.equals(b,);
  }
  if (deep) {
    return objectDeepEqual(a, b,);
  } else {
    return objectShallowEqual(a, b,);
  }
}
function isEqual(a, b, deep = true,) {
  try {
    return equal(a, b, deep,);
  } catch (error) {
    if (error instanceof Error && /stack|recursion/iu.exec(error.message,)) {
      console.warn('Warning: isEqual does not handle circular references.', error.name, error.message,);
      return false;
    }
    throw error;
  }
}
function useGetRouteCallback(routes,) {
  return React4.useCallback((routeId) => routes[routeId], [routes,],);
}
var RouterContext = /* @__PURE__ */ (() => React4.createContext({},))();
function RouterAPIProvider({
  api,
  children,
},) {
  return /* @__PURE__ */ jsx3(RouterContext.Provider, {
    value: api,
    children,
  },);
}
function useRouter() {
  return React4.useContext(RouterContext,);
}
function RoutesProvider({
  routes,
  children,
},) {
  const getRoute = useGetRouteCallback(routes,);
  const api = useMemo2(() => ({
    getRoute,
  }), [getRoute,],);
  return /* @__PURE__ */ jsx3(RouterContext.Provider, {
    value: api,
    children,
  },);
}
var CurrentRouteContext = /* @__PURE__ */ (() => React4.createContext({},))();
function useCurrentRoute() {
  var _a;
  const router = useRouter();
  const override = useContext(CurrentRouteContext,);
  const id3 = (override == null ? void 0 : override.routeId) ?? router.currentRouteId;
  const pathVariables = (override == null ? void 0 : override.routeId) ? override.pathVariables : router.currentPathVariables;
  const route = id3 ? (_a = router.getRoute) == null ? void 0 : _a.call(router, id3,) : void 0;
  return useMemo2(() => {
    if (!id3 || !route) return void 0;
    return {
      ...route,
      id: id3,
      pathVariables,
    };
  }, [id3, pathVariables, route,],);
}
function useCurrentRouteKey() {
  const currentRoute = useCurrentRoute();
  if (!currentRoute) return void 0;
  return `${currentRoute.id}-${JSON.stringify(currentRoute.pathVariables,)}`;
}
function useCurrentRouteId() {
  var _a;
  return (_a = useCurrentRoute()) == null ? void 0 : _a.id;
}
function useOnRouteChange(cb,) {
  const currentRoute = useCurrentRoute();
  const lastRoute = React4.useRef(currentRoute,);
  if (isEqual(lastRoute.current, currentRoute,) || !currentRoute) return;
  lastRoute.current = currentRoute;
  cb(currentRoute,);
}
function useRoute(routeId,) {
  var _a;
  const routerAPI = useRouter();
  if (!routeId) return void 0;
  return (_a = routerAPI.getRoute) == null ? void 0 : _a.call(routerAPI, routeId,);
}
function getRouteElementId(route, hash2,) {
  if (hash2 && route) {
    if (route.elements && hash2 in route.elements) {
      return route.elements[hash2];
    } else {
      return hash2;
    }
  }
  return void 0;
}
var EMPTY_ARRAY = [];
function monitorINPRelatedInputs(signal,) {
  const inpRelatedInputs = ['pointerdown', 'pointerup', 'keydown', 'keyup',];
  const inpRelatedInputHandler = (event) => {
    const type = event.type;
    if (!inpRelatedInputs.includes(type,)) return;
    performance.mark(`framer-navigation-input`, {
      detail: {
        type,
      },
    },);
  };
  for (let i = 0; i < inpRelatedInputs.length; i++) {
    document.addEventListener(inpRelatedInputs[i], inpRelatedInputHandler, {
      signal,
    },);
  }
  return () => {
    for (let i = 0; i < inpRelatedInputs.length; i++) {
      document.removeEventListener(inpRelatedInputs[i], inpRelatedInputHandler,);
    }
  };
}
function useRouteElementId(id3, targetRouteId,) {
  const currentRoute = useCurrentRoute();
  const route = useRoute(targetRouteId,) ?? currentRoute;
  return React4.useMemo(() => {
    if (!route) return id3;
    return getRouteElementId(route, id3,);
  }, [id3, route,],);
}
function useCurrentPathVariables() {
  var _a;
  return (_a = useCurrentRoute()) == null ? void 0 : _a.pathVariables;
}
function isFunction(value,) {
  return typeof value === 'function';
}
function isBoolean(value,) {
  return typeof value === 'boolean';
}
function isString(value,) {
  return typeof value === 'string';
}
function isNumber2(value,) {
  return Number.isFinite(value,);
}
function isArray(value,) {
  return Array.isArray(value,);
}
function isObject2(value,) {
  return value !== null && typeof value === 'object' && !isArray(value,);
}
function isUndefined(value,) {
  return typeof value === 'undefined';
}
function isNull(value,) {
  return value === null;
}
function isNullish2(value,) {
  return value == null;
}
function isValidDate(value,) {
  return value instanceof Date && !Number.isNaN(value.getTime(),);
}
function isGenerator2(value,) {
  return isObject2(value,) && isFunction(value.return,);
}
var noop2 = () => {};
var isWindow = typeof window !== 'undefined';
var isBot =
  /* @__PURE__ */ (() => isWindow && /bot|-google|google-|yandex|ia_archiver|crawl|spider/iu.test(__unframerNavigator2.userAgent,))();
var supportsRequestIdleCallback = isWindow && typeof window.requestIdleCallback === 'function';
var requestIdleCallback = /* @__PURE__ */ (() =>
  // eslint-disable-next-line compat/compat,framer-studio/tscompat
  supportsRequestIdleCallback ? window.requestIdleCallback : setTimeout)();
function encodeSVGForCSS(svg,) {
  return `url('data:image/svg+xml,${svg.replaceAll('#', '%23',).replaceAll('\'', '%27',)}')`;
}
var mockWindow = {
  addEventListener: () => {},
  removeEventListener: () => {},
  dispatchEvent: () => false,
  ResizeObserver: void 0,
  onpointerdown: false,
  onpointermove: false,
  onpointerup: false,
  ontouchstart: false,
  ontouchmove: false,
  ontouchend: false,
  onmousedown: false,
  onmousemove: false,
  onmouseup: false,
  devicePixelRatio: 1,
  scrollX: 0,
  scrollY: 0,
  location: {
    hash: '',
    hostname: '',
    href: '',
    origin: '',
    pathname: '',
    search: '',
  },
  document: {
    baseURI: '',
    cookie: '',
    referrer: null,
  },
  setTimeout: () => 0,
  clearTimeout: () => {},
  setInterval: () => 0,
  clearInterval: () => {},
  requestAnimationFrame: () => 0,
  cancelAnimationFrame: () => {},
  requestIdleCallback: () => 0,
  getSelection: () => null,
  matchMedia: (query) => {
    return {
      matches: false,
      media: query,
      onchange: () => {},
      addEventListener: () => {},
      removeEventListener: () => {},
      addListener: () => {},
      removeListener: () => {},
      dispatchEvent: () => false,
    };
  },
  innerHeight: 0,
  innerWidth: 0,
  SVGSVGElement: {},
  scheduler: void 0,
  open: function (_url, _target, _features,) {},
  __framer_events: [],
};
var safeWindow = !isWindow ? mockWindow : window;
var canUseYield = /* @__PURE__ */ (() => safeWindow.scheduler && 'yield' in safeWindow.scheduler)();
var canUsePostTask = /* @__PURE__ */ (() => safeWindow.scheduler && 'postTask' in safeWindow.scheduler)();
var pendingResolvers = /* @__PURE__ */ new Set();
function resolvePendingPromises() {
  for (const resolve of pendingResolvers) resolve();
  pendingResolvers.clear();
}
function yieldUnlessUrgent(options,) {
  return new Promise((resolve) => {
    pendingResolvers.add(resolve,);
    if (document.hidden) {
      resolvePendingPromises();
      return;
    }
    document.addEventListener('visibilitychange', resolvePendingPromises,);
    document.addEventListener('pagehide', resolvePendingPromises,);
    frame.read(() => {
      const resolveFn = () => {
        var _a;
        pendingResolvers.delete(resolve,);
        if ((_a = options == null ? void 0 : options.signal) == null ? void 0 : _a.aborted) return;
        resolve();
      };
      void schedulerYield(options,).then(resolveFn,);
    },);
    return;
  },);
}
function interactionResponse(options,) {
  return new Promise((resolve) => {
    setTimeout(resolve, 100,);
    frame.read(
      () => {
        void schedulerYield(options,).then(resolve,);
      },
      false,
      // In some cases, interactionResponse might be called in a rAF. This means, we should right away call `schedulerYield`, as the next paint follows immediately.
      true,
    );
  },);
}
function schedulerYield(options,) {
  const priority = options == null ? void 0 : options.priority;
  const canUseModernAPI = canUseYield || canUsePostTask;
  if (!canUseModernAPI) {
    if (priority === 'user-blocking') {
      return Promise.resolve();
    }
    return new Promise((resolve) => {
      setTimeout(resolve, priority === 'background' ? 1 : 0,);
    },);
  }
  if (priority === 'background') {
    return new Promise((resolve) => {
      setTimeout(resolve, 1,);
    },);
  }
  if (canUseYield) {
    return safeWindow.scheduler.yield(options,).catch(noop2,);
  }
  return safeWindow.scheduler.postTask(() => {}, options,).catch(noop2,);
}
function yieldToMain(options,) {
  const {
    continueAfter,
    ensureContinueBeforeUnload,
    ...schedulerOptions
  } = options ?? {};
  if (ensureContinueBeforeUnload) {
    return yieldUnlessUrgent(schedulerOptions,);
  }
  if (continueAfter === 'paint') {
    return interactionResponse(schedulerOptions,);
  }
  return schedulerYield(schedulerOptions,);
}
var shouldPreloadBasedOnUA = !isBot;
function useRoutePreloader(routeIds, enabled = true,) {
  const {
    getRoute,
  } = useRouter();
  useEffect(() => {
    if (!getRoute || !enabled || !shouldPreloadBasedOnUA) return;
    for (const routeId of routeIds) {
      void preloadRoute(getRoute(routeId,),);
    }
  }, [routeIds, getRoute, enabled,],);
}
async function preloadRoute(route,) {
  if (!shouldPreloadBasedOnUA || !route) return;
  const component = route.page;
  if (!component || !isLazyComponentType(component,)) return;
  await yieldToMain();
  try {
    await component.preload();
  } catch (e) {
    if (false) console.warn('Preload failed', route, e,);
  }
}
function useRouteHandler(routeId, preload = false, elementId,) {
  const {
    navigate,
  } = useRouter();
  useRoutePreloader([routeId,], preload,);
  const handler = React4.useCallback(() => navigate == null ? void 0 : navigate(routeId, elementId,), [navigate, elementId, routeId,],);
  return handler;
}
var timezone;
var visitorLocale;
function setTimezoneAndLocaleForTracking() {
  const resolvedDateTimeOptions = Intl.DateTimeFormat().resolvedOptions();
  timezone = resolvedDateTimeOptions.timeZone;
  visitorLocale = resolvedDateTimeOptions.locale;
}
requestIdleCallback(setTimezoneAndLocaleForTracking,);
function sendTrackingEvent(eventType, eventData, sendOn = 'lazy',) {
  if (!safeWindow.__framer_events) return;
  if (!timezone || !visitorLocale) setTimezoneAndLocaleForTracking();
  safeWindow.__framer_events.push([eventType, {
    // Base properties common to all events
    referrer: null,
    // The first pageview event will always be sent before hydration, in a script in `exportToHTML.ts`.
    url: safeWindow.location.href,
    hostname: safeWindow.location.hostname || null,
    pathname: safeWindow.location.pathname || null,
    hash: safeWindow.location.hash || null,
    search: safeWindow.location.search || null,
    timezone,
    locale: visitorLocale,
    // Additional properties specific to custom events
    ...eventData,
  }, sendOn,],);
  switch (eventType) {
    case 'published_site_click': {
      const {
        trackingId,
        href,
      } = eventData;
      if (trackingId) {
        document.dispatchEvent(
          new CustomEvent('framer:click', {
            detail: {
              trackingId,
              href,
            },
          },),
        );
      }
      break;
    }
    case 'published_site_form_submit': {
      const {
        trackingId,
      } = eventData;
      if (trackingId) {
        document.dispatchEvent(
          new CustomEvent('framer:formsubmit', {
            detail: {
              trackingId,
            },
          },),
        );
      }
      break;
    }
    // NOTE: keep in sync with exportToHTML.ts, the initial pageview is sent from there
    case 'published_site_pageview': {
      const {
        framerLocale,
      } = eventData;
      document.dispatchEvent(
        new CustomEvent('framer:pageview', {
          detail: {
            framerLocale,
          },
        },),
      );
      break;
    }
  }
}
function computeRelativePath(from, to,) {
  if (!from.startsWith('/',) || !to.startsWith('/',)) {
    throw new Error('from/to paths are expected to be absolute',);
  }
  const [fromDir,] = getDirAndFile(from,);
  const [toDir, toFile,] = getDirAndFile(to,);
  let relativePath = relative(fromDir, toDir,);
  if (relativePath === '') relativePath = '.';
  if (!relativePath.startsWith('.',) && !relativePath.startsWith('/',)) {
    relativePath = './' + relativePath;
  }
  return relativePath + '/' + toFile;
}
function getDirAndFile(path,) {
  const index = path.lastIndexOf('/',);
  return [path.substring(0, index + 1,), path.substring(index + 1,),];
}
var CHAR_DOT = 46;
var CHAR_FORWARD_SLASH = 47;
var StringPrototypeCharCodeAt = (str, index,) => str.charCodeAt(index,);
var StringPrototypeLastIndexOf = (str, searchString,) => str.lastIndexOf(searchString,);
var StringPrototypeSlice = (str, start2, end,) => str.slice(start2, end,);
function relative(from, to,) {
  if (from === to) return '';
  from = '/' + normalizeString(from,);
  to = '/' + normalizeString(to,);
  if (from === to) return '';
  const fromStart = 1;
  const fromEnd = from.length;
  const fromLen = fromEnd - fromStart;
  const toStart = 1;
  const toLen = to.length - toStart;
  const length = fromLen < toLen ? fromLen : toLen;
  let lastCommonSep = -1;
  let i = 0;
  for (; i < length; i++) {
    const fromCode = StringPrototypeCharCodeAt(from, fromStart + i,);
    if (fromCode !== StringPrototypeCharCodeAt(to, toStart + i,)) break;
    else if (fromCode === CHAR_FORWARD_SLASH) lastCommonSep = i;
  }
  if (i === length) {
    if (toLen > length) {
      if (StringPrototypeCharCodeAt(to, toStart + i,) === CHAR_FORWARD_SLASH) {
        return StringPrototypeSlice(to, toStart + i + 1,);
      }
      if (i === 0) {
        return StringPrototypeSlice(to, toStart + i,);
      }
    } else if (fromLen > length) {
      if (StringPrototypeCharCodeAt(from, fromStart + i,) === CHAR_FORWARD_SLASH) {
        lastCommonSep = i;
      } else if (i === 0) {
        lastCommonSep = 0;
      }
    }
  }
  let out = '';
  for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
    if (i === fromEnd || StringPrototypeCharCodeAt(from, i,) === CHAR_FORWARD_SLASH) {
      out += out.length === 0 ? '..' : '/..';
    }
  }
  return `${out}${StringPrototypeSlice(to, toStart + lastCommonSep,)}`;
}
var allowAboveRoot = false;
var separator = '/';
var isPathSeparator = (code) => code === CHAR_FORWARD_SLASH;
function normalizeString(path,) {
  let res = '';
  let lastSegmentLength = 0;
  let lastSlash = -1;
  let dots = 0;
  let code = 0;
  for (let i = 0; i <= path.length; ++i) {
    if (i < path.length) code = StringPrototypeCharCodeAt(path, i,);
    else if (isPathSeparator(code,)) break;
    else code = CHAR_FORWARD_SLASH;
    if (isPathSeparator(code,)) {
      if (lastSlash === i - 1 || dots === 1) {}
      else if (dots === 2) {
        if (
          res.length < 2 || lastSegmentLength !== 2 || StringPrototypeCharCodeAt(res, res.length - 1,) !== CHAR_DOT ||
          StringPrototypeCharCodeAt(res, res.length - 2,) !== CHAR_DOT
        ) {
          if (res.length > 2) {
            const lastSlashIndex = StringPrototypeLastIndexOf(res, separator,);
            if (lastSlashIndex === -1) {
              res = '';
              lastSegmentLength = 0;
            } else {
              res = StringPrototypeSlice(res, 0, lastSlashIndex,);
              lastSegmentLength = res.length - 1 - StringPrototypeLastIndexOf(res, separator,);
            }
            lastSlash = i;
            dots = 0;
            continue;
          } else if (res.length !== 0) {
            res = '';
            lastSegmentLength = 0;
            lastSlash = i;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          res += res.length > 0 ? `${separator}..` : '..';
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0) res += `${separator}${StringPrototypeSlice(path, lastSlash + 1, i,)}`;
        else res = StringPrototypeSlice(path, lastSlash + 1, i,);
        lastSegmentLength = i - lastSlash - 1;
      }
      lastSlash = i;
      dots = 0;
    } else if (code === CHAR_DOT && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}
var customNotFoundPagePaths = /* @__PURE__ */ new Set(['/404.html', '/404', '/404/',],);
var pathVariablesRegExpRaw = ':([a-z]\\w*)';
var pathVariablesRegExp = /* @__PURE__ */ new RegExp(pathVariablesRegExpRaw, 'gi',);
function fillPathVariables(path, variables,) {
  return path.replace(pathVariablesRegExp, (match, name,) => {
    const value = variables[name];
    if (typeof value !== 'string' || value.length === 0) return match;
    return encodeURIComponent(value,);
  },);
}
function forwardCurrentQueryParams(href,) {
  const queryParamsString = typeof window !== 'undefined' ? window.location.search : '';
  if (!queryParamsString) {
    return href;
  }
  return forwardQueryParams(queryParamsString, href,);
}
function forwardQueryParams(queryParamsString, href,) {
  const startOfHash = href.indexOf('#',);
  const hrefWithoutHash = startOfHash === -1 ? href : href.substring(0, startOfHash,);
  const hash2 = startOfHash === -1 ? '' : href.substring(startOfHash,);
  const startOfSearch = hrefWithoutHash.indexOf('?',);
  if (startOfSearch === -1) {
    return hrefWithoutHash + queryParamsString + hash2;
  }
  const currentSearchParams = new URLSearchParams(queryParamsString,);
  const newSearchString = hrefWithoutHash.substring(startOfSearch + 1,);
  const newSearchParams = new URLSearchParams(newSearchString,);
  for (const [key7, value,] of currentSearchParams) {
    if (!newSearchParams.has(key7,)) {
      newSearchParams.append(key7, value,);
    }
  }
  return hrefWithoutHash.substring(0, startOfSearch + 1,) + newSearchParams.toString() + hash2;
}
async function replacePathVariables(path, currentLocale, nextLocale, defaultLocale, collectionId, pathVariables, collectionUtils,) {
  var _a;
  let resultPath = path;
  let isMissingInLocale = false;
  const resultPathVariables = {
    ...pathVariables,
  };
  const matches = Array.from(resultPath.matchAll(pathVariablesRegExp,),);
  const replacements = await Promise.all(matches.map(async (match) => {
    var _a2;
    const pathVariableWithDelimiter = match == null ? void 0 : match[0];
    const pathVariableValue = match == null ? void 0 : match[1];
    if (!pathVariableWithDelimiter || !pathVariableValue) {
      throw new Error('Failed to replace path variables: unexpected regex match group',);
    }
    const currentSlug = pathVariables[pathVariableValue];
    if (!currentSlug || !isString(currentSlug,)) {
      throw new Error(`No slug found for path variable ${pathVariableValue}`,);
    }
    const utils =
      await ((_a2 = collectionUtils == null ? void 0 : collectionUtils[collectionId]) == null ? void 0 : _a2.call(collectionUtils,));
    if (!utils || !currentLocale) {
      return currentSlug;
    }
    const recordId = await utils.getRecordIdBySlug(currentSlug, currentLocale,);
    if (!recordId) return currentSlug;
    const nextSlug = await utils.getSlugByRecordId(recordId, nextLocale,);
    if (!nextSlug) {
      isMissingInLocale = true;
      const defaultLocaleSlug = await utils.getSlugByRecordId(recordId, defaultLocale,);
      if (defaultLocaleSlug) {
        resultPathVariables[pathVariableValue] = defaultLocaleSlug;
      }
      return defaultLocaleSlug ?? currentSlug;
    }
    resultPathVariables[pathVariableValue] = nextSlug;
    return nextSlug;
  },),);
  let lastIndex = 0;
  let replacedPath = '';
  let hasMatch = false;
  for (let i = 0; i < matches.length; i++) {
    const match = matches[i];
    const replacement = replacements[i];
    if (!match || !replacement) continue;
    replacedPath += resultPath.substring(lastIndex, match.index,);
    lastIndex = (match.index ?? 0) + (((_a = match[0]) == null ? void 0 : _a.length) ?? 0);
    replacedPath += replacements[i];
    hasMatch = true;
  }
  if (hasMatch) {
    replacedPath += resultPath.substring(lastIndex,);
    resultPath = replacedPath;
  }
  return {
    path: resultPath,
    pathVariables: resultPathVariables,
    isMissingInLocale,
  };
}
async function getLocalizedNavigationPath({
  currentLocale,
  nextLocale,
  defaultLocale,
  route,
  pathVariables,
  collectionUtils,
  preserveQueryParams,
},) {
  const {
    path,
  } = route;
  let result = {
    path,
    pathVariables,
    isMissingInLocale: false,
  };
  if (!path) return result;
  if (pathVariables && route.collectionId) {
    try {
      const pathReplacement = await replacePathVariables(
        path,
        currentLocale,
        nextLocale,
        defaultLocale,
        route.collectionId,
        pathVariables,
        collectionUtils,
      );
      result = pathReplacement;
    } catch {}
  }
  if (nextLocale.slug) {
    result.path = '/' + nextLocale.slug + result.path;
  }
  if (preserveQueryParams && result.path) {
    result.path = forwardCurrentQueryParams(result.path,);
  }
  return result;
}
function getSitePrefix(siteCanonicalURL,) {
  if (!siteCanonicalURL) return '';
  let url;
  try {
    url = new URL(siteCanonicalURL,);
  } catch {
    return '';
  }
  if (url.pathname === '/' || window.location.origin !== url.origin) return '';
  return url.pathname.endsWith('/',) ? url.pathname.slice(0, -1,) : url.pathname;
}
var defaultSitePageEffects = {
  global: void 0,
  routes: {},
};
var PageEffectsContext = /* @__PURE__ */ React4.createContext(defaultSitePageEffects,);
function PageEffectsProvider({
  children,
  value,
},) {
  return /* @__PURE__ */ jsx3(PageEffectsContext.Provider, {
    value,
    children,
  },);
}
function usePageEffects() {
  return React4.useContext(PageEffectsContext,);
}
function getPageEffectForRoute(currentRouteId, nextRouteId, {
  global,
  routes,
},) {
  var _a;
  return ((_a = routes[currentRouteId]) == null ? void 0 : _a[nextRouteId]) || global;
}
var step = 10;
var maxDuration = 1e4;
function createLinearEasing(generator,) {
  let time2 = step;
  let state = generator.next(0,);
  const keyframes2 = [state.value,];
  while (!state.done && time2 < maxDuration) {
    state = generator.next(time2,);
    keyframes2.push(state.value,);
    time2 += step;
  }
  if (keyframes2.length === 1) keyframes2.push(state.value,);
  return {
    easing: `linear(${keyframes2.join(',',)})`,
    duration: time2 - step,
  };
}
var cssVariable = (name) => `--view-transition-${name}`;
function parseUnit(value,) {
  return [parseFloat(value,), value.endsWith('px',) ? 'px' : '%',];
}
function calcMaskPosition(mask,) {
  const {
    innerWidth,
    innerHeight,
  } = window;
  const [x, xUnit,] = parseUnit(mask.x,);
  const [y, yUnit,] = parseUnit(mask.y,);
  return {
    x: xUnit === 'px' ? x : innerWidth * (x / 100),
    y: yUnit === 'px' ? y : innerHeight * (y / 100),
  };
}
var conic = {
  makeKeyframe: (mask, progress2, page,) => {
    let percentage = 0;
    if (
      page === 'exit' && mask.angularDirection === 'clockwise' && progress2 === 'start' ||
      page === 'exit' && mask.angularDirection === 'counter-clockwise' && progress2 === 'end' ||
      page === 'enter' && mask.angularDirection === 'counter-clockwise' && progress2 === 'start' ||
      page === 'enter' && mask.angularDirection === 'clockwise' && progress2 === 'end'
    ) {
      percentage = mask.sweepAngle / 360 * 100;
    }
    return `${cssVariable('conic-offset',)}: ${percentage}%;`;
  },
  makeStyles: (mask, page,) => {
    const offsetToken = `var(${cssVariable('conic-offset',)})`;
    const isTransparentToBlack = page === 'exit' && mask.angularDirection === 'clockwise' ||
      page === 'enter' && mask.angularDirection === 'counter-clockwise';
    const firstColor = isTransparentToBlack ? 'transparent' : 'black';
    const secondColor = isTransparentToBlack ? 'black' : 'transparent';
    let gradient = `conic-gradient(from `;
    gradient += `${mask.angle}deg at ${mask.x} ${mask.y}, `;
    gradient += `${firstColor} 0%, ${firstColor} ${offsetToken}, `;
    gradient += `${secondColor} ${offsetToken}, ${secondColor} 100%)`;
    return `mask-image: ${gradient}; -webkit-mask-image: ${gradient};`;
  },
  makePropertyRules: () => `
        @property ${cssVariable('conic-offset',)} {
            syntax: '<percentage>';
            initial-value: 0%;
            inherits: false;
        }
    `,
};
var circle = {
  makeKeyframe: (mask, progress2,) => {
    const {
      x,
      y,
    } = calcMaskPosition(mask,);
    if (progress2 === 'start') {
      return `clip-path: circle(0 at ${x}px ${y}px);`;
    } else {
      const endRadius = Math.hypot(Math.max(x, window.innerWidth - x,), Math.max(y, window.innerHeight - y,),);
      return `clip-path: circle(${endRadius}px at ${x}px ${y}px);`;
    }
  },
};
var inset = {
  makeKeyframe: (mask, progress2,) => {
    const {
      x,
      y,
    } = calcMaskPosition(mask,);
    const bottom = window.innerHeight - y;
    const right = window.innerWidth - x;
    return progress2 === 'start'
      ? `clip-path: inset(${y}px ${right}px ${bottom}px ${x}px round ${mask.round}px);`
      : `clip-path: inset(0 round 0);`;
  },
};
var blinds = {
  makeKeyframe: (mask, progress2, page,) => {
    const [, unit,] = parseUnit(mask.width,);
    let width = `0${unit}`;
    if (progress2 === 'start' && page === 'exit' || progress2 === 'end' && page === 'enter') {
      width = mask.width;
    }
    return `${cssVariable('blinds-width',)}: ${width};`;
  },
  makeStyles: (mask, page,) => {
    const widthToken = `var(${cssVariable('blinds-width',)})`;
    const firstColor = page === 'exit' ? 'transparent' : 'black';
    const secondColor = page === 'exit' ? 'black' : 'transparent';
    let gradient = `repeating-linear-gradient(`;
    gradient += mask.angle + 90 + 'deg, ';
    gradient += `${firstColor} 0px, ${firstColor} ${widthToken}, `;
    gradient += `${secondColor} ${widthToken}, ${secondColor} ${mask.width})`;
    return `mask-image: ${gradient}; -webkit-mask-image: ${gradient};`;
  },
  makePropertyRules: () => {
    return `
            @property ${cssVariable('blinds-width',)} {
                syntax: '<length-percentage>';
                initial-value: 0px;
                inherits: false;
            }
        `;
  },
};
var wipe = {
  makeKeyframe: (_mask, progress2, page,) => {
    const offset = progress2 === 'start' && page === 'exit' || progress2 === 'end' && page === 'enter' ? 1 : 0;
    return `${cssVariable('wipe-offset',)}: ${offset};`;
  },
  makeStyles: (mask, page,) => {
    const offsetToken = `var(${cssVariable('wipe-offset',)})`;
    const firstColor = page === 'exit' ? 'transparent' : 'black';
    const secondColor = page === 'exit' ? 'black' : 'transparent';
    let gradient = `linear-gradient(`;
    gradient += mask.angle + 90 + 'deg, ';
    gradient += `${firstColor} calc(calc(0% - ${mask.width}) + calc(calc(100% + ${mask.width}) * ${offsetToken})), `;
    gradient += `${secondColor} calc(calc(100% + ${mask.width}) * ${offsetToken}))`;
    return `mask-image: ${gradient}; -webkit-mask-image: ${gradient};`;
  },
  makePropertyRules: () => {
    return `
            @property ${cssVariable('wipe-offset',)} {
                syntax: '<number>';
                initial-value: 0;
                inherits: false;
            }
        `;
  },
};
var maskGenerators = {
  circle,
  conic,
  inset,
  blinds,
  wipe,
};
var restState = {
  opacity: 1,
  x: '0px',
  y: '0px',
  scale: 1,
  rotate: 0,
  rotateX: 0,
  rotateY: 0,
  mask: void 0,
};
function valuesToCSSKeyframes(values, progress2, page, maskGenerator,) {
  var _a;
  let keyframes2 = `
      opacity: ${values.opacity};
      transform: translate(${values.x}, ${values.y}) scale(${values.scale}) rotateX(${values.rotateX}deg) rotateY(${values.rotateY}deg) rotateZ(${values.rotate}deg);
    `;
  if (values.mask) {
    keyframes2 += ((_a = maskGenerator == null ? void 0 : maskGenerator.makeKeyframe) == null
      ? void 0
      : _a.call(maskGenerator, values.mask, progress2, page,)) || '';
  }
  return keyframes2;
}
function getMaskGenerator(type,) {
  return type ? maskGenerators[type] : void 0;
}
function createPageTransitionRules(page, {
  transition,
  ...values
},) {
  var _a;
  const name = 'view-transition-' + page;
  const settings = {
    duration: '0s',
    easing: 'linear',
  };
  if (transition.type === 'tween') {
    settings.duration = transition.duration + 's';
    settings.easing = `cubic-bezier(${transition.ease.join(',',)})`;
  } else if (isSpringTransition(transition,)) {
    const {
      easing,
      duration,
    } = createLinearEasing(spring({
      keyframes: [0, 1,],
      ...getSpringOptions2(transition,),
      restDelta: 1e-3,
      restSpeed: 1e-4,
    },),);
    settings.duration = duration + 'ms';
    settings.easing = easing;
  }
  const maskGenerator = getMaskGenerator((_a = values == null ? void 0 : values.mask) == null ? void 0 : _a.type,);
  let startKeyframes = valuesToCSSKeyframes(values, 'start', page, maskGenerator,);
  let endKeyframes = valuesToCSSKeyframes(
    {
      ...restState,
      mask: values.mask,
    },
    'end',
    page,
    maskGenerator,
  );
  if (page === 'exit') {
    [startKeyframes, endKeyframes,] = [endKeyframes, startKeyframes,];
  }
  return `
        ${
    values.mask && (maskGenerator == null ? void 0 : maskGenerator.makePropertyRules) ? maskGenerator.makePropertyRules(values.mask,) : ''
  }

        @keyframes ${name} {
            0% {
                ${startKeyframes}
            }

            100% {
                ${endKeyframes}
            }
        }

        ::view-transition-${page === 'enter' ? 'new' : 'old'}(root) {
            animation-name: ${name};
            animation-duration: ${settings.duration};
            animation-delay: ${transition.delay}s;
            animation-timing-function: ${settings.easing};
            animation-fill-mode: both;
            ${
    values.mask && (maskGenerator == null ? void 0 : maskGenerator.makeStyles) ? maskGenerator.makeStyles(values.mask, page,) : ''
  }
        }
    `;
}
function isSpringTransition(transition,) {
  return transition.type === 'spring';
}
function getSpringOptions2(transition,) {
  if (transition.durationBasedSpring) {
    return {
      duration: transition.duration * 1e3,
      bounce: transition.bounce,
    };
  }
  return {
    stiffness: transition.stiffness,
    damping: transition.damping,
    mass: transition.mass,
  };
}
var VIEW_TRANSITION_STYLES_ID = 'view-transition-styles';
var defaultPageTransition = {
  x: '0px',
  y: '0px',
  scale: 1,
  opacity: 1,
  rotate3d: false,
  rotate: 0,
  rotateX: 0,
  rotateY: 0,
  mask: void 0,
  transition: {
    type: 'tween',
    delay: 0,
    duration: 0.2,
    ease: [0.27, 0, 0.51, 1,],
    stiffness: 400,
    damping: 30,
    mass: 1,
  },
};
function createViewTransitionStylesheet({
  exit = defaultPageTransition,
  enter,
},) {
  const styleElement = document.createElement('style',);
  styleElement.id = VIEW_TRANSITION_STYLES_ID;
  let styleContent = `
        @media (prefers-reduced-motion) {
            ::view-transition-group(*),
            ::view-transition-old(*),
            ::view-transition-new(*) {
                animation: none !important;
            }
        }
    `;
  const disableMixPlusLighter = exit.mask || enter.mask || exit.opacity || enter.opacity || exit.transition.delay || enter.transition.delay;
  if (disableMixPlusLighter) {
    styleContent += `
            ::view-transition-old(*),
            ::view-transition-new(*) {
                mix-blend-mode: normal;
            }
        `;
  }
  styleContent += `
        ::view-transition-old(*),
        ::view-transition-new(*) {
            backface-visibility: hidden;
        }
    `;
  styleContent += createPageTransitionRules('exit', exit,);
  styleContent += createPageTransitionRules('enter', enter,);
  styleElement.textContent = styleContent;
  document.head.appendChild(styleElement,);
}
function removeViewTransitionStylesheet() {
  requestIdleCallback(() => {
    frame.render(() => {
      performance.mark('framer-vt-remove',);
      const element = document.getElementById(VIEW_TRANSITION_STYLES_ID,);
      if (element) {
        document.head.removeChild(element,);
      }
    },);
  },);
}
var noop3 = () => {};
function supportsViewTransitions() {
  return Boolean(document.startViewTransition,);
}
function addVTStylesheetAfterInRender(effect,) {
  return new Promise((resolve) => {
    frame.render(() => {
      performance.mark('framer-vt-style',);
      createViewTransitionStylesheet(effect,);
      resolve();
    },);
  },);
}
async function startViewTransition(updateView, effect, signal,) {
  if (!supportsViewTransitions()) {
    void updateView();
    return;
  }
  await addVTStylesheetAfterInRender(effect,);
  if (signal == null ? void 0 : signal.aborted) return;
  performance.mark('framer-vt',);
  const transition = document.startViewTransition(async () => {
    performance.mark('framer-vt-freeze',);
    if (signal == null ? void 0 : signal.aborted) return;
    else signal == null ? void 0 : signal.addEventListener('abort', () => transition.skipTransition(),);
    await updateView();
  },);
  transition.updateCallbackDone.then(() => {
    performance.mark('framer-vt-unfreeze',);
  },).catch(noop3,);
  Promise.all([transition.ready, transition.finished,],).then(() => {
    performance.mark('framer-vt-finished',);
    removeViewTransitionStylesheet();
  },).catch(noop3,);
  return transition;
}
function useViewTransition() {
  const sitePageEffects = usePageEffects();
  const resolveHasPainted = useRef3(void 0,);
  useEffect(() => {
    if (resolveHasPainted.current) {
      resolveHasPainted.current();
      resolveHasPainted.current = void 0;
    }
  },);
  return useCallback((currentRouteId, nextRouteId, update, signal,) => {
    const pageEffect = getPageEffectForRoute(currentRouteId, nextRouteId, sitePageEffects,);
    if (pageEffect) {
      const hasPainted = new Promise((resolve) => {
        resolveHasPainted.current = resolve;
      },);
      return startViewTransition(
        async () => {
          update();
          await hasPainted;
        },
        pageEffect,
        signal,
      );
    }
    update();
  }, [sitePageEffects,],);
}
function updateCanonicalURL(url, prevUrl,) {
  requestIdleCallback(() => {
    const canonical = document.querySelector('link[rel=\'canonical\']',);
    if (!canonical) return;
    const newURL = new URL(url, prevUrl,);
    newURL.search = '';
    canonical.setAttribute('href', newURL.toString(),);
  },);
}
var announceDiv;
var announceNavigation = () => {
  if (!announceDiv) {
    announceDiv = document.createElement('div',);
    announceDiv.setAttribute('aria-live', 'assertive',);
    announceDiv.setAttribute('aria-atomic', 'true',);
    announceDiv.style.position = 'absolute';
    announceDiv.style.transform = 'scale(0)';
    document.body.append(announceDiv,);
  }
  setTimeout(() => {
    announceDiv.textContent = document.title;
  }, 60,);
};
function useAfterPaintEffect(effectFn, deps, options, useEffectFn = useLayoutEffect,) {
  useEffectFn(() => {
    const runAfterPaint = async (fn) => {
      await yieldToMain({
        ...options,
        continueAfter: 'paint',
      },);
      return fn();
    };
    const runPromise = runAfterPaint(effectFn,);
    return () => {
      void (async () => {
        const cleanup = await runPromise;
        if (!cleanup) return;
        void runAfterPaint(cleanup,);
      })();
    };
  }, deps,);
}
function useMonitorNextPaintAfterRender(label,) {
  const resolveHasPainted = useRef3(void 0,);
  useAfterPaintEffect(
    () => {
      if (resolveHasPainted.current) {
        resolveHasPainted.current();
        resolveHasPainted.current = void 0;
      }
    },
    void 0,
    // user-blocking ensures we get the correct timings here. Other priorities might delay this effect a little bit.
    {
      priority: 'user-blocking',
    },
  );
  return useCallback((measureDetail) => {
    const hasPainted = new Promise((resolve) => {
      resolveHasPainted.current = resolve;
    },);
    if (!label) {
      return {
        promise: hasPainted,
        measureDetail,
        ignore: null,
      };
    }
    const startLabel = `${label}-start`;
    const endLabel = `${label}-end`;
    let ignore = false;
    performance.mark(startLabel,);
    hasPainted.finally(() => {
      if (ignore) return;
      performance.mark(endLabel,);
      performance.measure(label, {
        start: startLabel,
        end: endLabel,
        detail: measureDetail,
      },);
    },).catch((e) => {
      console.error(e,);
    },);
    return {
      promise: hasPainted,
      measureDetail,
      ignore: () => {
        var _a;
        ignore = true;
        (_a = resolveHasPainted.current) == null ? void 0 : _a.call(resolveHasPainted,);
        resolveHasPainted.current = void 0;
      },
    };
  }, [label,],);
}
async function pushRouteState(routeId, route, {
  currentRoutePath,
  currentPathVariables,
  hash: hash2,
  pathVariables,
  localeId,
  preserveQueryParams,
  siteCanonicalURL,
}, isNavigationTransition = false,) {
  const {
    path,
  } = route;
  if (!path) return;
  const newPath = getPathForRoute(route, {
    currentRoutePath,
    currentPathVariables,
    hash: hash2,
    pathVariables,
    preserveQueryParams,
    siteCanonicalURL,
  },);
  try {
    return await pushHistoryState(
      {
        routeId,
        hash: hash2,
        pathVariables,
        localeId,
      },
      newPath,
      isNavigationTransition,
    );
  } catch {}
}
function isHistoryState(data2,) {
  const routeIdKey = 'routeId';
  return isObject2(data2,) && isString(data2[routeIdKey],);
}
function replaceHistoryState(data2, url, ignoreReplaceStateWrapper = false,) {
  performance.mark('framer-history-replace',);
  const replaceState = ignoreReplaceStateWrapper ? window.history.__proto__.replaceState : window.history.replaceState;
  replaceState.call(window.history, data2, '', url,);
}
var maybeHasPopstateBug = true;
var isImpactedPopstateBugChromiumVersion = /* @__PURE__ */ (() => {
  if (typeof __unframerNavigator2 === 'undefined') return false;
  const userAgent = __unframerNavigator2.userAgent;
  const chromePos = userAgent.indexOf('Chrome/',);
  const chromiumVersion = +userAgent.slice(chromePos + 7, userAgent.indexOf('.', chromePos,),);
  return chromiumVersion > 101 && chromiumVersion < 128;
})();
async function pushHistoryState(data2, url, isNavigationTransition = false,) {
  performance.mark('framer-history-push',);
  updateCanonicalURL(url, window.location.href,);
  if (!isNavigationTransition) {
    window.history.pushState(data2, '', url,);
    return;
  }
  let popstateCalled = false,
    popstateListener;
  if (maybeHasPopstateBug) {
    popstateListener = () => {
      popstateCalled = true;
      if (isImpactedPopstateBugChromiumVersion) return;
      const msg = 'Popstate called after intercept(). Please report this to the Framer team.';
      console.error(msg,);
      sendTrackingEvent('published_site_load_recoverable_error', {
        message: msg,
      },);
    };
    window.addEventListener('popstate', popstateListener, {
      once: true,
    },);
  }
  if (isImpactedPopstateBugChromiumVersion && maybeHasPopstateBug) {
    window.history.__proto__.pushState.call(window.history, data2, '', url,);
  } else {
    window.history.pushState(data2, '', url,);
  }
  if (maybeHasPopstateBug) {
    queueMicrotask(() => {
      if (popstateCalled) return;
      maybeHasPopstateBug = false;
      window.removeEventListener('popstate', popstateListener,);
      return;
    },);
  }
}
function useReplaceInitialState({
  disabled,
  routeId,
  initialPathVariables,
  initialLocaleId,
},) {
  useLayoutEffect(() => {
    if (disabled) return;
    performance.mark('framer-history-set-initial-state',);
    replaceHistoryState(
      {
        routeId,
        pathVariables: initialPathVariables,
        localeId: initialLocaleId,
      },
      void 0,
      true,
    );
  }, [],);
}
var supportsNavigationAPI = /* @__PURE__ */ (() => {
  var _a;
  return isWindow && typeof ((_a = window.navigation) == null ? void 0 : _a.back) === 'function';
})();
function usePopStateHandler(currentRouteId, setCurrentRouteId,) {
  const startViewTransition2 = useViewTransition();
  const monitorNextPaintAfterRender = useMonitorNextPaintAfterRender('framer-route-change',);
  const viewTransitionReady = useRef3(void 0,);
  const popStateHandler = useCallback(async ({
    state,
  },) => {
    var _a, _b, _c, _d, _e, _f;
    if (
      ((_a = window.navigation) == null ? void 0 : _a.transition) &&
      ((_c = (_b = window.navigation) == null ? void 0 : _b.transition) == null ? void 0 : _c.navigationType) !== 'traverse'
    ) return;
    if (!isObject2(state,)) return;
    const {
      routeId,
      hash: hash2,
      pathVariables,
      localeId,
    } = state;
    if (!isString(routeId,)) return;
    const nextRender = monitorNextPaintAfterRender({
      popstate: true,
    },);
    const stopMonitoringINPRelatedInputs = monitorINPRelatedInputs();
    void nextRender.promise.finally(stopMonitoringINPRelatedInputs,);
    const changeRoute = () => {
      setCurrentRouteId(
        routeId,
        isString(localeId,) ? localeId : void 0,
        isString(hash2,) ? hash2 : void 0,
        isObject2(pathVariables,) ? pathVariables : void 0,
        true,
        nextRender,
        false,
      );
    };
    const viewTransition = await startViewTransition2(currentRouteId.current, routeId, changeRoute,);
    const navigationTransition = (_d = window.navigation) == null ? void 0 : _d.transition;
    await ((viewTransition == null ? void 0 : viewTransition.updateCallbackDone) ?? Promise.resolve()).then(
      (_e = viewTransitionReady.current) == null ? void 0 : _e.resolve,
    ).catch((_f = viewTransitionReady.current) == null ? void 0 : _f.reject,);
    await nextRender.promise;
    try {
      await (navigationTransition == null ? void 0 : navigationTransition.finished);
    } catch (error) {
      console.warn('Popstate transition failed', error,);
    }
    announceNavigation();
    updateCanonicalURL(window.location.href,);
  }, [currentRouteId, monitorNextPaintAfterRender, setCurrentRouteId, startViewTransition2,],);
  const traversalHandler = useCallback((event) => {
    if (event.navigationType !== 'traverse') return;
    event.intercept({
      async handler() {
        await new Promise((resolve, reject,) => {
          viewTransitionReady.current = {
            resolve,
            reject,
          };
        },);
        viewTransitionReady.current = void 0;
      },
      scroll: 'after-transition',
    },);
  }, [],);
  useEffect(() => {
    window.addEventListener('popstate', popStateHandler,);
    if (supportsNavigationAPI) window.navigation.addEventListener('navigate', traversalHandler,);
    return () => {
      window.removeEventListener('popstate', popStateHandler,);
      if (supportsNavigationAPI) window.navigation.removeEventListener('navigate', traversalHandler,);
    };
  }, [popStateHandler, traversalHandler,],);
}
function getHashForRoute(hash2, route, hashVariables,) {
  const resolvedHash = getRouteElementId(route, hash2,);
  if (!resolvedHash) return void 0;
  const variables = Object.assign({}, route == null ? void 0 : route.elements, hashVariables,);
  return resolvedHash.replace(pathVariablesRegExp, (m2, p1,) => variables[p1] ?? m2,);
}
function getPathForRoute(route, {
  currentRoutePath,
  currentPathVariables,
  hash: hash2,
  pathVariables,
  hashVariables,
  relative: relative2 = true,
  preserveQueryParams,
  onlyHash = false,
  siteCanonicalURL,
},) {
  const resolvedHash = getHashForRoute(hash2, route, hashVariables,);
  if (onlyHash) return resolvedHash ?? '';
  let currentPath = currentRoutePath ?? '/';
  if (currentPathVariables) {
    currentPath = currentPath.replace(pathVariablesRegExp, (m2, p1,) => String(currentPathVariables[p1] || m2,),);
  }
  const targetPath = (route == null ? void 0 : route.path) ?? '/';
  let path = targetPath;
  if (pathVariables) {
    path = path.replace(pathVariablesRegExp, (m2, p1,) => String(pathVariables[p1] || m2,),);
  }
  const isSamePageHashNavigation = currentPath === path && resolvedHash;
  if (relative2) {
    if (customNotFoundPagePaths.has(currentPath,) && typeof window !== 'undefined') {
      const sitePrefix = getSitePrefix(siteCanonicalURL,);
      path = computeRelativePath(window.location.pathname, sitePrefix + path,);
    } else {
      path = computeRelativePath(currentPath, path,);
    }
  }
  if (preserveQueryParams || isSamePageHashNavigation) {
    path = forwardCurrentQueryParams(path,);
  }
  if (resolvedHash) {
    path = `${path}#${resolvedHash}`;
  }
  return path;
}
async function handleRedirectForMissingSlugs(route, pathVariables, nextLocale,) {
  if (!route.path) return false;
  if (!pathVariables) return false;
  const prefix2 = nextLocale.slug ? `/${nextLocale.slug}` : '';
  const nextLocaleWithDefaultSlugPath = `${prefix2}${fillPathVariables(route.path, pathVariables,)}`;
  const response = await fetch(nextLocaleWithDefaultSlugPath, {
    method: 'HEAD',
    redirect: 'manual',
  },);
  const isRedirect = response.type === 'opaqueredirect';
  if (isRedirect) {
    window.location.href = window.location.origin + nextLocaleWithDefaultSlugPath;
    return true;
  }
  return false;
}
async function switchLocale(options,) {
  const result = await getLocalizedNavigationPath(options,);
  if (!result) return;
  try {
    localStorage.setItem('preferredLocale', options.nextLocale.code,);
  } catch {}
  try {
    if (!isString(result.path,)) {
      throw new Error('Expected result.path to be a string',);
    }
    if (result.isMissingInLocale) {
      const hasRedirect = await handleRedirectForMissingSlugs(options.route, result.pathVariables, options.nextLocale,);
      if (hasRedirect) return;
    }
  } catch {}
  return result;
}
function pushLoadMoreHistory(hash2, paginationInfo,) {
  try {
    const currentHistoryState = window.history.state;
    if (!isHistoryState(currentHistoryState,)) return;
    const isInitialLoad = (currentHistoryState == null ? void 0 : currentHistoryState.paginationInfo) === void 0 ||
      currentHistoryState.paginationInfo[hash2] === void 0;
    const newPaginationInfo = {
      ...currentHistoryState.paginationInfo,
      [hash2]: paginationInfo,
    };
    replaceHistoryState(
      {
        ...currentHistoryState,
        paginationInfo: newPaginationInfo,
      },
      void 0,
      isInitialLoad,
    );
  } catch {}
}
function useNativeLoadingSpinner() {
  const navigationPromise = useRef3(Promise.resolve(),);
  const navigationController = useRef3();
  const navigateListener = useCallback((navigateEvent) => {
    if (navigateEvent.navigationType === 'traverse') return;
    const controller = navigationController.current;
    controller == null ? void 0 : controller.signal.addEventListener('abort', () => {
      controller.abort('user aborted',);
    },);
    navigateEvent.intercept({
      handler: () => navigationPromise.current,
    },);
  }, [],);
  return useCallback((promise, updateURL, controller,) => {
    if (!supportsNavigationAPI) {
      void updateURL();
      return;
    }
    navigationPromise.current = promise;
    navigationController.current = controller;
    window.navigation.addEventListener('navigate', navigateListener,);
    void updateURL(true,);
    void promise.finally(() => {
      window.navigation.removeEventListener('navigate', navigateListener,);
    },);
  }, [navigateListener,],);
}
function useRouteAnchor(routeId, {
  elementId,
  hash: linkHash,
} = {},) {
  const {
    navigate,
    currentPathVariables,
    preserveQueryParams,
    siteCanonicalURL,
  } = useRouter();
  const route = useRoute(routeId,);
  const currentRouteId = useCurrentRouteId();
  const currentRoute = useRoute(currentRouteId ?? '',);
  useRoutePreloader([routeId,], true,);
  const hash2 = linkHash ?? elementId;
  const href = React4.useMemo(() =>
    getPathForRoute(route, {
      currentRoutePath: currentRoute == null ? void 0 : currentRoute.path,
      currentPathVariables,
      hash: hash2,
      preserveQueryParams,
      siteCanonicalURL,
    },), [currentRoute, currentPathVariables, hash2, preserveQueryParams, route, siteCanonicalURL,],);
  const navigateToRoute = React4.useCallback(() => navigate == null ? void 0 : navigate(routeId, hash2,), [hash2, navigate, routeId,],);
  const onClick = React4.useCallback((event) => {
    event.preventDefault();
    navigateToRoute();
  }, [navigateToRoute,],);
  return {
    onClick,
    href,
  };
}
async function getLocalesForCurrentRoute(activeLocale, locales, currentRoute, pathVariables, collectionUtils,) {
  if (!currentRoute) return locales;
  const slugByLocaleIfCollectionPage = await getSlugByLocaleIfCollectionPage(
    activeLocale,
    locales,
    currentRoute,
    pathVariables,
    collectionUtils,
  );
  const includedLocalesForCurrentRoute = currentRoute.includedLocales;
  const localesForCurrentRoute = [];
  for (const locale of locales) {
    if (includedLocalesForCurrentRoute) {
      if (!includedLocalesForCurrentRoute.includes(locale.id,)) continue;
    }
    if (slugByLocaleIfCollectionPage) {
      const hasSlug = slugByLocaleIfCollectionPage.has(locale.id,);
      if (!hasSlug) continue;
    }
    localesForCurrentRoute.push(locale,);
  }
  return localesForCurrentRoute;
}
async function getSlugByLocaleIfCollectionPage(activeLocale, locales, currentRoute, pathVariables, collectionUtils,) {
  var _a;
  const {
    collectionId,
  } = currentRoute;
  if (!collectionId) return null;
  if (!activeLocale) return null;
  if (!pathVariables) return null;
  const {
    path,
  } = currentRoute;
  if (!path) return null;
  const matches = Array.from(path.matchAll(pathVariablesRegExp,),);
  const lastMatch = matches.pop();
  if (!lastMatch) return null;
  const pathVariableWithDelimiter = lastMatch == null ? void 0 : lastMatch[0];
  const pathVariableValue = lastMatch == null ? void 0 : lastMatch[1];
  if (!pathVariableWithDelimiter || !pathVariableValue) {
    throw new Error('Failed to replace path variables: unexpected regex match group',);
  }
  const currentSlug = pathVariables[pathVariableValue];
  if (!currentSlug || !isString(currentSlug,)) {
    throw new Error(`No slug found for path variable ${pathVariableValue}`,);
  }
  const utils =
    await ((_a = collectionUtils == null ? void 0 : collectionUtils[collectionId]) == null ? void 0 : _a.call(collectionUtils,));
  if (!utils) return null;
  const recordId = await utils.getRecordIdBySlug(currentSlug, activeLocale,);
  if (!recordId) return null;
  const slugById = /* @__PURE__ */ new Map();
  await Promise.all(locales.map(async (locale) => {
    const slug = await utils.getSlugByRecordId(recordId, locale,);
    if (!slug) return;
    slugById.set(locale.id, slug,);
  },),);
  return slugById;
}
var noopAsync = async () => {};
var defaultLocaleInfo = {
  activeLocale: null,
  locales: [],
  setLocale: noopAsync,
};
var LocaleInfoContext = /* @__PURE__ */ React4.createContext(defaultLocaleInfo,);
function useLocaleInfo() {
  return React4.useContext(LocaleInfoContext,);
}
function useLocalesForCurrentRoute() {
  const {
    currentRouteId,
    routes,
    collectionUtils,
    currentPathVariables,
  } = useRouter();
  const {
    activeLocale,
    locales,
  } = useLocaleInfo();
  const [localesForCurrentRoute, setLocalesForCurrentRoute,] = React4.useState(() => activeLocale ? [activeLocale,] : []);
  const currentRoute = currentRouteId ? routes == null ? void 0 : routes[currentRouteId] : void 0;
  React4.useEffect(() => {
    let active = true;
    getLocalesForCurrentRoute(activeLocale, locales, currentRoute, currentPathVariables, collectionUtils,).then((localesSubset) => {
      if (!active) return;
      React4.startTransition(() => {
        if (localesSubset) {
          setLocalesForCurrentRoute(localesSubset,);
        } else {
          setLocalesForCurrentRoute(activeLocale ? [activeLocale,] : [],);
        }
      },);
    },).catch(() => {},);
    return () => {
      active = false;
    };
  }, [activeLocale, locales, collectionUtils, currentRoute, currentPathVariables,],);
  return localesForCurrentRoute;
}
function useLocalizationInfo() {
  const {
    activeLocale,
    locales,
    setLocale,
  } = useLocaleInfo();
  return {
    activeLocalization: activeLocale,
    localizations: locales,
    setLocalization: setLocale,
  };
}
function useLocaleCode() {
  var _a;
  return ((_a = useLocaleInfo().activeLocale) == null ? void 0 : _a.code) ?? 'en-US';
}
function useLocale() {
  return useLocaleCode();
}
var eventsToStop = [
  'mousedown',
  'mouseup',
  'touchcancel',
  'touchend',
  'touchstart',
  'auxclick',
  'dblclick',
  'pointercancel',
  'pointerdown',
  'pointerup',
  'dragend',
  'dragstart',
  'drop',
  'compositionend',
  'compositionstart',
  'keydown',
  'keypress',
  'keyup',
  'input',
  'textInput',
  // Intentionally camelCase
  'copy',
  'cut',
  'paste',
  'click',
  'change',
  'contextmenu',
  'reset',
];
var stopFn = (event) => {
  var _a, _b;
  if (!((_b = (_a = event.target) == null ? void 0 : _a.closest) == null ? void 0 : _b.call(_a, '#main',))) return;
  event.stopPropagation();
  performance.mark('framer-react-event-handling-prevented',);
};
var shouldTurnOnEventHandling = false;
function turnOffReactEventHandling() {
  if (!eventsToStop) return;
  shouldTurnOnEventHandling = true;
  performance.mark('framer-react-event-handling-start',);
  const options = {
    capture: true,
  };
  eventsToStop.forEach((event) => document.body.addEventListener(event, stopFn, options,));
}
function TurnOnReactEventHandling() {
  useEffect(() => {
    if (!shouldTurnOnEventHandling || !eventsToStop) return;
    const options = {
      capture: true,
    };
    eventsToStop.forEach((event) => document.body.removeEventListener(event, stopFn, options,));
    eventsToStop = void 0;
    performance.mark('framer-react-event-handling-end',);
  }, [],);
  return null;
}
function onlyRunOnce(originalMethod,) {
  let hasRun = false;
  return function (...args) {
    if (hasRun) return;
    hasRun = true;
    return originalMethod.apply(this, args,);
  };
}
function measureSafe(name, start2, end,) {
  try {
    performance.measure(name, start2, end,);
  } catch (e) {
    console.warn(`Could not measure ${name}`, e,);
  }
}
var _measureUnattributedHydrationOverhead_dec;
var _measureMutationEffects_dec;
var _markLayoutStylePaintEnd_dec;
var _markRafEnd_dec;
var _markRafStart_dec;
var _markUseEffectsEnd_dec;
var _markUseEffectsAreSynchronous_dec;
var _markUseEffectsRouterStart_dec;
var _markUseEffectsStart_dec;
var _markUseLayoutEffectsEnd_dec;
var _markRouterUseLayoutEffectStart_dec;
var _markUseLayoutEffectsStart_dec;
var _markUseInsertionEffectsEnd_dec;
var _markUseInsertionEffectRouterStart_dec;
var _markUseInsertionEffectsStart_dec;
var _markRenderEnd_dec;
var _markRenderStart_dec;
var _init;
_markRenderStart_dec = [onlyRunOnce,],
  _markRenderEnd_dec = [onlyRunOnce,],
  _markUseInsertionEffectsStart_dec = [onlyRunOnce,],
  _markUseInsertionEffectRouterStart_dec = [onlyRunOnce,],
  _markUseInsertionEffectsEnd_dec = [onlyRunOnce,],
  _markUseLayoutEffectsStart_dec = [onlyRunOnce,],
  _markRouterUseLayoutEffectStart_dec = [onlyRunOnce,],
  _markUseLayoutEffectsEnd_dec = [onlyRunOnce,],
  _markUseEffectsStart_dec = [onlyRunOnce,],
  _markUseEffectsRouterStart_dec = [onlyRunOnce,],
  _markUseEffectsAreSynchronous_dec = [onlyRunOnce,],
  _markUseEffectsEnd_dec = [onlyRunOnce,],
  _markRafStart_dec = [onlyRunOnce,],
  _markRafEnd_dec = [onlyRunOnce,],
  _markLayoutStylePaintEnd_dec = [onlyRunOnce,],
  _measureMutationEffects_dec = [onlyRunOnce,],
  _measureUnattributedHydrationOverhead_dec = [onlyRunOnce,];
var HydrationMarker = class {
  constructor() {
    __runInitializers(_init, 5, this,);
    __publicField(this, 'render', {
      markStart: () => this.markRenderStart(),
      markEnd: () => this.markRenderEnd(),
    },);
    __publicField(this, 'mutationEffects', {
      measure: () => this.measureMutationEffects(),
    },);
    __publicField(this, 'useInsertionEffects', {
      markStart: () => this.markUseInsertionEffectsStart(),
      markRouterStart: () => this.markUseInsertionEffectRouterStart(),
      markEnd: () => this.markUseInsertionEffectsEnd(),
    },);
    __publicField(this, 'useLayoutEffects', {
      markStart: () => this.markUseLayoutEffectsStart(),
      markRouterStart: () => this.markRouterUseLayoutEffectStart(),
      markEnd: () => this.markUseLayoutEffectsEnd(),
    },);
    __publicField(this, 'useEffects', {
      markStart: () => this.markUseEffectsStart(),
      markRouterStart: () => this.markUseEffectsRouterStart(),
      markEnd: () => this.markUseEffectsEnd(),
      markAreSynchronous: () => this.markUseEffectsAreSynchronous(),
    },);
    __publicField(this, 'browserRendering', {
      hasStarted: false,
      requestAnimationFrame: {
        markStart: () => this.markRafStart(),
        markEnd: () => this.markRafEnd(),
      },
      layoutStylePaint: {
        markEnd: () => this.markLayoutStylePaintEnd(),
      },
    },);
    __publicField(this, 'unattributedHydrationOverhead', {
      measure: () => this.measureUnattributedHydrationOverhead(),
    },);
  }
  markRenderStart() {
    performance.mark('framer-hydration-start',/* Hydration_Start */
    );
  }
  markRenderEnd() {
    performance.mark('framer-hydration-render-end',/* ReactRender_End */
    );
    measureSafe('framer-hydration-render', 'framer-hydration-start', 'framer-hydration-render-end',/* ReactRender_End */
    );
  }
  markUseInsertionEffectsStart() {
    performance.mark('framer-hydration-insertion-effects-start',/* UseInsertionEffects_Start */
    );
  }
  markUseInsertionEffectRouterStart() {
    performance.mark('framer-hydration-router-insertion-effect',/* UseInsertionEffect_RouterStart */
    );
  }
  markUseInsertionEffectsEnd() {
    performance.mark('framer-hydration-insertion-effects-end',/* UseInsertionEffects_End */
    );
    measureSafe(
      'framer-hydration-insertion-effects',
      'framer-hydration-insertion-effects-start',
      'framer-hydration-insertion-effects-end',
      /* UseInsertionEffects_End */
    );
  }
  markUseLayoutEffectsStart() {
    performance.mark('framer-hydration-layout-effects-start',/* UseLayoutEffects_Start */
    );
  }
  markRouterUseLayoutEffectStart() {
    performance.mark('framer-hydration-router-layout-effect',/* UseLayoutEffect_RouterStart */
    );
  }
  markUseLayoutEffectsEnd() {
    performance.mark('framer-hydration-layout-effects-end',/* UseLayoutEffects_End */
    );
    measureSafe(
      'framer-hydration-layout-effects',
      'framer-hydration-layout-effects-start',
      'framer-hydration-layout-effects-end',
      /* UseLayoutEffects_End */
    );
  }
  markUseEffectsStart() {
    performance.mark('framer-hydration-effects-start',/* UseEffects_Start */
    );
  }
  markUseEffectsRouterStart() {
    performance.mark('framer-hydration-router-effect',/* UseEffects_RouterStart */
    );
  }
  markUseEffectsAreSynchronous() {
    performance.mark('framer-hydration-effects-sync',/* UseEffectsAreSynchronous */
    );
  }
  markUseEffectsEnd() {
    var _a, _b;
    performance.mark('framer-hydration-effects-end',/* UseEffects_End */
    );
    measureSafe(
      'framer-hydration-effects',
      ((_a = performance.getEntriesByName('framer-hydration-first-paint',/* BrowserRender_LayoutStylePaintEnd */
        )[0]) == null
        ? void 0
        : _a.name) ?? ((_b = performance.getEntriesByName('framer-hydration-effects-start',/* UseEffects_Start */
          )[0]) == null
          ? void 0
          : _b.name),
      'framer-hydration-effects-end',
      /* UseEffects_End */
    );
  }
  markRafStart() {
    this.browserRendering.hasStarted = true;
    performance.mark('framer-hydration-browser-render-start',/* BrowserRender_RafStart */
    );
  }
  markRafEnd() {
    performance.mark('framer-hydration-browser-raf-end',/* BrowserRender_RafEnd */
    );
    measureSafe(
      'framer-hydration-raf',
      'framer-hydration-browser-render-start',
      'framer-hydration-browser-raf-end',
      /* BrowserRender_RafEnd */
    );
  }
  markLayoutStylePaintEnd() {
    performance.mark('framer-hydration-first-paint',/* BrowserRender_LayoutStylePaintEnd */
    );
    measureSafe(
      'framer-hydration-time-to-first-paint',
      'framer-hydration-start',
      'framer-hydration-first-paint',
      /* BrowserRender_LayoutStylePaintEnd */
    );
    measureSafe(
      'framer-hydration-browser-render',
      'framer-hydration-browser-raf-end',
      'framer-hydration-first-paint',
      /* BrowserRender_LayoutStylePaintEnd */
    );
  }
  measureMutationEffects() {
    measureSafe('framer-hydration-commit', 'framer-hydration-layout-effects-end', 'framer-hydration-effects-start',/* UseEffects_Start */
    );
  }
  measureUnattributedHydrationOverhead() {
    var _a, _b;
    measureSafe(
      'framer-hydration-uho',
      // If effects have run before the start of the render pipeline, we measure from the effects end.
      // If not, the paint will happen before effects run, so we measure from the layout effects end.
      ((_a = performance.getEntriesByName('framer-hydration-effects-end',/* UseEffects_End */
        )[0]) == null
        ? void 0
        : _a.name) ?? ((_b = performance.getEntriesByName('framer-hydration-layout-effects-end',/* UseLayoutEffects_End */
          )[0]) == null
          ? void 0
          : _b.name),
      'framer-hydration-browser-render-start',
      /* BrowserRender_RafStart */
    );
  }
};
_init = __decoratorStart(null,);
__decorateElement(_init, 1, 'markRenderStart', _markRenderStart_dec, HydrationMarker,);
__decorateElement(_init, 1, 'markRenderEnd', _markRenderEnd_dec, HydrationMarker,);
__decorateElement(_init, 1, 'markUseInsertionEffectsStart', _markUseInsertionEffectsStart_dec, HydrationMarker,);
__decorateElement(_init, 1, 'markUseInsertionEffectRouterStart', _markUseInsertionEffectRouterStart_dec, HydrationMarker,);
__decorateElement(_init, 1, 'markUseInsertionEffectsEnd', _markUseInsertionEffectsEnd_dec, HydrationMarker,);
__decorateElement(_init, 1, 'markUseLayoutEffectsStart', _markUseLayoutEffectsStart_dec, HydrationMarker,);
__decorateElement(_init, 1, 'markRouterUseLayoutEffectStart', _markRouterUseLayoutEffectStart_dec, HydrationMarker,);
__decorateElement(_init, 1, 'markUseLayoutEffectsEnd', _markUseLayoutEffectsEnd_dec, HydrationMarker,);
__decorateElement(_init, 1, 'markUseEffectsStart', _markUseEffectsStart_dec, HydrationMarker,);
__decorateElement(_init, 1, 'markUseEffectsRouterStart', _markUseEffectsRouterStart_dec, HydrationMarker,);
__decorateElement(_init, 1, 'markUseEffectsAreSynchronous', _markUseEffectsAreSynchronous_dec, HydrationMarker,);
__decorateElement(_init, 1, 'markUseEffectsEnd', _markUseEffectsEnd_dec, HydrationMarker,);
__decorateElement(_init, 1, 'markRafStart', _markRafStart_dec, HydrationMarker,);
__decorateElement(_init, 1, 'markRafEnd', _markRafEnd_dec, HydrationMarker,);
__decorateElement(_init, 1, 'markLayoutStylePaintEnd', _markLayoutStylePaintEnd_dec, HydrationMarker,);
__decorateElement(_init, 1, 'measureMutationEffects', _measureMutationEffects_dec, HydrationMarker,);
__decorateElement(_init, 1, 'measureUnattributedHydrationOverhead', _measureUnattributedHydrationOverhead_dec, HydrationMarker,);
__decoratorMetadata(_init, HydrationMarker,);
var hydrationMarker;
function markHydrationStart() {
  hydrationMarker = new HydrationMarker();
  hydrationMarker.render.markStart();
}
function useMarkRouterEffects() {
  useInsertionEffect(() => {
    hydrationMarker == null ? void 0 : hydrationMarker.useInsertionEffects.markRouterStart();
  }, [],);
  useLayoutEffect(() => {
    hydrationMarker == null ? void 0 : hydrationMarker.useLayoutEffects.markRouterStart();
  }, [],);
  useEffect(() => {
    hydrationMarker == null ? void 0 : hydrationMarker.useEffects.markRouterStart();
  }, [],);
}
var wasInBackground = false;
function useMarkSuspenseEffectsStart() {
  useInsertionEffect(() => {
    hydrationMarker == null ? void 0 : hydrationMarker.render.markEnd();
    hydrationMarker == null ? void 0 : hydrationMarker.useInsertionEffects.markStart();
  }, [],);
  useLayoutEffect(() => {
    hydrationMarker == null ? void 0 : hydrationMarker.useLayoutEffects.markStart();
    if (document.visibilityState !== 'visible') {
      wasInBackground = true;
      return;
    }
    frame.read(() => {
      hydrationMarker == null ? void 0 : hydrationMarker.browserRendering.requestAnimationFrame.markStart();
      hydrationMarker == null ? void 0 : hydrationMarker.unattributedHydrationOverhead.measure();
    },);
  }, [],);
  useEffect(() => {
    hydrationMarker == null ? void 0 : hydrationMarker.useEffects.markStart();
    if (!(hydrationMarker == null ? void 0 : hydrationMarker.browserRendering.hasStarted)) {
      hydrationMarker == null ? void 0 : hydrationMarker.mutationEffects.measure();
      hydrationMarker == null ? void 0 : hydrationMarker.useEffects.markAreSynchronous();
    }
  }, [],);
}
function useMarkSuspenseEffectEnd() {
  useInsertionEffect(() => {
    hydrationMarker == null ? void 0 : hydrationMarker.useInsertionEffects.markEnd();
  }, [],);
  useLayoutEffect(() => {
    hydrationMarker == null ? void 0 : hydrationMarker.useLayoutEffects.markEnd();
    if (wasInBackground || document.visibilityState !== 'visible') return;
    frame.read(() => {
      hydrationMarker == null ? void 0 : hydrationMarker.browserRendering.requestAnimationFrame.markEnd();
      void yieldToMain().then(() => {
        hydrationMarker == null ? void 0 : hydrationMarker.browserRendering.layoutStylePaint.markEnd();
      },);
    },);
  }, [],);
  useEffect(() => {
    hydrationMarker == null ? void 0 : hydrationMarker.useEffects.markEnd();
  }, [],);
}
function MarkSuspenseEffectsStart() {
  useMarkSuspenseEffectsStart();
  return null;
}
function MarkSuspenseEffectsEnd() {
  useMarkSuspenseEffectEnd();
  return null;
}
var MarkSuspenseEffects = {
  Start: MarkSuspenseEffectsStart,
  End: MarkSuspenseEffectsEnd,
};
function renderPage(Page4, defaultPageStyle,) {
  const props = {
    style: defaultPageStyle,
    'data-framer-root': '',
  };
  return React4.isValidElement(Page4,) ? React4.cloneElement(Page4, props,) : /* @__PURE__ */ jsx3(Page4, {
    ...props,
  },);
}
var NotFoundError = class extends Error {};
var NotFoundErrorBoundary = class extends Component2 {
  constructor(props,) {
    super(props,);
    this.state = {
      error: void 0,
      forceUpdateKey: props.forceUpdateKey,
    };
  }
  static getDerivedStateFromError(error,) {
    return {
      error,
    };
  }
  /** Resets the error when forceUpdateKey gets bumped. */
  static getDerivedStateFromProps(nextProps, prevState,) {
    if (nextProps.forceUpdateKey !== prevState.forceUpdateKey) {
      const newState = {
        forceUpdateKey: nextProps.forceUpdateKey,
      };
      if (prevState.error) {
        newState.error = void 0;
      }
      return newState;
    }
    return null;
  }
  render() {
    if (this.state.error === void 0) {
      return this.props.children;
    }
    if (!(this.state.error instanceof NotFoundError)) {
      throw this.state.error;
    }
    const {
      notFoundPage,
      defaultPageStyle,
    } = this.props;
    if (!notFoundPage) {
      throw this.state.error;
    }
    return renderPage(notFoundPage, defaultPageStyle,);
  }
};
var memoPathRoutes;
var memoPaths;
var lastRoutes;
function getRouteInfoMemo(routes,) {
  if (lastRoutes !== routes) {
    memoPathRoutes = {};
    for (
      const [routeId, {
        path,
      },] of Object.entries(routes,)
    ) {
      if (path) {
        memoPathRoutes[path] = {
          path,
          depth: pathDepth(path,),
          routeId,
        };
      }
    }
    memoPaths = Object.values(memoPathRoutes,);
    memoPaths.sort(({
      depth: depth1,
    }, {
      depth: depth2,
    },) => depth2 - depth1);
    lastRoutes = routes;
  }
  return [memoPathRoutes, memoPaths,];
}
function inferInitialRouteFromPath(routes, decodedLocationPath, fallback = true, locales = [],) {
  const [pathRoutes, paths,] = getRouteInfoMemo(routes,);
  let activeLocale;
  let localeId;
  let locationPath = decodedLocationPath;
  if (locales.length > 0) {
    const firstPathSegment = locationPath.split('/',).find(Boolean,);
    if (firstPathSegment) {
      activeLocale = locales.find(({
        slug,
      },) => slug === firstPathSegment);
      if (activeLocale) {
        localeId = activeLocale.id;
        locationPath = locationPath.substring(activeLocale.slug.length + 1,);
      }
    }
    if (!localeId) {
      const defaultLocale = locales.find(({
        slug,
      },) => slug === '');
      if (defaultLocale) {
        localeId = defaultLocale.id;
      }
    }
  }
  const exactMatch = pathRoutes[locationPath];
  if (exactMatch) {
    const match = matchPath(locationPath, exactMatch.path,);
    if (match.isMatch) {
      return {
        routeId: exactMatch.routeId,
        localeId,
        pathVariables: match.pathVariables,
      };
    }
  }
  for (
    const {
      path,
      routeId,
    } of paths
  ) {
    const match = matchPath(locationPath, path,);
    if (match.isMatch) {
      return {
        routeId,
        localeId,
        pathVariables: match.pathVariables,
      };
    }
  }
  if (!fallback) throw new Error('No exact match found for path',);
  const rootPath = pathRoutes['/'];
  if (rootPath) {
    return {
      routeId: rootPath.routeId,
      localeId,
    };
  }
  const firstRoute = Object.keys(routes,)[0];
  if (!firstRoute) throw new Error('Router should not have undefined routes',);
  return {
    routeId: firstRoute,
    localeId,
  };
}
function pathDepth(path,) {
  const pathWithTrimmedSlashes = path.replace(/^\/|\/$/gu, '',);
  if (pathWithTrimmedSlashes === '') return 0;
  return pathWithTrimmedSlashes.split('/',).length;
}
function matchPath(path, routePath,) {
  const pathVariablesKeys = [];
  const safeRoutePath = escapeStringRegExp(routePath,);
  const routePathRegExpString = safeRoutePath.replace(pathVariablesRegExp, (_, name,) => {
    pathVariablesKeys.push(name,);
    return '([^/]+)';
  },);
  const routePathRegExp = new RegExp(routePathRegExpString + '$',);
  const matches = path.match(routePathRegExp,);
  if (!matches) {
    return {
      isMatch: false,
    };
  }
  if (matches.length === 1) {
    return {
      isMatch: true,
    };
  }
  const pathVariables = {};
  const pathVariablesValues = matches.slice(1,);
  for (let i = 0; i < pathVariablesKeys.length; ++i) {
    const key7 = pathVariablesKeys[i];
    if (key7 === void 0) continue;
    const value = pathVariablesValues[i];
    const existingValue = pathVariables[key7];
    if (existingValue) {
      if (existingValue !== value) {
        return {
          isMatch: false,
        };
      } else {
        continue;
      }
    }
    if (value === void 0) {
      throw new Error('Path variable values cannot be undefined',);
    }
    pathVariables[key7] = value;
  }
  return {
    isMatch: true,
    pathVariables,
  };
}
function escapeStringRegExp(string,) {
  return string.replace(/[|\\{}()[\]^$+*?.]/gu, '\\$&',).replace(/-/gu, '\\x2d',);
}
function getVariantsFromServerTiming() {
  var _a;
  if ('PerformanceServerTiming' in window) {
    const serverTiming = (_a = performance.getEntriesByType('navigation',)[0]) == null ? void 0 : _a.serverTiming;
    if (!serverTiming || serverTiming.length === 0) return new URLSearchParams();
    const entry = serverTiming.find((it) => it.name === 'abtests');
    if (!entry) return new URLSearchParams();
    return new URLSearchParams(entry.description,);
  }
  return new URLSearchParams();
}
function patchRoute(routes, abTestId, abTestingVariantId,) {
  const route = routes[abTestingVariantId];
  if (!route) return;
  const routeId = route.abTestingParentId ?? abTestingVariantId;
  if (!routes[routeId]) return;
  const {
    abTestingParentId,
    ...patchingRoute
  } = route;
  const elements = routes[routeId].elements || route.elements
    ? {
      ...routes[routeId].elements,
      ...route.elements,
    }
    : void 0;
  routes[routeId] = {
    ...patchingRoute,
    elements,
    abTestingVariantId,
    abTestId,
  };
}
function patchRoutesFromSearchParams(routes, variants,) {
  for (const [abTestId, abTestingVariantId,] of variants) {
    patchRoute(routes, abTestId, abTestingVariantId,);
  }
}
function removeRoutesVariants(routes,) {
  var _a;
  for (const routeId in routes) {
    if ((_a = routes[routeId]) == null ? void 0 : _a.abTestingParentId) {
      delete routes[routeId];
    }
  }
}
function patchInitialRoute(routes, routeId,) {
  var _a, _b;
  if (!routes[routeId]) return;
  if (!routes[routeId].abTestingParentId) return;
  const parentId = routes[routeId].abTestingParentId;
  const {
    abTestingParentId,
    ...route
  } = routes[routeId];
  const elements = ((_a = routes[parentId]) == null ? void 0 : _a.elements) || route.elements
    ? {
      ...((_b = routes[parentId]) == null ? void 0 : _b.elements),
      ...route.elements,
    }
    : void 0;
  routes[parentId] = {
    ...route,
    elements,
    abTestingVariantId: routeId,
  };
}
function patchRoutesForABTesting(routes, initialRouteId,) {
  var _a;
  if (typeof window === 'undefined') return initialRouteId;
  let resolvedInitialRouteId = initialRouteId;
  if (initialRouteId) {
    patchInitialRoute(routes, initialRouteId,);
    const parentRouteId = (_a = routes[initialRouteId]) == null ? void 0 : _a.abTestingParentId;
    if (parentRouteId) {
      resolvedInitialRouteId = parentRouteId;
    }
  }
  patchRoutesFromSearchParams(routes, getVariantsFromServerTiming(),);
  removeRoutesVariants(routes,);
  return resolvedInitialRouteId;
}
var mainTagId = 'main';
var generatedPageDatasetKey = 'framerGeneratedPage';
var searchIndexMetaName = 'framer-search-index';
var searchIndexMetaSelector = `meta[name="${searchIndexMetaName}"]`;
var endOfHeadStartMarker = '<!-- End of headStart -->';
var endOfHeadEndMarker = '<!-- End of headEnd -->';
var endOfBodyStartMarker = '<!-- End of bodyStart -->';
var endOfBodyEndMarker = '<!-- End of bodyEnd -->';
function assert(condition, ...msg) {
  var _a, _b;
  if (condition) return;
  const e = Error('Assertion Error' + (msg.length > 0 ? ': ' + msg.join(' ',) : ''),);
  if (e.stack) {
    try {
      const lines = e.stack.split('\n',);
      if ((_a = lines[1]) == null ? void 0 : _a.includes('assert',)) {
        lines.splice(1, 1,);
        e.stack = lines.join('\n',);
      } else if ((_b = lines[0]) == null ? void 0 : _b.includes('assert',)) {
        lines.splice(0, 1,);
        e.stack = lines.join('\n',);
      }
    } catch {}
  }
  throw e;
}
function assertNever(x, error,) {
  throw error || new Error(x ? `Unexpected value: ${x}` : 'Application entered invalid state',);
}
async function insertHTML(html, referenceNode, position = 'beforeend',) {
  let insertionParent, insertionPoint;
  switch (position) {
    case 'beforebegin':
      assert(referenceNode.parentNode, 'Can\'t use \'beforebegin\' with a referenceNode at the top level',);
      insertionParent = referenceNode.parentNode;
      insertionPoint = referenceNode;
      break;
    case 'afterend':
      assert(referenceNode.parentNode, 'Can\'t use \'afterend\' with a referenceNode at the top level',);
      insertionParent = referenceNode.parentNode;
      insertionPoint = referenceNode.nextSibling;
      break;
    case 'afterbegin':
      insertionParent = referenceNode;
      insertionPoint = referenceNode.firstChild;
      break;
    case 'beforeend':
      insertionParent = referenceNode;
      insertionPoint = null;
      break;
    default:
      assertNever(position,);
  }
  const range = document.createRange();
  range.selectNodeContents(insertionParent,);
  const fragment = range.createContextualFragment(html,);
  await pump(fragment, insertionParent, insertionPoint,);
}
async function pump(sourceNode, targetParent, beforeNode,) {
  for (let node = sourceNode.firstChild; node; node = node.nextSibling) {
    if (node instanceof HTMLScriptElement) {
      await handleScript(node, targetParent, beforeNode,);
      continue;
    }
    const clone = node.cloneNode(false,);
    targetParent.insertBefore(clone, beforeNode,);
    if (node.firstChild) {
      await pump(node, clone, null,);
    }
  }
}
async function handleScript(node, parent, beforeNode,) {
  var _a;
  const script = node.cloneNode(true,);
  const isExternal = script.hasAttribute('src',);
  const isAsync = script.hasAttribute('async',);
  const isDefer = script.hasAttribute('defer',);
  const isModule = ((_a = script.getAttribute('type',)) == null ? void 0 : _a.toLowerCase()) === 'module';
  if (!isExternal || isAsync || isDefer || isModule) {
    parent.insertBefore(script, beforeNode,);
  } else {
    await execExternalBlockingScript(script, parent, beforeNode,);
  }
}
function execExternalBlockingScript(script, parent, beforeNode,) {
  return new Promise((resolve) => {
    script.onload = () => resolve();
    script.onerror = () => resolve();
    parent.insertBefore(script, beforeNode,);
  },);
}
function useMetadata(metadata,) {
  const {
    isInitialNavigation,
  } = useRouter();
  React2.useEffect(() => {
    if (metadata.robots) {
      let robotsTag = document.querySelector('meta[name="robots"]',);
      if (robotsTag) {
        robotsTag.setAttribute('content', metadata.robots,);
      } else {
        robotsTag = document.createElement('meta',);
        robotsTag.setAttribute('name', 'robots',);
        robotsTag.setAttribute('content', metadata.robots,);
        document.head.appendChild(robotsTag,);
      }
    }
  }, [metadata.robots,],);
  React2.useInsertionEffect(() => {
    var _a;
    document.title = metadata.title || '';
    if (metadata.viewport) {
      (_a = document.querySelector('meta[name="viewport"]',)) == null ? void 0 : _a.setAttribute('content', metadata.viewport,);
    }
  }, [metadata.title, metadata.viewport,],);
  React2.useEffect(() => {
    if (!isInitialNavigation) return;
    const mainTag = document.getElementById(mainTagId,);
    const isGeneratedPage = mainTag && mainTag.dataset[generatedPageDatasetKey] !== void 0;
    if (isGeneratedPage) return;
    void insertCustomHTML(
      metadata.customHTMLHeadStart,
      metadata.customHTMLHeadEnd,
      metadata.customHTMLBodyStart,
      metadata.customHTMLBodyEnd,
    );
  }, [],);
}
async function insertCustomHTML(customHTMLHeadStart, customHTMLHeadEnd, customHTMLBodyStart, customHTMLBodyEnd,) {
  let endOfHeadStart;
  let endOfHeadEnd;
  let endOfBodyStart;
  let endOfBodyEnd;
  if (customHTMLHeadStart || customHTMLHeadEnd) {
    const {
      start: start2,
      end,
    } = findCommentMarkers(
      document.head.childNodes,
      customHTMLHeadStart ? endOfHeadStartMarker : void 0,
      customHTMLHeadEnd ? endOfHeadEndMarker : void 0,
    );
    endOfHeadStart = start2;
    endOfHeadEnd = end;
  }
  if (customHTMLBodyStart || customHTMLBodyEnd) {
    const {
      start: start2,
      end,
    } = findCommentMarkers(
      document.body.childNodes,
      customHTMLBodyStart ? endOfBodyStartMarker : void 0,
      customHTMLBodyEnd ? endOfBodyEndMarker : void 0,
    );
    endOfBodyStart = start2;
    endOfBodyEnd = end;
  }
  if (customHTMLHeadStart && endOfHeadStart) {
    await insertHTML(customHTMLHeadStart, endOfHeadStart, 'beforebegin',);
  }
  if (customHTMLHeadEnd && endOfHeadEnd) {
    await insertHTML(customHTMLHeadEnd, endOfHeadEnd, 'beforebegin',);
  }
  if (customHTMLBodyStart && endOfBodyStart) {
    await insertHTML(customHTMLBodyStart, endOfBodyStart, 'beforebegin',);
  }
  if (customHTMLBodyEnd && endOfBodyEnd) {
    await insertHTML(customHTMLBodyEnd, endOfBodyEnd, 'beforebegin',);
  }
}
function findCommentMarkers(nodes, startMarker, endMarker,) {
  if (!startMarker && !endMarker) {
    return {
      start: void 0,
      end: void 0,
    };
  }
  let start2;
  let end;
  let i = 0;
  let j = nodes.length - 1;
  while (i <= j) {
    const startNode = nodes[i];
    const endNode = nodes[j];
    if (
      !start2 && (startNode == null ? void 0 : startNode.nodeType) === Node.COMMENT_NODE && startMarker &&
      `<!--${startNode.nodeValue}-->` === startMarker
    ) {
      start2 = startNode;
      if (!endMarker) break;
    }
    if (
      !end && (endNode == null ? void 0 : endNode.nodeType) === Node.COMMENT_NODE && endMarker &&
      `<!--${endNode.nodeValue}-->` === endMarker
    ) {
      end = endNode;
      if (!startMarker) break;
    }
    if (start2 && end) break;
    i++;
    j--;
  }
  return {
    start: start2,
    end,
  };
}
var warningMessages = /* @__PURE__ */ new Set();
function warnOnce2(keyMessage, ...rest) {
  if (warningMessages.has(keyMessage,)) return;
  warningMessages.add(keyMessage,);
  console.warn(keyMessage, ...rest,);
}
function deprecationWarning(removedItem, removalVersion, replacement,) {
  const replacementText = replacement ? `, use ${replacement} instead` : '';
  const warningText = `Deprecation warning: ${removedItem} will be removed in version ${removalVersion}${replacementText}.`;
  warnOnce2(warningText,);
}
var Observers = class {
  constructor() {
    __publicField(this, 'observers', /* @__PURE__ */ new Set(),);
    __publicField(this, 'transactions', {},);
  }
  add(observer2,) {
    this.observers.add(observer2,);
    let isCalled = false;
    return () => {
      if (isCalled) {
        return;
      }
      isCalled = true;
      this.remove(observer2,);
    };
  }
  remove(observer2,) {
    this.observers.delete(observer2,);
  }
  notify(change, transaction,) {
    if (transaction) {
      const accumulatedChange = this.transactions[transaction] || change;
      accumulatedChange.value = change.value;
      this.transactions[transaction] = accumulatedChange;
    } else {
      this.callObservers(change,);
    }
  }
  finishTransaction(transaction,) {
    const accumulatedChange = this.transactions[transaction];
    delete this.transactions[transaction];
    return this.callObservers(accumulatedChange, transaction,);
  }
  callObservers(change, transaction,) {
    const finishObservers = [];
    new Set(this.observers,).forEach((observer2) => {
      if (typeof observer2 === 'function') {
        observer2(change, transaction,);
      } else {
        observer2.update(change, transaction,);
        finishObservers.push(observer2.finish,);
      }
    },);
    return finishObservers;
  }
};
var Animatable = /* @__PURE__ */ (() => {
  function Animatable2(value,) {
    deprecationWarning('Animatable()', '2.0.0', 'the new animation API (https://www.framer.com/api/animation/)',);
    return isAnimatable2(value,) ? value : new AnimatableValue(value,);
  }
  Animatable2.transaction = (update) => {
    const transactionId = Math.random();
    const updatedValues = /* @__PURE__ */ new Set();
    const updater = (animatable, value,) => {
      animatable.set(value, transactionId,);
      updatedValues.add(animatable,);
    };
    update(updater, transactionId,);
    const finishObservers = [];
    updatedValues.forEach((value) => {
      finishObservers.push(...value.finishTransaction(transactionId,),);
    },);
    finishObservers.forEach((finish) => {
      finish(transactionId,);
    },);
  };
  Animatable2.getNumber = (value, defaultValue = 0,) => {
    return Animatable2.get(value, defaultValue,);
  };
  Animatable2.get = (value, defaultValue,) => {
    if (value === void 0 || value === null) {
      return defaultValue;
    }
    if (isAnimatable2(value,)) {
      return value.get();
    }
    return value;
  };
  Animatable2.objectToValues = (object) => {
    if (!object) {
      return object;
    }
    const result = {};
    for (const key7 in object) {
      const value = object[key7];
      if (isAnimatable2(value,)) {
        result[key7] = value.get();
      } else {
        result[key7] = value;
      }
    }
    return result;
  };
  return Animatable2;
})();
var onUpdateKey = 'onUpdate';
var finishTransactionKey = 'finishTransaction';
function isAnimatable2(value,) {
  return value !== null && typeof value === 'object' && onUpdateKey in value && value[onUpdateKey] instanceof Function &&
    finishTransactionKey in value && value[finishTransactionKey] instanceof Function;
}
function animatableInterpolation(value, currentInterpolation,) {
  return {
    interpolate(from, to,) {
      const fromValue = from.get();
      const toValue = to.get();
      const result = Animatable(fromValue,);
      return (progress2) => {
        const v = currentInterpolation.interpolate(fromValue, toValue,)(progress2,);
        result.set(v,);
        return result;
      };
    },
    difference(from, to,) {
      const v = from.get();
      return currentInterpolation.difference(v, to.get(),);
    },
  };
}
var AnimatableValue = class {
  constructor(value,) {
    this.value = value;
    __publicField(this, 'observers', new Observers(),);
  }
  static interpolationFor(value, currentInterpolation,) {
    if (isAnimatable2(value,)) {
      return animatableInterpolation(value, currentInterpolation,);
    }
  }
  get() {
    return this.value;
  }
  set(value, transaction,) {
    const oldValue = this.value;
    if (isAnimatable2(value,)) {
      value = value.get();
    }
    this.value = value;
    const change = {
      value,
      oldValue,
    };
    this.observers.notify(change, transaction,);
  }
  finishTransaction(transaction,) {
    return this.observers.finishTransaction(transaction,);
  }
  onUpdate(handler,) {
    return this.observers.add(handler,);
  }
};
function roundedNumber(value, decimals,) {
  const d = Math.round(Math.abs(decimals,),);
  const multiplier = 10 ** d;
  return Math.round(value * multiplier,) / multiplier;
}
function roundedNumberString(value, decimals,) {
  const result = value.toFixed(decimals,);
  return decimals === 0 ? result : `${+result}`;
}
function roundWithOffset(value, offset,) {
  if (offset === 0) {
    return Math.round(value,);
  }
  offset -= offset | 0;
  if (offset < 0) {
    offset = 1 - offset;
  }
  return Math.round(value - offset,) + offset;
}
function roundToHalfPixel(value,) {
  return Math.round(value * 2,) / 2;
}
function Point(x, y,) {
  return {
    x,
    y,
  };
}
((Point2) => {
  Point2.isQuadrilateralPoints = (points) => {
    return (points == null ? void 0 : points.length) === 4;
  };
  Point2.add = (...args) => {
    return args.reduce((previousValue, currentValue,) => {
      return {
        x: previousValue.x + currentValue.x,
        y: previousValue.y + currentValue.y,
      };
    }, {
      x: 0,
      y: 0,
    },);
  };
  Point2.subtract = (a, b,) => {
    return {
      x: a.x - b.x,
      y: a.y - b.y,
    };
  };
  Point2.multiply = (a, b,) => {
    return {
      x: a.x * b,
      y: a.y * b,
    };
  };
  Point2.divide = (a, b,) => {
    return {
      x: a.x / b,
      y: a.y / b,
    };
  };
  Point2.absolute = (point2) => {
    return {
      x: Math.abs(point2.x,),
      y: Math.abs(point2.y,),
    };
  };
  Point2.reverse = (point2) => {
    return {
      x: point2.x * -1,
      y: point2.y * -1,
    };
  };
  Point2.pixelAligned = (point2, offset = {
    x: 0,
    y: 0,
  },) => {
    return {
      x: roundWithOffset(point2.x, offset.x,),
      y: roundWithOffset(point2.y, offset.y,),
    };
  };
  Point2.distance = (a, b,) => {
    const deltaX = Math.abs(a.x - b.x,);
    const deltaY = Math.abs(a.y - b.y,);
    return Math.sqrt(deltaX * deltaX + deltaY * deltaY,);
  };
  Point2.angle = (a, b,) => {
    return Math.atan2(b.y - a.y, b.x - a.x,) * 180 / Math.PI - 90;
  };
  Point2.angleFromX = (a, b,) => {
    return Math.atan2(b.y - a.y, b.x - a.x,) * 180 / Math.PI;
  };
  Point2.isEqual = (a, b,) => {
    return a.x === b.x && a.y === b.y;
  };
  Point2.rotationNormalizer = () => {
    let lastValue;
    return (value) => {
      if (typeof lastValue !== 'number') {
        lastValue = value;
      }
      const diff = lastValue - value;
      const maxDiff = Math.abs(diff,) + 180;
      const nTimes = Math.floor(maxDiff / 360,);
      if (diff < 180) {
        value -= nTimes * 360;
      }
      if (diff > 180) {
        value += nTimes * 360;
      }
      lastValue = value;
      return value;
    };
  };
  function center(a, b,) {
    return {
      x: (a.x + b.x) / 2,
      y: (a.y + b.y) / 2,
    };
  }
  Point2.center = center;
  function centroid(points,) {
    let sumX = 0;
    let sumY = 0;
    points.forEach((point2) => {
      sumX += point2.x;
      sumY += point2.y;
    },);
    const centroidX = sumX / points.length;
    const centroidY = sumY / points.length;
    return {
      x: centroidX,
      y: centroidY,
    };
  }
  Point2.centroid = centroid;
  function sortClockwise(points,) {
    const centerPoint = Point2.centroid(points,);
    const angles = /* @__PURE__ */ new Map();
    for (let i = 0; i < points.length; i++) {
      const point2 = points[i];
      if (!point2) continue;
      angles.set(point2, Math.atan2(point2.y - centerPoint.y, point2.x - centerPoint.x,),);
    }
    return points.sort((a, b,) => (angles.get(a,) ?? 0) - (angles.get(b,) ?? 0));
  }
  Point2.sortClockwise = sortClockwise;
})(Point || (Point = {}),);
var BezierDefaults = {
  curve: 'ease',
  duration: 1,
};
function controlPointsForCurve(curve,) {
  switch (curve) {
    case 'linear':
      return [0, 0, 1, 1,];
    case 'ease':
      return [0.25, 0.1, 0.25, 1,];
    case 'ease-in':
      return [0.42, 0, 1, 1,];
    case 'ease-out':
      return [0, 0, 0.58, 1,];
    case 'ease-in-out':
      return [0.42, 0, 0.58, 1,];
  }
}
var BezierAnimator = class {
  constructor(options, interpolation,) {
    this.interpolation = interpolation;
    __publicField(this, 'unitBezier',);
    __publicField(this, 'options',);
    __publicField(this, 'current',);
    __publicField(this, 'destination',);
    __publicField(this, 'interpolator',);
    __publicField(this, 'progress', 0,);
    __publicField(this, 'next', (delta) => {
      const {
        duration,
      } = this.options;
      this.progress += delta / duration;
      const value = this.unitBezier.solve(this.progress, this.solveEpsilon(duration,),);
      assert(this.interpolator !== void 0, 'setFrom() or setTo() must be called before next()',);
      this.current = this.interpolator(value,);
      return this.current;
    },);
    this.options = {
      ...BezierDefaults,
      ...options,
    };
    let controlPoints;
    if (typeof this.options.curve === 'string') {
      controlPoints = controlPointsForCurve(this.options.curve,);
    } else {
      controlPoints = this.options.curve;
    }
    const [p1x, p1y, p2x, p2y,] = controlPoints;
    this.unitBezier = new UnitBezier(Point(p1x, p1y,), Point(p2x, p2y,),);
  }
  setFrom(value,) {
    this.current = value;
    this.updateInterpolator();
  }
  setTo(value,) {
    this.destination = value;
    this.updateInterpolator();
  }
  isReady() {
    return this.interpolator !== void 0;
  }
  updateInterpolator() {
    if (this.current === void 0 || this.destination === void 0) {
      return;
    }
    this.interpolator = this.interpolation.interpolate(this.current, this.destination,);
  }
  isFinished() {
    return this.progress >= 1;
  }
  solveEpsilon(duration,) {
    return 1 / (200 * duration);
  }
};
var UnitBezier = class {
  constructor(point1, point2,) {
    __publicField(this, 'a',);
    __publicField(this, 'b',);
    __publicField(this, 'c',);
    this.c = Point.multiply(point1, 3,);
    this.b = Point.subtract(Point.multiply(Point.subtract(point2, point1,), 3,), this.c,);
    this.a = Point.subtract(Point.subtract(Point(1, 1,), this.c,), this.b,);
  }
  solve(x, epsilon2,) {
    return this.sampleY(this.solveForT(x, epsilon2,),);
  }
  sampleX(t,) {
    return ((this.a.x * t + this.b.x) * t + this.c.x) * t;
  }
  sampleY(t,) {
    return ((this.a.y * t + this.b.y) * t + this.c.y) * t;
  }
  sampleDerivativeX(t,) {
    return (3 * this.a.x * t + 2 * this.b.x) * t + this.c.x;
  }
  solveForT(x, epsilon2,) {
    let t0, t1, t2, x2, d2, i;
    t2 = x;
    for (i = 0; i < 8; ++i) {
      x2 = this.sampleX(t2,) - x;
      if (Math.abs(x2,) < epsilon2) return t2;
      d2 = this.sampleDerivativeX(t2,);
      if (Math.abs(d2,) < epsilon2) break;
      t2 = t2 - x2 / d2;
    }
    t0 = 0;
    t1 = 1;
    t2 = x;
    if (t2 < t0) return t0;
    if (t2 > t1) return t1;
    while (t0 < t1) {
      x2 = this.sampleX(t2,);
      if (Math.abs(x2 - x,) < epsilon2) return t2;
      if (x > x2) t0 = t2;
      else t1 = t2;
      t2 = (t1 - t0) * 0.5 + t0;
    }
    return t2;
  }
};
var Integrator = class {
  constructor(accelerationFunction,) {
    __publicField(this, 'accelerationForState',);
    this.accelerationForState = accelerationFunction;
  }
  integrateState(state, dt,) {
    const a = this.evaluateState(state,);
    const b = this.evaluateStateWithDerivative(state, dt * 0.5, a,);
    const c = this.evaluateStateWithDerivative(state, dt * 0.5, b,);
    const d = this.evaluateStateWithDerivative(state, dt, c,);
    const dxdt = 1 / 6 * (a.dx + 2 * (b.dx + c.dx) + d.dx);
    const dvdt = 1 / 6 * (a.dv + 2 * (b.dv + c.dv) + d.dv);
    state.x = state.x + dxdt * dt;
    state.v = state.v + dvdt * dt;
    return state;
  }
  evaluateState(initialState2,) {
    const dv = this.accelerationForState(initialState2,);
    return {
      dx: initialState2.v,
      dv,
    };
  }
  evaluateStateWithDerivative(initialState2, dt, derivative,) {
    const state = {
      x: initialState2.x + derivative.dx * dt,
      v: initialState2.v + derivative.dv * dt,
    };
    const output = {
      dx: state.v,
      dv: this.accelerationForState(state,),
    };
    return output;
  }
};
var FrictionAnimator = class {
  constructor(options,) {
    __publicField(this, 'options',);
    __publicField(this, 'state',);
    __publicField(this, 'integrator',);
    this.options = {
      velocity: 0,
      friction: 2,
      tolerance: 1 / 10,
    };
    Object.assign(this.options, options,);
    this.state = {
      x: 0,
      v: this.options.velocity,
    };
    this.integrator = new Integrator((state) => -(this.options.friction * state.v));
  }
  setFrom(value,) {
    this.state.x = value;
  }
  setTo(value,) {}
  setVelocity(velocity,) {
    this.state.v = velocity;
  }
  getState() {
    return this.state;
  }
  isReady() {
    return true;
  }
  next(delta,) {
    this.state = this.integrator.integrateState(this.state, delta,);
    return this.state.x;
  }
  isFinished() {
    return Math.abs(this.state.v,) < this.options.tolerance;
  }
};
function isInterpolatable(value,) {
  return typeof value === 'function' && value.interpolationFor && typeof value.interpolationFor === 'function';
}
var Interpolation = {
  /**
   * @param from -
   * @param to -
   * @internal
   */
  handleUndefined: (from, to,) => {
    if (from === void 0) {
      from = to;
    }
    if (to === void 0) {
      to = from;
    }
    return [from, to,];
  },
};
var NumberInterpolation = {
  interpolate(from, to,) {
    [from, to,] = Interpolation.handleUndefined(from, to,);
    const a1 = from;
    const b1 = to - a1;
    return (progress2) => {
      const value = a1 + b1 * progress2;
      return value;
    };
  },
  difference(from, to,) {
    return to - from;
  },
};
var epsilon = 1e-3;
var minDuration = 0.01;
var maxDuration2 = 10;
var minDamping = /* @__PURE__ */ (() => Number.MIN_VALUE)();
var maxDamping = 1;
function approximateRoot2(func, derivative, initialGuess, times = 12,) {
  let result = initialGuess;
  for (let i = 1, end = times, asc = 1 <= end; asc ? i < end : i > end; asc ? i++ : i--) {
    result = result - func(result,) / derivative(result,);
  }
  return result;
}
function angularFrequency(undampedFrequency, dampingRatio,) {
  return undampedFrequency * Math.sqrt(1 - Math.pow(dampingRatio, 2,),);
}
var SpringCurveValueConverter = {
  computeDampingRatio: (tension, friction, mass = 1,) => {
    return friction / (2 * Math.sqrt(mass * tension,));
  },
  // Tries to compute the duration of a spring,
  // but can't for certain velocities and if dampingRatio >= 1
  // In those cases it will return null
  computeDuration: (tension, friction, velocity = 0, mass = 1,) => {
    let duration;
    const dampingRatio = SpringCurveValueConverter.computeDampingRatio(tension, friction,);
    const undampedFrequency = Math.sqrt(tension / mass,);
    if (dampingRatio < 1) {
      const a = Math.sqrt(1 - Math.pow(dampingRatio, 2,),);
      const b = velocity / (a * undampedFrequency);
      const c = dampingRatio / a;
      const d = -((b - c) / epsilon);
      if (d <= 0) {
        return null;
      }
      duration = Math.log(d,) / (dampingRatio * undampedFrequency);
    } else {
      return null;
    }
    return duration;
  },
  computeDerivedCurveOptions: (dampingRatio, duration, velocity = 0, mass = 1,) => {
    let derivative, envelope;
    dampingRatio = Math.max(Math.min(dampingRatio, maxDamping,), minDamping,);
    duration = Math.max(Math.min(duration, maxDuration2,), minDuration,);
    if (dampingRatio < 1) {
      envelope = function (envelopeUndampedFrequency,) {
        const exponentialDecay = envelopeUndampedFrequency * dampingRatio;
        const currentDisplacement = exponentialDecay * duration;
        const a = exponentialDecay - velocity;
        const b = angularFrequency(envelopeUndampedFrequency, dampingRatio,);
        const c = Math.exp(-currentDisplacement,);
        return epsilon - a / b * c;
      };
      derivative = function (derivativeUndampedFrequency,) {
        const exponentialDecay = derivativeUndampedFrequency * dampingRatio;
        const currentDisplacement = exponentialDecay * duration;
        const d = currentDisplacement * velocity + velocity;
        const e = Math.pow(dampingRatio, 2,) * Math.pow(derivativeUndampedFrequency, 2,) * duration;
        const f = Math.exp(-currentDisplacement,);
        const g = angularFrequency(Math.pow(derivativeUndampedFrequency, 2,), dampingRatio,);
        const factor = -envelope(derivativeUndampedFrequency,) + epsilon > 0 ? -1 : 1;
        return factor * ((d - e) * f) / g;
      };
    } else {
      envelope = function (envelopeUndampedFrequency,) {
        const a = Math.exp(-envelopeUndampedFrequency * duration,);
        const b = (envelopeUndampedFrequency - velocity) * duration + 1;
        return -epsilon + a * b;
      };
      derivative = function (derivativeUndampedFrequency,) {
        const a = Math.exp(-derivativeUndampedFrequency * duration,);
        const b = (velocity - derivativeUndampedFrequency) * Math.pow(duration, 2,);
        return a * b;
      };
    }
    const result = {
      tension: 100,
      friction: 10,
      velocity,
    };
    const initialGuess = 5 / duration;
    const undampedFrequency = approximateRoot2(envelope, derivative, initialGuess,);
    if (!Number.isNaN(undampedFrequency,)) {
      result.tension = Math.pow(undampedFrequency, 2,) * mass;
      result.friction = dampingRatio * 2 * Math.sqrt(mass * result.tension,);
    }
    return result;
  },
};
var SpringTensionFrictionDefaults = /* @__PURE__ */ (() => ({
  tension: 500,
  friction: 10,
  tolerance: 1 / 1e4,
  velocity: 0,
}))();
var SpringDampingDurationDefaults = {
  dampingRatio: 1,
  duration: 1,
  velocity: 0,
  mass: 1,
};
function isDampingDurationSpringOptions(options,) {
  if (!options) {
    return false;
  }
  return typeof options.dampingRatio === 'number' || typeof options.duration === 'number' || typeof options.mass === 'number';
}
var SpringAnimator = class {
  constructor(options, interpolation,) {
    this.interpolation = interpolation;
    __publicField(this, 'options',);
    __publicField(this, 'current',);
    __publicField(this, 'destination',);
    __publicField(this, 'difference',);
    __publicField(this, 'state',);
    __publicField(this, 'integrator',);
    __publicField(this, 'interpolator',);
    let _opt;
    if (isDampingDurationSpringOptions(options,)) {
      const toPass = {
        ...SpringDampingDurationDefaults,
        ...options,
      };
      _opt = SpringCurveValueConverter.computeDerivedCurveOptions(toPass.dampingRatio, toPass.duration, toPass.velocity, toPass.mass,);
    } else {
      _opt = options;
    }
    this.options = {
      ...SpringTensionFrictionDefaults,
      ..._opt,
    };
    this.state = {
      x: 0,
      v: this.options.velocity,
    };
    this.integrator = new Integrator((state) => -this.options.tension * state.x - this.options.friction * state.v);
  }
  isReady() {
    return this.interpolator !== void 0 && this.difference !== void 0;
  }
  next(delta,) {
    this.state = this.integrator.integrateState(this.state, delta,);
    assert(this.interpolator !== void 0, 'setFrom() or setTo() must be called before next()',);
    const value = this.interpolator(this.progress(),);
    return value;
  }
  isFinished() {
    const positionNearZero = Math.abs(this.state.x,) < this.options.tolerance;
    const velocityNearZero = Math.abs(this.state.v,) < this.options.tolerance;
    return positionNearZero && velocityNearZero;
  }
  setFrom(value,) {
    this.current = value;
    this.updateInterpolator();
  }
  setVelocity(velocity,) {
    this.state.v = velocity;
  }
  progress() {
    assert(this.difference !== void 0, 'setTo() must be called before progress()',);
    return 1 - this.state.x / this.difference;
  }
  // The spring always settles to 0, so we create an interpolation to the destination
  // And calculate the progress based on the current state and the span of the interpolation
  // This lets us integrate over state.x, even though Value is generic
  setTo(value,) {
    assert(this.current !== void 0, 'setFrom() must be called before setTo()',);
    this.destination = value;
    this.difference = this.interpolation.difference(this.destination, this.current,);
    this.state.x = this.difference;
    this.updateInterpolator();
  }
  /** @internal */
  getState() {
    return this.state;
  }
  updateInterpolator() {
    if (this.current === void 0 || this.destination === void 0) {
      return;
    }
    this.interpolator = this.interpolation.interpolate(this.current, this.destination,);
  }
};
var Defaults = {
  velocity: 0,
  min: 0,
  max: 0,
  momentum: {
    friction: 2,
    tolerance: 10,
  },
  bounce: {
    tension: 500,
    friction: 10,
    tolerance: 1,
  },
};
var InertialScrollAnimator = class {
  constructor(options,) {
    __publicField(this, 'options',);
    __publicField(this, 'current',);
    __publicField(this, 'frictionAnimator',);
    __publicField(this, 'springAnimator',);
    __publicField(this, 'useSpring',);
    this.options = Object.assign({
      ...Defaults,
    }, options,);
    this.frictionAnimator = new FrictionAnimator({
      friction: this.options.momentum.friction,
      tolerance: this.options.momentum.tolerance,
      velocity: this.options.velocity,
    },);
    this.springAnimator = new SpringAnimator({
      tension: this.options.bounce.tension,
      friction: this.options.bounce.friction,
      tolerance: this.options.bounce.tolerance,
      velocity: this.options.velocity,
    }, NumberInterpolation,);
    this.useSpring = false;
  }
  isReady() {
    return true;
  }
  next(delta,) {
    this.current = this.currentAnimator.next(delta,);
    if (!this.useSpring) {
      this.tryTransitionToSpring();
    }
    return this.current;
  }
  get currentAnimator() {
    if (this.useSpring) {
      return this.springAnimator;
    }
    return this.frictionAnimator;
  }
  isFinished() {
    return this.currentAnimator.isFinished();
  }
  get state() {
    return this.currentAnimator.getState();
  }
  setFrom(value,) {
    this.setState({
      x: value,
      v: this.state.v,
    },);
  }
  setState(state,) {
    this.frictionAnimator.setFrom(state.x,);
    this.frictionAnimator.setVelocity(state.v,);
    if (this.isValidState()) {
      return this.tryTransitionToSpring();
    } else {
      let bound = 0;
      if (this.state.x <= this.options.min) {
        bound = this.options.min;
      }
      if (this.state.x >= this.options.max) {
        bound = this.options.max;
      }
      return this.transitionToSpring(bound,);
    }
  }
  setTo(destination,) {
    this.frictionAnimator.setTo(destination,);
    this.springAnimator.setTo(destination,);
  }
  setLimits(min, max,) {
    this.options.min = min;
    this.options.max = max;
  }
  // If the position is outside the min and max bounds, and traveling
  // further away, then transition from friction to spring animation
  tryTransitionToSpring() {
    const belowMinWithVelocity = this.state.x < this.options.min && this.state.v <= 0;
    const aboveMaxWithVelocity = this.state.x > this.options.max && this.state.v >= 0;
    if (belowMinWithVelocity || aboveMaxWithVelocity) {
      let bound;
      if (belowMinWithVelocity) {
        bound = this.options.min;
      } else {
        bound = this.options.max;
      }
      this.transitionToSpring(bound,);
    } else {
      this.useSpring = false;
    }
  }
  transitionToSpring(bound,) {
    this.springAnimator.setFrom(this.state.x,);
    this.springAnimator.setVelocity(this.state.v,);
    this.springAnimator.setTo(bound,);
    this.useSpring = true;
  }
  // If the position is outside the min and max bounds, but traveling
  // back towards the bounds, check if the velocity is sufficient to
  // carry the position back within bounds. If it is, let friction do the
  // work. If not, the state is invalid, so use the spring.
  isValidState() {
    const belowMinTravelingBack = this.state.x < this.options.min && this.state.v > 0;
    const aboveMaxTravelingBack = this.state.x > this.options.max && this.state.v < 0;
    if (belowMinTravelingBack || aboveMaxTravelingBack) {
      let bound;
      if (belowMinTravelingBack) {
        bound = this.options.min;
      } else {
        bound = this.options.max;
      }
      const friction = this.frictionAnimator.options.friction;
      const solution = 1 - friction * (bound - this.state.x) / this.state.v;
      return solution > 0;
    }
    return true;
  }
  // The math behind _isValidState:
  //
  // 1. Integrate the friction animator's acceleration to find velocity
  //
  //         a = - k * v
  //     dv/dt = - k * v
  // Int(dv/v) = - k * Int(dt)
  //      ln v = - k * t + C
  //
  // => Solve for C at t = 0
  //
  // ln v(0) = - k * 0 + C
  // ln v(0) = C
  //
  // => Plug C back into v(t)
  //
  //     ln v = - k * t + ln v(0)
  // e^(ln v) = e^(- k * t) + e^(ln v(0))
  //        v = v(0) * e^(- k * t)
  //
  // 2. Integrate velocity to find position
  //
  // Int(v) = v(0) * Int(e^(- k * t))
  //      x = - v(0) * e^(-k * t) / k + C
  //
  // => Solve for C at t = 0
  //
  //            x(0) = - v(0) * e^(-k * 0) / k + C
  //            x(0) = - v(0) / k + C
  // x(0) + v(0) / k = C
  //
  // => Plug C back into x(t)
  //
  // x = - v(0) * e^(-k * t) / k + x(0) + v(0) / k
  //
  // 3. Check if a (real) solution exists for t for position x
  //
  //                                x = - v(0) * e^(-k * t) / k + x(0) + v(0) / k
  //                         x - x(0) = - v(0) * e^(-k * t) / k + v(0) / k
  //                   k * (x - x(0)) = - v(0) * e^(-k * t) + v(0)
  //            k * (x - x(0)) - v(0) = - v(0) * e^(-k * t)
  // (k * (x - x(0)) - v(0)) / - v(0) = e^(-k * t)
  //       1 - (k * (x - x(0)) / v(0) = e^(-k * t)
  //   ln(1 - (k * (x - x(0)) / v(0)) = -k * t
  //
  // Therefore, a real solution exists if 1 - (k * (x - x(0)) / v(0) > 0
};
var cssNames = {
  aliceblue: 'f0f8ff',
  antiquewhite: 'faebd7',
  aqua: '0ff',
  aquamarine: '7fffd4',
  azure: 'f0ffff',
  beige: 'f5f5dc',
  bisque: 'ffe4c4',
  black: '000',
  blanchedalmond: 'ffebcd',
  blue: '00f',
  blueviolet: '8a2be2',
  brown: 'a52a2a',
  burlywood: 'deb887',
  burntsienna: 'ea7e5d',
  cadetblue: '5f9ea0',
  chartreuse: '7fff00',
  chocolate: 'd2691e',
  coral: 'ff7f50',
  cornflowerblue: '6495ed',
  cornsilk: 'fff8dc',
  crimson: 'dc143c',
  cyan: '0ff',
  darkblue: '00008b',
  darkcyan: '008b8b',
  darkgoldenrod: 'b8860b',
  darkgray: 'a9a9a9',
  darkgreen: '006400',
  darkgrey: 'a9a9a9',
  darkkhaki: 'bdb76b',
  darkmagenta: '8b008b',
  darkolivegreen: '556b2f',
  darkorange: 'ff8c00',
  darkorchid: '9932cc',
  darkred: '8b0000',
  darksalmon: 'e9967a',
  darkseagreen: '8fbc8f',
  darkslateblue: '483d8b',
  darkslategray: '2f4f4f',
  darkslategrey: '2f4f4f',
  darkturquoise: '00ced1',
  darkviolet: '9400d3',
  deeppink: 'ff1493',
  deepskyblue: '00bfff',
  dimgray: '696969',
  dimgrey: '696969',
  dodgerblue: '1e90ff',
  firebrick: 'b22222',
  floralwhite: 'fffaf0',
  forestgreen: '228b22',
  fuchsia: 'f0f',
  gainsboro: 'dcdcdc',
  ghostwhite: 'f8f8ff',
  gold: 'ffd700',
  goldenrod: 'daa520',
  gray: '808080',
  green: '008000',
  greenyellow: 'adff2f',
  grey: '808080',
  honeydew: 'f0fff0',
  hotpink: 'ff69b4',
  indianred: 'cd5c5c',
  indigo: '4b0082',
  ivory: 'fffff0',
  khaki: 'f0e68c',
  lavender: 'e6e6fa',
  lavenderblush: 'fff0f5',
  lawngreen: '7cfc00',
  lemonchiffon: 'fffacd',
  lightblue: 'add8e6',
  lightcoral: 'f08080',
  lightcyan: 'e0ffff',
  lightgoldenrodyellow: 'fafad2',
  lightgray: 'd3d3d3',
  lightgreen: '90ee90',
  lightgrey: 'd3d3d3',
  lightpink: 'ffb6c1',
  lightsalmon: 'ffa07a',
  lightseagreen: '20b2aa',
  lightskyblue: '87cefa',
  lightslategray: '789',
  lightslategrey: '789',
  lightsteelblue: 'b0c4de',
  lightyellow: 'ffffe0',
  lime: '0f0',
  limegreen: '32cd32',
  linen: 'faf0e6',
  magenta: 'f0f',
  maroon: '800000',
  mediumaquamarine: '66cdaa',
  mediumblue: '0000cd',
  mediumorchid: 'ba55d3',
  mediumpurple: '9370db',
  mediumseagreen: '3cb371',
  mediumslateblue: '7b68ee',
  mediumspringgreen: '00fa9a',
  mediumturquoise: '48d1cc',
  mediumvioletred: 'c71585',
  midnightblue: '191970',
  mintcream: 'f5fffa',
  mistyrose: 'ffe4e1',
  moccasin: 'ffe4b5',
  navajowhite: 'ffdead',
  navy: '000080',
  oldlace: 'fdf5e6',
  olive: '808000',
  olivedrab: '6b8e23',
  orange: 'ffa500',
  orangered: 'ff4500',
  orchid: 'da70d6',
  palegoldenrod: 'eee8aa',
  palegreen: '98fb98',
  paleturquoise: 'afeeee',
  palevioletred: 'db7093',
  papayawhip: 'ffefd5',
  peachpuff: 'ffdab9',
  peru: 'cd853f',
  pink: 'ffc0cb',
  plum: 'dda0dd',
  powderblue: 'b0e0e6',
  purple: '800080',
  rebeccapurple: '663399',
  red: 'f00',
  rosybrown: 'bc8f8f',
  royalblue: '4169e1',
  saddlebrown: '8b4513',
  salmon: 'fa8072',
  sandybrown: 'f4a460',
  seagreen: '2e8b57',
  seashell: 'fff5ee',
  sienna: 'a0522d',
  silver: 'c0c0c0',
  skyblue: '87ceeb',
  slateblue: '6a5acd',
  slategray: '708090',
  slategrey: '708090',
  snow: 'fffafa',
  springgreen: '00ff7f',
  steelblue: '4682b4',
  tan: 'd2b48c',
  teal: '008080',
  thistle: 'd8bfd8',
  tomato: 'ff6347',
  turquoise: '40e0d0',
  violet: 'ee82ee',
  wheat: 'f5deb3',
  white: 'fff',
  whitesmoke: 'f5f5f5',
  yellow: 'ff0',
  yellowgreen: '9acd32',
};
function modulate(value, rangeA, rangeB, limit = false,) {
  const [fromLow, fromHigh,] = rangeA;
  const [toLow, toHigh,] = rangeB;
  const fromDelta = fromHigh - fromLow;
  if (fromDelta === 0) return (toHigh + toLow) / 2;
  const toDelta = toHigh - toLow;
  if (toDelta === 0) return toLow;
  const result = toLow + (value - fromLow) / fromDelta * toDelta;
  if (limit === true) {
    if (toLow < toHigh) {
      if (result < toLow) {
        return toLow;
      }
      if (result > toHigh) {
        return toHigh;
      }
    } else {
      if (result > toLow) {
        return toLow;
      }
      if (result < toHigh) {
        return toHigh;
      }
    }
  }
  return result;
}
function isNumeric(value,) {
  return !Number.isNaN(value,) && Number.isFinite(value,);
}
function percentToFraction(val,) {
  const digits = numberFromString(val,);
  if (digits !== void 0) {
    if (val.includes('%',)) {
      return digits / 100;
    }
    return digits;
  }
  return 0;
}
function numberFromString(input,) {
  const match = /\d?\.?\d+/u.exec(input,);
  return match ? Number(match[0],) : void 0;
}
var ColorFormat = /* @__PURE__ */ ((ColorFormat2) => {
  ColorFormat2['RGB'] = 'rgb';
  ColorFormat2['HSL'] = 'hsl';
  ColorFormat2['HSV'] = 'hsv';
  ColorFormat2['HEX'] = 'hex';
  ColorFormat2['NAME'] = 'name';
  return ColorFormat2;
})(ColorFormat || {},);
var ColorMixModelType = /* @__PURE__ */ ((ColorMixModelType2) => {
  ColorMixModelType2['RGB'] = 'rgb';
  ColorMixModelType2['RGBA'] = 'rgba';
  ColorMixModelType2['HSL'] = 'hsl';
  ColorMixModelType2['HSLA'] = 'hsla';
  ColorMixModelType2['HUSL'] = 'husl';
  return ColorMixModelType2;
})(ColorMixModelType || {},);
var Hsluv = /* @__PURE__ */ (() => require_hsluv().Hsluv)();
var hsluvConverter = /* @__PURE__ */ new Hsluv();
function rgbToHsluv(r, g, b,) {
  hsluvConverter.rgb_r = r / 255;
  hsluvConverter.rgb_g = g / 255;
  hsluvConverter.rgb_b = b / 255;
  hsluvConverter.rgbToHsluv();
  return {
    h: hsluvConverter.hsluv_h,
    s: hsluvConverter.hsluv_s,
    l: hsluvConverter.hsluv_l,
  };
}
function rgbaFromHusl(h, s, l, a = 1,) {
  hsluvConverter.hsluv_h = h;
  hsluvConverter.hsluv_s = s;
  hsluvConverter.hsluv_l = l;
  hsluvConverter.hsluvToRgb();
  return {
    r: hsluvConverter.rgb_r * 255,
    g: hsluvConverter.rgb_g * 255,
    b: hsluvConverter.rgb_b * 255,
    a,
  };
}
function hsvToStr(h, s, v, a,) {
  const _h = Math.round(h,);
  const _s = Math.round(s * 100,);
  const _v = Math.round(v * 100,);
  return a === void 0 || a === 1 ? 'hsv(' + _h + ', ' + _s + '%, ' + _v + '%)' : 'hsva(' + _h + ', ' + _s + '%, ' + _v + '%, ' + a + ')';
}
function rgbToRgb(r, g, b,) {
  return {
    r: isNumeric(r,) ? bound01(r, 255,) * 255 : 0,
    g: isNumeric(g,) ? bound01(g, 255,) * 255 : 0,
    b: isNumeric(b,) ? bound01(b, 255,) * 255 : 0,
  };
}
function rgbToHex(r, g, b, allow3Char,) {
  const hex2 = [pad2(Math.round(r,).toString(16,),), pad2(Math.round(g,).toString(16,),), pad2(Math.round(b,).toString(16,),),];
  if (
    allow3Char && hex2[0].charAt(0,) === hex2[0].charAt(1,) && hex2[1].charAt(0,) === hex2[1].charAt(1,) &&
    hex2[2].charAt(0,) === hex2[2].charAt(1,)
  ) {
    return hex2[0].charAt(0,) + hex2[1].charAt(0,) + hex2[2].charAt(0,);
  }
  return hex2.join('',);
}
function rgbToHsl(r, g, b,) {
  let l;
  let s;
  const _r = bound01(r, 255,);
  const _g = bound01(g, 255,);
  const _b = bound01(b, 255,);
  const max = Math.max(_r, _g, _b,);
  const min = Math.min(_r, _g, _b,);
  let h = s = l = (max + min) / 2;
  if (max === min) {
    h = s = 0;
  } else {
    const d = max - min;
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
    switch (max) {
      case _r:
        h = (_g - _b) / d + (_g < _b ? 6 : 0);
        break;
      case _g:
        h = (_b - _r) / d + 2;
        break;
      case _b:
        h = (_r - _g) / d + 4;
        break;
    }
    h /= 6;
  }
  return {
    h: h * 360,
    s,
    l,
  };
}
function hue2rgb(p, q, t,) {
  if (t < 0) {
    t += 1;
  }
  if (t > 1) {
    t -= 1;
  }
  if (t < 1 / 6) {
    return p + (q - p) * 6 * t;
  }
  if (t < 1 / 2) {
    return q;
  }
  if (t < 2 / 3) {
    return p + (q - p) * (2 / 3 - t) * 6;
  }
  return p;
}
function hslToRgb(h, s, l,) {
  let r;
  let g;
  let b;
  h = bound01(h, 360,);
  s = bound01(s * 100, 100,);
  l = bound01(l * 100, 100,);
  if (s === 0) {
    r = g = b = l;
  } else {
    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    const p = 2 * l - q;
    r = hue2rgb(p, q, h + 1 / 3,);
    g = hue2rgb(p, q, h,);
    b = hue2rgb(p, q, h - 1 / 3,);
  }
  return {
    r: r * 255,
    g: g * 255,
    b: b * 255,
  };
}
function rgbToHsv(r, g, b,) {
  r = bound01(r, 255,);
  g = bound01(g, 255,);
  b = bound01(b, 255,);
  const max = Math.max(r, g, b,);
  const min = Math.min(r, g, b,);
  const d = max - min;
  let h = 0;
  const s = max === 0 ? 0 : d / max;
  const v = max;
  if (max === min) {
    h = 0;
  } else {
    switch (max) {
      case r:
        h = (g - b) / d + (g < b ? 6 : 0);
        break;
      case g:
        h = (b - r) / d + 2;
        break;
      case b:
        h = (r - g) / d + 4;
        break;
    }
    h /= 6;
  }
  return {
    h,
    s,
    v,
  };
}
function hsvToRgb(h, s, v,) {
  h = bound01(h, 360,) * 6;
  s = bound01(s * 100, 100,);
  v = bound01(v * 100, 100,);
  const i = Math.floor(h,);
  const f = h - i;
  const p = v * (1 - s);
  const q = v * (1 - f * s);
  const t = v * (1 - (1 - f) * s);
  const mod = i % 6;
  const r = [v, q, p, p, t, v,][mod];
  const g = [t, v, v, q, p, p,][mod];
  const b = [p, p, t, v, v, q,][mod];
  return {
    r: r * 255,
    g: g * 255,
    b: b * 255,
  };
}
function bound01(n, max,) {
  let _max;
  let _n;
  if (typeof max === 'string') _max = parseFloat(max,);
  else _max = max;
  if (typeof n === 'string') {
    if (isOnePointZero(n,)) {
      n = '100%';
    }
    const processPercent = isPercentage(n,);
    _n = Math.min(_max, Math.max(0, parseFloat(n,),),);
    if (processPercent) {
      _n = Math.floor(_n * _max,) / 100;
    }
  } else {
    _n = n;
  }
  if (Math.abs(_n - _max,) < 1e-6) {
    return 1;
  }
  return _n % _max / _max;
}
function isOnePointZero(n,) {
  return typeof n === 'string' && n.includes('.',) && parseFloat(n,) === 1;
}
function isPercentage(n,) {
  return typeof n === 'string' && n.includes('%',);
}
function pad2(char,) {
  if (char.length === 1) {
    return '0' + char;
  } else {
    return '' + char;
  }
}
var matchers = /* @__PURE__ */ (() => {
  const cssInteger = '[-\\+]?\\d+%?';
  const cssNumber = '[-\\+]?\\d*\\.\\d+%?';
  const cssUnit = '(?:' + cssNumber + ')|(?:' + cssInteger + ')';
  const permissiveMatch3 = '[\\s|\\(]+(' + cssUnit + ')[,|\\s]+(' + cssUnit + ')[,|\\s]+(' + cssUnit + ')\\s*\\)?';
  const permissiveMatch4 = '[\\s|\\(]+(' + cssUnit + ')[,|\\s]+(' + cssUnit + ')[,|\\s]+(' + cssUnit + ')[,|\\s]+(' + cssUnit + ')\\s*\\)?';
  return {
    rgb: new RegExp('rgb' + permissiveMatch3,),
    rgba: new RegExp('rgba' + permissiveMatch4,),
    hsl: new RegExp('hsl' + permissiveMatch3,),
    hsla: new RegExp('hsla' + permissiveMatch4,),
    hsv: new RegExp('hsv' + permissiveMatch3,),
    hsva: new RegExp('hsva' + permissiveMatch4,),
    hex3: /^([\da-f])([\da-f])([\da-f])$/iu,
    hex6: /^([\da-f]{2})([\da-f]{2})([\da-f]{2})$/iu,
    hex4: /^#?([\da-f])([\da-f])([\da-f])([\da-f])$/iu,
    hex8: /^#?([\da-f]{2})([\da-f]{2})([\da-f]{2})([\da-f]{2})$/iu,
  };
})();
function stringToObject(inputColor,) {
  if (inputColor.includes('gradient(',)) return false;
  if (inputColor.includes('var(',)) return false;
  const trimLeft = /^[\s,#]+/u;
  let color2 = inputColor.replace(trimLeft, '',).trimEnd().toLowerCase();
  const namedColor = cssNames[color2];
  if (namedColor) {
    color2 = namedColor;
  }
  if (color2 === 'transparent') {
    return {
      r: 0,
      g: 0,
      b: 0,
      a: 0,
      format: 'name',
      /* NAME */
    };
  }
  let match;
  if (match = matchers.rgb.exec(color2,)) {
    return {
      r: parseInt(match[1] ?? '',),
      g: parseInt(match[2] ?? '',),
      b: parseInt(match[3] ?? '',),
      a: 1,
      format: 'rgb',
      /* RGB */
    };
  }
  if (match = matchers.rgba.exec(color2,)) {
    return {
      r: parseInt(match[1] ?? '',),
      g: parseInt(match[2] ?? '',),
      b: parseInt(match[3] ?? '',),
      a: parseFloat(match[4] ?? '',),
      format: 'rgb',
      /* RGB */
    };
  }
  if (match = matchers.hsl.exec(color2,)) {
    return {
      h: parseInt(match[1] ?? '',),
      s: percentToFraction(match[2] ?? '',),
      l: percentToFraction(match[3] ?? '',),
      a: 1,
      format: 'hsl',
      /* HSL */
    };
  }
  if (match = matchers.hsla.exec(color2,)) {
    return {
      h: parseInt(match[1] ?? '',),
      s: percentToFraction(match[2] ?? '',),
      l: percentToFraction(match[3] ?? '',),
      a: parseFloat(match[4] ?? '',),
      format: 'hsl',
      /* HSL */
    };
  }
  if (match = matchers.hsv.exec(color2,)) {
    return {
      h: parseInt(match[1] ?? '',),
      s: percentToFraction(match[2] ?? '',),
      v: percentToFraction(match[3] ?? '',),
      a: 1,
      format: 'hsv',
      /* HSV */
    };
  }
  if (match = matchers.hsva.exec(color2,)) {
    return {
      h: parseInt(match[1] ?? '',),
      s: percentToFraction(match[2] ?? '',),
      v: percentToFraction(match[3] ?? '',),
      a: parseFloat(match[4] ?? '',),
      format: 'hsv',
      /* HSV */
    };
  }
  if (match = matchers.hex8.exec(color2,)) {
    return {
      r: parseIntFromHex(match[1] ?? '',),
      g: parseIntFromHex(match[2] ?? '',),
      b: parseIntFromHex(match[3] ?? '',),
      a: convertHexToDecimal(match[4] ?? '',),
      format: namedColor ? 'name' : 'hex',
      /* HEX */
    };
  }
  if (match = matchers.hex6.exec(color2,)) {
    return {
      r: parseIntFromHex(match[1] ?? '',),
      g: parseIntFromHex(match[2] ?? '',),
      b: parseIntFromHex(match[3] ?? '',),
      a: 1,
      format: namedColor ? 'name' : 'hex',
      /* HEX */
    };
  }
  if (match = matchers.hex4.exec(color2,)) {
    return {
      r: parseIntFromHex(`${match[1]}${match[1]}`,),
      g: parseIntFromHex(`${match[2]}${match[2]}`,),
      b: parseIntFromHex(`${match[3]}${match[3]}`,),
      a: convertHexToDecimal(match[4] + '' + match[4],),
      format: namedColor ? 'name' : 'hex',
      /* HEX */
    };
  }
  if (match = matchers.hex3.exec(color2,)) {
    return {
      r: parseIntFromHex(`${match[1]}${match[1]}`,),
      g: parseIntFromHex(`${match[2]}${match[2]}`,),
      b: parseIntFromHex(`${match[3]}${match[3]}`,),
      a: 1,
      format: namedColor ? 'name' : 'hex',
      /* HEX */
    };
  } else {
    return false;
  }
}
function parseIntFromHex(hex2,) {
  return parseInt(hex2, 16,);
}
function convertHexToDecimal(h,) {
  return parseIntFromHex(h,) / 255;
}
var p3Matcher =
  /^color\(display-p3\s+(?<r>\d+\.\d+|\d+|\.\d+)\s+(?<g>\d+\.\d+|\d+|\.\d+)\s+(?<b>\d+\.\d+|\d+|\.\d+)(?:\s*\/\s*(?<a>\d+\.\d+|\d+|\.\d+))?\)$/u;
function parseP3(color2,) {
  const match = p3Matcher.exec(color2,);
  if (!match) return null;
  const {
    r = '0',
    g = '0',
    b = '0',
    a,
  } = match.groups ?? {};
  return {
    r: parseFloat(r,),
    g: parseFloat(g,),
    b: parseFloat(b,),
    a: a ? parseFloat(a,) : 1,
  };
}
function convertRGBChannelToLrgb(c = 0,) {
  const abs = Math.abs(c,);
  if (abs <= 0.04045) return c / 12.92;
  return (Math.sign(c,) || 1) * ((abs + 0.055) / 1.055) ** 2.4;
}
function convertRgbToLrgb({
  r,
  g,
  b,
  a,
},) {
  return {
    r: convertRGBChannelToLrgb(r,),
    g: convertRGBChannelToLrgb(g,),
    b: convertRGBChannelToLrgb(b,),
    a,
  };
}
function convertLrgbChannelToRgb(c = 0,) {
  const abs = Math.abs(c,);
  if (abs > 31308e-7) return (Math.sign(c,) || 1) * (1.055 * abs ** (1 / 2.4) - 0.055);
  return c * 12.92;
}
function convertLrgbToRgb({
  r,
  g,
  b,
  a,
},) {
  return {
    r: convertLrgbChannelToRgb(r,),
    g: convertLrgbChannelToRgb(g,),
    b: convertLrgbChannelToRgb(b,),
    a,
  };
}
var convertP3ToXyz65 = (color2) => {
  const {
    r,
    g,
    b,
    a,
  } = convertRgbToLrgb(color2,);
  return {
    x: 0.486570948648216 * r + 0.265667693169093 * g + 0.1982172852343625 * b,
    y: 0.2289745640697487 * r + 0.6917385218365062 * g + 0.079286914093745 * b,
    z: 0 * r + 0.0451133818589026 * g + 1.043944368900976 * b,
    a,
  };
};
var convertXyz65ToRgb = ({
  x = 0,
  y = 0,
  z = 0,
  a = 1,
},) => {
  return convertLrgbToRgb({
    r: x * 3.2409699419045226 - y * 1.537383177570094 - 0.4986107602930034 * z,
    g: x * -0.9692436362808796 + y * 1.8759675015077204 + 0.0415550574071756 * z,
    b: x * 0.0556300796969936 - y * 0.2039769588889765 + 1.0569715142428784 * z,
    a,
  },);
};
var convertRgbToXyz65 = (color2) => {
  const {
    r,
    g,
    b,
    a,
  } = convertRgbToLrgb(color2,);
  return {
    x: 0.4123907992659593 * r + 0.357584339383878 * g + 0.1804807884018343 * b,
    y: 0.2126390058715102 * r + 0.715168678767756 * g + 0.0721923153607337 * b,
    z: 0.0193308187155918 * r + 0.119194779794626 * g + 0.9505321522496607 * b,
    a,
  };
};
var convertXyz65ToP3 = ({
  x = 0,
  y = 0,
  z = 0,
  a = 1,
},) => {
  return convertLrgbToRgb({
    r: x * 2.4934969119414263 - y * 0.9313836179191242 - 0.402710784450717 * z,
    g: x * -0.8294889695615749 + y * 1.7626640603183465 + 0.0236246858419436 * z,
    b: x * 0.0358458302437845 - y * 0.0761723892680418 + 0.9568845240076871 * z,
    a,
  },);
};
function convertRGBToHSV({
  r,
  g,
  b,
  a,
},) {
  const M = Math.max(r, g, b,),
    m2 = Math.min(r, g, b,);
  const res = {
    h: 0,
    s: M === 0 ? 0 : 1 - m2 / M,
    v: M,
    a,
  };
  if (M - m2 !== 0) {
    res.h = (M === r ? (g - b) / (M - m2) + (g < b ? 6 : 0) : M === g ? (b - r) / (M - m2) + 2 : (r - g) / (M - m2) + 4) * 60;
  }
  return res;
}
function normalizeHue(hue,) {
  return (hue = hue % 360) < 0 ? hue + 360 : hue;
}
function convertHsvToRgb({
  h = 0,
  s = 0,
  v = 0,
  a = 1,
},) {
  const hue = normalizeHue(h,);
  const f = Math.abs(hue / 60 % 2 - 1,);
  switch (Math.floor(hue / 60,)) {
    case 0:
      return {
        r: v,
        g: v * (1 - s * f),
        b: v * (1 - s),
        a,
      };
    case 1:
      return {
        r: v * (1 - s * f),
        g: v,
        b: v * (1 - s),
        a,
      };
    case 2:
      return {
        r: v * (1 - s),
        g: v,
        b: v * (1 - s * f),
        a,
      };
    case 3:
      return {
        r: v * (1 - s),
        g: v * (1 - s * f),
        b: v,
        a,
      };
    case 4:
      return {
        r: v * (1 - s * f),
        g: v * (1 - s),
        b: v,
        a,
      };
    case 5:
      return {
        r: v,
        g: v * (1 - s),
        b: v * (1 - s * f),
        a,
      };
    default:
      return {
        r: v * (1 - s),
        g: v * (1 - s),
        b: v * (1 - s),
        a,
      };
  }
}
function convertRgbToP3(color2,) {
  return convertXyz65ToP3(convertRgbToXyz65(color2,),);
}
function convertP3ToRgb(color2,) {
  return convertXyz65ToRgb(convertP3ToXyz65(color2,),);
}
var P3Color = class _P3Color {
  constructor(color2,) {
    __publicField(this, 'format', 'p3',);
    __publicField(this, 'r',);
    __publicField(this, 'g',);
    __publicField(this, 'b',);
    __publicField(this, 'a',);
    this.r = color2.r ?? 0;
    this.g = color2.g ?? 0;
    this.b = color2.b ?? 0;
    this.a = color2.a ?? 1;
  }
  hsv() {
    return convertRGBToHSV(this,);
  }
  rgb() {
    return convertP3ToRgb(this,);
  }
  hsl() {
    return rgbToHsl(this.r, this.g, this.b,);
  }
  toString(space = 'p3', overrides,) {
    switch (space) {
      case 'p3': {
        const r = (overrides == null ? void 0 : overrides.r) ?? this.r;
        const g = (overrides == null ? void 0 : overrides.g) ?? this.g;
        const b = (overrides == null ? void 0 : overrides.b) ?? this.b;
        const a = (overrides == null ? void 0 : overrides.a) ?? this.a;
        return a === 1 ? `color(display-p3 ${r} ${g} ${b})` : `color(display-p3 ${r} ${g} ${b} / ${a})`;
      }
      case 'srgb': {
        const color2 = this.rgb();
        const clampedR = Math.round(Math.max(0, Math.min(color2.r, 1,),) * 100,) / 100;
        const clampedG = Math.round(Math.max(0, Math.min(color2.g, 1,),) * 100,) / 100;
        const clampedB = Math.round(Math.max(0, Math.min(color2.b, 1,),) * 100,) / 100;
        const r = (overrides == null ? void 0 : overrides.r) ?? clampedR * 255;
        const g = (overrides == null ? void 0 : overrides.g) ?? clampedG * 255;
        const b = (overrides == null ? void 0 : overrides.b) ?? clampedB * 255;
        const a = (overrides == null ? void 0 : overrides.a) ?? color2.a ?? 1;
        return a === 1 ? `rgb(${r}, ${g}, ${b})` : `rgba(${r}, ${g}, ${b}, ${a})`;
      }
    }
  }
  static isP3String(color2,) {
    return color2.startsWith('color(display-p3',);
  }
  static fromHSV(color2, space = 'p3',) {
    switch (space) {
      case 'p3':
        return new _P3Color(convertHsvToRgb(color2,),);
      case 'srgb':
        return new _P3Color(convertRgbToP3(convertHsvToRgb(color2,),),);
    }
  }
  static fromRGB(color2,) {
    return new _P3Color(convertRgbToP3({
      // Converted an rgb value between 0-255 to a 0-1 decimal with 5 decimal places -> 0.78607.
      r: Math.round(color2.r / 255 * 1e4,) / 1e4,
      g: Math.round(color2.g / 255 * 1e4,) / 1e4,
      b: Math.round(color2.b / 255 * 1e4,) / 1e4,
      a: color2.a ?? 1,
    },),);
  }
  static fromRGBString(color2,) {
    const value = Color(color2,);
    if (!value) return void 0;
    return _P3Color.fromRGB(value,);
  }
  static fromString(color2,) {
    if (!_P3Color.isP3String(color2,)) return void 0;
    const parsed = parseP3(color2,);
    if (!parsed) return void 0;
    return new _P3Color({
      r: parsed.r,
      g: parsed.g,
      b: parsed.b,
      a: parsed.a,
    },);
  }
  static srgbFromValue(color2,) {
    if (!isString(color2,) || !Color.isP3String(color2,)) return color2;
    const value = _P3Color.fromString(color2,);
    if (!value) return color2;
    return value.toString('srgb',);
  }
};
function clampRGB(color2,) {
  return P3Color.srgbFromValue(color2,);
}
var cache = /* @__PURE__ */ new Map();
var Color = /* @__PURE__ */ (() => {
  function Color2(color2, r, g, b,) {
    if (typeof color2 === 'string') {
      let c = cache.get(color2,);
      if (c) return c;
      c = createColor(color2,);
      if (c === void 0) {
        return {
          ...Color2('black',),
          isValid: false,
        };
      }
      cache.set(color2, c,);
      return c;
    }
    const created = createColor(color2, r, g, b,);
    return created !== void 0 ? created : {
      ...Color2('black',),
      isValid: false,
    };
  }
  function createColor(color2, r, g, b,) {
    if (color2 === '') return void 0;
    const colorData = getCompleteColorStrategy(color2, r, g, b,);
    if (colorData) {
      const newColor = {
        r: colorData.r,
        g: colorData.g,
        b: colorData.b,
        a: colorData.a,
        h: colorData.h,
        s: colorData.s,
        l: colorData.l,
        initialValue: typeof color2 === 'string' && colorData.format !== 'hsv' ? color2 : void 0,
        roundA: Math.round(100 * colorData.a,) / 100,
        format: colorData.format,
        mix: Color2.mix,
        toValue: () => Color2.toRgbString(newColor,),
      };
      return newColor;
    } else {
      return void 0;
    }
  }
  const ColorMixModel = {
    isRGB(colorModel,) {
      return colorModel === 'rgb' || colorModel === 'rgba';
    },
    isHSL(colorModel,) {
      return colorModel === 'hsl' || colorModel === 'hsla';
    },
  };
  Color2.inspect = (color2, initialValue,) => {
    if (color2.format === 'hsl') {
      return `<${color2.constructor.name} h:${color2.h} s:${color2.s} l:${color2.l} a:${color2.a}>`;
    } else if (color2.format === 'hex' || color2.format === 'name') {
      return `<${color2.constructor.name} "${initialValue}">`;
    } else {
      return `<${color2.constructor.name} r:${color2.r} g:${color2.g} b:${color2.b} a:${color2.a}>`;
    }
  };
  Color2.isColor = (color2) => {
    if (typeof color2 === 'string') {
      return Color2.isColorString(color2,);
    } else {
      return Color2.isColorObject(color2,);
    }
  };
  Color2.isColorString = (colorString) => {
    if (typeof colorString === 'string') {
      return stringToObject(colorString,) !== false;
    }
    return false;
  };
  Color2.isColorObject = (color2) => {
    return isObject2(color2,) && typeof color2.r === 'number' && typeof color2.g === 'number' && typeof color2.b === 'number' &&
      typeof color2.h === 'number' && typeof color2.s === 'number' && typeof color2.l === 'number' && typeof color2.a === 'number' &&
      typeof color2.roundA === 'number' && typeof color2.format === 'string';
  };
  Color2.toString = (color2) => {
    return Color2.toRgbString(color2,);
  };
  Color2.toHex = (color2, allow3Char = false,) => {
    return rgbToHex(color2.r, color2.g, color2.b, allow3Char,);
  };
  Color2.toHexString = (color2, allow3Char = false,) => {
    return `#${Color2.toHex(color2, allow3Char,)}`;
  };
  Color2.isP3String = (color2) => {
    if (typeof color2 !== 'string') return false;
    return P3Color.isP3String(color2,);
  };
  Color2.toRgbString = (color2) => {
    return color2.a === 1
      ? 'rgb(' + Math.round(color2.r,) + ', ' + Math.round(color2.g,) + ', ' + Math.round(color2.b,) + ')'
      : 'rgba(' + Math.round(color2.r,) + ', ' + Math.round(color2.g,) + ', ' + Math.round(color2.b,) + ', ' + color2.roundA + ')';
  };
  Color2.toHusl = (color2) => {
    return {
      ...rgbToHsluv(color2.r, color2.g, color2.b,),
      a: color2.roundA,
    };
  };
  Color2.toHslString = (color2) => {
    const hsl = Color2.toHsl(color2,);
    const h = Math.round(hsl.h,);
    const s = Math.round(hsl.s * 100,);
    const l = Math.round(hsl.l * 100,);
    return color2.a === 1 ? 'hsl(' + h + ', ' + s + '%, ' + l + '%)' : 'hsla(' + h + ', ' + s + '%, ' + l + '%, ' + color2.roundA + ')';
  };
  Color2.toHsv = (color2) => {
    const hsv = rgbToHsv(color2.r, color2.g, color2.b,);
    return {
      h: hsv.h * 360,
      s: hsv.s,
      v: hsv.v,
      a: color2.a,
    };
  };
  Color2.toHsvString = (color2) => {
    const hsv = rgbToHsv(color2.r, color2.g, color2.b,);
    const h = Math.round(hsv.h * 360,);
    const s = Math.round(hsv.s * 100,);
    const v = Math.round(hsv.v * 100,);
    return color2.a === 1 ? 'hsv(' + h + ', ' + s + '%, ' + v + '%)' : 'hsva(' + h + ', ' + s + '%, ' + v + '%, ' + color2.roundA + ')';
  };
  Color2.toName = (color2) => {
    if (color2.a === 0) {
      return 'transparent';
    }
    if (color2.a < 1) {
      return false;
    }
    const hex2 = rgbToHex(color2.r, color2.g, color2.b, true,);
    for (const key7 of Object.keys(cssNames,)) {
      const value = cssNames[key7];
      if (value === hex2) {
        return key7;
      }
    }
    return false;
  };
  Color2.toHsl = (color2) => {
    return {
      h: Math.round(color2.h,),
      s: color2.s,
      l: color2.l,
      a: color2.a,
    };
  };
  Color2.toRgb = (color2) => {
    return {
      r: Math.round(color2.r,),
      g: Math.round(color2.g,),
      b: Math.round(color2.b,),
      a: color2.a,
    };
  };
  Color2.brighten = (color2, amount = 10,) => {
    const rgb = Color2.toRgb(color2,);
    rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100),),),);
    rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100),),),);
    rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100),),),);
    return Color2(rgb,);
  };
  Color2.lighten = (color2, amount = 10,) => {
    const hsl = Color2.toHsl(color2,);
    hsl.l += amount / 100;
    hsl.l = Math.min(1, Math.max(0, hsl.l,),);
    return Color2(hsl,);
  };
  Color2.darken = (color2, amount = 10,) => {
    const hsl = Color2.toHsl(color2,);
    hsl.l -= amount / 100;
    hsl.l = Math.min(1, Math.max(0, hsl.l,),);
    return Color2(hsl,);
  };
  Color2.saturate = (color2, amount = 10,) => {
    const hsl = Color2.toHsl(color2,);
    hsl.s += amount / 100;
    hsl.s = Math.min(1, Math.max(0, hsl.s,),);
    return Color2(hsl,);
  };
  Color2.desaturate = (color2, amount = 10,) => {
    const hsl = Color2.toHsl(color2,);
    hsl.s -= amount / 100;
    hsl.s = Math.min(1, Math.max(0, hsl.s,),);
    return Color2(hsl,);
  };
  Color2.grayscale = (color2) => {
    return Color2.desaturate(color2, 100,);
  };
  Color2.hueRotate = (color2, angle,) => {
    const hsl = Color2.toHsl(color2,);
    hsl.h += angle;
    hsl.h = hsl.h > 360 ? hsl.h - 360 : hsl.h;
    return Color2(hsl,);
  };
  Color2.alpha = (color2, a = 1,) => {
    return Color2({
      r: color2.r,
      g: color2.g,
      b: color2.b,
      a,
    },);
  };
  Color2.transparent = (color2) => {
    return Color2.alpha(color2, 0,);
  };
  Color2.multiplyAlpha = (color2, alphaValue = 1,) => {
    return Color2({
      r: color2.r,
      g: color2.g,
      b: color2.b,
      a: color2.a * alphaValue,
    },);
  };
  Color2.interpolate = (colorA, colorB, model = 'rgb',) => {
    if (!Color2.isColorObject(colorA,) || !Color2.isColorObject(colorB,)) {
      throw new TypeError('Both arguments for Color.interpolate must be Color objects',);
    }
    return (progress2) => {
      const color2 = Color2.mixAsColor(colorA, colorB, progress2, false, model,);
      return color2;
    };
  };
  Color2.mix = (from, toColor, {
    model = 'rgb',
    /* RGB */
  } = {},) => {
    const fromColor = typeof from === 'string' ? Color2(from,) : from;
    const mixer = Color2.interpolate(fromColor, toColor, model,);
    return (p) => Color2.toRgbString(mixer(p,),);
  };
  Color2.mixAsColor = (colorA, colorB, fraction2 = 0.5, limit = false, model = 'rgb',) => {
    let result = null;
    if (ColorMixModel.isRGB(model,)) {
      result = Color2({
        r: modulate(fraction2, [0, 1,], [colorA.r, colorB.r,], limit,),
        g: modulate(fraction2, [0, 1,], [colorA.g, colorB.g,], limit,),
        b: modulate(fraction2, [0, 1,], [colorA.b, colorB.b,], limit,),
        a: modulate(fraction2, [0, 1,], [colorA.a, colorB.a,], limit,),
      },);
    } else {
      let hslA, hslB;
      if (ColorMixModel.isHSL(model,)) {
        hslA = Color2.toHsl(colorA,);
        hslB = Color2.toHsl(colorB,);
      } else {
        hslA = Color2.toHusl(colorA,);
        hslB = Color2.toHusl(colorB,);
      }
      if (hslA.s === 0) {
        hslA.h = hslB.h;
      } else if (hslB.s === 0) {
        hslB.h = hslA.h;
      }
      const fromH = hslA.h;
      const toH = hslB.h;
      let deltaH = toH - fromH;
      if (deltaH > 180) {
        deltaH = toH - 360 - fromH;
      } else if (deltaH < -180) {
        deltaH = toH + 360 - fromH;
      }
      const tween = {
        h: modulate(fraction2, [0, 1,], [fromH, fromH + deltaH,], limit,),
        s: modulate(fraction2, [0, 1,], [hslA.s, hslB.s,], limit,),
        l: modulate(fraction2, [0, 1,], [hslA.l, hslB.l,], limit,),
        a: modulate(fraction2, [0, 1,], [colorA.a, colorB.a,], limit,),
      };
      if (ColorMixModel.isHSL(model,)) {
        result = Color2(tween,);
      } else {
        result = Color2(rgbaFromHusl(tween.h, tween.s, tween.l, tween.a,),);
      }
    }
    return result;
  };
  Color2.random = (alphaValue = 1,) => {
    function gen() {
      return Math.floor(Math.random() * 255,);
    }
    return Color2('rgba(' + gen() + ', ' + gen() + ', ' + gen() + ', ' + alphaValue + ')',);
  };
  Color2.grey = (amount = 0.5, alphaValue = 1,) => {
    amount = Math.floor(amount * 255,);
    return Color2('rgba(' + amount + ', ' + amount + ', ' + amount + ', ' + alphaValue + ')',);
  };
  Color2.gray = Color2.grey;
  Color2.rgbToHsl = (r, g, b,) => {
    return rgbToHsl(r, g, b,);
  };
  Color2.isValidColorProperty = (name, value,) => {
    const isColorKey = name.toLowerCase().slice(-5,) === 'color' || name === 'fill' || name === 'stroke';
    if (isColorKey && typeof value === 'string' && Color2.isColorString(value,)) {
      return true;
    }
    return false;
  };
  Color2.difference = (colorA, colorB,) => {
    const _r = (colorA.r + colorB.r) / 2;
    const deltaR = colorA.r - colorB.r;
    const deltaG = colorA.g - colorB.g;
    const deltaB = colorA.b - colorB.b;
    const deltaR2 = Math.pow(deltaR, 2,);
    const deltaG2 = Math.pow(deltaG, 2,);
    const deltaB2 = Math.pow(deltaB, 2,);
    return Math.sqrt(2 * deltaR2 + 4 * deltaG2 + 3 * deltaB2 + _r * (deltaR2 - deltaB2) / 256,);
  };
  Color2.equal = (colorA, colorB, tolerance = 0.1,) => {
    if (Math.abs(colorA.r - colorB.r,) >= tolerance) {
      return false;
    }
    if (Math.abs(colorA.g - colorB.g,) >= tolerance) {
      return false;
    }
    if (Math.abs(colorA.b - colorB.b,) >= tolerance) {
      return false;
    }
    if (Math.abs(colorA.a - colorB.a,) * 256 >= tolerance) {
      return false;
    }
    return true;
  };
  const channelToDecimal = interpolate([0, 255,], [0, 1,],);
  function convertChannelToLinearRgb(channel,) {
    channel = channelToDecimal(channel,);
    const abs = Math.abs(channel,);
    if (abs < 0.04045) return channel / 12.92;
    return (Math.sign(channel,) || 1) * Math.pow((abs + 0.055) / 1.055, 2.4,);
  }
  Color2.luminance = (color2) => {
    const {
      r,
      g,
      b,
    } = Color2.toRgb(color2,);
    return 0.2126 * convertChannelToLinearRgb(r,) + 0.7152 * convertChannelToLinearRgb(g,) + 0.0722 * convertChannelToLinearRgb(b,);
  };
  Color2.contrast = (a, b,) => {
    const l1 = Color2.luminance(a,);
    const l2 = Color2.luminance(b,);
    return (Math.max(l1, l2,) + 0.05) / (Math.min(l1, l2,) + 0.05);
  };
  return Color2;
})();
function getCompleteColorStrategy(colorOrR, g, b, a = 1,) {
  let completeColor;
  if (
    typeof colorOrR === 'number' && !Number.isNaN(colorOrR,) && typeof g === 'number' && !Number.isNaN(g,) && typeof b === 'number' &&
    !Number.isNaN(b,)
  ) {
    const _r = colorOrR;
    const _g = g;
    const _b = b;
    const _a = a;
    completeColor = getCompleteColorFromRGB({
      r: _r,
      g: _g,
      b: _b,
      a: _a,
    },);
  } else if (typeof colorOrR === 'string') {
    completeColor = getCompleteColorFromString(colorOrR,);
  } else if (typeof colorOrR === 'object') {
    if (colorOrR.hasOwnProperty('r',) && colorOrR.hasOwnProperty('g',) && colorOrR.hasOwnProperty('b',)) {
      completeColor = getCompleteColorFromRGB(colorOrR,);
    } else {
      completeColor = getCompleteColorFromHSL(colorOrR,);
    }
  }
  return completeColor;
}
function getCompleteColorFromString(color2,) {
  const result = stringToObject(color2,);
  if (result) {
    if (result.format === 'hsl') {
      return getCompleteColorFromHSL(result,);
    } else if (result.format === 'hsv') {
      return getCompleteColorFromHSV(result,);
    } else {
      return getCompleteColorFromRGB(result,);
    }
  }
}
function getCompleteColorFromHSV(color2,) {
  const rgb = hsvToRgb(color2.h, color2.s, color2.v,);
  const hsl = rgbToHsl(rgb.r, rgb.g, rgb.b,);
  return {
    ...hsl,
    ...rgb,
    format: 'rgb',
    a: color2.a !== void 0 ? correctAlpha(color2.a,) : 1,
  };
}
function getCompleteColorFromRGB(color2,) {
  const rgb = rgbToRgb(color2.r, color2.g, color2.b,);
  const hsl = rgbToHsl(rgb.r, rgb.g, rgb.b,);
  return {
    ...hsl,
    ...rgb,
    format: 'rgb',
    a: color2.a !== void 0 ? correctAlpha(color2.a,) : 1,
  };
}
function getCompleteColorFromHSL(color2,) {
  let h;
  let s;
  let l;
  let rgb = {
    r: 0,
    g: 0,
    b: 0,
  };
  let hsl = {
    h: 0,
    s: 0,
    l: 0,
  };
  h = isNumeric(color2.h,) ? color2.h : 0;
  h = (h + 360) % 360;
  s = isNumeric(color2.s,) ? color2.s : 1;
  if (typeof color2.s === 'string') {
    s = numberFromString(color2.s,);
  }
  l = isNumeric(color2.l,) ? color2.l : 0.5;
  if (typeof color2.l === 'string') {
    l = numberFromString(color2.l,);
  }
  rgb = hslToRgb(h, s, l,);
  hsl = {
    h,
    s,
    l,
  };
  return {
    ...rgb,
    ...hsl,
    a: color2.a === void 0 ? 1 : color2.a,
    format: 'hsl',
    /* HSL */
  };
}
function correctAlpha(alphaValue,) {
  alphaValue = parseFloat(alphaValue,);
  if (alphaValue < 0) {
    alphaValue = 0;
  }
  if (Number.isNaN(alphaValue,) || alphaValue > 1) {
    alphaValue = 1;
  }
  return alphaValue;
}
var ColorInterpolation = (type = 'husl',) => {
  return {
    interpolate(from, to,) {
      [from, to,] = Interpolation.handleUndefined(from, to,);
      return Color.interpolate(Color(from,), Color(to,), type,);
    },
    difference(from, to,) {
      return Color.difference(Color(from,), Color(to,),);
    },
  };
};
var NoInterpolation = {
  interpolate(from, to,) {
    [from, to,] = Interpolation.handleUndefined(from, to,);
    return (progress2) => {
      return progress2 < 0.5 ? from : to;
    };
  },
  difference(from, to,) {
    return from === to ? 0 : 1;
  },
};
var ObjectInterpolation = (valueInterpolation) => {
  return {
    interpolate(from, to,) {
      [from, to,] = Interpolation.handleUndefined(from, to,);
      const result = Object.assign({}, from,);
      const interpolations = {};
      const keys3 = /* @__PURE__ */ new Set();
      for (const key7 in from) {
        interpolations[key7] = valueInterpolation.interpolate(from[key7], to[key7],);
        keys3.add(key7,);
      }
      for (const key7 in to) {
        if (!keys3.has(key7,)) {
          interpolations[key7] = valueInterpolation.interpolate(from[key7], to[key7],);
          keys3.add(key7,);
        }
      }
      return (progress2) => {
        for (const key7 in interpolations) {
          result[key7] = interpolations[key7](progress2,);
        }
        return result;
      };
    },
    difference(from, to,) {
      let sum = 0;
      for (const key7 in from) {
        const difference = valueInterpolation.difference(from[key7], to[key7],);
        sum += Math.pow(difference, 2,);
      }
      return Math.sqrt(sum,);
    },
  };
};
var DefaultInterpolationOptions = {
  colorModel: 'husl',
  /* HUSL */
};
var ValueInterpolation = class _ValueInterpolation {
  /**
   * @internal
   */
  constructor(options = DefaultInterpolationOptions,) {
    __publicField(this, 'options',);
    __publicField(this, 'interpolate', (from, to,) => {
      [from, to,] = Interpolation.handleUndefined(from, to,);
      return this.interPolationForValue(from,).interpolate(from, to,);
    },);
    __publicField(this, 'difference', (from, to,) => {
      const interpolation = this.interPolationForValue(from,);
      return interpolation.difference(from, to,);
    },);
    this.options = {
      ...DefaultInterpolationOptions,
      ...options,
    };
  }
  /**
   * @internal
   */
  interPolationForValue(value,) {
    const type = typeof value;
    if (type === 'number') {
      return NumberInterpolation;
    } else if (type === 'boolean' || type === 'function') {
      return NoInterpolation;
    } else if (Color.isColor(value,)) {
      return ColorInterpolation(this.options.colorModel,);
    } else if (type === 'object') {
      if (value === null) {
        return NoInterpolation;
      }
      const constructor = value.constructor;
      if (constructor && isInterpolatable(constructor,)) {
        const interpolation = constructor.interpolationFor(value, this,);
        if (interpolation && interpolation !== this && interpolation.constructor !== _ValueInterpolation) {
          return interpolation;
        }
      }
      return ObjectInterpolation(this,);
    }
    console.warn(`No interpolation defined for ${value}`,);
    return NoInterpolation;
  }
};
var AnyInterpolation = /* @__PURE__ */ new ValueInterpolation();
var isMotionValue2 = (v) => v instanceof MotionValue;
var Defaults2 = /* @__PURE__ */ (() => ({
  delta: 1 / 60,
  maxValues: 1e4,
}))();
var PrecalculatedAnimator = class {
  constructor(options,) {
    __publicField(this, 'animator',);
    __publicField(this, 'values',);
    __publicField(this, 'currentTime', 0,);
    __publicField(this, 'totalTime',);
    __publicField(this, 'options',);
    this.options = {
      ...Defaults2,
      ...options,
    };
    this.animator = options.animator;
  }
  preCalculate() {
    if (!this.animator.isReady()) {
      return;
    }
    const {
      delta,
    } = this.options;
    this.values = [];
    while (!this.animator.isFinished() && this.values.length < this.options.maxValues) {
      let value = this.animator.next(this.options.delta,);
      if (typeof value === 'object' && value) {
        const object = value;
        const copy = {
          ...object,
        };
        value = copy;
      }
      this.values.push(value,);
    }
    this.totalTime = this.values.length * delta;
  }
  indexForTime(time2,) {
    assert(this.values !== void 0, 'values must be set before calling indexForTime()',);
    assert(this.totalTime !== void 0, 'totalTime must be set before calling indexForTime()',);
    return Math.max(0, Math.min(this.values.length - 1, Math.round(this.values.length * (time2 / this.totalTime),) - 1,),);
  }
  valueForTime(time2,) {
    assert(this.values !== void 0, 'values must be set before calling valueForTime()',);
    const index = this.indexForTime(time2,);
    const value = this.values[index];
    return value;
  }
  setFrom(value,) {
    this.animator.setFrom(value,);
    this.preCalculate();
  }
  setTo(end,) {
    this.animator.setTo(end,);
    this.preCalculate();
  }
  isReady() {
    assert(this.totalTime !== void 0, 'totalTime must be set before calling isReady()',);
    return this.values !== void 0 && this.values.length > 0 && this.totalTime > 0;
  }
  next(delta,) {
    this.currentTime += delta;
    return this.valueForTime(this.currentTime,);
  }
  isFinished() {
    assert(this.totalTime !== void 0, 'totalTime must be set before calling isFinished()',);
    return this.totalTime === 0 || this.currentTime >= this.totalTime;
  }
  get endValue() {
    this.preCalculate();
    assert(this.totalTime !== void 0, 'expecting totalTime to be set after calling preCalculate()',);
    const value = this.valueForTime(this.totalTime,);
    assert(this.values !== void 0, 'expecting values to be set after calling preCalculate()',);
    return this.values.length > 0 ? value : this.animator.next(0,);
  }
};
var EventEmitter3 = /* @__PURE__ */ (() => require_eventemitter3().EventEmitter)();
var EventEmitter = class {
  constructor() {
    __publicField(this, '_emitter', new EventEmitter3(),);
  }
  eventNames() {
    return this._emitter.eventNames();
  }
  eventListeners() {
    const listeners = {};
    for (const eventName of this._emitter.eventNames()) {
      listeners[eventName] = this._emitter.listeners(eventName,);
    }
    return listeners;
  }
  on(eventName, fn,) {
    this.addEventListener(eventName, fn, false, false, this,);
  }
  off(eventName, fn,) {
    this.removeEventListeners(eventName, fn,);
  }
  once(eventName, fn,) {
    this.addEventListener(eventName, fn, true, false, this,);
  }
  unique(eventName, fn,) {
    this.addEventListener(eventName, fn, false, true, this,);
  }
  addEventListener(eventName, fn, once, unique, context,) {
    if (unique) {
      for (const name of this._emitter.eventNames()) {
        if (fn === this._emitter.listeners(name,)) {
          return;
        }
      }
    }
    if (once === true) {
      this._emitter.once(eventName, fn, context,);
    } else {
      this._emitter.addListener(eventName, fn, context,);
    }
  }
  removeEventListeners(eventName, fn,) {
    if (eventName) {
      this._emitter.removeListener(eventName, fn,);
    } else {
      this.removeAllEventListeners();
    }
  }
  removeAllEventListeners() {
    this._emitter.removeAllListeners();
  }
  countEventListeners(eventName,) {
    if (eventName) {
      return this._emitter.listeners(eventName,).length;
    } else {
      let count = 0;
      for (const name of this._emitter.eventNames()) {
        count += this._emitter.listeners(name,).length;
      }
      return count;
    }
  }
  emit(eventName, ...args) {
    this._emitter.emit(eventName, ...args,);
  }
};
var _raf = (f) => {
  setTimeout(f, 1 / 60,);
};
var __raf = /* @__PURE__ */ (() => safeWindow['requestAnimationFrame'] || _raf)();
var raf = (f) => __raf(f,);
var LoopTimeStep = /* @__PURE__ */ (() => 1 / 60)();
var Loop = class extends EventEmitter {
  /**
   * @internal
   */
  constructor(start2 = false,) {
    super();
    __publicField(this, '_started', false,);
    __publicField(this, '_frame', 0,);
    __publicField(this, '_frameTasks', [],);
    __publicField(this, 'tick', () => {
      if (!this._started) return;
      raf(this.tick,);
      this.emit('update', this._frame, LoopTimeStep,);
      this.emit('render', this._frame, LoopTimeStep,);
      this._processFrameTasks();
      this._frame++;
    },);
    if (start2) {
      this.start();
    }
  }
  /**
   * To add a task to be done at the end of a frame.
   * Tasks added from a task will be ignored. These will run after loop events have been processed.
   * @internal
   */
  addFrameTask(task,) {
    this._frameTasks.push(task,);
  }
  _processFrameTasks() {
    var _a;
    const postEventTasks = this._frameTasks;
    const length = postEventTasks.length;
    if (length === 0) return;
    for (let i = 0; i < length; i++) {
      (_a = postEventTasks[i]) == null ? void 0 : _a.call(postEventTasks,);
    }
    postEventTasks.length = 0;
  }
  /**
   * @internal
   */
  static set TimeStep(value,) {
    LoopTimeStep = value;
  }
  /**
   * @internal
   */
  static get TimeStep() {
    return LoopTimeStep;
  }
  /**
   * @internal
   */
  start() {
    if (this._started) return this;
    this._frame = 0;
    this._started = true;
    raf(this.tick,);
    return this;
  }
  /**
   * @internal
   * @deprecated Don’t use `stop` as you could be stopping the MainLoop for others.
   */
  stop() {
    this._started = false;
    return this;
  }
  /**
   * @internal
   */
  get frame() {
    return this._frame;
  }
  /**
   * @internal
   */
  get time() {
    return this._frame * LoopTimeStep;
  }
};
var MainLoop = /* @__PURE__ */ new Loop();
var RenderEnvironment = {
  target:
    // Enable static renderer when taking screenshots
    // in screenshot-site lambda
    safeWindow.location.origin === 'https://screenshot.framer.invalid' ? 'EXPORT' : 'PREVIEW',
  zoom: 1,
};
function executeInRenderEnvironment(customEnvironment, task,) {
  const previousEnvironment = Object.assign({}, RenderEnvironment,);
  Object.assign(RenderEnvironment, customEnvironment,);
  const result = task();
  Object.assign(RenderEnvironment, previousEnvironment,);
  return result;
}
function setGlobalRenderEnvironment(environment2,) {
  Object.assign(RenderEnvironment, environment2,);
}
function useRenderEnvironment(target, zoom,) {
  let willChangeElements = false;
  if (RenderEnvironment.target !== target) {
    RenderEnvironment.target = target;
    willChangeElements = true;
  }
  if (RenderEnvironment.zoom !== zoom) {
    RenderEnvironment.zoom = zoom;
  }
  return {
    willChangeElements,
  };
}
var RenderTarget = {
  /**
   * The component is to be rendered for the Framer canvas.
   *
   * @remarks
   * ```jsx
   * function App() {
   *   if (RenderTarget.current() === RenderTarget.canvas) {
   *     return <CanvasComponent />
   *   }
   *   return <DefaultComponent />
   * }
   * ```
   */
  canvas: 'CANVAS',
  /**
   * The component is to be rendered for export.
   *
   * @remarks
   * ```jsx
   * function App() {
   *   if (RenderTarget.current() === RenderTarget.export) {
   *     return <ExportComponent />
   *   }
   *   return <DefaultComponent />
   * }
   * ```
   */
  export: 'EXPORT',
  /**
   * The component is to be rendered as a preview thumbnail, for example in the
   * component panel.
   *
   * @remarks
   * ```jsx
   * function App() {
   *   if (RenderTarget.current() === RenderTarget.thumbnail) {
   *     return <Thumbnail />
   *   }
   *   return <DefaultComponent />
   * }
   * ```
   */
  thumbnail: 'THUMBNAIL',
  /**
   * The component is being rendered in the preview window.
   *
   * @remarks
   * ```jsx
   * function App() {
   *   React.useEffect(() => {
   *     if (RenderTarget.current() === RenderTarget.preview) {
   *       // Do something in preview.
   *     }
   *   })
   *   return <DefaultComponent />
   * }
   * ```
   */
  preview: 'PREVIEW',
  /**
   * Returns the current `RenderTarget` allowing components to apply
   * different behaviors depending on the environment.
   *
   * @remarks
   * ```jsx
   * function App() {
   *   if (RenderTarget.current() === RenderTarget.thumbnail) {
   *     return <PreviewIcon />
   *   }
   *   return <Frame>...</Frame>
   * }
   * ```
   */
  current: () => RenderEnvironment.target,
  /**
   * Returns true if the current `RenderTarget` has performance restrictions.
   * Use this to avoid doing heavy work in these contexts because they may
   * bail on the rendering if the component takes too long.
   *
   * @remarks
   * ```jsx
   * function App() {
   *   if (RenderTarget.hasRestrictions()) {
   *     return <SomePlaceholder />
   *   }
   *   return <RichPreviewContent />
   * }
   * ```
   */
  hasRestrictions: () => {
    const target = RenderEnvironment.target;
    if (target === 'CANVAS') return true;
    if (target === 'EXPORT') return true;
    return false;
  },
};
var AnimationDriver = class {
  constructor(animator, updateCallback, finishedCallback,) {
    this.animator = animator;
    this.updateCallback = updateCallback;
    this.finishedCallback = finishedCallback;
    __publicField(this, 'update', (frame2, elapsed,) => {
      if (this.animator.isFinished()) {
        this.finish();
      } else {
        const value = this.animator.next(elapsed,);
        this.updateCallback(value,);
      }
    },);
    if (!this.animator.isReady()) {
      console.warn('AnimationDriver initialized with animator that isn\'t ready',);
    }
  }
  finish() {
    if (this.finishedCallback) {
      this.finishedCallback(this.animator.isFinished(),);
    }
  }
  isFinished() {
    return this.animator.isFinished();
  }
};
var MainLoopAnimationDriver = class extends AnimationDriver {
  play() {
    if (RenderEnvironment.target !== RenderTarget.preview) {
      this.finishedCallback && this.finishedCallback(false,);
      return;
    }
    MainLoop.on('update', this.update,);
  }
  cancel() {
    MainLoop.off('update', this.update,);
  }
  finish() {
    MainLoop.off('update', this.update,);
    super.finish();
  }
};
var DefaultDeprecatedAnimationOptions = {
  precalculate: false,
  colorModel: 'husl',
  /* HUSL */
};
var FramerAnimation = class _FramerAnimation {
  /**
   * @internal
   */
  constructor(target, from, to, animatorClass, options, driverClass = MainLoopAnimationDriver,) {
    __publicField(this, 'driver',);
    __publicField(this, 'playStateSource', 'idle',);
    __publicField(this, 'onfinish',);
    __publicField(this, 'oncancel',);
    __publicField(this, 'readyPromise', Promise.resolve(),);
    __publicField(this, 'readyResolve', null,);
    __publicField(this, 'finishedPromise', Promise.resolve(),);
    __publicField(this, 'finishedResolve', null,);
    __publicField(this, 'finishedReject', null,);
    this.resetFinishedPromise();
    const deprecatedAnimationOptions = {
      ...DefaultDeprecatedAnimationOptions,
    };
    const animatorOptions = {};
    if (options) {
      Object.assign(deprecatedAnimationOptions, options,);
      Object.assign(animatorOptions, options,);
    }
    let interpolation;
    if (deprecatedAnimationOptions.customInterpolation) {
      interpolation = deprecatedAnimationOptions.customInterpolation;
    } else {
      interpolation = new ValueInterpolation(options,);
    }
    let animator;
    if (!animatorClass) {
      animator = new BezierAnimator({}, interpolation,);
    } else {
      animator = new animatorClass(animatorOptions, interpolation,);
    }
    if (deprecatedAnimationOptions.precalculate) {
      animator = new PrecalculatedAnimator({
        animator,
      },);
    }
    animator.setFrom(from,);
    animator.setTo(to,);
    const updateCallback = (value) => {
      _FramerAnimation.driverCallbackHandler(target, value,);
    };
    const finishedCallback = (isFinished) => {
      if (isFinished) {
        _FramerAnimation.driverCallbackHandler(target, to,);
        if (this.playStateSource === 'running') {
          this.playStateValue = 'finished';
        }
      }
    };
    this.driver = new driverClass(animator, updateCallback, finishedCallback,);
  }
  /**
   * @internal
   */
  static driverCallbackHandler(target, value,) {
    if (isAnimatable2(target,) || isMotionValue2(target,)) {
      target.set(value,);
    } else {
      const targetObject = target;
      Animatable.transaction((update) => {
        for (const key7 in targetObject) {
          const targetValue = targetObject[key7];
          if (isAnimatable2(targetValue,)) {
            update(targetValue, value[key7],);
          } else {
            targetObject[key7] = value[key7];
          }
        }
      },);
    }
  }
  /**
   * @internal
   */
  get playStateValue() {
    return this.playStateSource;
  }
  /**
   * @internal
   */
  set playStateValue(value,) {
    if (value !== this.playStateSource) {
      const oldValue = value;
      this.playStateSource = value;
      switch (value) {
        case 'idle':
          if (oldValue === 'running') {
            this.oncancel && this.oncancel();
          }
          this.readyResolve && this.readyResolve();
          this.resetReadyPromise();
          break;
        case 'finished':
          if (oldValue === 'idle') {
            console.warn('Bad state transition',);
            break;
          }
          this.onfinish && this.onfinish();
          this.finishedResolve && this.finishedResolve();
          break;
        case 'running':
          this.resetReadyPromise();
          break;
      }
      if (oldValue === 'finished') {
        this.resetFinishedPromise();
      }
      if (value === 'finished') {
        this.playStateValue = 'idle';
      }
    }
  }
  /**
   * @internal
   */
  get playState() {
    return this.playStateValue;
  }
  /**
   * @internal
   */
  resetReadyPromise() {
    this.readyResolve = null;
    this.readyPromise = new Promise((resolve, reject,) => {
      this.readyResolve = resolve;
    },);
  }
  /**
       * Wait for the animation to be ready to play.
       * @remarks
       * ```jsx
       * const animation = animate.ease(value, 100)
       * animation.ready().then(() => {
       *    // Animation is ready
       * })

       * // async/await syntax
       * const animation = animate.ease(value, 100)
       * await animation.ready()
       * // Animation is ready
       * ```
       * @returns Promise that is resolved when the animation is ready to play
       * @public
       */
  get ready() {
    return this.readyPromise;
  }
  /**
   * @internal
   */
  resetFinishedPromise() {
    this.finishedResolve = null;
    this.finishedReject = null;
    this.finishedPromise = new Promise((resolve, reject,) => {
      this.finishedResolve = resolve;
      this.finishedReject = reject;
    },);
    this.finishedPromise.catch((reason) => {},);
  }
  /**
   * Wait for the animation to be finished.
   * @remarks
   * ```jsx
   * // async/await syntax
   * const animation = animate.ease(value, 100)
   * await animation.finished()
   * // Animation is finished
   *
   * const animation = animate.ease(value, 100)
   * animation.ready().then(() => {
   *    // Animation is finished
   * })
   * ```
   * @returns Promise that is resolved when the animation is ready to play
   * @public
   */
  get finished() {
    return this.finishedPromise;
  }
  /**
   * @internal
   */
  play() {
    this.playStateValue = 'running';
    this.driver.play();
  }
  /**
   * Cancels the animation if it is still running.
   * @remarks
   * ```jsx
   * const animation = animate.ease(value, 100, {duration: 3})
   * setTimeout(() => animation.cancel(), 500)
   * ```
   * @public
   */
  cancel() {
    if (this.playStateValue !== 'running') {
      return;
    }
    this.driver.cancel();
    if (this.playState !== 'idle') {
      const reason = 'AbortError';
      this.finishedReject && this.finishedReject(reason,);
    }
    this.playStateValue = 'idle';
  }
  /**
   * @internal
   */
  finish() {
    if (this.playStateSource === 'running') {
      this.playStateValue = 'finished';
      this.driver.finish();
    }
  }
  /**
   * @internal
   */
  isFinished() {
    return this.playStateValue === 'finished';
  }
};
var correctBorderScale = (axis) => ({
  correct: (latest, {
    delta,
    treeScale,
  },) => {
    if (typeof latest === 'string') latest = parseFloat(latest,);
    if (latest === 0) return '0px';
    let corrected = latest;
    if (delta && treeScale) {
      corrected = Math.round(latest / delta[axis].scale / treeScale[axis],);
      corrected = Math.max(corrected, 1,);
    }
    return corrected + 'px';
  },
});
addScaleCorrector({
  borderTopWidth: correctBorderScale('y',),
  borderLeftWidth: correctBorderScale('x',),
  borderRightWidth: correctBorderScale('x',),
  borderBottomWidth: correctBorderScale('y',),
},);
function MotionSetup({
  children,
},) {
  return /* @__PURE__ */ jsx3(Fragment, {
    children,
  },);
}
function startAnimation(_key, value, target, transition = {},) {
  warnOnce2(`"startAnimation" is unsupported. Use "animate" instead: https://www.framer.com/api/motion/utilities/#animate`,);
  return new Promise((resolve) => {
    animate(value, target, {
      ...transition,
      onComplete: () => resolve(),
    },);
  },);
}
function deprecatedAnimate(from, to, animator, options,) {
  deprecationWarning('animate()', '2.0.0', 'the new animation API (https://www.framer.com/api/animation/)',);
  const target = from;
  let fromValue;
  if (isAnimatable2(from,) || isMotionValue2(from,)) {
    fromValue = from.get();
  } else {
    fromValue = Animatable.objectToValues(from,);
  }
  const animation = new FramerAnimation(target, fromValue, to, animator, options,);
  animation.play();
  return animation;
}
var animate2 = /* @__PURE__ */ (() => {
  function animate3(from, to, animatorOrTransition, options,) {
    return isAnimatable2(from,) ? deprecatedAnimate(from, to, animatorOrTransition, options,) : animate(from, to, animatorOrTransition,);
  }
  animate3.spring = (from, to, options,) => {
    return animate3(from, to, SpringAnimator, options,);
  };
  animate3.bezier = (from, to, options,) => {
    return animate3(from, to, BezierAnimator, options,);
  };
  animate3.linear = (from, to, options,) => {
    return animate3.bezier(from, to, {
      ...options,
      curve: 'linear',
      /* Linear */
    },);
  };
  animate3.ease = (from, to, options,) => {
    return animate3.bezier(from, to, {
      ...options,
      curve: 'ease',
      /* Ease */
    },);
  };
  animate3.easeIn = (from, to, options,) => {
    return animate3.bezier(from, to, {
      ...options,
      curve: 'ease-in',
      /* EaseIn */
    },);
  };
  animate3.easeOut = (from, to, options,) => {
    return animate3.bezier(from, to, {
      ...options,
      curve: 'ease-out',
      /* EaseOut */
    },);
  };
  animate3.easeInOut = (from, to, options,) => {
    return animate3.bezier(from, to, {
      ...options,
      curve: 'ease-in-out',
      /* EaseInOut */
    },);
  };
  return animate3;
})();
var LayoutIdContext = /* @__PURE__ */ React4.createContext({
  getLayoutId: (args) => null,
  persistLayoutIdCache: () => {},
  top: false,
  enabled: true,
},);
function LayoutIdProvider({
  children,
},) {
  const context = useContext(LayoutIdContext,);
  if (context.top) {
    return /* @__PURE__ */ jsx3(Fragment, {
      children,
    },);
  }
  const cache2 = useRef3({
    // When we provide a layoutId for a node based on it's first
    // duplicatedFrom id, we save it's layoutId mapped to it's actual id.
    // Future screen's nodes will check this cache first, to see if they've
    // previously been assigned a layoutId, or if any of there other
    // duplicatedFrom ids matched a node that was previously assigned a
    // layoutId.
    byId: {},
    byName: {},
    // When we navigate from screens that were duplicated from a future
    // screen, to that future screen, we want to do a reverse lookup on the
    // last duplicatedFrom id, rather than the id. We need to keep them
    // separate so they don't overlap.
    byLastId: {},
    byPossibleId: {},
    byLastName: {},
    byLayoutId: {},
    // When we don't have a cached layoutId for all duplicatedFrom ids, we
    // need to increment and save it so that we don't create clashing
    // layoutIds. We also need to reset name counts between screens, so we
    // record those separately.
    count: {
      byId: {},
      byName: {},
    },
  },);
  const screen = useRef3({
    byId: {},
    byName: {},
    byLastId: {},
    byPossibleId: {},
    byLastName: {},
    byLayoutId: {},
  },);
  const usedIds = useRef3(/* @__PURE__ */ new Set(),).current;
  const getLayoutId = useCallback(({
    id: id3,
    name,
    duplicatedFrom,
  },) => {
    if (!id3) return null;
    const cacheKey = name ? 'byName' : 'byId';
    const previousId = cache2.current[cacheKey][id3];
    if (previousId) return previousId;
    const nodeIdentifier = name || id3;
    if (
      !duplicatedFrom && !usedIds.has(nodeIdentifier,) &&
      (!cache2.current.byLayoutId[nodeIdentifier] || cache2.current.byLayoutId[nodeIdentifier] === nodeIdentifier)
    ) {
      if (cache2.current.count[cacheKey][nodeIdentifier] === void 0) {
        cache2.current.count[cacheKey][nodeIdentifier] = 0;
        cache2.current.byLayoutId[nodeIdentifier] = nodeIdentifier;
        screen.current[cacheKey][id3] = nodeIdentifier;
      }
      usedIds.add(nodeIdentifier,);
      return nodeIdentifier;
    }
    let possibleMatch = void 0;
    if (duplicatedFrom == null ? void 0 : duplicatedFrom.length) {
      for (let index = duplicatedFrom.length - 1; index >= 0; index--) {
        const duplicatedId = duplicatedFrom[index];
        assert(!!duplicatedId, `duplicatedId must be defined`,);
        const match = cache2.current[cacheKey][duplicatedId];
        const byLastIdMatch = cache2.current.byLastId[duplicatedId];
        if (byLastIdMatch && !possibleMatch) {
          const matchedLayoutId = cache2.current.byLayoutId[byLastIdMatch];
          const shouldUseNamedLastIdMatch = !matchedLayoutId || matchedLayoutId === name;
          if (byLastIdMatch && !usedIds.has(byLastIdMatch,) && (name ? shouldUseNamedLastIdMatch : true)) {
            possibleMatch = [byLastIdMatch, duplicatedId,];
          }
        }
        const previousLayoutId = match ? cache2.current.byLayoutId[match] : void 0;
        const shouldUseNamedMatch = !previousLayoutId || previousLayoutId === name;
        if (match && !usedIds.has(match,) && (name ? shouldUseNamedMatch : true)) {
          screen.current[cacheKey][id3] = match;
          screen.current.byLastId[duplicatedId] = match;
          usedIds.add(match,);
          return match;
        }
      }
    }
    const last = cache2.current.byLastId[id3];
    if (last && !usedIds.has(last,)) {
      usedIds.add(last,);
      screen.current.byId[id3] = last;
      return last;
    }
    if (possibleMatch) {
      const [match, duplicatedId,] = possibleMatch;
      screen.current[cacheKey][id3] = match;
      screen.current.byLastId[duplicatedId] = match;
      usedIds.add(match,);
      return match;
    }
    const possible = cache2.current.byPossibleId[id3];
    if (possible && !usedIds.has(possible,)) {
      usedIds.add(possible,);
      screen.current.byId[id3] = possible;
      return possible;
    }
    const rootDuplicatedId = duplicatedFrom == null ? void 0 : duplicatedFrom[0];
    const identifier = name || rootDuplicatedId || id3;
    const value = (cache2.current.count[cacheKey][identifier] ?? -1) + 1;
    const {
      layoutId,
      value: nextValue,
    } = nextLayoutId(identifier, value, usedIds,);
    cache2.current.count[cacheKey][identifier] = nextValue;
    screen.current[cacheKey][id3] = layoutId;
    if (duplicatedFrom == null ? void 0 : duplicatedFrom.length) {
      if (!name) {
        const lastId = duplicatedFrom[duplicatedFrom.length - 1];
        if (lastId) {
          screen.current.byLastId[lastId] = layoutId;
        }
        if (duplicatedFrom.length > 1) {
          for (let index = 0; index < duplicatedFrom.length - 1; index++) {
            const possibleId = duplicatedFrom[index];
            if (possibleId === void 0) continue;
            if (!screen.current.byPossibleId[possibleId]) {
              screen.current.byPossibleId[possibleId] = layoutId;
            }
          }
        }
      }
    }
    screen.current.byLayoutId[layoutId] = nodeIdentifier;
    usedIds.add(layoutId,);
    return layoutId;
  }, [],);
  const persistLayoutIdCache = useCallback(() => {
    cache2.current = {
      byId: {
        ...cache2.current.byId,
        ...screen.current.byId,
      },
      byLastId: {
        ...cache2.current.byLastId,
        ...screen.current.byLastId,
      },
      byPossibleId: {
        ...cache2.current.byPossibleId,
        ...screen.current.byPossibleId,
      },
      byName: {
        ...cache2.current.byName,
        ...screen.current.byName,
      },
      byLastName: {
        ...cache2.current.byLastName,
        ...screen.current.byLastName,
      },
      byLayoutId: {
        ...cache2.current.byLayoutId,
        ...screen.current.byLayoutId,
      },
      // Unlike the count.byId, we need to reset the count.byName because
      // named layers might not have duplicatedFrom ids (e.g. imported
      // from Figma). When we can use duplicatedFrom ids to check if an id
      // was assigned on a previous screen, we don't increment the count,
      // which means that the count only increments for new items, and
      // only increments on a new screen if the node is new. Since named
      // layers need to always match in some way between screens, we reset
      // the count so that the second named layer on a second screen is
      // always name-1 if it doesn't have any duplicatedFrom ids.
      count: {
        ...cache2.current.count,
        byName: {},
      },
    };
    screen.current = {
      byId: {},
      byName: {},
      byLastId: {},
      byPossibleId: {},
      byLastName: {},
      byLayoutId: {},
    };
    usedIds.clear();
  }, [],);
  const contextValue = useRef3({
    getLayoutId,
    persistLayoutIdCache,
    top: true,
    enabled: true,
  },).current;
  return /* @__PURE__ */ jsx3(LayoutIdContext.Provider, {
    value: contextValue,
    children,
  },);
}
function nextLayoutId(identifier, initialValue, usedIds,) {
  let value = initialValue;
  let layoutId = value ? `${identifier}-${value}` : identifier;
  while (usedIds.has(layoutId,)) {
    value++;
    layoutId = `${identifier}-${value}`;
  }
  return {
    layoutId,
    value,
  };
}
function AutomaticLayoutIds({
  enabled = true,
  ...props
},) {
  const context = useContext(LayoutIdContext,);
  const contextValue = useMemo2(() => {
    return {
      ...context,
      enabled,
    };
  }, [enabled,],);
  return /* @__PURE__ */ jsx3(LayoutIdContext.Provider, {
    ...props,
    value: contextValue,
  },);
}
function useConstant2(init,) {
  const ref = useRef3(null,);
  if (ref.current === null) {
    ref.current = init();
  }
  return ref.current;
}
var baseStyle = {
  background: void 0,
  display: 'flex',
  flexDirection: 'column',
  justifyContent: 'center',
  alignItems: 'center',
  lineHeight: '1.4em',
  textOverflow: 'ellipsis',
  overflow: 'hidden',
  minHeight: 0,
  width: '100%',
  height: '100%',
};
var errorStyle = /* @__PURE__ */ (() => ({
  ...baseStyle,
  border: '1px solid rgba(149, 149, 149, 0.15)',
  borderRadius: 6,
  fontSize: '12px',
  backgroundColor: 'rgba(149, 149, 149, 0.1)',
  color: '#a5a5a5',
}))();
var textStyle = {
  overflow: 'hidden',
  whiteSpace: 'nowrap',
  textOverflow: 'ellipsis',
  maxWidth: '100%',
  flexShrink: 0,
  padding: `0 10px`,
};
var titleStyle = /* @__PURE__ */ (() => ({
  ...textStyle,
  // TODO: Use Fresco tokens for this.
  fontWeight: 500,
}))();
var messageStyle = /* @__PURE__ */ (() => ({
  ...textStyle,
  whiteSpace: 'pre',
  maxHeight: 'calc(50% - calc(20px * var(--framerInternalCanvas-canvasPlaceholderContentScaleFactor, 1)))',
  WebkitMaskImage: 'linear-gradient(to bottom, black 80%, transparent 100%)',
}))();
function ErrorPlaceholder(props,) {
  const {
    error,
    file,
  } = props;
  const title = file ? `Error in ${stripSlash(file,)}` : 'Error';
  const message = error instanceof Error ? error.message : '' + error;
  return /* @__PURE__ */ jsxs('div', {
    style: errorStyle,
    children: [
      /* @__PURE__ */ jsx3('div', {
        className: 'text',
        style: titleStyle,
        children: title,
      },),
      message && /* @__PURE__ */ jsx3('div', {
        className: 'text',
        style: messageStyle,
        children: message,
      },),
    ],
  },);
}
function stripSlash(title,) {
  if (title.startsWith('./',)) {
    return title.replace('./', '',);
  }
  return title;
}
function getScaleData(deviceOptions, containerSize,) {
  const {
    componentWidth,
    componentHeight,
  } = getComponentSize(deviceOptions,);
  const scaleX2 = containerSize.width / componentWidth;
  const scaleY2 = containerSize.height / componentHeight;
  const scale2 = Math.min(scaleX2, scaleY2, 1,);
  let screenScalePixelFix = 1;
  if (scale2 < 1) {
    const actualScreenWidth = deviceOptions.screenWidth * scale2;
    const desiredScreenWidth = actualScreenWidth + 1;
    const screenScaleX = desiredScreenWidth / actualScreenWidth;
    const actualScreenHeight = deviceOptions.screenHeight * scale2;
    const desiredScreenHeight = actualScreenHeight + 1;
    const screenScaleY = desiredScreenHeight / actualScreenHeight;
    const screenScale = Math.max(screenScaleX, screenScaleY,);
    screenScalePixelFix = screenScale;
  }
  return {
    scale: scale2,
    screenScalePixelFix,
    scaledComponentWidth: componentWidth * scale2,
    scaledComponentHeight: componentHeight * scale2,
    scaledDeviceWidth: deviceOptions.deviceWidth * scale2,
    scaledDeviceHeight: deviceOptions.deviceHeight * scale2,
  };
}
function getColorsFromTheme(theme, type,) {
  if (type === 'none') return {};
  if (!theme) return {};
  const isDarkTheme = theme === 'dark';
  return {
    shadowColor: isDarkTheme ? 'rgba(0, 0, 0, 0.55)' : 'rgba(0, 0, 0, 0.15)',
    bezelColor: isDarkTheme ? '#222' : '#fff',
    bezelShadeColor: isDarkTheme ? '#000' : 'rgba(0, 0, 0, 0.2)',
    screenColor: isDarkTheme ? '#333' : '#eee',
  };
}
var ErrorBoundary = class extends Component2 {
  constructor() {
    super(...arguments,);
    __publicField(this, 'state', {},);
  }
  componentDidCatch(error, info,) {
    var _a;
    let stack = (_a = info.componentStack) == null ? void 0 : _a.split('\n',).filter((line) => line.length !== 0);
    let currentIndex = 0;
    if (stack) {
      for (const line of stack) {
        if (line.startsWith(`    in ${this.constructor.name}`,)) {
          break;
        }
        currentIndex++;
      }
      stack = stack.slice(0, currentIndex,);
    }
    this.setState({
      lastError: {
        error,
        componentStack: stack,
      },
    },);
  }
  componentDidUpdate(_, prevState,) {
    if (this.state.lastError === void 0) return;
    if (prevState.lastError === this.state.lastError) {
      this.setState({
        lastError: void 0,
      },);
    }
  }
  render() {
    if (this.state.lastError) {
      return /* @__PURE__ */ jsx3(ErrorPlaceholder, {
        error: this.state.lastError.error.message,
        file: 'Prototype',
      },);
    }
    return this.props.children;
  }
};
function Device({
  canResize = false,
  children,
  ResizeObserver: ResizeObserver2 = safeWindow.ResizeObserver,
  ...options
},) {
  var _a, _b;
  const optionsRef = React4.useRef(void 0,);
  if (optionsRef.current === void 0) optionsRef.current = options;
  const deviceAppearance = (_a = options.deviceOptions) == null ? void 0 : _a.appearance.type;
  const scaleDataRef = React4.useRef();
  const containerRef = React4.useRef(null,);
  const deviceRef = React4.useRef(null,);
  const screenRef = React4.useRef(null,);
  const updateImperativeScale = React4.useCallback(({
    scale: scale2,
    screenScalePixelFix,
  },) => {
    if (!scaleDataRef.current || !deviceRef.current || !screenRef.current) return;
    deviceRef.current.style.transform = `scale(${scale2})`;
    screenRef.current.style.transform = `scale(${screenScalePixelFix})`;
  }, [],);
  if (scaleDataRef.current === void 0 && options.deviceOptions && options.scaleTo && options.scaleTo !== 'dynamic') {
    const scale2 = scaleDataRef.current = getScaleData(options.deviceOptions, options.scaleTo,);
    updateImperativeScale(scale2,);
  }
  const invertScale2 = React4.useCallback((point2) => {
    if (!scaleDataRef.current) return point2;
    const {
      scale: scale2 = 1,
    } = scaleDataRef.current;
    return {
      x: point2.x / scale2,
      y: point2.y / scale2,
    };
  }, [],);
  const updateScale = React4.useCallback(() => {
    const {
      deviceOptions,
      scaleTo,
    } = optionsRef.current ?? {};
    if (!deviceOptions || !scaleTo || scaleTo !== 'dynamic' || !containerRef.current) return;
    if (containerRef.current.offsetWidth === 0 || containerRef.current.offsetHeight === 0) return;
    const scaleData = scaleDataRef.current = getScaleData(deviceOptions, {
      width: containerRef.current.offsetWidth,
      height: containerRef.current.offsetHeight,
    },);
    updateImperativeScale(scaleData,);
  }, [updateImperativeScale,],);
  const observer2 = useConstant2(() => {
    if (!ResizeObserver2) {
      return;
    }
    return new ResizeObserver2(() => updateScale());
  },);
  React4.useLayoutEffect(() => {
    optionsRef.current = {
      deviceOptions: options.deviceOptions,
      overrideTheme: options.overrideTheme,
      scaleTo: options.scaleTo,
    };
  }, [options.deviceOptions, options.overrideTheme, options.scaleTo,],);
  React4.useLayoutEffect(() => {
    updateScale();
  }, [updateScale,],);
  React4.useEffect(() => {
    if (!observer2 || !containerRef.current) return;
    observer2.observe(containerRef.current,);
    return () => observer2.disconnect();
  }, [],);
  const {
    containerStyle,
    handStyle,
    deviceStyle,
    deviceImageStyle,
    screenStyle,
  } = getDeviceStyle(options,);
  const resizeStyles = canResize
    ? {
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center',
      height: '100%',
    }
    : {};
  const screenBackground = ((_b = options.deviceOptions) == null ? void 0 : _b.transparentBackground) ? 'transparent' : 'white';
  return /* @__PURE__ */ jsx3('div', {
    style: {
      ...containerStyle,
      ...resizeStyles,
    },
    ref: containerRef,
    children: /* @__PURE__ */ jsxs('div', {
      style: {
        ...deviceStyle,
      },
      ref: deviceRef,
      children: [
        handStyle && /* @__PURE__ */ jsx3('div', {
          style: handStyle,
        },),
        deviceAppearance === 'external-clay' && deviceImageStyle && /* @__PURE__ */ jsx3('div', {
          style: deviceImageStyle,
        },),
        /* @__PURE__ */ jsx3('div', {
          style: {
            ...screenStyle,
            pointerEvents: void 0,
            backgroundColor: children ? screenBackground : screenStyle.backgroundColor,
          },
          ref: screenRef,
          children: /* @__PURE__ */ jsx3(MotionConfig, {
            transformPagePoint: invertScale2,
            children: /* @__PURE__ */ jsx3(ErrorBoundary, {
              children,
            },),
          },),
        },),
        deviceAppearance === 'realistic' && deviceImageStyle && /* @__PURE__ */ jsx3('div', {
          style: deviceImageStyle,
        },),
      ],
    },),
  },);
}
var DEVICE_PADDING = 45;
var HAND_IMG_WIDTH = 2400;
var HAND_IMG_HEIGHT = 3740;
var HAND_IMG_GAP_WIDTH = 859;
var HAND_IMG_GAP_LEFT = 772;
var HAND_IMG_GAP_BOTTOM = /* @__PURE__ */ (() => 992 - 5)();
var noDeviceSize = {
  componentWidth: 500,
  componentHeight: 500,
};
function getComponentSize(options,) {
  if (!options) return noDeviceSize;
  const {
    deviceWidth,
    deviceHeight,
    noPadding,
  } = options;
  const padding = noPadding ? 0 : DEVICE_PADDING * 2;
  return {
    componentWidth: deviceWidth + padding,
    componentHeight: deviceHeight + padding,
  };
}
function getDeviceStyle({
  scaleTo,
  deviceOptions,
  overrideTheme,
} = {},) {
  const noDeviceStyle = {
    containerStyle: {},
    deviceStyle: {},
    screenStyle: {},
  };
  if (!deviceOptions) return noDeviceStyle;
  const {
    componentWidth,
    componentHeight,
  } = getComponentSize(deviceOptions,);
  const overriddenColors = getColorsFromTheme(overrideTheme, deviceOptions.appearance.type,);
  const {
    deviceWidth,
    deviceHeight,
    appearance,
    screenWidth,
    screenHeight,
    screenMaxHeight,
    screenOffsetTop,
    screenOffsetLeft,
    screenRadius,
    screenMaskImage,
    screenColor,
    shadow,
    background,
    hand,
  } = deviceOptions;
  const boxShadows = [];
  if (appearance.type === 'clay' && shadow) {
    boxShadows.push(shadow,);
  }
  let bezelStyle = void 0;
  if (appearance.type === 'clay') {
    bezelStyle = {
      borderRadius: appearance.bezelRadius,
      backgroundColor: overriddenColors.bezelColor || appearance.bezelColor,
    };
    if (overriddenColors.bezelShadeColor || appearance.bezelShadeColor) {
      boxShadows.push(`inset 0 0 15px ${overriddenColors.bezelShadeColor || appearance.bezelShadeColor}`,);
    }
  }
  const handOffsetLeft = (hand == null ? void 0 : hand.offsetLeft) ?? 0;
  const handOffsetRight = (hand == null ? void 0 : hand.offsetRight) ?? 0;
  const handOffsetBottom = (hand == null ? void 0 : hand.offsetBottom) ?? 0;
  const handScale = (deviceWidth - handOffsetLeft - handOffsetRight) / HAND_IMG_GAP_WIDTH;
  return {
    containerStyle: {
      width: scaleTo ? '100%' : componentWidth,
      height: scaleTo ? '100%' : componentHeight,
      flex: '1 1 0',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      overflow: 'hidden',
      background,
    },
    handStyle: hand && {
      width: HAND_IMG_WIDTH * handScale,
      height: HAND_IMG_HEIGHT * handScale,
      position: 'absolute',
      pointerEvents: 'none',
      backgroundImage: `url("${hand.imageUrl}")`,
      backgroundSize: 'contain',
      backgroundRepeat: 'no-repeat',
      left: -HAND_IMG_GAP_LEFT * handScale + handOffsetLeft,
      bottom: -HAND_IMG_GAP_BOTTOM * handScale + handOffsetBottom,
    },
    deviceStyle: {
      width: deviceWidth,
      height: deviceHeight,
      flexShrink: 0,
      position: 'absolute',
      boxShadow: boxShadows.join(',',),
      ...bezelStyle,
    },
    deviceImageStyle: appearance.type === 'realistic' || appearance.type === 'external-clay'
      ? {
        width: appearance.imageWidth,
        height: appearance.imageHeight,
        position: 'absolute',
        pointerEvents: 'none',
        overflow: 'hidden',
        backgroundImage: `url("${appearance.imageUrl}")`,
        backgroundPosition: 'top left',
        backgroundRepeat: 'no-repeat',
        backgroundSize: `${appearance.imageWidth}px ${appearance.imageHeight}px`,
        // Rotate 90 degrees counter-clockwise around (0,0), then move the
        // result down into the viewport (rightmost transform is applied first).
        transformOrigin: 'top left',
        transform: appearance.rotateImage ? `translateY(${appearance.imageWidth}px) rotate(-90deg)` : void 0,
      }
      : void 0,
    screenStyle: {
      width: screenWidth,
      height: screenHeight,
      maxHeight: screenMaxHeight,
      position: 'absolute',
      top: screenOffsetTop,
      left: screenOffsetLeft,
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      overflow: 'hidden',
      borderRadius: screenRadius,
      backgroundColor: overriddenColors.screenColor || screenColor,
      ...(screenMaskImage && {
        maskImage: screenMaskImage,
        WebkitMaskImage: screenMaskImage,
        maskSize: 'contain',
        WebkitMaskSize: 'contain',
      }),
    },
  };
}
function isFiniteNumber(value,) {
  return Number.isFinite(value,);
}
function finiteNumber(value,) {
  return isFiniteNumber(value,) ? value : void 0;
}
function isEmpty(obj,) {
  return !obj || !Object.keys(obj,).length && obj.constructor === Object;
}
function isReactElement(test2,) {
  return typeof test2 !== 'string' && typeof test2 !== 'number';
}
function isReactChild(test2,) {
  return test2 !== null && typeof test2 !== 'undefined' && typeof test2 !== 'boolean' && !isEmpty(test2,);
}
function degreesToRadians(degrees2,) {
  return degrees2 * (Math.PI / 180);
}
var Line = /* @__PURE__ */ (() => {
  function Line2(a, b,) {
    return {
      a,
      b,
    };
  }
  Line2.offset = (line, offset,) => {
    const angle = Point.angleFromX(line.a, line.b,);
    const rad = degreesToRadians(angle,);
    const x = offset * Math.sin(rad,);
    const y = offset * Math.cos(rad,);
    return Line2({
      x: line.a.x + x,
      y: line.a.y - y,
    }, {
      x: line.b.x + x,
      y: line.b.y - y,
    },);
  };
  Line2.intersection = (lineA, lineB, segments,) => {
    const x1 = lineA.a.x;
    const y1 = lineA.a.y;
    const x2 = lineA.b.x;
    const y2 = lineA.b.y;
    const x3 = lineB.a.x;
    const y3 = lineB.a.y;
    const x4 = lineB.b.x;
    const y4 = lineB.b.y;
    const a1 = (x4 - x3) * (y3 - y1) - (y4 - y3) * (x3 - x1);
    const b1 = (x4 - x3) * (y2 - y1) - (y4 - y3) * (x2 - x1);
    const c1 = (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1);
    if (a1 === 0 && b1 === 0) return null;
    if (b1 === 0) return null;
    const alpha2 = a1 / b1;
    const beta = c1 / b1;
    if (segments && (alpha2 < 0 || alpha2 > 1 || beta < 0 || beta > 1)) return null;
    return {
      x: x1 + alpha2 * (x2 - x1),
      y: y1 + alpha2 * (y2 - y1),
    };
  };
  Line2.intersectionAngle = (lineA, lineB,) => {
    const deltaAX = lineA.b.x - lineA.a.x;
    const deltaAY = lineA.b.y - lineA.a.y;
    const deltaBX = lineB.b.x - lineB.a.x;
    const deltaBY = lineB.b.y - lineB.a.y;
    const angle = Math.atan2(deltaAX * deltaBY - deltaAY * deltaBX, deltaAX * deltaBX + deltaAY * deltaBY,);
    return angle * (180 / Math.PI);
  };
  Line2.isOrthogonal = (line) => {
    return line.a.x === line.b.x || line.a.y === line.b.y;
  };
  Line2.perpendicular = (line, pointOnLine,) => {
    const deltaX = line.a.x - line.b.x;
    const deltaY = line.a.y - line.b.y;
    const pointB = Point(pointOnLine.x - deltaY, pointOnLine.y + deltaX,);
    return Line2(pointB, pointOnLine,);
  };
  Line2.projectPoint = (line, point2,) => {
    const perp = Line2.perpendicular(line, point2,);
    return Line2.intersection(line, perp,);
  };
  Line2.pointAtPercentDistance = (line, distance2,) => {
    const hypotenuse = Line2.distance(line,);
    const r = distance2 * hypotenuse / hypotenuse;
    return {
      x: r * line.b.x + (1 - r) * line.a.x,
      y: r * line.b.y + (1 - r) * line.a.y,
    };
  };
  Line2.distance = (line) => {
    return Point.distance(line.a, line.b,);
  };
  return Line2;
})();
var Rect = {
  /**
   * @param rect -
   * @param other -
   * @returns if the input rectangles are equal in size and position
   * @public
   */
  equals: function (rect, other,) {
    if (rect === other) return true;
    if (!rect || !other) return false;
    return rect.x === other.x && rect.y === other.y && rect.width === other.width && rect.height === other.height;
  },
  /** @internal */
  from: (rect) => {
    return {
      x: rect.x,
      y: rect.y,
      width: rect.width,
      height: rect.height,
    };
  },
  /** @internal */
  atOrigin: (size) => {
    return {
      x: 0,
      y: 0,
      width: size.width,
      height: size.height,
    };
  },
  /** @internal */
  fromTwoPoints: (a, b,) => {
    return {
      x: Math.min(a.x, b.x,),
      y: Math.min(a.y, b.y,),
      width: Math.abs(a.x - b.x,),
      height: Math.abs(a.y - b.y,),
    };
  },
  /** @internal */
  fromRect: (rect) => {
    return {
      x: rect.left,
      y: rect.top,
      width: rect.right - rect.left,
      height: rect.bottom - rect.top,
    };
  },
  /** @internal */
  multiply: (rect, n,) => {
    return {
      x: rect.x * n,
      y: rect.y * n,
      width: rect.width * n,
      height: rect.height * n,
    };
  },
  /** @internal */
  divide: (rect, n,) => {
    return Rect.multiply(rect, 1 / n,);
  },
  /** @internal */
  offset: (rect, delta,) => {
    const xOffset = typeof delta.x === 'number' ? delta.x : 0;
    const yOffset = typeof delta.y === 'number' ? delta.y : 0;
    return {
      ...rect,
      x: rect.x + xOffset,
      y: rect.y + yOffset,
    };
  },
  /** @internal */
  inflate: (rect, value,) => {
    if (value === 0) return rect;
    const doubleValue = 2 * value;
    return {
      x: rect.x - value,
      y: rect.y - value,
      width: rect.width + doubleValue,
      height: rect.height + doubleValue,
    };
  },
  /** @internal */
  pixelAligned: (rect) => {
    const x = Math.round(rect.x,);
    const y = Math.round(rect.y,);
    const rectMaxX = Math.round(rect.x + rect.width,);
    const rectMaxY = Math.round(rect.y + rect.height,);
    const width = Math.max(rectMaxX - x, 0,);
    const height = Math.max(rectMaxY - y, 0,);
    return {
      x,
      y,
      width,
      height,
    };
  },
  /** @internal */
  halfPixelAligned: (rect) => {
    const x = Math.round(rect.x * 2,) / 2;
    const y = Math.round(rect.y * 2,) / 2;
    const rectMaxX = Math.round((rect.x + rect.width) * 2,) / 2;
    const rectMaxY = Math.round((rect.y + rect.height) * 2,) / 2;
    const width = Math.max(rectMaxX - x, 1,);
    const height = Math.max(rectMaxY - y, 1,);
    return {
      x,
      y,
      width,
      height,
    };
  },
  /** @internal */
  round: (rect, decimals = 0,) => {
    const x = roundedNumber(rect.x, decimals,);
    const y = roundedNumber(rect.y, decimals,);
    const width = roundedNumber(rect.width, decimals,);
    const height = roundedNumber(rect.height, decimals,);
    return {
      x,
      y,
      width,
      height,
    };
  },
  /** @internal */
  roundToOutside: (rect) => {
    const x = Math.floor(rect.x,);
    const y = Math.floor(rect.y,);
    const rectMaxX = Math.ceil(rect.x + rect.width,);
    const rectMaxY = Math.ceil(rect.y + rect.height,);
    const width = Math.max(rectMaxX - x, 0,);
    const height = Math.max(rectMaxY - y, 0,);
    return {
      x,
      y,
      width,
      height,
    };
  },
  /**
   * @param rect -
   * @internal
   */
  minX: (rect) => {
    return rect.x;
  },
  /**
   * @param rect -
   * @internal
   */
  maxX: (rect) => {
    return rect.x + rect.width;
  },
  /**
   * @param rect -
   * @internal
   */
  minY: (rect) => {
    return rect.y;
  },
  /**
   * @param rect -
   * @internal
   */
  maxY: (rect) => {
    return rect.y + rect.height;
  },
  /** @internal */
  positions: (rect) => {
    return {
      minX: rect.x,
      midX: rect.x + rect.width / 2,
      maxX: Rect.maxX(rect,),
      minY: rect.y,
      midY: rect.y + rect.height / 2,
      maxY: Rect.maxY(rect,),
    };
  },
  /**
   * @param rect -
   * @internal
   */
  center: (rect) => {
    return {
      x: rect.x + rect.width / 2,
      y: rect.y + rect.height / 2,
    };
  },
  /** @internal */
  boundingRectFromPoints: (points) => {
    let minX = Infinity;
    let maxX = -Infinity;
    let minY = Infinity;
    let maxY = -Infinity;
    for (let i = 0; i < points.length; i++) {
      const point2 = points[i];
      minX = Math.min(minX, point2.x,);
      maxX = Math.max(maxX, point2.x,);
      minY = Math.min(minY, point2.y,);
      maxY = Math.max(maxY, point2.y,);
    }
    return {
      x: minX,
      y: minY,
      width: maxX - minX,
      height: maxY - minY,
    };
  },
  /**
   * Returns the precise box defined by the given points, starting from the top-left point. This produces the same
   * Rect as Rect.boundingRectFromPoints *only* when the rect described by the points is not rotated.
   *
   * @internal
   */
  fromPoints: (ps) => {
    const [tl, tr, _, bl,] = ps;
    const {
      x,
      y,
    } = tl;
    const width = Point.distance(tl, tr,);
    const height = Point.distance(tl, bl,);
    return {
      x,
      y,
      width,
      height,
    };
  },
  /**
   * Returns a rect containing all input rects
   * @param rect - a list of rectangles
   * @returns A rectangle that fits exactly around the input rects
   * @internal
   */
  merge: (...rect) => {
    const min = {
      x: Math.min(...rect.map(Rect.minX,),),
      y: Math.min(...rect.map(Rect.minY,),),
    };
    const max = {
      x: Math.max(...rect.map(Rect.maxX,),),
      y: Math.max(...rect.map(Rect.maxY,),),
    };
    return Rect.fromTwoPoints(min, max,);
  },
  /** @internal */
  intersection: (rect1, rect2,) => {
    const x = Math.max(rect1.x, rect2.x,);
    const x2 = Math.min(rect1.x + rect1.width, rect2.x + rect2.width,);
    const y = Math.max(rect1.y, rect2.y,);
    const y2 = Math.min(rect1.y + rect1.height, rect2.y + rect2.height,);
    return {
      x,
      y,
      width: x2 - x,
      height: y2 - y,
    };
  },
  /**
   * Returns all the corner points for a rect
   * @param rect -
   * @internal
   */
  points: (rect) => {
    return [{
      x: Rect.minX(rect,),
      y: Rect.minY(rect,),
    }, {
      x: Rect.minX(rect,),
      y: Rect.maxY(rect,),
    }, {
      x: Rect.maxX(rect,),
      y: Rect.minY(rect,),
    }, {
      x: Rect.maxX(rect,),
      y: Rect.maxY(rect,),
    },];
  },
  /**
   * Returns all the corner points for a rect at the origin.
   * @internal
   */
  pointsAtOrigin: (rect) => {
    return [{
      x: 0,
      y: 0,
    }, {
      x: rect.width,
      y: 0,
    }, {
      x: rect.width,
      y: rect.height,
    }, {
      x: 0,
      y: rect.height,
    },];
  },
  /** Takes a rect and transforms it by a matrix, resulting in the bounding rectangle of the
   * rotated and/or translated original.
   * @param rect - rectangle to transform
   * @param matrix - matrix to transform by
   * @returns The bounding rectangle of the rotated and/or translated rect.
   */
  transform: (rect, matrix,) => {
    const {
      x: x1,
      y: y1,
    } = matrix.transformPoint({
      x: rect.x,
      y: rect.y,
    },);
    const {
      x: x2,
      y: y2,
    } = matrix.transformPoint({
      x: rect.x + rect.width,
      y: rect.y,
    },);
    const {
      x: x3,
      y: y3,
    } = matrix.transformPoint({
      x: rect.x + rect.width,
      y: rect.y + rect.height,
    },);
    const {
      x: x4,
      y: y4,
    } = matrix.transformPoint({
      x: rect.x,
      y: rect.y + rect.height,
    },);
    const x = Math.min(x1, x2, x3, x4,);
    const width = Math.max(x1, x2, x3, x4,) - x;
    const y = Math.min(y1, y2, y3, y4,);
    const height = Math.max(y1, y2, y3, y4,) - y;
    return {
      x,
      y,
      width,
      height,
    };
  },
  /**
   * Checks if a rectangle contains a point
   * @param rect - The rectangle to check
   * @param point - The point to check
   * @returns true if the provided rectangle contains the provided point
   * @internal
   */
  containsPoint: (rect, point2,) => {
    if (point2.x < Rect.minX(rect,)) {
      return false;
    }
    if (point2.x > Rect.maxX(rect,)) {
      return false;
    }
    if (point2.y < Rect.minY(rect,)) {
      return false;
    }
    if (point2.y > Rect.maxY(rect,)) {
      return false;
    }
    if (Number.isNaN(rect.x,)) {
      return false;
    }
    if (Number.isNaN(rect.y,)) {
      return false;
    }
    return true;
  },
  /**
   * Returns wether a rect contains another rect entirely
   * @param rectA -
   * @param rectB -
   * @returns true if rectA contains rectB
   */
  containsRect: (rectA, rectB,) => {
    for (const point2 of Rect.points(rectB,)) {
      if (!Rect.containsPoint(rectA, point2,)) {
        return false;
      }
    }
    return true;
  },
  /** @internal */
  toCSS: (rect) => {
    return {
      display: 'block',
      transform: `translate(${rect.x}px, ${rect.y}px)`,
      width: `${rect.width}px`,
      height: `${rect.height}px`,
    };
  },
  /** @internal */
  inset: (rect, n,) => {
    return {
      x: rect.x + n,
      y: rect.y + n,
      width: Math.max(0, rect.width - 2 * n,),
      height: Math.max(0, rect.height - 2 * n,),
    };
  },
  /** @internal */
  intersects: (rectA, rectB,) => {
    return !(rectB.x >= Rect.maxX(rectA,) || Rect.maxX(rectB,) <= rectA.x || rectB.y >= Rect.maxY(rectA,) || Rect.maxY(rectB,) <= rectA.y);
  },
  /** @internal */
  overlapHorizontally: (rectA, rectB,) => {
    const aMax = Rect.maxX(rectA,);
    const bMax = Rect.maxX(rectB,);
    return aMax > rectB.x && bMax > rectA.x;
  },
  /** @internal */
  overlapVertically: (rectA, rectB,) => {
    const aMax = Rect.maxY(rectA,);
    const bMax = Rect.maxY(rectB,);
    return aMax > rectB.y && bMax > rectA.y;
  },
  /** @internal */
  doesNotIntersect: (rect, rects,) => {
    return rects.find((comparingRect) => {
      return Rect.intersects(comparingRect, rect,);
    },) === void 0;
  },
  /**
   * @param rectA -
   * @param rectB -
   * @returns if the input rectangles are equal in size and position
   * @public
   * @deprecated: please use Rect.equals instead
   */
  isEqual: (rectA, rectB,) => {
    return Rect.equals(rectA, rectB,);
  },
  // @TODO: duplicate of points()
  /**
   * @returns [tl, tr, br, bl]
   * @internal
   */
  cornerPoints: (rect) => {
    const rectMinX = rect.x;
    const rectMaxX = rect.x + rect.width;
    const rectMinY = rect.y;
    const rectMaxY = rect.y + rect.height;
    const corner1 = {
      x: rectMinX,
      y: rectMinY,
    };
    const corner2 = {
      x: rectMaxX,
      y: rectMinY,
    };
    const corner3 = {
      x: rectMaxX,
      y: rectMaxY,
    };
    const corner4 = {
      x: rectMinX,
      y: rectMaxY,
    };
    return [corner1, corner2, corner3, corner4,];
  },
  /** @internal */
  midPoints: (rect) => {
    const rectMinX = rect.x;
    const rectMidX = rect.x + rect.width / 2;
    const rectMaxX = rect.x + rect.width;
    const rectMinY = rect.y;
    const rectMidY = rect.y + rect.height / 2;
    const rectMaxY = rect.y + rect.height;
    const top = {
      x: rectMidX,
      y: rectMinY,
    };
    const right = {
      x: rectMaxX,
      y: rectMidY,
    };
    const bottom = {
      x: rectMidX,
      y: rectMaxY,
    };
    const left = {
      x: rectMinX,
      y: rectMidY,
    };
    return [top, right, bottom, left,];
  },
  /** @internal */
  pointDistance: (rect, point2,) => {
    let x = 0;
    let y = 0;
    if (point2.x < rect.x) {
      x = rect.x - point2.x;
    } else if (point2.x > Rect.maxX(rect,)) {
      x = point2.x - Rect.maxX(rect,);
    }
    if (point2.y < rect.y) {
      y = rect.y - point2.y;
    } else if (point2.y > Rect.maxY(rect,)) {
      y = point2.y - Rect.maxY(rect,);
    }
    return Point.distance({
      x,
      y,
    }, {
      x: 0,
      y: 0,
    },);
  },
  delta: (a, b,) => {
    const pointA = {
      x: Rect.minX(a,),
      y: Rect.minY(a,),
    };
    const pointB = {
      x: Rect.minX(b,),
      y: Rect.minY(b,),
    };
    return {
      x: pointA.x - pointB.x,
      y: pointA.y - pointB.y,
    };
  },
  /** @internal */
  withMinSize: (rect, minSize,) => {
    const {
      width: minWidth,
      height: minHeight,
    } = minSize;
    const diffX = rect.width - minWidth;
    const diffY = rect.height - minHeight;
    return {
      width: Math.max(rect.width, minWidth,),
      height: Math.max(rect.height, minHeight,),
      x: rect.width < minWidth ? rect.x + diffX / 2 : rect.x,
      y: rect.height < minHeight ? rect.y + diffY / 2 : rect.y,
    };
  },
  /**
   * Return false if any point is not inside or on the provided rect.
   * @internal
   */
  anyPointsOutsideRect: (rect, ps,) => {
    const rectMinX = Rect.minX(rect,);
    const rectMinY = Rect.minY(rect,);
    const rectMaxX = Rect.maxX(rect,);
    const rectMaxY = Rect.maxY(rect,);
    for (const point2 of ps) {
      if (point2.x < rectMinX || point2.x > rectMaxX) {
        return true;
      }
      if (point2.y < rectMinY || point2.y > rectMaxY) {
        return true;
      }
    }
    return false;
  },
  /** @internal */
  edges: (rect) => {
    const [tl, tr, br, bl,] = Rect.cornerPoints(rect,);
    return [Line(tl, tr,), Line(tr, br,), Line(br, bl,), Line(bl, tl,),];
  },
  /**
   * Return a new rect projected into a new position based on the anchor rect and the given direction/alignment.
   * @internal
   */
  rebaseRectOnto: (rect, anchorRect, direction, alignment,) => {
    const rebasedRect = {
      ...rect,
    };
    switch (direction) {
      case 'bottom':
      case 'top':
        switch (alignment) {
          case 'start':
            rebasedRect.x = anchorRect.x;
            break;
          case 'center':
            rebasedRect.x = anchorRect.x + anchorRect.width / 2 - rect.width / 2;
            break;
          case 'end':
            rebasedRect.x = anchorRect.x + anchorRect.width - rect.width;
            break;
          default:
            assertNever(alignment,);
        }
        break;
      case 'left':
        rebasedRect.x = anchorRect.x - rect.width;
        break;
      case 'right':
        rebasedRect.x = anchorRect.x + anchorRect.width;
        break;
      default:
        assertNever(direction,);
    }
    switch (direction) {
      case 'left':
      case 'right':
        switch (alignment) {
          case 'start':
            rebasedRect.y = anchorRect.y;
            break;
          case 'center':
            rebasedRect.y = anchorRect.y + anchorRect.height / 2 - rect.height / 2;
            break;
          case 'end':
            rebasedRect.y = anchorRect.y + anchorRect.height - rect.height;
            break;
          default:
            assertNever(alignment,);
        }
        break;
      case 'top':
        rebasedRect.y = anchorRect.y - rect.height;
        break;
      case 'bottom':
        rebasedRect.y = anchorRect.y + anchorRect.height;
        break;
      default:
        assertNever(direction,);
    }
    return rebasedRect;
  },
};
var constraintDefaults = {
  left: null,
  right: null,
  top: null,
  bottom: null,
  centerX: '50%',
  centerY: '50%',
  aspectRatio: null,
  parentSize: null,
  width: 100,
  height: 100,
};
var DimensionType = /* @__PURE__ */ ((DimensionType2) => {
  DimensionType2[DimensionType2['FixedNumber'] = 0] = 'FixedNumber';
  DimensionType2[DimensionType2['Percentage'] = 1] = 'Percentage';
  DimensionType2[DimensionType2['Auto'] = 2] = 'Auto';
  DimensionType2[DimensionType2['FractionOfFreeSpace'] = 3] = 'FractionOfFreeSpace';
  DimensionType2[DimensionType2['Viewport'] = 4] = 'Viewport';
  return DimensionType2;
})(DimensionType || {},);
function isConstraintSupportingChild(child,) {
  if (!isReactChild(child,) || !isReactElement(child,)) {
    return false;
  }
  return true;
}
var ConstraintMask = {
  // Modifies the constraint mask to remove invalid (mutually exclusive) options and returns the original.
  // TODO: this removes major inconsistencies but probably needs to be merged with ConstraintSolver.
  quickfix: (constraints) => {
    if (constraints.widthType === 2 || constraints.heightType === 2) {
      constraints.aspectRatio = null;
    }
    if (isFiniteNumber(constraints.aspectRatio,)) {
      if (constraints.left && constraints.right) {
        constraints.widthType = 0;
      }
      if (constraints.top && constraints.bottom) {
        constraints.heightType = 0;
      }
      if (constraints.left && constraints.right && constraints.top && constraints.bottom) {
        constraints.bottom = false;
      }
      if (constraints.widthType !== 0 && constraints.heightType !== 0) {
        constraints.heightType = 0;
      }
    }
    if (constraints.left && constraints.right) {
      if (constraints.fixedSize || constraints.widthType === 2 || isFiniteNumber(constraints.maxWidth,)) {
        constraints.right = false;
      }
      constraints.widthType = 0;
    }
    if (constraints.top && constraints.bottom) {
      if (constraints.fixedSize || constraints.heightType === 2 || isFiniteNumber(constraints.maxHeight,)) {
        constraints.bottom = false;
      }
      constraints.heightType = 0;
    }
    return constraints;
  },
};
function valueToDimensionType(value,) {
  if (typeof value === 'string') {
    const trimmedValue = value.trim();
    if (trimmedValue === 'auto') return 2;
    if (trimmedValue.endsWith('fr',)) return 3;
    if (trimmedValue.endsWith('%',)) return 1;
    if (trimmedValue.endsWith('vw',) || trimmedValue.endsWith('vh',)) return 4;
  }
  return 0;
}
var ConstraintValues = {
  // Returns concrete current values given some ConstraintProperties.
  fromProperties: (props) => {
    const {
      left,
      right,
      top,
      bottom,
      width,
      height,
      centerX,
      centerY,
      aspectRatio: aspectRatio2,
      autoSize,
    } = props;
    const constraints = ConstraintMask.quickfix({
      left: isFiniteNumber(left,) || isAnimatable2(left,),
      right: isFiniteNumber(right,) || isAnimatable2(right,),
      top: isFiniteNumber(top,) || isAnimatable2(top,),
      bottom: isFiniteNumber(bottom,) || isAnimatable2(bottom,),
      widthType: valueToDimensionType(width,),
      heightType: valueToDimensionType(height,),
      aspectRatio: aspectRatio2 || null,
      fixedSize: autoSize === true,
    },);
    let widthValue = null;
    let heightValue = null;
    let widthType = 0;
    let heightType = 0;
    if (constraints.widthType !== 0 && typeof width === 'string') {
      const parsedWidth = parseFloat(width,);
      if (width.endsWith('fr',)) {
        widthType = 3;
        widthValue = parsedWidth;
      } else if (width === 'auto') {
        widthType = 2;
      } else {
        widthType = 1;
        widthValue = parsedWidth / 100;
      }
    } else if (width !== void 0 && typeof width !== 'string') {
      widthValue = Animatable.getNumber(width,);
    }
    if (constraints.heightType !== 0 && typeof height === 'string') {
      const parsedHeight = parseFloat(height,);
      if (height.endsWith('fr',)) {
        heightType = 3;
        heightValue = parsedHeight;
      } else if (height === 'auto') {
        heightType = 2;
      } else {
        heightType = 1;
        heightValue = parseFloat(height,) / 100;
      }
    } else if (height !== void 0 && typeof height !== 'string') {
      heightValue = Animatable.getNumber(height,);
    }
    let centerAnchorX = 0.5;
    let centerAnchorY = 0.5;
    if (centerX) {
      centerAnchorX = parseFloat(centerX,) / 100;
    }
    if (centerY) {
      centerAnchorY = parseFloat(centerY,) / 100;
    }
    return {
      left: constraints.left ? Animatable.getNumber(left,) : null,
      right: constraints.right ? Animatable.getNumber(right,) : null,
      top: constraints.top ? Animatable.getNumber(top,) : null,
      bottom: constraints.bottom ? Animatable.getNumber(bottom,) : null,
      widthType,
      heightType,
      width: widthValue,
      height: heightValue,
      aspectRatio: constraints.aspectRatio || null,
      centerAnchorX,
      centerAnchorY,
    };
  },
  toSize: (values, parentSizeInfo, autoSize, freeSpace,) => {
    let width = null;
    let height = null;
    const parentWidth = (parentSizeInfo == null ? void 0 : parentSizeInfo.sizing)
      ? Animatable.getNumber(parentSizeInfo == null ? void 0 : parentSizeInfo.sizing.width,)
      : null;
    const parentHeight = (parentSizeInfo == null ? void 0 : parentSizeInfo.sizing)
      ? Animatable.getNumber(parentSizeInfo == null ? void 0 : parentSizeInfo.sizing.height,)
      : null;
    const hOpposingPinsOffset = pinnedOffset(values.left, values.right,);
    if (parentWidth && isFiniteNumber(hOpposingPinsOffset,)) {
      width = parentWidth - hOpposingPinsOffset;
    } else if (autoSize && values.widthType === 2) {
      width = autoSize.width;
    } else if (isFiniteNumber(values.width,)) {
      switch (values.widthType) {
        case 0:
          width = values.width;
          break;
        case 3:
          width = freeSpace ? freeSpace.freeSpaceInParent.width / freeSpace.freeSpaceUnitDivisor.width * values.width : null;
          break;
        case 1:
        case 4:
          if (parentWidth) {
            width = parentWidth * values.width;
          }
          break;
        case 2:
          break;
        default:
          assertNever(values.widthType,);
      }
    }
    const vOpposingPinsOffset = pinnedOffset(values.top, values.bottom,);
    if (parentHeight && isFiniteNumber(vOpposingPinsOffset,)) {
      height = parentHeight - vOpposingPinsOffset;
    } else if (autoSize && values.heightType === 2) {
      height = autoSize.height;
    } else if (isFiniteNumber(values.height,)) {
      switch (values.heightType) {
        case 0:
          height = values.height;
          break;
        case 3:
          height = freeSpace ? freeSpace.freeSpaceInParent.height / freeSpace.freeSpaceUnitDivisor.height * values.height : null;
          break;
        case 1:
        case 4:
          if (parentHeight) {
            height = parentHeight * values.height;
          }
          break;
        case 2:
          break;
        default:
          assertNever(values.heightType,);
      }
    }
    return sizeAfterApplyingConstraintsAndAspectRatio(width, height, values, {
      height: parentHeight ?? 0,
      width: parentWidth ?? 0,
    }, parentSizeInfo == null ? void 0 : parentSizeInfo.viewport,);
  },
  // Returns a parent-relative rect given concrete ConstraintValues.
  toRect: (values, parentSizeInfo = null, autoSize = null, pixelAlign = false, freeSpace = null,) => {
    let x = values.left || 0;
    let y = values.top || 0;
    const {
      width,
      height,
    } = ConstraintValues.toSize(values, parentSizeInfo, autoSize, freeSpace,);
    const parentSizeForPositioning = (parentSizeInfo == null ? void 0 : parentSizeInfo.positioning) ?? null;
    const positioningParentWidth = parentSizeForPositioning ? Animatable.getNumber(parentSizeForPositioning.width,) : null;
    const positioningParentHeight = parentSizeForPositioning ? Animatable.getNumber(parentSizeForPositioning.height,) : null;
    if (values.left !== null) {
      x = values.left;
    } else if (positioningParentWidth && values.right !== null) {
      x = positioningParentWidth - values.right - width;
    } else if (positioningParentWidth) {
      x = values.centerAnchorX * positioningParentWidth - width / 2;
    }
    if (values.top !== null) {
      y = values.top;
    } else if (positioningParentHeight && values.bottom !== null) {
      y = positioningParentHeight - values.bottom - height;
    } else if (positioningParentHeight) {
      y = values.centerAnchorY * positioningParentHeight - height / 2;
    }
    const f = {
      x,
      y,
      width,
      height,
    };
    if (pixelAlign) {
      return Rect.pixelAligned(f,);
    }
    return f;
  },
};
var defaultWidth = 200;
var defaultHeight = 200;
function getConstraintValue(constraint, value, parentSize, viewport,) {
  if (typeof value === 'string') {
    if (value.endsWith('%',) && parentSize) {
      switch (constraint) {
        case 'maxWidth':
        case 'minWidth':
          return parseFloat(value,) / 100 * parentSize.width;
        case 'maxHeight':
        case 'minHeight':
          return parseFloat(value,) / 100 * parentSize.height;
        default:
          break;
      }
    }
    if (value.endsWith('vh',)) {
      if (!viewport) return constraintValueForUncalculatedViewport(constraint,);
      switch (constraint) {
        case 'maxWidth':
        case 'minWidth':
          return parseFloat(value,) / 100 * viewport.width;
        case 'maxHeight':
        case 'minHeight':
          return parseFloat(value,) / 100 * viewport.height;
        default:
          break;
      }
    }
    return parseFloat(value,);
  }
  return value;
}
function constraintValueForUncalculatedViewport(constraint,) {
  switch (constraint) {
    case 'minWidth':
    case 'minHeight':
      return Number.NEGATIVE_INFINITY;
    case 'maxWidth':
    case 'maxHeight':
      return Number.POSITIVE_INFINITY;
    default:
      assertNever(constraint, 'unknown constraint key',);
  }
}
function constrainHeight(height, values, parentSize, viewport,) {
  if (values.minHeight) {
    height = Math.max(getConstraintValue('minHeight', values.minHeight, parentSize, viewport,), height,);
  }
  if (values.maxHeight) {
    height = Math.min(getConstraintValue('maxHeight', values.maxHeight, parentSize, viewport,), height,);
  }
  return height;
}
function constrainWidth(width, values, parentSize, viewport,) {
  if (values.minWidth) {
    width = Math.max(getConstraintValue('minWidth', values.minWidth, parentSize, viewport,), width,);
  }
  if (values.maxWidth) {
    width = Math.min(getConstraintValue('maxWidth', values.maxWidth, parentSize, viewport,), width,);
  }
  return width;
}
function sizeAfterApplyingConstraintsAndAspectRatio(width, height, values, parentSize, viewport,) {
  let w = constrainWidth(isFiniteNumber(width,) ? width : defaultWidth, values, parentSize, viewport,);
  let h = constrainHeight(isFiniteNumber(height,) ? height : defaultHeight, values, parentSize, viewport,);
  if (isFiniteNumber(values.aspectRatio,) && values.aspectRatio > 0) {
    if (isFiniteNumber(values.left,) && isFiniteNumber(values.right,)) {
      h = w / values.aspectRatio;
    } else if (isFiniteNumber(values.top,) && isFiniteNumber(values.bottom,)) {
      w = h * values.aspectRatio;
    } else if (values.widthType !== 0) {
      h = w / values.aspectRatio;
    } else {
      w = h * values.aspectRatio;
    }
  }
  return {
    width: w,
    height: h,
  };
}
function pinnedOffset(start2, end,) {
  if (!isFiniteNumber(start2,) || !isFiniteNumber(end,)) return null;
  return start2 + end;
}
function containsInvalidStringValues(props,) {
  if (typeof props.right === 'string') return true;
  if (typeof props.bottom === 'string') return true;
  if (typeof props.left === 'string' && (!props.center || props.center === 'y')) {
    return true;
  }
  if (typeof props.top === 'string' && (!props.center || props.center === 'x')) {
    return true;
  }
  return false;
}
function constraintsEnabled(props,) {
  if (!props._constraints) return false;
  if (containsInvalidStringValues(props,)) return false;
  return props._constraints.enabled;
}
function sizeFromFiniteNumberProps(props,) {
  const {
    size,
  } = props;
  let {
    width,
    height,
  } = props;
  if (isFiniteNumber(size,)) {
    if (width === void 0) {
      width = size;
    }
    if (height === void 0) {
      height = size;
    }
  }
  if (isFiniteNumber(width,) && isFiniteNumber(height,)) {
    return {
      width,
      height,
    };
  }
  return null;
}
function rectFromFiniteNumberProps(props,) {
  const size = sizeFromFiniteNumberProps(props,);
  if (size === null) {
    return null;
  }
  const {
    left,
    top,
  } = props;
  if (isFiniteNumber(left,) && isFiniteNumber(top,)) {
    return {
      x: left,
      y: top,
      ...size,
    };
  }
  return null;
}
function calculateRect(props, parentSize, pixelAlign = true,) {
  if (props.positionFixed || props.positionAbsolute) return null;
  const parentSizeDisabled = parentSize === 1 || parentSize === 2;
  if (!constraintsEnabled(props,) || parentSizeDisabled) {
    return rectFromFiniteNumberProps(props,);
  }
  const constraintValues = getConstraintValues(props,);
  const enabledParentSize = deprecatedParentSize(parentSize,);
  const parentSizeInfo = enabledParentSize
    ? {
      sizing: enabledParentSize,
      positioning: enabledParentSize,
      viewport: null,
    }
    : null;
  return ConstraintValues.toRect(constraintValues, parentSizeInfo, null, pixelAlign, null,);
}
function getConstraintValues(props,) {
  const {
    left,
    right,
    top,
    bottom,
    center,
    _constraints,
    size,
  } = props;
  let {
    width,
    height,
  } = props;
  if (width === void 0) {
    width = size;
  }
  if (height === void 0) {
    height = size;
  }
  const {
    aspectRatio: aspectRatio2,
    autoSize,
  } = _constraints;
  const constraintMask = ConstraintMask.quickfix({
    left: isFiniteNumber(left,),
    right: isFiniteNumber(right,),
    top: isFiniteNumber(top,),
    bottom: isFiniteNumber(bottom,),
    widthType: valueToDimensionType(width,),
    heightType: valueToDimensionType(height,),
    aspectRatio: aspectRatio2 || null,
    fixedSize: autoSize === true,
  },);
  let widthValue = null;
  let heightValue = null;
  let widthType = 0;
  let heightType = 0;
  if (constraintMask.widthType !== 0 && typeof width === 'string') {
    const parsedWidth = parseFloat(width,);
    if (width.endsWith('fr',)) {
      widthType = 3;
      widthValue = parsedWidth;
    } else if (width === 'auto') {
      widthType = 2;
    } else {
      widthType = 1;
      widthValue = parsedWidth / 100;
    }
  } else if (width !== void 0 && typeof width !== 'string') {
    widthValue = width;
  }
  if (constraintMask.heightType !== 0 && typeof height === 'string') {
    const parsedHeight = parseFloat(height,);
    if (height.endsWith('fr',)) {
      heightType = 3;
      heightValue = parsedHeight;
    } else if (height === 'auto') {
      heightType = 2;
    } else {
      heightType = 1;
      heightValue = parseFloat(height,) / 100;
    }
  } else if (height !== void 0 && typeof height !== 'string') {
    heightValue = height;
  }
  let centerAnchorX = 0.5;
  let centerAnchorY = 0.5;
  if (center === true || center === 'x') {
    constraintMask.left = false;
    if (typeof left === 'string') {
      centerAnchorX = parseFloat(left,) / 100;
    }
  }
  if (center === true || center === 'y') {
    constraintMask.top = false;
    if (typeof top === 'string') {
      centerAnchorY = parseFloat(top,) / 100;
    }
  }
  return {
    // Because we check isFiniteNumber when creating the masks,
    // We know that left, right, top and bottom are numbers if the mask is true for the corresponding value
    // We need to cast this because typescript does not understand that
    left: constraintMask.left ? left : null,
    right: constraintMask.right ? right : null,
    top: constraintMask.top ? top : null,
    bottom: constraintMask.bottom ? bottom : null,
    widthType,
    heightType,
    width: widthValue,
    height: heightValue,
    aspectRatio: constraintMask.aspectRatio || null,
    centerAnchorX,
    centerAnchorY,
    minHeight: props.minHeight,
    maxHeight: props.maxHeight,
    minWidth: props.minWidth,
    maxWidth: props.maxWidth,
  };
}
var ParentSizeState = /* @__PURE__ */ ((ParentSizeState2) => {
  ParentSizeState2[ParentSizeState2['Unknown'] = 0] = 'Unknown';
  ParentSizeState2[ParentSizeState2['Disabled'] = 1] = 'Disabled';
  ParentSizeState2[ParentSizeState2['DisabledForCurrentLevel'] = 2] = 'DisabledForCurrentLevel';
  return ParentSizeState2;
})(ParentSizeState || {},);
var ConstraintsContext = /* @__PURE__ */ React4.createContext({
  parentSize: 0,
  /* Unknown */
},);
function deprecatedParentSize(parentSize,) {
  if (parentSize === 0 || parentSize === 1 || parentSize === 2) {
    return null;
  }
  return parentSize;
}
function useParentSize() {
  return React4.useContext(ConstraintsContext,).parentSize;
}
function isSize(o,) {
  return typeof o === 'object';
}
var ProvideParentSize = (props) => {
  const currentParentSize = useParentSize();
  const {
    parentSize,
    children,
  } = props;
  const value = React4.useMemo(() => ({
    parentSize,
  }), [getParentWidth(parentSize,), getParentHeight(parentSize,),],);
  if (currentParentSize === 1) {
    return children
      ? /* @__PURE__ */ jsx3(Fragment, {
        children,
      },)
      : null;
  }
  return /* @__PURE__ */ jsx3(ConstraintsContext.Provider, {
    value,
    children,
  },);
};
function getParentWidth(parentSize,) {
  return isSize(parentSize,) ? parentSize.width : parentSize;
}
function getParentHeight(parentSize,) {
  return isSize(parentSize,) ? parentSize.height : parentSize;
}
function useProvideParentSize(node, parentSize,) {
  return /* @__PURE__ */ jsx3(ProvideParentSize, {
    parentSize,
    children: node,
  },);
}
function useConstraints(props,) {
  const parentSize = useParentSize();
  const calculatedRect = calculateRect(props, parentSize, true,);
  return calculatedRect;
}
function isAutoSized({
  width,
  height,
},) {
  return width === 'auto' || width === 'min-content' || height === 'auto' || height === 'min-content';
}
var ControlType = /* @__PURE__ */ ((ControlType2) => {
  ControlType2['Boolean'] = 'boolean';
  ControlType2['Number'] = 'number';
  ControlType2['String'] = 'string';
  ControlType2['RichText'] = 'richtext';
  ControlType2['FusedNumber'] = 'fusednumber';
  ControlType2['Enum'] = 'enum';
  ControlType2['SegmentedEnum'] = 'segmentedenum';
  ControlType2['Color'] = 'color';
  ControlType2['Image'] = 'image';
  ControlType2['ResponsiveImage'] = 'responsiveimage';
  ControlType2['File'] = 'file';
  ControlType2['ComponentInstance'] = 'componentinstance';
  ControlType2['Slot'] = 'slot';
  ControlType2['Array'] = 'array';
  ControlType2['EventHandler'] = 'eventhandler';
  ControlType2['Transition'] = 'transition';
  ControlType2['BoxShadow'] = 'boxshadow';
  ControlType2['Link'] = 'link';
  ControlType2['Date'] = 'date';
  ControlType2['Object'] = 'object';
  ControlType2['Font'] = 'font';
  ControlType2['PageScope'] = 'pagescope';
  ControlType2['ScrollSectionRef'] = 'scrollsectionref';
  ControlType2['CustomCursor'] = 'customcursor';
  ControlType2['Border'] = 'border';
  ControlType2['Cursor'] = 'cursor';
  ControlType2['Padding'] = 'padding';
  ControlType2['BorderRadius'] = 'borderradius';
  ControlType2['Gap'] = 'gap';
  ControlType2['CollectionReference'] = 'collectionreference';
  ControlType2['MultiCollectionReference'] = 'multicollectionreference';
  ControlType2['TrackingId'] = 'trackingid';
  ControlType2['VectorSetItem'] = 'vectorsetitem';
  ControlType2['LinkRelValues'] = 'linkrelvalues';
  return ControlType2;
})(ControlType || {},);
var isFlexboxGapSupportedCached;
function isFlexboxGapSupported() {
  if (isFlexboxGapSupportedCached !== void 0) {
    return isFlexboxGapSupportedCached;
  }
  const flex = document.createElement('div',);
  Object.assign(flex.style, {
    position: 'absolute',
    // avoid layout shift
    display: 'flex',
    flexDirection: 'column',
    rowGap: '1px',
  },);
  flex.appendChild(document.createElement('div',),);
  flex.appendChild(document.createElement('div',),);
  document.body.appendChild(flex,);
  const isSupported = flex.scrollHeight === 1;
  if (flex.parentNode) {
    flex.parentNode.removeChild(flex,);
  }
  isFlexboxGapSupportedCached = isSupported;
  return isSupported;
}
var flexboxGapNotSupportedClass = 'flexbox-gap-not-supported';
var initialized = false;
function installFlexboxGapWorkaroundIfNeeded() {
  if (initialized) return;
  initialized = true;
  if (isFlexboxGapSupported()) return;
  document.body.classList.add(flexboxGapNotSupportedClass,);
}
var richTextStylesRule = `
[data-framer-component-type="DeprecatedRichText"] p,
[data-framer-component-type="DeprecatedRichText"] div,
[data-framer-component-type="DeprecatedRichText"] h1,
[data-framer-component-type="DeprecatedRichText"] h2,
[data-framer-component-type="DeprecatedRichText"] h3,
[data-framer-component-type="DeprecatedRichText"] h4,
[data-framer-component-type="DeprecatedRichText"] h5,
[data-framer-component-type="DeprecatedRichText"] h6,
[data-framer-component-type="DeprecatedRichText"] li,
[data-framer-component-type="DeprecatedRichText"] ol,
[data-framer-component-type="DeprecatedRichText"] ul,
[data-framer-component-type="DeprecatedRichText"] span:not([data-text-fill]) {
    font-family: var(--framer-font-family, Inter, Inter Placeholder, sans-serif);
    font-style: var(--framer-font-style, normal);
    font-weight: var(--framer-font-weight, 400);
    color: var(--framer-text-color, #000);
    font-size: var(--framer-font-size, 16px);
    letter-spacing: var(--framer-letter-spacing, 0);
    text-transform: var(--framer-text-transform, none);
    text-decoration: var(--framer-text-decoration, none);
    line-height: var(--framer-line-height, 1.2em);
    text-align: var(--framer-text-alignment, start);
}
`;
var richTextParagraphSpacingStylesRule = `
[data-framer-component-type="DeprecatedRichText"] p:not(:first-child),
[data-framer-component-type="DeprecatedRichText"] div:not(:first-child),
[data-framer-component-type="DeprecatedRichText"] h1:not(:first-child),
[data-framer-component-type="DeprecatedRichText"] h2:not(:first-child),
[data-framer-component-type="DeprecatedRichText"] h3:not(:first-child),
[data-framer-component-type="DeprecatedRichText"] h4:not(:first-child),
[data-framer-component-type="DeprecatedRichText"] h5:not(:first-child),
[data-framer-component-type="DeprecatedRichText"] h6:not(:first-child),
[data-framer-component-type="DeprecatedRichText"] ol:not(:first-child),
[data-framer-component-type="DeprecatedRichText"] ul:not(:first-child),
[data-framer-component-type="DeprecatedRichText"] .framer-image:not(:first-child) {
    margin-top: var(--framer-paragraph-spacing, 0);
}
`;
var richTextBackgroundMaskStylesRule = `
[data-framer-component-type="DeprecatedRichText"] span[data-text-fill] {
    display: inline-block;
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
}
`;
var richTextLinkStylesRule = `
[data-framer-component-type="DeprecatedRichText"] a,
[data-framer-component-type="DeprecatedRichText"] a span:not([data-text-fill]) {
    font-family: var(--framer-link-font-family, var(--framer-font-family, Inter, Inter Placeholder, sans-serif));
    font-style: var(--framer-link-font-style, var(--framer-font-style, normal));
    font-weight: var(--framer-link-font-weight, var(--framer-font-weight, 400));
    color: var(--framer-link-text-color, var(--framer-text-color, #000));
    font-size: var(--framer-link-font-size, var(--framer-font-size, 16px));
    text-transform: var(--framer-link-text-transform, var(--framer-text-transform, none));
    text-decoration: var(--framer-link-text-decoration, var(--framer-text-decoration, none));
}
`;
var richTextLinkHoverStylesRule = `
[data-framer-component-type="DeprecatedRichText"] a:hover,
[data-framer-component-type="DeprecatedRichText"] a:hover span:not([data-text-fill]) {
    font-family: var(--framer-link-hover-font-family, var(--framer-link-font-family, var(--framer-font-family, Inter, Inter Placeholder, sans-serif)));
    font-style: var(--framer-link-hover-font-style, var(--framer-link-font-style, var(--framer-font-style, normal)));
    font-weight: var(--framer-link-hover-font-weight, var(--framer-link-font-weight, var(--framer-font-weight, 400)));
    color: var(--framer-link-hover-text-color, var(--framer-link-text-color, var(--framer-text-color, #000)));
    font-size: var(--framer-link-hover-font-size, var(--framer-link-font-size, var(--framer-font-size, 16px)));
    text-transform: var(--framer-link-hover-text-transform, var(--framer-link-text-transform, var(--framer-text-transform, none)));
    text-decoration: var(--framer-link-hover-text-decoration, var(--framer-link-text-decoration, var(--framer-text-decoration, none)));
}
`;
var richTextLinkCurrentStylesRule = `
[data-framer-component-type="DeprecatedRichText"] a[data-framer-page-link-current],
[data-framer-component-type="DeprecatedRichText"] a[data-framer-page-link-current] span:not([data-text-fill]):not([data-nested-link]) {
    font-family: var(--framer-link-current-font-family, var(--framer-link-font-family, var(--framer-font-family, Inter, Inter Placeholder, sans-serif)));
    font-style: var(--framer-link-current-font-style, var(--framer-link-font-style, var(--framer-font-style, normal)));
    font-weight: var(--framer-link-current-font-weight, var(--framer-link-font-weight, var(--framer-font-weight, 400)));
    color: var(--framer-link-current-text-color, var(--framer-link-text-color, var(--framer-text-color, #000)));
    font-size: var(--framer-link-current-font-size, var(--framer-link-font-size, var(--framer-font-size, 16px)));
    text-transform: var(--framer-link-current-text-transform, var(--framer-link-text-transform, var(--framer-text-transform, none)));
    text-decoration: var(--framer-link-current-text-decoration, var(--framer-link-text-decoration, var(--framer-text-decoration, none)));
}
`;
var richTextLinkCurrentHoverStylesRule = `
[data-framer-component-type="DeprecatedRichText"] a[data-framer-page-link-current]:hover,
[data-framer-component-type="DeprecatedRichText"] a[data-framer-page-link-current]:hover span:not([data-text-fill]):not([data-nested-link]) {
    font-family: var(--framer-link-hover-font-family, var(--framer-link-current-font-family, var(--framer-link-font-family, var(--framer-font-family, Inter, Inter Placeholder, sans-serif))));
    font-style: var(--framer-link-hover-font-style, var(--framer-link-current-font-style, var(--framer-link-font-style, var(--framer-font-style, normal))));
    font-weight: var(--framer-link-hover-font-weight, var(--framer-link-current-font-weight, var(--framer-link-font-weight, var(--framer-font-weight, 400))));
    color: var(--framer-link-hover-text-color, var(--framer-link-current-text-color, var(--framer-link-text-color, var(--framer-text-color, #000))));
    font-size: var(--framer-link-hover-font-size, var(--framer-link-current-font-size, var(--framer-link-font-size, var(--framer-font-size, 16px))));
    text-transform: var(--framer-link-hover-text-transform, var(--framer-link-current-text-transform, var(--framer-link-text-transform, var(--framer-text-transform, none))));
    text-decoration: var(--framer-link-hover-text-decoration, var(--framer-link-current-text-decoration, var(--framer-link-text-decoration, var(--framer-text-decoration, none))));
}
`;
var richTextBoldStylesRule = `
[data-framer-component-type="DeprecatedRichText"] strong {
    font-weight: bolder;
}
`;
var richTextItalicStylesRule = `
[data-framer-component-type="DeprecatedRichText"] em {
    font-style: italic;
}
`;
var richTextImageRule = `
[data-framer-component-type="DeprecatedRichText"] .framer-image {
    display: block;
    max-width: 100%;
    height: auto;
}
`;
var richTextBlockElementResetRule = `
[data-framer-component-type="DeprecatedRichText"] p,
[data-framer-component-type="DeprecatedRichText"] div,
[data-framer-component-type="DeprecatedRichText"] h1,
[data-framer-component-type="DeprecatedRichText"] h2,
[data-framer-component-type="DeprecatedRichText"] h3,
[data-framer-component-type="DeprecatedRichText"] h4,
[data-framer-component-type="DeprecatedRichText"] h5,
[data-framer-component-type="DeprecatedRichText"] h6 {
    margin: 0;
    padding: 0;
}
`;
var richTextStylesPresetResetRule = `
[data-framer-component-type="DeprecatedRichText"] .text-styles-preset-reset {
    --framer-font-family: Inter, Inter Placeholder, sans-serif;
    --framer-font-style: normal;
    --framer-font-weight: 500;
    --framer-text-color: #000;
    --framer-font-size: 16px;
    --framer-letter-spacing: 0;
    --framer-text-transform: none;
    --framer-text-decoration: none;
    --framer-line-height: 1.2em;
    --framer-text-alignment: start;
    --framer-font-open-type-features: normal;
    --font-variation-settings: normal;
}
`;
var richTextStylesList = `
[data-framer-component-type="DeprecatedRichText"] ul,
[data-framer-component-type="DeprecatedRichText"] ol {
    display: table;
    width: 100%;
    padding-left: 0;
    margin: 0;
}
`;
var richTextStylesListItem = `
[data-framer-component-type="DeprecatedRichText"] li {
    display: table-row;
    counter-increment: list-item;
    list-style: none;
}
`;
var richTextStylesNumberedListMarker = `
[data-framer-component-type="DeprecatedRichText"] ol > li::before {
    display: table-cell;
    width: 2.25ch;
    box-sizing: border-box;
    padding-right: 0.75ch;
    content: counter(list-item) ".";
    white-space: nowrap;
}
`;
var richTextStylesBulletedListMarker = `
[data-framer-component-type="DeprecatedRichText"] ul > li::before {
    display: table-cell;
    width: 2.25ch;
    box-sizing: border-box;
    padding-right: 0.75ch;
    content: "\u2022";
}
`;
var deprecatedRichTextCSSRules = [
  `[data-framer-component-type="DeprecatedRichText"] { cursor: inherit; }`,
  richTextStylesPresetResetRule,
  richTextBlockElementResetRule,
  richTextStylesRule,
  richTextParagraphSpacingStylesRule,
  richTextBackgroundMaskStylesRule,
  richTextLinkStylesRule,
  richTextLinkHoverStylesRule,
  richTextLinkCurrentStylesRule,
  richTextLinkCurrentHoverStylesRule,
  richTextBoldStylesRule,
  richTextItalicStylesRule,
  richTextImageRule,
  richTextStylesList,
  richTextStylesListItem,
  richTextStylesNumberedListMarker,
  richTextStylesBulletedListMarker,
];
var FormInputStyleVariableNames = /* @__PURE__ */ ((FormInputStyleVariableNames2) => {
  FormInputStyleVariableNames2['Padding'] = '--framer-input-padding';
  FormInputStyleVariableNames2['BorderRadiusTopLeft'] = '--framer-input-border-radius-top-left';
  FormInputStyleVariableNames2['BorderRadiusTopRight'] = '--framer-input-border-radius-top-right';
  FormInputStyleVariableNames2['BorderRadiusBottomRight'] = '--framer-input-border-radius-bottom-right';
  FormInputStyleVariableNames2['BorderRadiusBottomLeft'] = '--framer-input-border-radius-bottom-left';
  FormInputStyleVariableNames2['BorderColor'] = '--framer-input-border-color';
  FormInputStyleVariableNames2['BorderTopWidth'] = '--framer-input-border-top-width';
  FormInputStyleVariableNames2['BorderRightWidth'] = '--framer-input-border-right-width';
  FormInputStyleVariableNames2['BorderBottomWidth'] = '--framer-input-border-bottom-width';
  FormInputStyleVariableNames2['BorderLeftWidth'] = '--framer-input-border-left-width';
  FormInputStyleVariableNames2['BorderStyle'] = '--framer-input-border-style';
  FormInputStyleVariableNames2['Background'] = '--framer-input-background';
  FormInputStyleVariableNames2['FontFamily'] = '--framer-input-font-family';
  FormInputStyleVariableNames2['FontWeight'] = '--framer-input-font-weight';
  FormInputStyleVariableNames2['FontSize'] = '--framer-input-font-size';
  FormInputStyleVariableNames2['FontColor'] = '--framer-input-font-color';
  FormInputStyleVariableNames2['FontStyle'] = '--framer-input-font-style';
  FormInputStyleVariableNames2['FontLetterSpacing'] = '--framer-input-font-letter-spacing';
  FormInputStyleVariableNames2['FontTextAlignment'] = '--framer-input-font-text-alignment';
  FormInputStyleVariableNames2['FontLineHeight'] = '--framer-input-font-line-height';
  FormInputStyleVariableNames2['FontOpenType'] = '--framer-input-font-open-type-features';
  FormInputStyleVariableNames2['PlaceholderColor'] = '--framer-input-placeholder-color';
  FormInputStyleVariableNames2['BoxShadow'] = '--framer-input-box-shadow';
  FormInputStyleVariableNames2['FocusedBorderColor'] = '--framer-input-focused-border-color';
  FormInputStyleVariableNames2['FocusedBorderWidth'] = '--framer-input-focused-border-width';
  FormInputStyleVariableNames2['FocusedBorderStyle'] = '--framer-input-focused-border-style';
  FormInputStyleVariableNames2['FocusedBackground'] = '--framer-input-focused-background';
  FormInputStyleVariableNames2['FocusedBoxShadow'] = '--framer-input-focused-box-shadow';
  FormInputStyleVariableNames2['FocusedTransition'] = '--framer-input-focused-transition';
  FormInputStyleVariableNames2['BooleanCheckedBackground'] = '--framer-input-boolean-checked-background';
  FormInputStyleVariableNames2['BooleanCheckedBorderColor'] = '--framer-input-boolean-checked-border-color';
  FormInputStyleVariableNames2['BooleanCheckedBorderWidth'] = '--framer-input-boolean-checked-border-width';
  FormInputStyleVariableNames2['BooleanCheckedBorderStyle'] = '--framer-input-boolean-checked-border-style';
  FormInputStyleVariableNames2['BooleanCheckedBoxShadow'] = '--framer-input-boolean-checked-box-shadow';
  FormInputStyleVariableNames2['BooleanCheckedTransition'] = '--framer-input-boolean-checked-transition';
  FormInputStyleVariableNames2['InvalidTextColor'] = '--framer-input-invalid-text-color';
  FormInputStyleVariableNames2['IconBackgroundImage'] = '--framer-input-icon-image';
  FormInputStyleVariableNames2['IconMaskImage'] = '--framer-input-icon-mask-image';
  FormInputStyleVariableNames2['IconColor'] = '--framer-input-icon-color';
  FormInputStyleVariableNames2['WrapperHeight'] = '--framer-input-wrapper-height';
  return FormInputStyleVariableNames2;
})(FormInputStyleVariableNames || {},);
var Var = FormInputStyleVariableNames;
var inputClassName = 'framer-form-input';
var inputWrapperClassName = 'framer-form-input-wrapper';
var emptyValueClassName = 'framer-form-input-empty';
var forcedFocusClassName = 'framer-form-input-forced-focus';
var forcedCheckedClassName = 'framer-form-input-forced-checked';
function cssValue(value,) {
  if (typeof value === 'number') return value;
  if (value.startsWith('--',)) return css2.variable(value,);
  if (value === '') return '""';
  return value;
}
function css2(selector, declaration,) {
  let output = ' ';
  for (const key7 in declaration) {
    const value = declaration[key7];
    output += `${key7.replace(/([A-Z])/gu, '-$1',).toLowerCase()}: ${cssValue(value,)}; `;
  }
  return selector + ' {' + output + '}';
}
((css22) => {
  function variable(...variables) {
    const lastItem = variables[variables.length - 1];
    let value = lastItem.startsWith('--',) ? `var(${lastItem})` : lastItem;
    for (let index = variables.length - 2; index >= 0; index--) {
      const element = variables[index];
      value = `var(${element}, ${value})`;
    }
    return value;
  }
  css22.variable = variable;
})(css2 || (css2 = {}),);
var sharedInputCSS = [
  css2(`.${inputClassName}`, {
    padding: css2.variable(Var.Padding,),
    background: 'transparent',
    fontFamily: css2.variable(Var.FontFamily,),
    fontWeight: css2.variable(Var.FontWeight,),
    fontSize: css2.variable(Var.FontSize,),
    fontStyle: css2.variable(Var.FontStyle,),
    color: css2.variable(Var.FontColor,),
    fontFeatureSettings: css2.variable(Var.FontOpenType,),
    border: 'none',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    width: '100%',
    height: css2.variable(Var.WrapperHeight, '100%',),
    letterSpacing: css2.variable(Var.FontLetterSpacing,),
    textAlign: css2.variable(Var.FontTextAlignment,),
    lineHeight: css2.variable(Var.FontLineHeight,),
  },),
  css2(`.${inputClassName}:focus-visible`, {
    outline: 'none',
  },),
];
var inputWrapperCSS = /* @__PURE__ */ (() => [css2(`.${inputWrapperClassName}`, {
  overflow: 'hidden',
},),])();
var inputBorderAllSides =
  `var(${Var.BorderTopWidth}) var(${Var.BorderRightWidth}) var(${Var.BorderBottomWidth}) var(${Var.BorderLeftWidth})`;
var inputBorderCSS = [`.${inputWrapperClassName}:after {
        content: "";
        pointer-events: none;
        box-sizing: border-box;
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        border-top-left-radius: var(${Var.BorderRadiusTopLeft});
        border-top-right-radius: var(${Var.BorderRadiusTopRight});
        border-bottom-right-radius: var(${Var.BorderRadiusBottomRight});
        border-bottom-left-radius: var(${Var.BorderRadiusBottomLeft});
        border-color: var(${Var.BorderColor});
        border-top-width: var(${Var.BorderTopWidth});
        border-right-width: var(${Var.BorderRightWidth});
        border-bottom-width: var(${Var.BorderBottomWidth});
        border-left-width: var(${Var.BorderLeftWidth});
        border-style: var(${Var.BorderStyle});
        transition: var(${Var.FocusedTransition});
        transition-property: border-color, border-width, border-style, border-top-left-radius, border-top-right-radius, border-bottom-right-radius, border-bottom-left-radius;
    }`,];
var customValidityKey = 'customError';
var validKey = 'valid';
function isRelevantValidityStateKey(key7,) {
  return key7 !== customValidityKey && key7 !== validKey;
}
function isInvalid(validity,) {
  for (const key7 in validity) {
    if (!isRelevantValidityStateKey(key7,)) continue;
    if ((validity == null ? void 0 : validity[key7]) === true) return true;
  }
  return false;
}
function useCustomValidity(onValid, onInvalid, onChange, onBlur, onFocus,) {
  const isValidRef = React4.useRef(null,);
  const handleInvalid = React4.useCallback((e) => {
    if (!onInvalid) return;
    if (isValidRef.current === false) return;
    isValidRef.current = false;
    e.currentTarget.setCustomValidity(' ',);
    e.currentTarget.reportValidity();
    onInvalid(e,);
  }, [onInvalid,],);
  const handleChange = React4.useCallback((e) => {
    onChange == null ? void 0 : onChange(e,);
    if (!onInvalid && !onValid) return;
    const validity = e.target.validity;
    if (isValidRef.current === false && !isInvalid(validity,)) {
      e.currentTarget.setCustomValidity('',);
      e.target.reportValidity();
      isValidRef.current = true;
      onValid == null ? void 0 : onValid();
    }
  }, [onInvalid, onValid, onChange,],);
  const handleBlur = React4.useCallback((e) => {
    if (!onInvalid) {
      onBlur == null ? void 0 : onBlur(e,);
      return;
    }
    if (isValidRef.current === false) return;
    const validity = e.currentTarget.validity;
    if (isInvalid(validity,)) {
      handleInvalid(e,);
      return;
    }
    onBlur == null ? void 0 : onBlur(e,);
  }, [handleInvalid, onBlur, onInvalid,],);
  return React4.useMemo(() => {
    return {
      onInvalid: handleInvalid,
      onChange: handleChange,
      onBlur: handleBlur,
      onFocus,
    };
  }, [handleInvalid, handleChange, handleBlur, onFocus,],);
}
var iconSpacing = 10;
var iconSize = 16;
var inputIconCSSDeclaration = {
  content: '',
  display: 'block',
  position: 'absolute',
  right: 0,
  top: 0,
  bottom: 0,
  width: `${iconSize}px`,
  boxSizing: 'content-box',
  padding: css2.variable(Var.Padding,),
  border: 'none',
  pointerEvents: 'none',
  backgroundRepeat: 'no-repeat',
  backgroundSize: `${iconSize}px`,
  maskRepeat: 'no-repeat',
  maskSize: `${iconSize}px`,
  backgroundColor: css2.variable(Var.IconColor,),
};
function createRGBVariableFallbacks(variables, fallback,) {
  return css2.variable(...variables.flatMap((variable) => [`${variable}-rgb`, variable,]), fallback,);
}
var richTextCSSRules = /* @__PURE__ */ (() => [
  /* css */
  `
        p.framer-text,
        div.framer-text,
        figure.framer-text,
        h1.framer-text,
        h2.framer-text,
        h3.framer-text,
        h4.framer-text,
        h5.framer-text,
        h6.framer-text,
        ol.framer-text,
        ul.framer-text {
            margin: 0;
            padding: 0;
        }
    `, /* css */
  `
        p.framer-text,
        div.framer-text,
        h1.framer-text,
        h2.framer-text,
        h3.framer-text,
        h4.framer-text,
        h5.framer-text,
        h6.framer-text,
        li.framer-text,
        ol.framer-text,
        ul.framer-text,
        span.framer-text:not([data-text-fill]) {
            font-family: var(--framer-blockquote-font-family, var(--framer-font-family, Inter, Inter Placeholder, sans-serif));
            font-style: var(--framer-blockquote-font-style, var(--framer-font-style, normal));
            font-weight: var(--framer-blockquote-font-weight, var(--framer-font-weight, 400));
            color: var(--framer-blockquote-text-color, var(--framer-text-color, #000));
            font-size: calc(var(--framer-blockquote-font-size, var(--framer-font-size, 16px)) * var(--framer-font-size-scale, 1));
            letter-spacing: var(--framer-blockquote-letter-spacing, var(--framer-letter-spacing, 0));
            text-transform: var(--framer-blockquote-text-transform, var(--framer-text-transform, none));
            text-decoration: var(--framer-blockquote-text-decoration, var(--framer-text-decoration, none));
            line-height: var(--framer-blockquote-line-height, var(--framer-line-height, 1.2em));
            text-align: var(--framer-blockquote-text-alignment, var(--framer-text-alignment, start));
            -webkit-text-stroke-width: var(--framer-text-stroke-width, initial);
            -webkit-text-stroke-color: var(--framer-text-stroke-color, initial);
            -moz-font-feature-settings: var(--framer-font-open-type-features, initial);
            -webkit-font-feature-settings: var(--framer-font-open-type-features, initial);
            font-feature-settings: var(--framer-font-open-type-features, initial);
            font-variation-settings: var(--framer-font-variation-axes, normal);
            text-wrap: var(--framer-text-wrap-override, var(--framer-text-wrap));
        }
    `, /* css */
  `
        @supports not (color: color(display-p3 1 1 1)) {
            p.framer-text,
            div.framer-text,
            h1.framer-text,
            h2.framer-text,
            h3.framer-text,
            h4.framer-text,
            h5.framer-text,
            h6.framer-text,
            li.framer-text,
            ol.framer-text,
            ul.framer-text,
            span.framer-text:not([data-text-fill]) {
                color: ${createRGBVariableFallbacks(['--framer-blockquote-text-color', '--framer-text-color',], '#000',)};
                -webkit-text-stroke-color: ${createRGBVariableFallbacks(['--framer-text-stroke-color',], 'initial',)};
            }
        }
    `, /* css */
  `
        .framer-fit-text .framer-text {
            white-space: nowrap;
            white-space-collapse: preserve;
        }
    `, /* css */
  `
        strong.framer-text {
            font-family: var(--framer-blockquote-font-family-bold, var(--framer-font-family-bold));
            font-style: var(--framer-blockquote-font-style-bold, var(--framer-font-style-bold));
            font-weight: var(--framer-blockquote-font-weight-bold, var(--framer-font-weight-bold, bolder));
            font-variation-settings: var(--framer-blockquote-font-variation-axes-bold, var(--framer-font-variation-axes-bold));
        }
    `, /* css */
  `
        em.framer-text {
            font-family: var(--framer-blockquote-font-family-italic, var(--framer-font-family-italic));
            font-style: var(--framer-blockquote-font-style-italic, var(--framer-font-style-italic, italic));
            font-weight: var(--framer-blockquote-font-weight-italic, var(--framer-font-weight-italic));
            font-variation-settings: var(--framer-blockquote-font-variation-axes-italic, var(--framer-font-variation-axes-italic));
        }
    `, /* css */
  `
        em.framer-text > strong.framer-text {
            font-family: var(--framer-blockquote-font-family-bold-italic, var(--framer-font-family-bold-italic));
            font-style: var(--framer-blockquote-font-style-bold-italic, var(--framer-font-style-bold-italic, italic));
            font-weight: var(--framer-blockquote-font-weight-bold-italic, var(--framer-font-weight-bold-italic, bolder));
            font-variation-settings: var(--framer-blockquote-font-variation-axes-bold-italic, var(--framer-font-variation-axes-bold-italic));
        }
    `, /* css */
  `
        p.framer-text:not(:first-child),
        div.framer-text:not(:first-child),
        h1.framer-text:not(:first-child),
        h2.framer-text:not(:first-child),
        h3.framer-text:not(:first-child),
        h4.framer-text:not(:first-child),
        h5.framer-text:not(:first-child),
        h6.framer-text:not(:first-child),
        ol.framer-text:not(:first-child),
        ul.framer-text:not(:first-child),
        blockquote.framer-text:not(:first-child),
        table.framer-text:not(:first-child),
        figure.framer-text:not(:first-child),
        .framer-image.framer-text:not(:first-child) {
            margin-top: var(--framer-blockquote-paragraph-spacing, var(--framer-paragraph-spacing, 0));
        }
    `,
  // The first child of a list item is a paragraph. If the second child is a
  // nested list we don't want it to have paragraph spacing.
  /* css */
  `
        li.framer-text > ul.framer-text:nth-child(2),
        li.framer-text > ol.framer-text:nth-child(2) {
            margin-top: 0;
        }
    `,
  // background-clip: text clips to the physical dimensions of text as appose
  // to the rendered dimensions. normal text will bleed out side these
  // constraints but since this is just a clipping mask over the area the text
  // takes up we have cases where the text will get clipped. That is why we
  // need to expand the area that the gradient applies to to allow users to
  // use low line-heights. This will result in gradients not aligning
  // perfectly to the edges of the text. but this is a acceptable trade off at
  // this point. For now we increase the area of the clipping mask on the
  // bottom (for descenders) and the right for italic or wide fonts.
  /* css */
  `
        .framer-text[data-text-fill] {
            display: inline-block;
            background-clip: text;
            -webkit-background-clip: text;
            /* make this a transparent color if you want to visualise the clipping  */
            -webkit-text-fill-color: transparent;
            padding: max(0em, calc(calc(1.3em - var(--framer-blockquote-line-height, var(--framer-line-height, 1.3em))) / 2));
            margin: min(0em, calc(calc(1.3em - var(--framer-blockquote-line-height, var(--framer-line-height, 1.3em))) / -2));
        }
    `, /* css */
  `
        code.framer-text,
        code.framer-text span.framer-text:not([data-text-fill]) {
            font-family: var(--framer-code-font-family, var(--framer-font-family, Inter, Inter Placeholder, sans-serif));
            font-style: var(--framer-blockquote-font-style, var(--framer-code-font-style, var(--framer-font-style, normal)));
            font-weight: var(--framer-blockquote-font-weight, var(--framer-code-font-weight, var(--framer-font-weight, 400)));
            color: var(--framer-blockquote-text-color, var(--framer-code-text-color, var(--framer-text-color, #000)));
            font-size: calc(var(--framer-blockquote-font-size, var(--framer-font-size, 16px)) * var(--framer-font-size-scale, 1));
            letter-spacing: var(--framer-blockquote-letter-spacing, var(--framer-letter-spacing, 0));
            line-height: var(--framer-blockquote-line-height, var(--framer-line-height, 1.2em));
        }
    `, /* css */
  `
        @supports not (color: color(display-p3 1 1 1)) {
            code.framer-text,
            code.framer-text span.framer-text:not([data-text-fill]) {
                color: ${
    createRGBVariableFallbacks(['--framer-blockquote-text-color', '--framer-code-text-color', '--framer-text-color',], '#000',)
  };
            }
        }
    `, /* css */
  `
        blockquote.framer-text {
            margin-block-start: initial;
            margin-block-end: initial;
            margin-inline-start: initial;
            margin-inline-end: initial;
            unicode-bidi: initial;
        }
    `, /* css */
  `
        a.framer-text,
        a.framer-text span.framer-text:not([data-text-fill]),
        span.framer-text[data-nested-link],
        span.framer-text[data-nested-link] span.framer-text:not([data-text-fill]) {
            font-family: var(--framer-blockquote-font-family, var(--framer-link-font-family, var(--framer-font-family, Inter, Inter Placeholder, sans-serif)));
            font-style: var(--framer-blockquote-font-style, var(--framer-link-font-style, var(--framer-font-style, normal)));
            font-weight: var(--framer-blockquote-font-weight, var(--framer-link-font-weight, var(--framer-font-weight, 400)));
            color: var(--framer-blockquote-text-color, var(--framer-link-text-color, var(--framer-text-color, #000)));
            font-size: calc(var(--framer-blockquote-font-size, var(--framer-font-size, 16px)) * var(--framer-font-size-scale, 1));
            text-transform: var(--framer-blockquote-text-transform, var(--framer-link-text-transform, var(--framer-text-transform, none)));
            text-decoration: var(--framer-blockquote-text-decoration, var(--framer-link-text-decoration, var(--framer-text-decoration, none)));
            /* Cursor inherit to overwrite the user agent stylesheet on rich text links. */
            cursor: var(--framer-custom-cursors, pointer);
        }
    `, /* css */
  `
        @supports not (color: color(display-p3 1 1 1)) {
            a.framer-text,
            a.framer-text span.framer-text:not([data-text-fill]),
            span.framer-text[data-nested-link],
            span.framer-text[data-nested-link] span.framer-text:not([data-text-fill]) {
                color: ${
    createRGBVariableFallbacks(['--framer-blockquote-text-color', '--framer-link-text-color', '--framer-text-color',], '#000',)
  };
            }
        }
    `, /* css */
  `
        code.framer-text a.framer-text,
        code.framer-text a.framer-text span.framer-text:not([data-text-fill]),
        code.framer-text span.framer-text[data-nested-link],
        code.framer-text span.framer-text[data-nested-link] span.framer-text:not([data-text-fill]) {
            font-family: var(--framer-code-font-family, var(--framer-font-family, Inter, Inter Placeholder, sans-serif));
            font-style: var(--framer-blockquote-font-style, var(--framer-code-font-style, var(--framer-font-style, normal)));
            font-weight: var(--framer-blockquote-font-weight, var(--framer-code-font-weight, var(--framer-font-weight, 400)));
            color: var(--framer-blockquote-text-color, var(--framer-link-text-color, var(--framer-code-text-color, var(--framer-text-color, #000))));
            font-size: calc(var(--framer-blockquote-font-size, var(--framer-font-size, 16px)) * var(--framer-font-size-scale, 1));
        }
    `, /* css */
  `
        @supports not (color: color(display-p3 1 1 1)) {
            code.framer-text a.framer-text,
            code.framer-text a.framer-text span.framer-text:not([data-text-fill]),
            code.framer-text span.framer-text[data-nested-link],
            code.framer-text span.framer-text[data-nested-link] span.framer-text:not([data-text-fill]) {
                color: ${
    createRGBVariableFallbacks([
      '--framer-blockquote-text-color',
      '--framer-link-text-color',
      '--framer-code-text-color',
      '--framer-text-color',
    ], '#000',)
  };
            }
        }
    `, /* css */
  `
        a.framer-text:hover,
        a.framer-text:hover span.framer-text:not([data-text-fill]),
        span.framer-text[data-nested-link]:hover,
        span.framer-text[data-nested-link]:hover span.framer-text:not([data-text-fill]) {
            font-family: var(--framer-link-hover-font-family, var(--framer-blockquote-font-family, var(--framer-link-font-family, var(--framer-font-family, Inter, Inter Placeholder, sans-serif))));
            font-style: var(--framer-link-hover-font-style, var(--framer-blockquote-font-style, var(--framer-link-font-style, var(--framer-font-style, normal))));
            font-weight: var(--framer-link-hover-font-weight, var(--framer-blockquote-font-weight, var(--framer-link-font-weight, var(--framer-font-weight, 400))));
            color: var(--framer-link-hover-text-color, var(--framer-blockquote-text-color, var(--framer-link-text-color, var(--framer-text-color, #000))));
            font-size: calc(var(--framer-link-hover-font-size, var(--framer-blockquote-font-size, var(--framer-font-size, 16px))) * var(--framer-font-size-scale, 1));
            text-transform: var(--framer-link-hover-text-transform, var(--framer-blockquote-text-transform, var(--framer-link-text-transform, var(--framer-text-transform, none))));
            text-decoration: var(--framer-link-hover-text-decoration, var(--framer-blockquote-text-decoration, var(--framer-link-text-decoration, var(--framer-text-decoration, none))));
        }
    `, /* css */
  `
    @supports not (color: color(display-p3 1 1 1)) {
        a.framer-text:hover,
        a.framer-text:hover span.framer-text:not([data-text-fill]),
        span.framer-text[data-nested-link]:hover,
        span.framer-text[data-nested-link]:hover span.framer-text:not([data-text-fill]) {
            color: ${
    createRGBVariableFallbacks([
      '--framer-link-hover-text-color',
      '--framer-blockquote-text-color',
      '--framer-link-text-color',
      '--framer-text-color',
    ], '#000',)
  };
        }
    }
    `, /* css */
  `
        code.framer-text a.framer-text:hover,
        code.framer-text a.framer-text:hover span.framer-text:not([data-text-fill]),
        code.framer-text span.framer-text[data-nested-link]:hover,
        code.framer-text span.framer-text[data-nested-link]:hover span.framer-text:not([data-text-fill]) {
            font-family: var(--framer-code-font-family, var(--framer-font-family, Inter, Inter Placeholder, sans-serif));
            font-style: var(--framer-blockquote-font-style, var(--framer-code-font-style, var(--framer-font-style, normal)));
            font-weight: var(--framer-blockquote-font-weight, var(--framer-code-font-weight, var(--framer-font-weight, 400)));
            color: var(--framer-link-hover-text-color, var(--framer-blockquote-text-color, var(--framer-link-text-color, var(--framer-code-text-color, var(--framer-text-color, #000)))));
            font-size: calc(var(--framer-link-hover-font-size, var(--framer-blockquote-font-size, var(--framer-link-font-size, var(--framer-font-size, 16px)))) * var(--framer-font-size-scale, 1));
        }
    `, /* css */
  `
    @supports not (color: color(display-p3 1 1 1)) {
        code.framer-text a.framer-text:hover,
        code.framer-text a.framer-text:hover span.framer-text:not([data-text-fill]),
        code.framer-text span.framer-text[data-nested-link]:hover,
        code.framer-text span.framer-text[data-nested-link]:hover span.framer-text:not([data-text-fill]) {
            color: ${
    createRGBVariableFallbacks([
      '--framer-link-hover-text-color',
      '--framer-blockquote-text-color',
      '--framer-link-text-color',
      '--framer-text-color',
    ], '#000',)
  };
        }
    }
   `, /* css */
  `
        a.framer-text[data-framer-page-link-current],
        a.framer-text[data-framer-page-link-current] span.framer-text:not([data-text-fill]),
        span.framer-text[data-framer-page-link-current],
        span.framer-text[data-framer-page-link-current] span.framer-text:not([data-text-fill]) {
            font-family: var(--framer-link-current-font-family, var(--framer-link-font-family, var(--framer-font-family, Inter, Inter Placeholder, sans-serif)));
            font-style: var(--framer-link-current-font-style, var(--framer-link-font-style, var(--framer-font-style, normal)));
            font-weight: var(--framer-link-current-font-weight, var(--framer-link-font-weight, var(--framer-font-weight, 400)));
            color: var(--framer-link-current-text-color, var(--framer-link-text-color, var(--framer-text-color, #000)));
            font-size: calc(var(--framer-link-current-font-size, var(--framer-link-font-size, var(--framer-font-size, 16px))) * var(--framer-font-size-scale, 1));
            text-transform: var(--framer-link-current-text-transform, var(--framer-link-text-transform, var(--framer-text-transform, none)));
            text-decoration: var(--framer-link-current-text-decoration, var(--framer-link-text-decoration, var(--framer-text-decoration, none)));
        }
    `, /* css */
  `
        @supports not (color: color(display-p3 1 1 1)) {
            a.framer-text[data-framer-page-link-current],
            a.framer-text[data-framer-page-link-current] span.framer-text:not([data-text-fill]),
            span.framer-text[data-framer-page-link-current],
            span.framer-text[data-framer-page-link-current] span.framer-text:not([data-text-fill]) {
                color: ${
    createRGBVariableFallbacks(['--framer-link-current-text-color', '--framer-link-text-color', '--framer-text-color',], '#000',)
  };
            }
        }
    `, /* css */
  `
        code.framer-text a.framer-text[data-framer-page-link-current],
        code.framer-text a.framer-text[data-framer-page-link-current] span.framer-text:not([data-text-fill]),
        code.framer-text span.framer-text[data-framer-page-link-current],
        code.framer-text span.framer-text[data-framer-page-link-current] span.framer-text:not([data-text-fill]) {
            font-family: var(--framer-code-font-family, var(--framer-font-family, Inter, Inter Placeholder, sans-serif));
            font-style: var(--framer-code-font-style, var(--framer-font-style, normal));
            font-weight: var(--framer-code-font-weight, var(--framer-font-weight, 400));
            color: var(--framer-link-current-text-color, var(--framer-link-text-color, var(--framer-code-text-color, var(--framer-text-color, #000))));
            font-size: calc(var(--framer-link-current-font-size, var(--framer-link-font-size, var(--framer-font-size, 16px))) * var(--framer-font-size-scale, 1));
        }
    `, /* css */
  `
        @supports not (color: color(display-p3 1 1 1)) {
            code.framer-text a.framer-text[data-framer-page-link-current],
            code.framer-text a.framer-text[data-framer-page-link-current] span.framer-text:not([data-text-fill]),
            code.framer-text span.framer-text[data-framer-page-link-current],
            code.framer-text span.framer-text[data-framer-page-link-current] span.framer-text:not([data-text-fill]) {
                color: ${
    createRGBVariableFallbacks([
      '--framer-link-current-text-color',
      '--framer-link-text-color',
      '--framer-code-text-color',
      '--framer-text-color',
    ], '#000',)
  };
            }
        }
    `, /* css */
  `
        a.framer-text[data-framer-page-link-current]:hover,
        a.framer-text[data-framer-page-link-current]:hover span.framer-text:not([data-text-fill]),
        span.framer-text[data-framer-page-link-current]:hover,
        span.framer-text[data-framer-page-link-current]:hover span.framer-text:not([data-text-fill]) {
            font-family: var(--framer-link-hover-font-family, var(--framer-link-current-font-family, var(--framer-link-font-family, var(--framer-font-family, Inter, Inter Placeholder, sans-serif))));
            font-style: var(--framer-link-hover-font-style, var(--framer-link-current-font-style, var(--framer-link-font-style, var(--framer-font-style, normal))));
            font-weight: var(--framer-link-hover-font-weight, var(--framer-link-current-font-weight, var(--framer-link-font-weight, var(--framer-font-weight, 400))));
            color: var(--framer-link-hover-text-color, var(--framer-link-current-text-color, var(--framer-link-text-color, var(--framer-text-color, #000))));
            font-size: calc(var(--framer-link-hover-font-size, var(--framer-link-current-font-size, var(--framer-link-font-size, var(--framer-font-size, 16px)))) * var(--framer-font-size-scale, 1));
            text-transform: var(--framer-link-hover-text-transform, var(--framer-link-current-text-transform, var(--framer-link-text-transform, var(--framer-text-transform, none))));
            text-decoration: var(--framer-link-hover-text-decoration, var(--framer-link-current-text-decoration, var(--framer-link-text-decoration, var(--framer-text-decoration, none))));
        }
    `, /* css */
  `
        @supports not (color: color(display-p3 1 1 1)) {
            a.framer-text[data-framer-page-link-current]:hover,
            a.framer-text[data-framer-page-link-current]:hover span.framer-text:not([data-text-fill]),
            span.framer-text[data-framer-page-link-current]:hover,
            span.framer-text[data-framer-page-link-current]:hover span.framer-text:not([data-text-fill]) {
                color: ${
    createRGBVariableFallbacks([
      '--framer-link-hover-text-color',
      '--framer-link-current-text-color',
      '--framer-link-text-color',
      '--framer-code-text-color',
      '--framer-text-color',
    ], '#000',)
  };
            }
        }
    `, /* css */
  `
        code.framer-text a.framer-text[data-framer-page-link-current]:hover,
        code.framer-text a.framer-text[data-framer-page-link-current]:hover span.framer-text:not([data-text-fill]),
        code.framer-text span.framer-text[data-framer-page-link-current]:hover,
        code.framer-text span.framer-text[data-framer-page-link-current]:hover span.framer-text:not([data-text-fill]) {
            font-family: var(--framer-code-font-family, var(--framer-font-family, Inter, Inter Placeholder, sans-serif));
            font-style: var(--framer-code-font-style, var(--framer-font-style, normal));
            font-weight: var(--framer-code-font-weight, var(--framer-font-weight, 400));
            color: var(--framer-link-hover-text-color, var(--framer-link-current-text-color, var(--framer-link-text-color, var(--framer-code-text-color, var(--framer-text-color, #000)))));
            font-size: calc(var(--framer-link-hover-font-size, var(--framer-link-current-font-size, var(--framer-link-font-size, var(--framer-font-size, 16px)))) * var(--framer-font-size-scale, 1));
        }
    `, /* css */
  `
        @supports not (color: color(display-p3 1 1 1)) {
            code.framer-text a.framer-text[data-framer-page-link-current]:hover,
            code.framer-text a.framer-text[data-framer-page-link-current]:hover span.framer-text:not([data-text-fill]),
            code.framer-text span.framer-text[data-framer-page-link-current]:hover,
            code.framer-text span.framer-text[data-framer-page-link-current]:hover span.framer-text:not([data-text-fill]) {
                color: ${
    createRGBVariableFallbacks([
      '--framer-link-hover-text-color',
      '--framer-link-current-text-color',
      '--framer-link-text-color',
      '--framer-code-text-color',
      '--framer-text-color',
    ], '#000',)
  };
            }
        }
    `, /* css */
  `
        .framer-image.framer-text {
            display: block;
            max-width: 100%;
            height: auto;
        }
    `, /* css */
  `
        .text-styles-preset-reset.framer-text {
            --framer-font-family: Inter, Inter Placeholder, sans-serif;
            --framer-font-style: normal;
            --framer-font-weight: 500;
            --framer-text-color: #000;
            --framer-font-size: 16px;
            --framer-letter-spacing: 0;
            --framer-text-transform: none;
            --framer-text-decoration: none;
            --framer-line-height: 1.2em;
            --framer-text-alignment: start;
            --framer-font-open-type-features: normal;
        }
    `, /* css */
  `
        ol.framer-text {
            --list-style-type: decimal;
        }
    `,
  // Why all the `position: relative` and `position: absolute` and `::before` tricks?
  // We want ul’s disks and ol’s numbers to be left-aligned at the start of the line.
  // There’s no way to do that with ::marker styles alone, so we have to resort to this trick.
  /* css */
  `
        ul.framer-text,
        ol.framer-text {
            padding-left: 3ch;
            position: relative;
        }
    `, /* css */
  `
        li.framer-text {
            counter-increment: list-item;
            list-style: none;
        }
    `,
  // font-variant-numeric: tabular-nums enables monospaced numbers (which is neat in a vertical list of numbers)
  // and makes `li`s match the default browser styles better.
  /* css */
  `
        ol.framer-text > li.framer-text::before {
            position: absolute;
            left: 0;
            content: counter(list-item, var(--list-style-type)) ".";
            font-variant-numeric: tabular-nums;
        }
    `,
  // Why this? Due to `position: absolute` (see above), if a list has a lot of items, the numbers
  // might start overlapping the text content. This compensates for that. The trick is based on
  // https://alistapart.com/article/quantity-queries-for-css/#section6. The trick doesn’t account
  // for lists longer than 1,000,000 items, but if you have a list of 1,000,000 items, you’ll have
  // other problems ¯\_(ツ)_/¯
  /* css */
  `
        ol.framer-text > li.framer-text:nth-last-child(n + 100),
        ol.framer-text > li.framer-text:nth-last-child(n + 100) ~ li {
            padding-left: 1ch;
        }
    `, /* css */
  `
        ol.framer-text > li.framer-text:nth-last-child(n + 1000),
        ol.framer-text > li.framer-text:nth-last-child(n + 1000) ~ li {
            padding-left: 2ch;
        }
    `, /* css */
  `
        ol.framer-text > li.framer-text:nth-last-child(n + 10000),
        ol.framer-text > li.framer-text:nth-last-child(n + 10000) ~ li {
            padding-left: 3ch;
        }
    `, /* css */
  `
        ol.framer-text > li.framer-text:nth-last-child(n + 100000),
        ol.framer-text > li.framer-text:nth-last-child(n + 100000) ~ li {
            padding-left: 4ch;
        }
    `, /* css */
  `
        ol.framer-text > li.framer-text:nth-last-child(n + 1000000),
        ol.framer-text > li.framer-text:nth-last-child(n + 1000000) ~ li {
            padding-left: 5ch;
        }
    `, /* css */
  `
        ul.framer-text > li.framer-text::before {
            position: absolute;
            left: 0;
            content: "\u2022";
        }
    `, /* css */
  `
        .framer-table-wrapper {
            overflow-x: auto;
        }
    `, /* css */
  `
        table.framer-text,
        .framer-table-wrapper table.framer-text {
            border-collapse: separate;
            border-spacing: 0;
            table-layout: auto;
            word-break: normal;
            width: 100%;
        }
    `, /* css */
  `
        td.framer-text,
        th.framer-text {
            min-width: 16ch;
            vertical-align: top;
        }
    `, /* css */
  `
        .framer-text-module[style*="aspect-ratio"] > :first-child {
            width: 100%;
        }
    `, /* css */
  `
        @supports not (aspect-ratio: 1) {
            .framer-text-module[style*="aspect-ratio"] {
                position: relative;
            }
        }
    `, /* css */
  `
        @supports not (aspect-ratio: 1) {
            .framer-text-module[style*="aspect-ratio"]::before {
                content: "";
                display: block;
                padding-bottom: calc(100% / calc(var(--aspect-ratio)));
            }
        }
    `, /* css */
  `
        @supports not (aspect-ratio: 1) {
            .framer-text-module[style*="aspect-ratio"] > :first-child {
                position: absolute;
                top: 0;
                left: 0;
                height: 100%;
            }
        }
    `,
])();
var defaultCache = /* @__PURE__ */ new Set();
var defaultSheet;
function injectCSSRule(cssRule, sheet, cache2 = defaultCache,) {
  if (!cssRule || cache2.has(cssRule,) || typeof document === 'undefined') return;
  cache2.add(cssRule,);
  if (!sheet) {
    if (!defaultSheet) {
      const styleElement = document.createElement('style',);
      styleElement.setAttribute('type', 'text/css',);
      styleElement.setAttribute('data-framer-css', 'true',);
      if (!document.head) {
        console.warn('not injecting CSS: the document is missing a <head> element',);
        return;
      }
      document.head.appendChild(styleElement,);
      if (styleElement.sheet) {
        defaultSheet = styleElement.sheet;
      } else {
        console.warn('not injecting CSS: injected <style> element does not have a sheet', styleElement,);
        return;
      }
    }
    sheet = defaultSheet;
  }
  try {
    sheet.insertRule(cssRule, sheet.cssRules.length,);
  } catch {}
}
var componentCSSRules = [`[data-framer-component-type] { position: absolute; }`,];
var textAlignmentRule = `
[data-framer-component-type="Text"] > * {
    text-align: var(--framer-text-alignment, start);
}`;
var textBlockSpanRule = `
[data-framer-component-type="Text"] span span,
[data-framer-component-type="Text"] p span,
[data-framer-component-type="Text"] h1 span,
[data-framer-component-type="Text"] h2 span,
[data-framer-component-type="Text"] h3 span,
[data-framer-component-type="Text"] h4 span,
[data-framer-component-type="Text"] h5 span,
[data-framer-component-type="Text"] h6 span {
    display: block;
}`;
var textInlineSpanRule = `
[data-framer-component-type="Text"] span span span,
[data-framer-component-type="Text"] p span span,
[data-framer-component-type="Text"] h1 span span,
[data-framer-component-type="Text"] h2 span span,
[data-framer-component-type="Text"] h3 span span,
[data-framer-component-type="Text"] h4 span span,
[data-framer-component-type="Text"] h5 span span,
[data-framer-component-type="Text"] h6 span span {
    display: unset;
}`;
var renderTextStylesRule = `
[data-framer-component-type="Text"] div div span,
[data-framer-component-type="Text"] a div span,
[data-framer-component-type="Text"] span span span,
[data-framer-component-type="Text"] p span span,
[data-framer-component-type="Text"] h1 span span,
[data-framer-component-type="Text"] h2 span span,
[data-framer-component-type="Text"] h3 span span,
[data-framer-component-type="Text"] h4 span span,
[data-framer-component-type="Text"] h5 span span,
[data-framer-component-type="Text"] h6 span span,
[data-framer-component-type="Text"] a {
    font-family: var(--font-family);
    font-style: var(--font-style);
    font-weight: min(calc(var(--framer-font-weight-increase, 0) + var(--font-weight, 400)), 900);
    color: var(--text-color);
    letter-spacing: var(--letter-spacing);
    font-size: var(--font-size);
    text-transform: var(--text-transform);
    text-decoration: var(--text-decoration);
    line-height: var(--line-height);
}`;
var textStylesRule = `
[data-framer-component-type="Text"] div div span,
[data-framer-component-type="Text"] a div span,
[data-framer-component-type="Text"] span span span,
[data-framer-component-type="Text"] p span span,
[data-framer-component-type="Text"] h1 span span,
[data-framer-component-type="Text"] h2 span span,
[data-framer-component-type="Text"] h3 span span,
[data-framer-component-type="Text"] h4 span span,
[data-framer-component-type="Text"] h5 span span,
[data-framer-component-type="Text"] h6 span span,
[data-framer-component-type="Text"] a {
    --font-family: var(--framer-font-family);
    --font-style: var(--framer-font-style);
    --font-weight: var(--framer-font-weight);
    --text-color: var(--framer-text-color);
    --letter-spacing: var(--framer-letter-spacing);
    --font-size: var(--framer-font-size);
    --text-transform: var(--framer-text-transform);
    --text-decoration: var(--framer-text-decoration);
    --line-height: var(--framer-line-height);
}`;
var linkStylesRule = `
[data-framer-component-type="Text"] a,
[data-framer-component-type="Text"] a div span,
[data-framer-component-type="Text"] a span span span,
[data-framer-component-type="Text"] a p span span,
[data-framer-component-type="Text"] a h1 span span,
[data-framer-component-type="Text"] a h2 span span,
[data-framer-component-type="Text"] a h3 span span,
[data-framer-component-type="Text"] a h4 span span,
[data-framer-component-type="Text"] a h5 span span,
[data-framer-component-type="Text"] a h6 span span {
    --font-family: var(--framer-link-font-family, var(--framer-font-family));
    --font-style: var(--framer-link-font-style, var(--framer-font-style));
    --font-weight: var(--framer-link-font-weight, var(--framer-font-weight));
    --text-color: var(--framer-link-text-color, var(--framer-text-color));
    --font-size: var(--framer-link-font-size, var(--framer-font-size));
    --text-transform: var(--framer-link-text-transform, var(--framer-text-transform));
    --text-decoration: var(--framer-link-text-decoration, var(--framer-text-decoration));
}`;
var linkHoverStylesRule = `
[data-framer-component-type="Text"] a:hover,
[data-framer-component-type="Text"] a div span:hover,
[data-framer-component-type="Text"] a span span span:hover,
[data-framer-component-type="Text"] a p span span:hover,
[data-framer-component-type="Text"] a h1 span span:hover,
[data-framer-component-type="Text"] a h2 span span:hover,
[data-framer-component-type="Text"] a h3 span span:hover,
[data-framer-component-type="Text"] a h4 span span:hover,
[data-framer-component-type="Text"] a h5 span span:hover,
[data-framer-component-type="Text"] a h6 span span:hover {
    --font-family: var(--framer-link-hover-font-family, var(--framer-link-font-family, var(--framer-font-family)));
    --font-style: var(--framer-link-hover-font-style, var(--framer-link-font-style, var(--framer-font-style)));
    --font-weight: var(--framer-link-hover-font-weight, var(--framer-link-font-weight, var(--framer-font-weight)));
    --text-color: var(--framer-link-hover-text-color, var(--framer-link-text-color, var(--framer-text-color)));
    --font-size: var(--framer-link-hover-font-size, var(--framer-link-font-size, var(--framer-font-size)));
    --text-transform: var(--framer-link-hover-text-transform, var(--framer-link-text-transform, var(--framer-text-transform)));
    --text-decoration: var(--framer-link-hover-text-decoration, var(--framer-link-text-decoration, var(--framer-text-decoration)));
}`;
var linkCurrentStylesRule = `
[data-framer-component-type="Text"].isCurrent a,
[data-framer-component-type="Text"].isCurrent a div span,
[data-framer-component-type="Text"].isCurrent a span span span,
[data-framer-component-type="Text"].isCurrent a p span span,
[data-framer-component-type="Text"].isCurrent a h1 span span,
[data-framer-component-type="Text"].isCurrent a h2 span span,
[data-framer-component-type="Text"].isCurrent a h3 span span,
[data-framer-component-type="Text"].isCurrent a h4 span span,
[data-framer-component-type="Text"].isCurrent a h5 span span,
[data-framer-component-type="Text"].isCurrent a h6 span span {
    --font-family: var(--framer-link-current-font-family, var(--framer-link-font-family, var(--framer-font-family)));
    --font-style: var(--framer-link-current-font-style, var(--framer-link-font-style, var(--framer-font-style)));
    --font-weight: var(--framer-link-current-font-weight, var(--framer-link-font-weight, var(--framer-font-weight)));
    --text-color: var(--framer-link-current-text-color, var(--framer-link-text-color, var(--framer-text-color)));
    --font-size: var(--framer-link-current-font-size, var(--framer-link-font-size, var(--framer-font-size)));
    --text-transform: var(--framer-link-current-text-transform, var(--framer-link-text-transform, var(--framer-text-transform)));
    --text-decoration: var(--framer-link-current-text-decoration, var(--framer-link-text-decoration, var(--framer-text-decoration)));
}`;
var textCSSRules = [
  `[data-framer-component-type="Text"] { cursor: inherit; }`,
  `[data-framer-component-text-autosized] * { white-space: pre; }`,
  textAlignmentRule,
  textBlockSpanRule,
  textInlineSpanRule,
  renderTextStylesRule,
  textStylesRule,
  linkStylesRule,
  linkHoverStylesRule,
  linkCurrentStylesRule,
];
var stackPositionRule = `
:not([data-framer-generated]) > [data-framer-stack-content-wrapper] > *,
:not([data-framer-generated]) > [data-framer-stack-content-wrapper] > [data-framer-component-type],
:not([data-framer-generated]) > [data-framer-stack-content-wrapper] > [data-framer-legacy-stack-gap-enabled] > *,
:not([data-framer-generated]) > [data-framer-stack-content-wrapper] > [data-framer-legacy-stack-gap-enabled] > [data-framer-component-type] {
    position: relative;
}`;
var nativeStackGapRules = /* @__PURE__ */ (() => [
  `[data-framer-stack-content-wrapper][data-framer-stack-gap-enabled="true"] {
        row-gap: var(--stack-native-row-gap);
        column-gap: var(--stack-native-column-gap);
    }`,
  `.${flexboxGapNotSupportedClass} [data-framer-stack-content-wrapper][data-framer-stack-gap-enabled="true"] {
        row-gap: unset;
        column-gap: unset;
    }`,
])();
var stackGapRule = /* @__PURE__ */ (() => `
.${flexboxGapNotSupportedClass} [data-framer-legacy-stack-gap-enabled="true"] > *, [data-framer-legacy-stack-gap-enabled="true"][data-framer-stack-flexbox-gap="false"] {
    margin-top: calc(var(--stack-gap-y) / 2);
    margin-bottom: calc(var(--stack-gap-y) / 2);
    margin-right: calc(var(--stack-gap-x) / 2);
    margin-left: calc(var(--stack-gap-x) / 2);
}
`)();
var stackDirectionRuleVertical = /* @__PURE__ */ (() => `
.${flexboxGapNotSupportedClass}
[data-framer-stack-direction-reverse="false"]
[data-framer-legacy-stack-gap-enabled="true"]
> *:first-child,
[data-framer-stack-direction-reverse="false"]
[data-framer-legacy-stack-gap-enabled="true"][data-framer-stack-flexbox-gap="false"]
> *:first-child,
.${flexboxGapNotSupportedClass}
[data-framer-stack-direction-reverse="true"]
[data-framer-legacy-stack-gap-enabled="true"]
> *:last-child,
[data-framer-stack-direction-reverse="true"]
[data-framer-legacy-stack-gap-enabled="true"][data-framer-stack-flexbox-gap="false"]
> *:last-child {
    margin-top: 0;
    margin-left: 0;
}`)();
var stackDirectionRuleHorizontal = /* @__PURE__ */ (() => `
.${flexboxGapNotSupportedClass}
[data-framer-stack-direction-reverse="false"]
[data-framer-legacy-stack-gap-enabled="true"]
> *:last-child,
[data-framer-stack-direction-reverse="false"]
[data-framer-legacy-stack-gap-enabled="true"][data-framer-stack-flexbox-gap="false"]
> *:last-child,
.${flexboxGapNotSupportedClass}
[data-framer-stack-direction-reverse="true"]
[data-framer-legacy-stack-gap-enabled="true"]
> *:first-child,
[data-framer-stack-direction-reverse="true"]
[data-framer-legacy-stack-gap-enabled="true"][data-framer-stack-flexbox-gap="false"]
> *:first-child {
    margin-right: 0;
    margin-bottom: 0;
}`)();
var stackCSSRules =
  /* @__PURE__ */ (() => [
    stackPositionRule,
    stackGapRule,
    ...nativeStackGapRules,
    stackDirectionRuleVertical,
    stackDirectionRuleHorizontal,
  ])();
var navigationCSSRules = [`
NavigationContainer
[data-framer-component-type="NavigationContainer"] > *,
[data-framer-component-type="NavigationContainer"] > [data-framer-component-type] {
    position: relative;
}`,];
var scrollCSSRules = [
  `[data-framer-component-type="Scroll"]::-webkit-scrollbar { display: none; }`,
  `[data-framer-component-type="ScrollContentWrapper"] > * { position: relative; }`,
];
var nativeScrollCSSRules = [
  `[data-framer-component-type="NativeScroll"] { -webkit-overflow-scrolling: touch; }`,
  `[data-framer-component-type="NativeScroll"] > * { position: relative; }`,
  `[data-framer-component-type="NativeScroll"].direction-both { overflow-x: scroll; overflow-y: scroll; }`,
  `[data-framer-component-type="NativeScroll"].direction-vertical { overflow-x: hidden; overflow-y: scroll; }`,
  `[data-framer-component-type="NativeScroll"].direction-horizontal { overflow-x: scroll; overflow-y: hidden; }`,
  `[data-framer-component-type="NativeScroll"].direction-vertical > * { width: 100% !important; }`,
  `[data-framer-component-type="NativeScroll"].direction-horizontal > * { height: 100% !important; }`,
  `[data-framer-component-type="NativeScroll"].scrollbar-hidden::-webkit-scrollbar { display: none; }`,
];
var deviceComponentCSSRules = [
  `[data-framer-component-type="DeviceComponent"].no-device > * { width: 100% !important; height: 100% !important; }`,
];
var pageContentWrapperWrapperCSSRules = [
  `[data-framer-component-type="PageContentWrapper"] > *, [data-framer-component-type="PageContentWrapper"] > [data-framer-component-type] { position: relative; }`,
];
var presenceCSS = [`[data-is-present="false"], [data-is-present="false"] * { pointer-events: none !important; }`,];
var cursorCSS = [
  `[data-framer-cursor="pointer"] { cursor: pointer; }`,
  `[data-framer-cursor="grab"] { cursor: grab; }`,
  `[data-framer-cursor="grab"]:active { cursor: grabbing; }`,
];
var frameCSS = [
  // Non-sites prototyping projects render with FrameWithMotion and Stacks. In
  // that context this rule ensures pointer events work in a specific way
  // designed for prototypes that we don't care about anymore in sites. We
  // can't remove it for legacy reasons, but sites will never render any
  // elements that are impacted by this rule. However, users can still use the
  // <Frame> api in code, at which point this rule will kick in. We don't
  // encourage the use of this API anymore, and bugs that come from this will
  // be the user's concern.
  `[data-framer-component-type="Frame"] *, [data-framer-component-type="Stack"] * { pointer-events: auto; }`,
  // This is fully deprecated, and will never exist in code that is generated
  // after 24/01/2023. There will be existing code-generated that depends on
  // this rule existing, so we can't remove it.
  `[data-framer-generated] * { pointer-events: unset }`,
];
var resetCSS = [`[data-reset="button"] {
        border-width: 0;
        padding: 0;
        background: none;
}`,];
var hideScrollbars = [
  `[data-hide-scrollbars="true"]::-webkit-scrollbar { width: 0px; height: 0px; }`,
  `[data-hide-scrollbars="true"]::-webkit-scrollbar-thumb { background: transparent; }`,
  `[data-hide-scrollbars="true"] { scrollbar-width: none; }`,
];
var willChangeOverrideCSSVariable = '--framer-will-change-override';
var willChangeEffectOverrideCSSVariable = '--framer-will-change-effect-override';
var anySafariVersion = '(background: -webkit-named-image(i))';
var safari16OrGreater = '(grid-template-rows: subgrid)';
var willChangeTransformRules = (isPreview) =>
  isPreview
    ? [
      `body { ${willChangeOverrideCSSVariable}: none; }`,
      `@supports ${anySafariVersion} and (not ${safari16OrGreater}) { body { ${willChangeOverrideCSSVariable}: transform; } }`,
    ]
    : [`body { ${willChangeOverrideCSSVariable}: none; ${willChangeEffectOverrideCSSVariable}: none; }`,];
var frameCSSRules = (isPreview) => {
  return isPreview ? frameCSS : [];
};
var svgCSSRules = [`.svgContainer svg { display: block; }`,];
var combineCSSRules =
  (isPreview) => [
    ...willChangeTransformRules(isPreview,),
    ...componentCSSRules,
    ...textCSSRules,
    ...richTextCSSRules,
    ...deprecatedRichTextCSSRules,
    ...stackCSSRules,
    ...navigationCSSRules,
    ...scrollCSSRules,
    ...nativeScrollCSSRules,
    ...pageContentWrapperWrapperCSSRules,
    ...deviceComponentCSSRules,
    ...presenceCSS,
    ...cursorCSS,
    ...frameCSSRules(isPreview,),
    ...svgCSSRules,
    ...resetCSS,
    ...hideScrollbars,
  ];
export var combinedCSSRules = /* @__PURE__ */ combineCSSRules(false,);
var combinedCSSRulesForPreview = /* @__PURE__ */ combineCSSRules(true,);
var didInject = false;
function injectComponentCSSRules() {
  if (didInject) return;
  didInject = true;
  const styles4 = RenderTarget.current() === RenderTarget.preview ? combinedCSSRulesForPreview : combinedCSSRules;
  for (const rule of styles4) {
    injectCSSRule(rule, void 0, void 0,);
  }
}
function isReactComponent(component,) {
  return isObject2(component,) || isFunction(component,);
}
var optionalKey = 'optional';
function controlIsOptional(control,) {
  return !!control && optionalKey in control && control[optionalKey] === true;
}
function shouldBeNever(_,) {}
function getControlDefaultValue(control,) {
  try {
    switch (control.type) {
      case 'string':
      case 'collectionreference':
      case 'multicollectionreference':
      case 'color':
      case 'date':
      case 'link':
      case 'boxshadow':
      case 'padding':
      case 'borderradius':
      case 'gap':
        return isString(control.defaultValue,) ? control.defaultValue : void 0;
      case 'boolean':
        return isBoolean(control.defaultValue,) ? control.defaultValue : void 0;
      case 'enum':
        if (isUndefined(control.defaultValue,)) return void 0;
        return control.options.includes(control.defaultValue,) ? control.defaultValue : void 0;
      case 'fusednumber':
      case 'number':
        return isNumber2(control.defaultValue,) ? control.defaultValue : void 0;
      case 'transition':
        return isObject2(control.defaultValue,) ? control.defaultValue : void 0;
      case 'border':
        return isObject2(control.defaultValue,) ? control.defaultValue : void 0;
      case 'font':
        return isObject2(control.defaultValue,) ? control.defaultValue : void 0;
      case 'linkrelvalues':
        return isArray(control.defaultValue,) ? control.defaultValue : void 0;
      case 'object': {
        const value = isObject2(control.defaultValue,) ? control.defaultValue : {};
        if (isObject2(control.controls,)) {
          applyControlDefaultsToDefaultProps(value, control.controls,);
        }
        return value;
      }
      case 'array':
        return isArray(control.defaultValue,) ? control.defaultValue : void 0;
      case 'file':
      case 'image':
      case 'richtext':
      case 'pagescope':
      case 'eventhandler':
      case 'segmentedenum':
      case 'responsiveimage':
      case 'componentinstance':
      case 'slot':
      case 'scrollsectionref':
      case 'customcursor':
      case 'cursor':
      case 'trackingid':
      case 'vectorsetitem':
        return void 0;
      // No default
      default:
        shouldBeNever(control,);
        return void 0;
    }
  } catch {
    return void 0;
  }
}
function applyControlDefaultsToDefaultProps(defaultProps, controls,) {
  for (const controlKey in controls) {
    const control = controls[controlKey];
    if (!control) continue;
    const currentDefault = defaultProps[controlKey];
    if (!isUndefined(currentDefault,)) continue;
    if (controlIsOptional(control,)) continue;
    const defaultValue = getControlDefaultValue(control,);
    if (isUndefined(defaultValue,)) continue;
    defaultProps[controlKey] = defaultValue;
  }
}
function getDefaultProps(component,) {
  if (isObject2(component.defaultProps,)) {
    return component.defaultProps;
  }
  const defaultProps = {};
  component.defaultProps = defaultProps;
  return defaultProps;
}
function applyControlDefaultsToReactDefaultProps(component, controls,) {
  if (!isReactComponent(component,)) return;
  const defaultProps = getDefaultProps(component,);
  applyControlDefaultsToDefaultProps(defaultProps, controls,);
}
function addPropertyControls(component, propertyControls,) {
  Object.assign(component, {
    propertyControls,
  },);
  applyControlDefaultsToReactDefaultProps(component, propertyControls,);
}
function getPropertyControls(component,) {
  return component.propertyControls;
}
var defaultPresetId = 'iphone-12-pro';
var presetsBase = /* @__PURE__ */ (() => ({
  iPhonePro: {
    // Screen mask takes care of the rounded screen corners for iPhones Pro,
    // and actually using a radius here produces visual artifacts in Chrome.
    screenRadius: (
      /* 38 */
      0
    ),
    clayBezelLeft: 21,
    clayBezelRight: 21,
    clayBezelTop: 21,
    clayBezelBottom: 21,
    clayBezelRadius: 38 + 21,
  },
  iPhone8: {
    screenRadius: 0,
    clayBezelLeft: 24,
    clayBezelRight: 24,
    clayBezelTop: 96,
    clayBezelBottom: 96,
    clayBezelRadius: 38 * 1.5,
  },
  iPadPro: {
    screenRadius: 25,
    clayBezelLeft: 38,
    clayBezelRight: 38,
    clayBezelTop: 38,
    clayBezelBottom: 38,
    clayBezelRadius: 25 + 38,
  },
  desktop: {
    clayBezelLeft: 20,
    clayBezelRight: 20,
    clayBezelTop: 20,
    clayBezelBottom: 20,
    clayBezelRadius: 20,
  },
}))();
var devicePresets = /* @__PURE__ */ (() => [{
  id: 'iphone-12',
  title: 'iPhone 12',
  screenRadius: 0,
  clayBezelLeft: 22,
  clayBezelRight: 22,
  clayBezelTop: 22,
  clayBezelBottom: 22,
  clayBezelRadius: 66,
  screenWidth: 390,
  screenHeight: 844,
  externalClay: {
    width: 500,
    height: 974,
    screenOffsetTop: 65,
    screenOffsetLeft: 55,
  },
  screenMask:
    '<g style="transform: scale(0.5);"><path d="M171.2 0c2.3 0 4 .5 5.4 1.3 1.6 1 2.8 2.2 3.7 3.8.8 1.6 1.2 2.3 1.2 4.9 0 12 2.2 19 6.2 26.5s9.8 13.3 17.3 17.4c7.5 4 15.8 6.1 30.6 6.1h311.5c14.3 0 22.5-2.2 29.9-6.1 7.5-4 13.3-10 17.3-17.4 4-7.5 6.2-14.5 6.2-26.5 0-2.6.4-3.2 1.1-4.9.8-1.6 2-2.9 3.4-3.8 1.4-.8 3.2-1.3 5.4-1.3h54.2c40.1 0 54.7 4.2 69.4 12a81.8 81.8 0 0134 34c7.8 14.7 12 29.3 12 69.4v1457.2c0 40.1-4.2 54.7-12 69.4a81.8 81.8 0 01-34 34c-14.7 7.8-29.3 12-69.4 12H115.4c-40.1 0-54.7-4.2-69.4-12a81.8 81.8 0 01-34-34c-7.8-14.7-12-29.3-12-69.4V115.4C0 75.3 4.2 60.7 12 46a81.8 81.8 0 0134-34C60.7 4.2 75.3 0 115.4 0h55.4z" fill="#000" fill-rule="evenodd"/></g>',
  realisticImage: {
    width: 490,
    height: 944,
    screenOffsetLeft: 50,
    screenOffsetTop: 50,
    availableColors: [{
      id: 'black',
      title: 'Black',
      colorValue: '#2E2C36',
    }, {
      id: 'white',
      title: 'White',
      colorValue: '#F7F3F0',
    }, {
      id: 'blue',
      title: 'Blue',
      colorValue: '#14496D',
    }, {
      id: 'green',
      title: 'Green',
      colorValue: '#DAF0D9',
    }, {
      id: 'red',
      title: 'Red',
      colorValue: '#DB4141',
    },],
    handOffset: {
      left: 29,
      right: 29,
      bottom: 29,
    },
  },
}, {
  id: 'iphone-12-mini',
  title: 'iPhone 12 Mini',
  screenRadius: 0,
  clayBezelLeft: 22,
  clayBezelRight: 22,
  clayBezelTop: 22,
  clayBezelBottom: 22,
  clayBezelRadius: 66,
  screenWidth: 360,
  screenHeight: 780,
  externalClay: {
    width: 450,
    height: 890,
    screenOffsetTop: 55,
    screenOffsetLeft: 45,
  },
  screenMask:
    '<g style="transform: scale(0.5);"><path d="M142 18c0 19 14 47 43 48h349c31 0 44-29 44-48 0-12 4-18 14-18h18c38 0 52 4 66 11 14 8 25 19 33 33v1c7 14 11 28 11 65v1340c0 38-4 52-11 66-8 14-19 25-33 33h-1c-14 7-28 11-65 11H110c-38 0-52-4-66-11-14-8-25-19-33-33v-1c-7-13-11-27-11-64V110c0-38 4-52 11-66 8-14 19-25 33-33h1C58 4 72 0 109 0h16c11 0 17 6 17 18z" fill="#000" fill-rule="evenodd"/></g>',
  realisticImage: {
    width: 460,
    height: 880,
    screenOffsetLeft: 50,
    screenOffsetTop: 50,
    availableColors: [{
      id: 'black',
      title: 'Black',
      colorValue: '#2E2C36',
    }, {
      id: 'white',
      title: 'White',
      colorValue: '#F7F3F0',
    }, {
      id: 'blue',
      title: 'Blue',
      colorValue: '#14496D',
    }, {
      id: 'green',
      title: 'Green',
      colorValue: '#DAF0D9',
    }, {
      id: 'red',
      title: 'Red',
      colorValue: '#DB4141',
    },],
    handOffset: {
      left: 31.5,
      right: 30.5,
      bottom: 30,
    },
  },
}, {
  id: 'iphone-12-pro',
  title: 'iPhone 12 Pro',
  screenRadius: 0,
  clayBezelLeft: 22,
  clayBezelRight: 22,
  clayBezelTop: 22,
  clayBezelBottom: 22,
  clayBezelRadius: 66,
  screenWidth: 390,
  screenHeight: 844,
  externalClay: {
    width: 494,
    height: 968,
    screenOffsetTop: 62,
    screenOffsetLeft: 52,
  },
  screenMask:
    '<g style="transform: scale(0.5);"><path d="M171.2 0c2.3 0 4 .5 5.4 1.3 1.6 1 2.8 2.2 3.7 3.8.8 1.6 1.2 2.3 1.2 4.9 0 12 2.2 19 6.2 26.5s9.8 13.3 17.3 17.4c7.5 4 15.8 6.1 30.6 6.1h311.5c14.3 0 22.5-2.2 29.9-6.1 7.5-4 13.3-10 17.3-17.4 4-7.5 6.2-14.5 6.2-26.5 0-2.6.4-3.2 1.1-4.9.8-1.6 2-2.9 3.4-3.8 1.4-.8 3.2-1.3 5.4-1.3h54.2c40.1 0 54.7 4.2 69.4 12a81.8 81.8 0 0134 34c7.8 14.7 12 29.3 12 69.4v1457.2c0 40.1-4.2 54.7-12 69.4a81.8 81.8 0 01-34 34c-14.7 7.8-29.3 12-69.4 12H115.4c-40.1 0-54.7-4.2-69.4-12a81.8 81.8 0 01-34-34c-7.8-14.7-12-29.3-12-69.4V115.4C0 75.3 4.2 60.7 12 46a81.8 81.8 0 0134-34C60.7 4.2 75.3 0 115.4 0h55.4z" fill="#000" fill-rule="evenodd"/></g>',
  realisticImage: {
    width: 490,
    height: 944,
    screenOffsetLeft: 50,
    screenOffsetTop: 50,
    availableColors: [{
      id: 'graphite',
      title: 'Graphite',
      colorValue: '#585753',
    }, {
      id: 'silver',
      title: 'Silver',
      colorValue: '#E5E6E1',
    }, {
      id: 'pacific-blue',
      title: 'Pacific Blue',
      colorValue: '#415D6C',
    }, {
      id: 'gold',
      title: 'Gold',
      colorValue: '#FCECD5',
    },],
    handOffset: {
      left: 29,
      right: 29,
      bottom: 29,
    },
  },
}, {
  id: 'iphone-12-pro-max',
  title: 'iPhone 12 Pro Max',
  screenRadius: 50,
  // to prevent leaking pixel in the corners, see https://github.com/framer/company/issues/20429
  clayBezelLeft: 22,
  clayBezelRight: 22,
  clayBezelTop: 22,
  clayBezelBottom: 22,
  clayBezelRadius: 66,
  screenWidth: 428,
  screenHeight: 926,
  externalClay: {
    width: 532,
    height: 1050,
    screenOffsetTop: 62,
    screenOffsetLeft: 52,
  },
  screenMask:
    '<path d="M102 0c6 0 7 3 7 9 0 10 7 23 24 23h164c13 0 22-12 22-23 0-6 1-9 7-9h34c24 0 32 2 41 7s15 11 20 20 7 17 7 41v790c0 24-2 32-7 41s-11 15-20 20-17 7-41 7H68c-24 0-32-2-41-7s-15-11-20-20-7-17-7-41V68c0-24 2-32 7-41S18 12 27 7s17-7 41-7h34z" fill="#000" fill-rule="evenodd"/>',
  realisticImage: {
    width: 528,
    height: 1026,
    screenOffsetLeft: 50,
    screenOffsetTop: 50,
    availableColors: [{
      id: 'graphite',
      title: 'Graphite',
      colorValue: '#585753',
    }, {
      id: 'silver',
      title: 'Silver',
      colorValue: '#E5E6E1',
    }, {
      id: 'pacific-blue',
      title: 'Pacific Blue',
      colorValue: '#415D6C',
    }, {
      id: 'gold',
      title: 'Gold',
      colorValue: '#FCECD5',
    },],
    handOffset: {
      left: 28.5,
      right: 28,
      bottom: 29,
    },
  },
}, {
  id: 'iphone-11',
  title: 'iPhone 11',
  // Screen mask takes care of the rounded screen corners for iPhones Pro,
  // and actually using a radius here produces visual artifacts in Chrome.
  screenRadius: (
    /* 38 */
    0
  ),
  clayBezelLeft: 35.5,
  clayBezelRight: 35.5,
  clayBezelTop: 35.5,
  clayBezelBottom: 35.5,
  clayBezelRadius: 77,
  screenWidth: 414,
  screenHeight: 896,
  externalClay: {
    width: 524,
    height: 1026,
    screenOffsetTop: 65,
    screenOffsetLeft: 55,
  },
  screenMask:
    '<path d="M85.5 0C89.1 0 92 3 92 6.5c.3 6 1.5 10 3.4 13.5 2.2 4.1 5.5 7.4 9.6 9.6 4.2 2.2 8.9 3.4 17 3.4h170c8.1 0 12.8-1.2 17-3.4 4.1-2.2 7.4-5.5 9.6-9.6A31 31 0 00322 6.5c0-3.6 3-6.5 6.5-6.5h32.3c18.5 0 25.2 2 32 5.5 6.7 3.7 12 9 15.7 15.7 3.6 6.8 5.5 13.5 5.5 32v789.6c0 18.5-2 25.2-5.5 32-3.7 6.7-9 12-15.7 15.7-6.8 3.6-13.5 5.5-32 5.5H53.2c-18.5 0-25.2-2-32-5.5-6.7-3.7-12-9-15.7-15.7C2 868 0 861.3 0 842.8V53.2c0-18.5 2-25.2 5.5-32 3.7-6.7 9-12 15.7-15.7C28 2 34.7 0 53.2 0h32.3z" fill="#000" fill-rule="nonzero"/>',
  realisticImage: {
    width: 514,
    height: 996,
    screenOffsetLeft: 50,
    screenOffsetTop: 50,
    availableColors: [{
      id: 'black',
      title: 'Black',
      colorValue: '#202120',
    }, {
      id: 'white',
      title: 'White',
      colorValue: '#F9F6EF',
    }, {
      id: 'purple',
      title: 'Purple',
      colorValue: '#D1CDDB',
    }, {
      id: 'green',
      title: 'Green',
      colorValue: '#ADE0CD',
    }, {
      id: 'red',
      title: 'Red',
      colorValue: '#B90D2E',
    }, {
      id: 'yellow',
      title: 'Yellow',
      colorValue: '#FFE680',
    },],
    handOffset: {
      left: 14.5,
      right: 14.5,
      bottom: 14.5,
    },
  },
}, {
  id: 'iphone-11-pro',
  title: 'iPhone 11 Pro',
  ...presetsBase.iPhonePro,
  screenWidth: 375,
  screenHeight: 812,
  externalClay: {
    width: 485,
    height: 942,
    screenOffsetTop: 65,
    screenOffsetLeft: 55,
  },
  screenMask:
    '<path d="M292 8.668V9c0 9.266-7.07 21-23.332 21h-162C90.402 30 83.332 18.266 83.332 9v-.332c0-4.285 0-8.668-7.664-8.668H43.332C16.312 0 0 16.313 0 43.332v725.336C0 795.688 16.313 812 43.332 812h288.336c27.02 0 43.332-16.313 43.332-43.332V43.332C375 16.312 358.687 0 331.668 0h-32C292 0 292 4.383 292 8.668zm0 0"/>',
  realisticImage: {
    width: 475,
    height: 912,
    screenOffsetLeft: 50,
    screenOffsetTop: 50,
    availableColors: [{
      id: 'space-grey',
      title: 'Space Grey',
      colorValue: '#52514F',
    }, {
      id: 'silver',
      title: 'Silver',
      colorValue: '#EBEBE3',
    }, {
      id: 'gold',
      title: 'Gold',
      colorValue: '#FBD7BD',
    }, {
      id: 'midnight-green',
      title: 'Midnight Green',
      colorValue: '#4F5850',
    },],
    handOffset: {
      left: 24.5,
      right: 24.5,
      bottom: 23.5,
    },
  },
}, {
  id: 'iphone-11-pro-max',
  title: 'iPhone 11 Pro Max',
  ...presetsBase.iPhonePro,
  screenWidth: 414,
  screenHeight: 896,
  externalClay: {
    width: 524,
    height: 1026,
    screenOffsetTop: 65,
    screenOffsetLeft: 55,
  },
  screenMask:
    '<path d="M96 0c3.313 0 5.91 2.688 6 6 .18 6.645 1.191 10.148 2.938 13.41 1.917 3.586 4.73 6.402 8.316 8.317 3.586 1.918 7.441 2.941 15.445 2.941h156.602c8.004 0 11.86-1.023 15.445-2.941 3.586-1.915 6.399-4.73 8.317-8.317 1.746-3.265 2.746-6.758 2.937-13.41.094-3.313 2.688-6 6-6h46.004c17.387 0 23.687 1.809 30.043 5.21 6.355 3.4 11.344 8.388 14.742 14.743C412.191 26.31 414 32.61 414 49.996v796.008c0 17.387-1.809 23.687-5.21 30.043-3.4 6.355-8.388 11.344-14.743 14.742-6.356 3.402-12.656 5.211-30.043 5.211H49.996c-17.387 0-23.687-1.809-30.043-5.21-6.355-3.4-11.344-8.388-14.742-14.743C1.809 869.69 0 863.39 0 846.004V49.996C0 32.61 1.809 26.31 5.21 19.953c3.4-6.355 8.388-11.344 14.743-14.742C26.31 1.809 32.61 0 49.996 0zm0 0"/>',
  realisticImage: {
    width: 514,
    height: 996,
    screenOffsetLeft: 50,
    screenOffsetTop: 50,
    availableColors: [{
      id: 'space-grey',
      title: 'Space Grey',
      colorValue: '#52514F',
    }, {
      id: 'silver',
      title: 'Silver',
      colorValue: '#EBEBE3',
    }, {
      id: 'gold',
      title: 'Gold',
      colorValue: '#FBD7BD',
    }, {
      id: 'midnight-green',
      title: 'Midnight Green',
      colorValue: '#4F5850',
    },],
    handOffset: {
      left: 23.5,
      right: 24.5,
      bottom: 24,
    },
  },
}, {
  id: 'iphone-8',
  title: 'iPhone 8',
  ...presetsBase.iPhone8,
  screenWidth: 375,
  screenHeight: 667,
  externalClay: {
    width: 491,
    height: 971,
    screenOffsetLeft: 58,
    screenOffsetTop: 152,
  },
  realisticImage: {
    width: 475,
    height: 927,
    screenOffsetLeft: 50,
    screenOffsetTop: 130,
    availableColors: [{
      id: 'space-grey',
      title: 'Space Grey',
      colorValue: '#28282A',
    }, {
      id: 'silver',
      title: 'Silver',
      colorValue: '#DFE1E2',
    }, {
      id: 'gold',
      title: 'Gold',
      colorValue: '#F6E6DB',
    },],
    handOffset: {
      left: 22,
      right: 22,
      bottom: 18.5,
    },
  },
}, {
  id: 'iphone-8-plus',
  title: 'iPhone 8 Plus',
  ...presetsBase.iPhone8,
  screenWidth: 414,
  screenHeight: 736,
  externalClay: {
    width: 530,
    height: 1064,
    screenOffsetLeft: 58,
    screenOffsetTop: 164,
  },
  realisticImage: {
    width: 514,
    height: 996,
    screenOffsetLeft: 50,
    screenOffsetTop: 130,
    availableColors: [{
      id: 'space-grey',
      title: 'Space Grey',
      colorValue: '#28282A',
    }, {
      id: 'silver',
      title: 'Silver',
      colorValue: '#DFE1E2',
    }, {
      id: 'gold',
      title: 'Gold',
      colorValue: '#F6E6DB',
    },],
    handOffset: {
      left: 21,
      right: 20.5,
      bottom: 19,
    },
  },
}, {
  id: 'iphone-se',
  title: 'iPhone SE',
  screenWidth: 320,
  screenHeight: 568,
  screenRadius: 0,
  clayBezelLeft: 20,
  clayBezelRight: 20,
  clayBezelTop: 112,
  clayBezelBottom: 112,
  clayBezelRadius: 38 * 1.5,
  externalClay: {
    width: 436,
    height: 872,
    screenOffsetLeft: 58,
    screenOffsetTop: 152,
  },
  realisticImage: {
    width: 420,
    height: 828,
    screenOffsetLeft: 50,
    screenOffsetTop: 130,
    availableColors: [{
      id: 'space-grey',
      title: 'Space Grey',
      colorValue: '#C3C4C8',
    }, {
      id: 'silver',
      title: 'Silver',
      colorValue: '#E1E2E4',
    }, {
      id: 'gold',
      title: 'Gold',
      colorValue: '#EFD8BD',
    }, {
      id: 'rose-gold',
      title: 'Rose Gold',
      colorValue: '#F7CFCA',
    },],
    handOffset: {
      left: 22,
      right: 22,
      bottom: 26.5,
    },
  },
}, {
  id: 'samsung-galaxy-s7',
  title: 'Samsung Galaxy S7',
  screenRadius: 0,
  clayBezelLeft: 22,
  clayBezelRight: 22,
  clayBezelTop: 22,
  clayBezelBottom: 22,
  clayBezelRadius: 66,
  screenWidth: 360,
  screenHeight: 640,
  externalClay: {
    width: 454,
    height: 880,
    screenOffsetTop: 120,
    screenOffsetLeft: 47,
  },
  realisticImage: {
    width: 440,
    height: 860,
    screenOffsetLeft: 40,
    screenOffsetTop: 110,
    availableColors: [{
      id: 'black',
      title: 'Black',
      colorValue: '#2E2C36',
    }, {
      id: 'white',
      title: 'White',
      colorValue: '#F7F3F0',
    }, {
      id: 'silver',
      title: 'Silver',
      colorValue: '#E5E6E1',
    }, {
      id: 'gold',
      title: 'Gold',
      colorValue: '#FCECD5',
    },],
    handOffset: {
      left: 26,
      right: 25.5,
      bottom: 32,
    },
  },
}, // deprecated
{
  id: 'samsung-note-10',
  title: 'Samsung Note 10',
  screenWidth: 360,
  screenHeight: 760,
  screenRadius: 10,
  clayBezelLeft: 7,
  clayBezelRight: 7,
  clayBezelTop: 15,
  clayBezelBottom: 15,
  clayBezelRadius: 15,
}, {
  id: 'pixel-5',
  title: 'Google Pixel 5',
  screenRadius: 31,
  clayBezelLeft: 22,
  clayBezelRight: 22,
  clayBezelTop: 22,
  clayBezelBottom: 22,
  clayBezelRadius: 66,
  screenWidth: 360,
  screenHeight: 780,
  externalClay: {
    width: 460,
    height: 900,
    screenOffsetTop: 60,
    screenOffsetLeft: 50,
  },
  realisticImage: {
    width: 920 / 2,
    height: 1760 / 2,
    screenOffsetLeft: 100 / 2,
    screenOffsetTop: 100 / 2,
    availableColors: [{
      id: 'just-black',
      title: 'Just Black',
      colorValue: '#2E2C36',
    }, {
      id: 'sorta-sage',
      title: 'Sorta Sage',
      colorValue: '#B7C9C0',
    },],
    handOffset: {
      left: 31.5,
      right: 31,
      bottom: 31,
      /* 1t */
    },
  },
}, {
  id: 'pixel-4',
  title: 'Google Pixel 4',
  screenWidth: 360,
  screenHeight: 760,
  screenRadius: 34,
  clayBezelLeft: 10,
  clayBezelRight: 10,
  clayBezelTop: 50,
  clayBezelBottom: 25,
  clayBezelRadius: 50,
  externalClay: {
    width: 460,
    height: 938,
    screenOffsetLeft: 50,
    screenOffsetTop: 89,
  },
  realisticImage: {
    width: 460,
    height: 920,
    screenOffsetLeft: 50,
    screenOffsetTop: 80,
    availableColors: [{
      id: 'clearly-white',
      title: 'Clearly White',
      colorValue: '#EAEDF2',
    }, {
      id: 'just-black',
      title: 'Just Black',
      colorValue: '#1A1A1A',
    }, {
      id: 'oh-so-orange',
      title: 'Oh So Orange',
      colorValue: '#FF7A68',
    },],
    handOffset: {
      left: 35.5,
      right: 35.5,
      bottom: 57,
      /* 1t */
    },
  },
}, // Desktop ------------------------------------------------------------------------------------------------------------------------
{
  id: 'macbook-air',
  title: 'MacBook Air',
  screenWidth: 1440,
  screenHeight: 900,
  disableRotation: true,
  externalClay: {
    width: 1890,
    height: 1125,
    screenOffsetLeft: 225,
    screenOffsetTop: 98,
  },
  realisticImage: {
    width: 3848 / 2,
    height: 2240 / 2,
    screenOffsetLeft: 484 / 2,
    screenOffsetTop: 196 / 2,
    availableColors: [{
      id: 'silver',
      title: 'Silver',
      colorValue: '#E5E6E1',
    }, {
      id: 'space-grey',
      title: 'Space Grey',
      colorValue: '#B1B5B7',
    }, {
      id: 'gold',
      title: 'Gold',
      colorValue: '#FCECD5',
    },],
  },
}, {
  id: 'macbook-pro-13',
  title: `MacBook Pro 13"`,
  screenWidth: 1440,
  screenHeight: 900,
  disableRotation: true,
  externalClay: {
    width: 1914,
    height: 1169,
    screenOffsetLeft: 236,
    screenOffsetTop: 109,
  },
  realisticImage: {
    width: 3916 / 2,
    height: 2330 / 2,
    screenOffsetLeft: 518 / 2,
    screenOffsetTop: 218 / 2,
    availableColors: [{
      id: 'silver',
      title: 'Silver',
      colorValue: '#E5E6E1',
    }, {
      id: 'space-grey',
      title: 'Space Grey',
      colorValue: '#B1B5B7',
    },],
  },
}, {
  id: 'macbook-pro-16',
  title: `MacBook Pro 16"`,
  screenWidth: 1536,
  screenHeight: 960,
  disableRotation: true,
  externalClay: {
    width: 1984,
    height: 1179,
    screenOffsetLeft: 225,
    screenOffsetTop: 78,
  },
  realisticImage: {
    width: 4032 / 2,
    height: 2348 / 2,
    screenOffsetLeft: 480 / 2,
    screenOffsetTop: 148 / 2,
    availableColors: [{
      id: 'silver',
      title: 'Silver',
      colorValue: '#E5E6E1',
    }, {
      id: 'space-grey',
      title: 'Space Grey',
      colorValue: '#B1B5B7',
    },],
  },
}, {
  id: 'imac-21-5',
  title: `iMac 21.5"`,
  screenWidth: 2048,
  screenHeight: 1152,
  disableRotation: true,
  externalClay: {
    width: 2288,
    height: 1892,
    screenOffsetLeft: 120,
    screenOffsetTop: 120,
  },
  realisticImage: {
    width: 4562 / 2,
    height: 3796 / 2,
    screenOffsetLeft: 232 / 2,
    screenOffsetTop: 244 / 2,
  },
}, {
  id: 'imac-27',
  title: `iMac 27"`,
  screenWidth: 2560,
  screenHeight: 1440,
  disableRotation: true,
  externalClay: {
    width: 2848,
    height: 2351,
    screenOffsetLeft: 144,
    screenOffsetTop: 151,
  },
  realisticImage: {
    width: 5676 / 2,
    height: 4720 / 2,
    screenOffsetLeft: 278 / 2,
    screenOffsetTop: 292 / 2,
    availableColors: [{
      id: 'silver',
      title: 'Silver',
      colorValue: '#E5E6E1',
    }, {
      id: 'pro',
      title: 'Pro',
      colorValue: '#5F5E63',
    },],
  },
}, {
  id: 'pro-display-xdr',
  title: `Pro Display XDR`,
  screenWidth: 3008,
  screenHeight: 1692,
  disableRotation: true,
  externalClay: {
    width: 3148,
    height: 2325,
    screenOffsetLeft: 70,
    screenOffsetTop: 60,
  },
  realisticImage: {
    width: 6276 / 2,
    height: 4695 / 2,
    screenOffsetLeft: 130 / 2,
    screenOffsetTop: 130 / 2,
  },
}, {
  id: 'dell-xps',
  title: `Dell XPS`,
  screenWidth: 1920,
  screenHeight: 1080,
  disableRotation: true,
  externalClay: {
    width: 2624,
    height: 1381,
    screenOffsetLeft: 352,
    screenOffsetTop: 57,
  },
  realisticImage: {
    width: 5412 / 2,
    height: 2746 / 2,
    screenOffsetLeft: 786 / 2,
    screenOffsetTop: 108 / 2,
  },
}, {
  id: 'surface-book',
  title: `Microsoft Surface Book`,
  screenWidth: 1500,
  screenHeight: 1e3,
  disableRotation: true,
  externalClay: {
    width: 2089,
    height: 1234,
    screenOffsetLeft: 296,
    screenOffsetTop: 93,
  },
  realisticImage: {
    width: 4200 / 2,
    height: 2508 / 2,
    screenOffsetLeft: 600 / 2,
    screenOffsetTop: 210 / 2,
  },
}, // Tablets ------------------------------------------------------------------------------------------------------------------------
{
  id: 'ipad',
  title: 'iPad',
  screenRadius: 0,
  screenWidth: 810,
  screenHeight: 1080,
  clayBezelLeft: 30,
  clayBezelRight: 30,
  clayBezelTop: 95,
  clayBezelBottom: 95,
  clayBezelRadius: 0,
  externalClay: {
    width: 966,
    height: 1378,
    screenOffsetLeft: 78,
    screenOffsetTop: 149,
  },
  realisticImage: {
    width: 1920 / 2,
    height: 2720 / 2,
    screenOffsetLeft: 75,
    screenOffsetTop: 140,
    availableColors: [{
      id: 'space-grey',
      title: 'Space Grey',
      colorValue: '#C3C4C8',
    }, {
      id: 'silver',
      title: 'Silver',
      colorValue: '#E1E2E4',
    }, {
      id: 'gold',
      title: 'Gold',
      colorValue: '#EFD8BD',
    },],
  },
}, {
  id: 'ipad-mini',
  title: 'iPad Mini',
  screenRadius: 0,
  clayBezelLeft: 49,
  clayBezelRight: 49,
  clayBezelTop: 49,
  clayBezelBottom: 49,
  clayBezelRadius: 49,
  screenWidth: 768,
  screenHeight: 1024,
  externalClay: {
    width: 924,
    height: 1384,
    screenOffsetLeft: 78,
    screenOffsetTop: 180,
  },
  realisticImage: {
    width: 1856 / 2,
    height: 2728 / 2,
    screenOffsetLeft: 160 / 2,
    screenOffsetTop: 340 / 2,
    availableColors: [{
      id: 'space-grey',
      title: 'Space Grey',
      colorValue: '#C3C4C8',
    }, {
      id: 'silver',
      title: 'Silver',
      colorValue: '#E1E2E4',
    }, {
      id: 'gold',
      title: 'Gold',
      colorValue: '#EFD8BD',
    },],
  },
}, {
  id: 'ipad-air',
  title: 'iPad Air',
  screenRadius: 18,
  clayBezelLeft: 49,
  clayBezelRight: 49,
  clayBezelTop: 49,
  clayBezelBottom: 49,
  clayBezelRadius: 49,
  screenWidth: 820,
  screenHeight: 1180,
  externalClay: {
    width: 994,
    height: 1374,
    screenOffsetLeft: 87,
    screenOffsetTop: 97,
  },
  realisticImage: {
    width: 1960 / 2,
    height: 2680 / 2,
    screenOffsetLeft: 160 / 2,
    screenOffsetTop: 160 / 2,
    availableColors: [{
      id: 'space-grey',
      title: 'Space Grey',
      colorValue: '#C3C4C8',
    }, {
      id: 'silver',
      title: 'Silver',
      colorValue: '#E1E2E4',
    }, {
      id: 'rose-gold',
      title: 'Rose Gold',
      colorValue: '#ECCBC4',
    }, {
      id: 'blue',
      title: 'Blue',
      colorValue: '#CBDAE6',
    }, {
      id: 'green',
      title: 'Green',
      colorValue: '#DAF0D9',
    },],
  },
}, {
  id: 'ipad-pro-11',
  title: 'iPad Pro 11\u2033',
  screenRadius: 17,
  clayBezelLeft: 49,
  clayBezelRight: 49,
  clayBezelTop: 49,
  clayBezelBottom: 49,
  clayBezelRadius: 49,
  screenWidth: 834,
  screenHeight: 1194,
  externalClay: {
    width: 990,
    height: 1370,
    screenOffsetLeft: 78,
    screenOffsetTop: 88,
  },
  realisticImage: {
    width: 1968 / 2,
    height: 2688 / 2,
    screenOffsetLeft: 75,
    screenOffsetTop: 75,
    availableColors: [{
      id: 'space-grey',
      title: 'Space Grey',
      colorValue: '#C3C4C8',
    }, {
      id: 'silver',
      title: 'Silver',
      colorValue: '#E1E2E4',
    },],
  },
}, {
  id: 'ipad-pro-12-9',
  title: 'iPad Pro 12.9\u2033',
  ...presetsBase.iPadPro,
  screenRadius: 17,
  screenWidth: 1024,
  screenHeight: 1366,
  externalClay: {
    width: 1180,
    height: 1542,
    screenOffsetLeft: 78,
    screenOffsetTop: 88,
  },
  realisticImage: {
    width: 2348 / 2,
    height: 3032 / 2,
    screenOffsetLeft: 75,
    screenOffsetTop: 75,
    availableColors: [{
      id: 'space-grey',
      title: 'Space Grey',
      colorValue: '#C3C4C8',
    }, {
      id: 'silver',
      title: 'Silver',
      colorValue: '#E1E2E4',
    },],
  },
}, {
  id: 'surface-3',
  title: 'Microsoft Surface 3',
  screenRadius: 0,
  clayBezelLeft: 49,
  clayBezelRight: 49,
  clayBezelTop: 49,
  clayBezelBottom: 49,
  clayBezelRadius: 49,
  screenWidth: 960,
  screenHeight: 640,
  externalClay: {
    width: 1184,
    height: 864,
    screenOffsetLeft: 112,
    screenOffsetTop: 112,
  },
  realisticImage: {
    width: 2280 / 2,
    height: 1580 / 2,
    screenOffsetLeft: 180 / 2,
    screenOffsetTop: 150 / 2,
  },
}, {
  id: 'surface-pro-4',
  title: 'Microsoft Surface Pro 4',
  screenRadius: 0,
  clayBezelLeft: 49,
  clayBezelRight: 49,
  clayBezelTop: 49,
  clayBezelBottom: 49,
  clayBezelRadius: 49,
  screenWidth: 1368,
  screenHeight: 912,
  externalClay: {
    width: 1592,
    height: 1136,
    screenOffsetLeft: 112,
    screenOffsetTop: 112,
  },
  realisticImage: {
    width: 3176 / 2,
    height: 2224 / 2,
    screenOffsetLeft: 220 / 2,
    screenOffsetTop: 200 / 2,
  },
}, // Watches ------------------------------------------------------------------------------------------------------------------------
{
  id: 'apple-watch-44',
  title: `Apple Watch 44mm`,
  screenRadius: 33,
  screenWidth: 184,
  screenHeight: 224,
  disableRotation: true,
  externalClay: {
    width: 298,
    height: 502,
    screenOffsetLeft: 57,
    screenOffsetTop: 129,
  },
  realisticImage: {
    width: 548 / 2,
    height: 908 / 2,
    screenOffsetLeft: 90 / 2,
    screenOffsetTop: 230 / 2,
    availableColors: [{
      id: 'black',
      title: 'Black',
      colorValue: '#2E2C36',
    }, {
      id: 'white',
      title: 'White',
      colorValue: '#F7F3F0',
    }, {
      id: 'yellow',
      title: 'Yellow',
      colorValue: '#FDDC6C',
    }, {
      id: 'orange',
      title: 'Orange',
      colorValue: '#F35C56',
    },],
  },
}, {
  id: 'apple-watch-40',
  title: `Apple Watch 40mm`,
  screenRadius: 27,
  screenWidth: 162,
  screenHeight: 197,
  disableRotation: true,
  externalClay: {
    width: 280,
    height: 463,
    screenOffsetLeft: 59,
    screenOffsetTop: 124,
  },
  realisticImage: {
    width: 504 / 2,
    height: 854 / 2,
    screenOffsetLeft: 90 / 2,
    screenOffsetTop: 230 / 2,
    availableColors: [{
      id: 'black',
      title: 'Black',
      colorValue: '#2E2C36',
    }, {
      id: 'white',
      title: 'White',
      colorValue: '#F7F3F0',
    }, {
      id: 'yellow',
      title: 'Yellow',
      colorValue: '#FDDC6C',
    }, {
      id: 'orange',
      title: 'Orange',
      colorValue: '#F35C56',
    },],
  },
}, // TVs ------------------------------------------------------------------------------------------------------------------------
{
  id: 'tv-full-hd',
  title: `Full HD`,
  screenRadius: 0,
  screenWidth: 1920,
  screenHeight: 1080,
  externalClay: {
    width: 1968,
    height: 1168,
    screenOffsetLeft: 24,
    screenOffsetTop: 12,
  },
  realisticImage: {
    width: 4040 / 2,
    height: 2360 / 2,
    screenOffsetLeft: 100 / 2,
    screenOffsetTop: 100 / 2,
  },
}, {
  id: 'tv-4k',
  title: `4K`,
  screenRadius: 0,
  screenWidth: 3840,
  screenHeight: 2160,
  externalClay: {
    width: 3908,
    height: 2308,
    screenOffsetLeft: 34,
    screenOffsetTop: 24,
  },
  realisticImage: {
    width: 7960 / 2,
    height: 4600 / 2,
    screenOffsetLeft: 140 / 2,
    screenOffsetTop: 140 / 2,
  },
}, // Old devices ------------------------------------------------------------------------------------------------------------------------
// deprecated
{
  id: '720p',
  title: '720p',
  ...presetsBase.desktop,
  screenWidth: 720,
  screenHeight: 1280,
}, // deprecated
{
  id: '900p',
  title: '900p',
  ...presetsBase.desktop,
  screenWidth: 900,
  screenHeight: 1440,
}, // deprecated
{
  id: '1080p',
  title: '1080p',
  ...presetsBase.desktop,
  screenWidth: 1080,
  screenHeight: 1920,
}, // deprecated
{
  id: '1440p',
  title: '1440p',
  ...presetsBase.desktop,
  screenWidth: 1440,
  screenHeight: 2560,
}, // deprecated
{
  id: '4k',
  title: '4K',
  ...presetsBase.desktop,
  screenWidth: 2160,
  screenHeight: 3840,
},])();
var deviceCodeComponentPresetIds = [
  'iphone-12',
  'iphone-12-mini',
  'iphone-12-pro',
  'iphone-11',
  'iphone-11-pro',
  'iphone-11-pro-max',
  'iphone-8',
  'iphone-8-plus',
  'iphone-se',
  'samsung-note-10',
  'pixel-4',
  'ipad',
  'ipad-pro-11',
  'ipad-pro-12-9',
  '720p',
  '900p',
  '1080p',
  '1440p',
  '4k',
];
var devicePresetsMap = /* @__PURE__ */ devicePresets.reduce((map2, preset,) => {
  map2[preset.id] = preset;
  return map2;
}, {},);
function getDevicePreset(presetId,) {
  return devicePresetsMap[presetId] ?? devicePresetsMap[defaultPresetId];
}
var defaultDeviceProps = {
  preset: defaultPresetId,
  customWidth: 375,
  customHeight: 800,
  customBezel: 20,
  isMixedBezel: false,
  bezelTop: 20,
  bezelRight: 20,
  bezelBottom: 20,
  bezelLeft: 20,
  customBezelRadius: 20,
  customScreenRadius: 0,
  orientation: 'portrait',
  skin: 'clay',
  theme: 'dark',
  shadow: true,
  backgroundColor: void 0,
};
function convertPropsToDeviceOptions(props, {
  forceOldClay = false,
} = {},) {
  var _a;
  if (props.preset === 'no-device') {
    return;
  }
  let preset;
  if (props.preset === 'custom') {
    preset = {
      screenWidth: props.customWidth,
      screenHeight: props.customHeight,
      screenRadius: props.customScreenRadius,
      clayBezelTop: props.isMixedBezel ? props.bezelTop : props.customBezel,
      clayBezelRight: props.isMixedBezel ? props.bezelRight : props.customBezel,
      clayBezelBottom: props.isMixedBezel ? props.bezelBottom : props.customBezel,
      clayBezelLeft: props.isMixedBezel ? props.bezelLeft : props.customBezel,
      clayBezelRadius: props.customBezelRadius,
    };
  } else {
    preset = getDevicePreset(props.preset,);
  }
  const colors = getColorsFromTheme(props.theme,);
  const shadowColor = colors.shadowColor;
  const shadow = props.shadow ? `0 10px 30px ${shadowColor}` : void 0;
  const rotate2 = !preset.disableRotation && (props.orientation === 'landscape' || props.rotated);
  let deviceWidth;
  let deviceHeight;
  let screenOffsetTop;
  let screenOffsetLeft;
  let colorId = props.colorId;
  let appearance;
  if ((props.skin === void 0 || props.skin === 'realistic') && preset.realisticImage && props.preset) {
    deviceWidth = preset.realisticImage.width;
    deviceHeight = preset.realisticImage.height;
    screenOffsetTop = preset.realisticImage.screenOffsetTop;
    screenOffsetLeft = preset.realisticImage.screenOffsetLeft;
    colorId = colorId ?? colorIdForTheme(props.theme, preset.realisticImage.availableColors,);
    appearance = {
      type: 'realistic',
      imageUrl: colorId
        ? `https://preview.framercdn.com/images/devices/${props.preset}-${colorId}.png`
        : `https://preview.framercdn.com/images/devices/${props.preset}.png`,
      imageWidth: preset.realisticImage.width,
      imageHeight: preset.realisticImage.height,
      rotateImage: rotate2,
    };
  } else {
    deviceWidth = preset.screenWidth + (preset.clayBezelLeft ?? 0) + (preset.clayBezelRight ?? 0);
    deviceHeight = preset.screenHeight + (preset.clayBezelTop ?? 0) + (preset.clayBezelBottom ?? 0);
    screenOffsetTop = preset.clayBezelTop ?? 0;
    screenOffsetLeft = preset.clayBezelLeft ?? 0;
    if (preset.externalClay && !forceOldClay) {
      deviceWidth = preset.externalClay.width;
      deviceHeight = preset.externalClay.height;
      screenOffsetTop = preset.externalClay.screenOffsetTop;
      screenOffsetLeft = preset.externalClay.screenOffsetLeft;
      appearance = {
        type: 'external-clay',
        imageUrl: `https://preview.framercdn.com/images/devices/${props.preset}-${props.theme}.svg`,
        imageWidth: preset.externalClay.width,
        imageHeight: preset.externalClay.height,
        rotateImage: rotate2,
      };
    } else {
      appearance = {
        type: 'clay',
        bezelRadius: preset.clayBezelRadius !== void 0 ? `${preset.clayBezelRadius}px` : void 0,
        bezelColor: colors.bezelColor,
        bezelShadeColor: colors.bezelShadeColor,
      };
    }
  }
  let screenWidth = preset.screenWidth;
  let screenHeight = preset.screenHeight;
  if (rotate2) {
    const screenOffsetRight = deviceWidth - screenWidth - screenOffsetLeft;
    [deviceWidth, deviceHeight,] = [deviceHeight, deviceWidth,];
    [screenWidth, screenHeight,] = [screenHeight, screenWidth,];
    [screenOffsetTop, screenOffsetLeft,] = [screenOffsetRight, screenOffsetTop,];
  }
  const handOffset = (_a = preset.realisticImage) == null ? void 0 : _a.handOffset;
  return {
    deviceWidth,
    deviceHeight,
    appearance,
    screenWidth,
    screenHeight,
    screenOffsetTop,
    screenOffsetLeft,
    screenRadius: preset.screenRadius !== void 0 ? `${preset.screenRadius}px` : void 0,
    screenMaskImage: appearance.type !== 'realistic' && preset.screenMask
      ? makeScreenMaskImage({
        mask: preset.screenMask,
        // width/height of the mask = screen width/height pre-rotation
        width: preset.screenWidth,
        height: preset.screenHeight,
        rotate: rotate2,
      },)
      : void 0,
    screenColor: colors.screenColor,
    shadow,
    hand: props.hand !== void 0 && supportsHand(props,)
      ? {
        imageUrl: `https://preview.framercdn.com/images/hands/${props.hand}.png`,
        offsetLeft: handOffset == null ? void 0 : handOffset.left,
        offsetRight: handOffset == null ? void 0 : handOffset.right,
        offsetBottom: handOffset == null ? void 0 : handOffset.bottom,
      }
      : void 0,
    background: props.backgroundColor,
    theme: props.theme,
    colorId,
  };
}
function makeScreenMaskImage({
  mask,
  width,
  height,
  rotate: rotate2 = false,
},) {
  const transform2 = rotate2
    ? // Rotate 90 degrees counter-clockwise around (0,0), then move the
    // result down into the viewport (rightmost transform is applied first).
    `transform="translate(0 ${width}) rotate(-90)"`
    : '';
  return encodeSVGForCSS(
    `<svg xmlns="http://www.w3.org/2000/svg" viewport="0 0 ${width} ${height}" preserveAspectRatio="none"><g x="0" y="0" ${transform2}>${mask}</g></svg>`,
  );
}
var lightColors = /* @__PURE__ */ new Set(['white', 'silver', 'clearly-white', 'sorta-sage',],);
var darkColors = /* @__PURE__ */ new Set(['black', 'space-grey', 'graphite', 'just-black', 'pro',],);
function colorIdForTheme(theme, availableColors,) {
  var _a;
  if (!availableColors) return;
  const colors = theme === 'light' ? lightColors : darkColors;
  for (const color2 of availableColors) {
    if (colors.has(color2.id,)) {
      return color2.id;
    }
  }
  return (_a = availableColors[0]) == null ? void 0 : _a.id;
}
function supportsHand({
  preset: presetId,
  skin,
  orientation = 'portrait',
},) {
  var _a;
  if (!presetId || presetId === 'custom' || presetId === 'no-device' || orientation === 'landscape') return false;
  const preset = getDevicePreset(presetId,);
  return skin !== 'clay' && ((_a = preset.realisticImage) == null ? void 0 : _a.handOffset) !== void 0;
}
function applyMetaTag(name, props,) {
  var _a;
  let tag = document.querySelector(`meta[name="${name}"]`,);
  if (!tag) {
    tag = document.createElement('meta',);
    (_a = document.getElementsByTagName('head',)[0]) == null ? void 0 : _a.appendChild(tag,);
    tag.setAttribute('name', name,);
  }
  for (const [k, v,] of Object.entries(props,)) {
    tag.setAttribute(k, v,);
  }
}
function usePrototypingMetaTags() {
  React4.useEffect(() => {
    applyMetaTag('mobile-web-app-capable', {
      content: 'yes',
    },);
    applyMetaTag('apple-mobile-web-app-capable', {
      content: 'yes',
    },);
    applyMetaTag('apple-mobile-web-app-status-bar-style', {
      content: 'black-translucent',
    },);
    applyMetaTag('viewport', {
      content: 'viewport-fit=cover, user-scalable=no, width=device-width, initial-scale=1, maximum-scale=1',
    },);
  }, [],);
}
var DeviceCodeComponentInner = ({
  children,
  ...props
},) => {
  usePrototypingMetaTags();
  const deviceOptions = convertPropsToDeviceOptions(props, {
    forceOldClay: true,
  },);
  React4.useInsertionEffect(() => {
    injectComponentCSSRules();
  }, [],);
  if (!deviceOptions) {
    return /* @__PURE__ */ jsx3('div', {
      'data-framer-component-type': 'DeviceComponent',
      className: 'no-device',
      style: {
        width: '100%',
        height: '100%',
      },
      children: /* @__PURE__ */ jsx3(ProvideParentSize, {
        parentSize: 1,
        children,
      },),
    },);
  }
  const child = Array.isArray(children,) ? children[0] : children;
  const resizedChild = child && React4.isValidElement(child,)
    ? React4.cloneElement(child, {
      width: deviceOptions.screenWidth,
      height: deviceOptions.screenHeight,
    },)
    : null;
  return /* @__PURE__ */ jsx3(Device, {
    scaleTo: 'dynamic',
    deviceOptions,
    children: resizedChild,
  },);
};
var DeviceCodeComponent = /* @__PURE__ */ (() => {
  const {
    componentWidth: defaultWidth2,
    componentHeight: defaultHeight2,
  } = getComponentSize(convertPropsToDeviceOptions(defaultDeviceProps, {
    forceOldClay: true,
  },),);
  DeviceCodeComponentInner.defaultProps = {
    width: defaultWidth2,
    height: defaultHeight2,
    ...defaultDeviceProps,
  };
  const deviceCodeComponentPresets = devicePresets.filter((preset) => deviceCodeComponentPresetIds.includes(preset.id,));
  addPropertyControls(DeviceCodeComponentInner, {
    children: {
      title: 'Content',
      type: 'slot',
      maxCount: 1,
    },
    preset: {
      type: 'enum',
      options: ['no-device', 'custom',].concat(deviceCodeComponentPresets.map((preset) => preset.id),),
      optionTitles: ['No Device', 'Custom',].concat(deviceCodeComponentPresets.map((preset) => preset.title),),
    },
    customWidth: {
      title: 'Width',
      type: 'number',
      min: 0,
      displayStepper: true,
      hidden: (props) => props.preset !== 'custom',
    },
    customHeight: {
      title: 'Height',
      type: 'number',
      min: 0,
      displayStepper: true,
      hidden: (props) => props.preset !== 'custom',
    },
    customBezel: {
      title: 'Bezel',
      type: 'fusednumber',
      min: 0,
      toggleKey: 'isMixedBezel',
      toggleTitles: ['a', 'b',],
      valueKeys: ['bezelTop', 'bezelRight', 'bezelBottom', 'bezelLeft',],
      valueLabels: ['T', 'R', 'B', 'L',],
      hidden: (props) => props.preset !== 'custom',
    },
    customBezelRadius: {
      title: 'Bezel Radius',
      type: 'number',
      min: 0,
      displayStepper: true,
      hidden: (props) => props.preset !== 'custom',
    },
    customScreenRadius: {
      title: 'Screen Radius',
      type: 'number',
      min: 0,
      displayStepper: true,
      hidden: (props) => props.preset !== 'custom',
    },
    orientation: {
      type: 'enum',
      displaySegmentedControl: true,
      options: ['portrait', 'landscape',],
      optionTitles: ['Portrait', 'Landscape',],
      optionIcons: ['orientation-portrait', 'orientation-landscape',],
      hidden: (props) => !!props.preset && !supportsOrientation(props.preset,),
    },
    skin: {
      title: 'Device',
      type: 'enum',
      displaySegmentedControl: true,
      options: ['realistic', 'clay',],
      optionTitles: ['Realistic', 'Clay',],
      defaultValue: 'clay',
      hidden: (props) => !!props.preset && !supportsRealisticSkin(props.preset,),
    },
    theme: {
      type: 'enum',
      displaySegmentedControl: true,
      options: ['light', 'dark',],
      optionTitles: ['Light', 'Dark',],
      hidden: (props) => !!props.preset && !supportsThemes(props.preset, props.skin,),
    },
    shadow: {
      type: 'boolean',
      enabledTitle: 'On',
      disabledTitle: 'Off',
      hidden: ({
        skin,
        preset,
      },) => preset !== 'custom' && skin === 'realistic' || preset === 'no-device',
    },
    hand: {
      type: 'enum',
      options: [void 0, 'hand-1', 'hand-2',],
      optionTitles: ['None', 'Model 1', 'Model 2',],
      hidden: (props) => !supportsHand(props,),
    },
    backgroundColor: {
      type: 'color',
      title: 'Background',
      optional: true,
      hidden: ({
        preset,
      },) => preset === 'no-device',
    },
  },);
  return DeviceCodeComponentInner;
})();
function supportsOrientation(presetId,) {
  if (presetId === 'no-device') return false;
  if (presetId === 'custom') return true;
  const preset = getDevicePreset(presetId,);
  return !preset.disableRotation;
}
function supportsRealisticSkin(presetId,) {
  if (presetId === 'custom' || presetId === 'no-device') return false;
  const preset = getDevicePreset(presetId,);
  return !!preset.realisticImage;
}
function supportsThemes(presetId, skin,) {
  if (presetId === 'no-device') return false;
  if (presetId === 'custom' || skin !== 'realistic') return true;
  const preset = getDevicePreset(presetId,);
  const realisticImage = preset.realisticImage;
  if (realisticImage === void 0) {
    return true;
  }
  if (colorIdForTheme('dark', realisticImage.availableColors,) !== void 0) {
    return true;
  }
  return false;
}
function isStaticRenderer() {
  const currentTarget = RenderTarget.current();
  return currentTarget === RenderTarget.canvas || currentTarget === RenderTarget.export;
}
function useIsStaticRenderer() {
  const [isStatic,] = useState(() => isStaticRenderer());
  return isStatic;
}
var asRecord = (object) => object;
function memoize(fn,) {
  const cache2 = Object.create(Object.prototype,);
  return (arg) => {
    if (cache2[arg] === void 0) cache2[arg] = fn(arg,);
    return cache2[arg];
  };
}
var reactPropsRegex =
  /^(?:children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|[dkrxyz]|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y1|y2|yChannelSelector|zoomAndPan|for|class|autofocus|(?:[Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*)$/u;
var isPropValid = /* @__PURE__ */ memoize((prop) =>
  reactPropsRegex.test(prop,) || prop.charCodeAt(0,) === 111 && prop.charCodeAt(1,) === 110 && prop.charCodeAt(2,) < 91
  /* Z+1 */
);
var LibraryFeaturesContext = /* @__PURE__ */ React4.createContext(void 0,);
var LibraryFeaturesProvider = /* @__PURE__ */ (() => LibraryFeaturesContext.Provider)();
var useLibraryFeatures = () => {
  const context = React4.useContext(LibraryFeaturesContext,);
  return context ?? {};
};
var mockWithWarning = (message) => {
  return () => {
    warnOnce2(message,);
  };
};
var mockWithoutWarning = () => {
  return () => {};
};
var implementation = {
  // We need a default implementation for useImageSource and useImageElement as it is used for rendering image backgrounds which would break otherwise.
  // The default value is used for HTML export and when using the library without Framer.
  useImageSource(image,) {
    return image.src ?? '';
  },
  useImageElement(image, rect, nodeId,) {
    const element = new Image();
    element.src = runtime.useImageSource(image, rect, nodeId,);
    if (image.srcSet) element.srcset = image.srcSet;
    return element;
  },
  canRenderOptimizedCanvasImage() {
    return false;
  },
};
var isRuntimeInjected = false;
var runtimeProxy = {
  get(target, key7, reciever,) {
    if (Reflect.has(target, key7,)) {
      return Reflect.get(target, key7, reciever,);
    }
    if (['getLogger',].includes(String(key7,),)) {
      return mockWithoutWarning();
    }
    if (isRuntimeInjected) {
      return mockWithWarning(`${String(key7,)} is not available in this version of Framer.`,);
    }
    return mockWithWarning(`${String(key7,)} is only available inside of Framer. https://www.framer.com/`,);
  },
};
var runtime = /* @__PURE__ */ new Proxy(implementation, runtimeProxy,);
function _injectRuntime(injectedRuntime,) {
  Object.assign(implementation, injectedRuntime,);
  isRuntimeInjected = true;
}
var wrapperStyle = {
  position: 'absolute',
  borderRadius: 'inherit',
  top: 0,
  right: 0,
  bottom: 0,
  left: 0,
};
function getPlaceholderStyle() {
  const placeholderStyle = {
    backgroundRepeat: 'repeat',
    backgroundPosition: 'left top',
    backgroundSize: '126px auto',
    backgroundImage: encodeSVGForCSS(
      `<svg xmlns="http://www.w3.org/2000/svg" width="126" height="126"><path id="a" d="M126 0v21.584L21.584 126H0v-17.585L108.415 0H126Zm0 108.414V126h-17.586L126 108.414Zm0-84v39.171L63.585 126H24.414L126 24.414Zm0 42v39.17L105.584 126h-39.17L126 66.414ZM105.586 0 0 105.586V66.415L66.415 0h39.171Zm-42 0L0 63.586V24.415L24.415 0h39.171Zm-42 0L0 21.586V0h21.586Z" fill="#888" fill-rule="evenodd"/></svg>`,
    ),
    opacity: 0.2,
  };
  return placeholderStyle;
}
function cssObjectFit(imageFit,) {
  switch (imageFit) {
    case 'fit':
      return 'contain';
    case 'stretch':
      return 'fill';
    default:
      return 'cover';
  }
}
function cssObjectPosition(positionX, positionY,) {
  const x = positionX ?? 'center';
  const y = positionY ?? 'center';
  if (x === 'center' && y === 'center') return 'center';
  return x + ' ' + y;
}
function getImageStyle(image,) {
  return {
    display: 'block',
    width: '100%',
    height: '100%',
    borderRadius: 'inherit',
    objectPosition: cssObjectPosition(image.positionX, image.positionY,),
    objectFit: cssObjectFit(image.fit,),
  };
}
function StaticImage({
  image,
  containerSize,
  nodeId,
  alt,
  draggable,
  syncDecoding,
},) {
  const source = runtime.useImageSource(image, containerSize, nodeId,);
  const imageStyle = getImageStyle(image,);
  const imageRef = React4.useRef(null,);
  return (
    // eslint-disable-next-line framer-studio/require-async-decoding -- we conditionally apply it
    /* @__PURE__ */
    jsx3('img', {
      ref: imageRef,
      decoding: syncDecoding ? 'sync' : 'async',
      fetchPriority: image.fetchPriority,
      loading: image.loading,
      width: image.pixelWidth,
      height: image.pixelHeight,
      sizes: image.sizes,
      srcSet: image.srcSet,
      src: source,
      alt: alt ?? image.alt ?? '',
      style: imageStyle,
      draggable,
    },)
  );
}
function CanvasImage({
  image,
  containerSize,
  nodeId,
},) {
  const wrapperRef = React4.useRef(null,);
  const imageElement = runtime.useImageElement(image, containerSize, nodeId,);
  const imageStyle = getImageStyle(image,);
  React4.useLayoutEffect(() => {
    const wrapper = wrapperRef.current;
    if (wrapper === null) return;
    wrapper.appendChild(imageElement,);
    return () => {
      wrapper.removeChild(imageElement,);
    };
  }, [imageElement,],);
  Object.assign(imageElement.style, imageStyle,);
  return /* @__PURE__ */ jsx3('div', {
    ref: wrapperRef,
    style: {
      display: 'contents',
      borderRadius: 'inherit',
    },
  },);
}
function OptimizedCanvasImage({
  nodeId,
  image,
  containerSize,
},) {
  const wrapperRef = React4.useRef(null,);
  const source = runtime.useImageSource(image, containerSize, nodeId,);
  React4.useLayoutEffect(() => {
    const wrapper = wrapperRef.current;
    if (wrapper === null) return;
    const imageStyle = getImageStyle(image,);
    runtime.renderOptimizedCanvasImage(wrapper, source, imageStyle, nodeId,);
  }, [nodeId, image, source,],);
  return /* @__PURE__ */ jsx3('div', {
    ref: wrapperRef,
    style: {
      display: 'contents',
      borderRadius: 'inherit',
    },
  },);
}
function BackgroundImageComponent({
  layoutId,
  image,
  ...props
},) {
  const {
    motionDivToDivBackgroundImage,
  } = useLibraryFeatures();
  if (layoutId) {
    layoutId += '-background';
  }
  let fallbackWrapperStyles = null;
  let needsMotion = !!layoutId;
  let imageNode = null;
  if (isString(image.src,)) {
    if (image.fit === 'tile' && image.pixelWidth && image.pixelHeight) {
      const backgroundSize = isNumber2(image.backgroundSize,) ? image.backgroundSize : 1;
      const tileSize = {
        width: Math.round(backgroundSize * image.pixelWidth,),
        height: Math.round(backgroundSize * image.pixelHeight,),
      };
      const roundedBackgroundSize = roundToHalfPixel(backgroundSize * (image.pixelWidth / 2),);
      const imageSource = runtime.useImageSource(image, tileSize,);
      fallbackWrapperStyles = {
        ...wrapperStyle,
        backgroundImage: `url(${imageSource})`,
        backgroundRepeat: 'repeat',
        backgroundPosition: cssObjectPosition(image.positionX, image.positionY,),
        opacity: void 0,
        border: 0,
        backgroundSize: `${roundedBackgroundSize}px auto`,
      };
      imageNode = null;
      needsMotion = true;
    } else if (RenderTarget.current() !== RenderTarget.canvas) {
      imageNode = /* @__PURE__ */ jsx3(StaticImage, {
        image,
        syncDecoding: RenderTarget.current() === RenderTarget.export,
        ...props,
      },);
    } else if (
      // biome-ignore lint/correctness/useHookAtTopLevel: This is ok since this function acts just like a util to get the source.
      runtime.canRenderOptimizedCanvasImage(runtime.useImageSource(image,),)
    ) {
      imageNode = /* @__PURE__ */ jsx3(OptimizedCanvasImage, {
        image,
        ...props,
      },);
    } else {
      imageNode = /* @__PURE__ */ jsx3(CanvasImage, {
        image,
        ...props,
      },);
    }
  }
  const style2 = imageNode ? wrapperStyle : fallbackWrapperStyles ?? {
    ...wrapperStyle,
    ...getPlaceholderStyle(),
  };
  return needsMotion || !motionDivToDivBackgroundImage
    ? /* @__PURE__ */ jsx3(motion.div, {
      layoutId,
      style: style2,
      'data-framer-background-image-wrapper': true,
      children: imageNode,
    },)
    : /* @__PURE__ */ jsx3('div', {
      style: style2,
      'data-framer-background-image-wrapper': true,
      children: imageNode,
    },);
}
function collectBorderStyleForProps(props, style2, collapseEqualBorders = true,) {
  const {
    borderWidth,
    borderStyle,
    borderColor,
  } = props;
  if (!borderWidth) {
    return;
  }
  let borderTop;
  let borderBottom;
  let borderLeft;
  let borderRight;
  if (typeof borderWidth === 'number') {
    borderTop =
      borderBottom =
      borderLeft =
      borderRight =
        borderWidth;
  } else {
    borderTop = borderWidth.top || 0;
    borderBottom = borderWidth.bottom || 0;
    borderLeft = borderWidth.left || 0;
    borderRight = borderWidth.right || 0;
  }
  if (borderTop === 0 && borderBottom === 0 && borderLeft === 0 && borderRight === 0) {
    return;
  }
  if (collapseEqualBorders && borderTop === borderBottom && borderTop === borderLeft && borderTop === borderRight) {
    style2.border = `${borderTop}px ${borderStyle} ${borderColor}`;
    return;
  }
  style2.borderStyle = props.borderStyle;
  style2.borderColor = props.borderColor;
  style2.borderTopWidth = `${borderTop}px`;
  style2.borderBottomWidth = `${borderBottom}px`;
  style2.borderLeftWidth = `${borderLeft}px`;
  style2.borderRightWidth = `${borderRight}px`;
}
function Border(props,) {
  const layoutId = props.layoutId ? `${props.layoutId}-border` : void 0;
  if (!props.borderWidth) {
    return null;
  }
  const style2 = {
    position: 'absolute',
    left: 0,
    right: 0,
    top: 0,
    bottom: 0,
    borderRadius: 'inherit',
    pointerEvents: 'none',
  };
  if (props.border) {
    style2.border = props.border;
    return /* @__PURE__ */ jsx3(motion.div, {
      style: style2,
    },);
  }
  collectBorderStyleForProps(props, style2, false,);
  return /* @__PURE__ */ jsx3(motion.div, {
    'data-frame-border': true,
    style: style2,
    layoutId,
  },);
}
var key = 'src';
var BackgroundImage = {
  isImageObject: function (image,) {
    if (!image || typeof image === 'string') return false;
    return key in image;
  },
};
function applyForwardOverrides(background, props,) {
  const {
    _forwardedOverrideId,
    _forwardedOverrides,
    id: id3,
  } = props;
  const forwardedOverrideId = _forwardedOverrideId ?? id3;
  const src = _forwardedOverrides && forwardedOverrideId ? _forwardedOverrides[forwardedOverrideId] : void 0;
  if (src && typeof src === 'string') {
    background = {
      ...background,
      src,
    };
  }
  return background;
}
function backgroundImageFromProps(props,) {
  const {
    background,
    image,
  } = props;
  if (image !== void 0 && background && !BackgroundImage.isImageObject(background,)) {
    return;
  }
  let backgroundImage = null;
  if (isString(image,)) {
    backgroundImage = {
      alt: '',
      src: image,
    };
  } else {
    backgroundImage = Animatable.get(background, null,);
  }
  if (!BackgroundImage.isImageObject(backgroundImage,)) {
    return;
  }
  return applyForwardOverrides(backgroundImage, props,);
}
function htmlElementAsMotionComponent(asElem,) {
  return asElem && asElem !== 'search' && asElem !== 'slot' && asElem !== 'template' ? motion[asElem] : motion['div'];
}
var safeNavigator = typeof __unframerNavigator2 !== 'undefined' ? __unframerNavigator2 : void 0;
var isBrowser2 = () => typeof document === 'object';
var isWebKit = () => {
  var _a;
  return ((_a = safeNavigator) == null ? void 0 : _a.userAgent.includes('AppleWebKit/',)) && !isChrome() && !isEdge();
};
var webkitVersion = () => {
  let version2 = -1;
  const regexp = /AppleWebKit\/([\d.]+)/u;
  const result = safeNavigator && regexp.exec(safeNavigator.userAgent,);
  if (result && result[1]) {
    version2 = parseFloat(result[1],);
  }
  return version2;
};
var safariVersion = () => {
  let version2 = -1;
  const regexp = /Version\/([\d.]+)/u;
  const result = safeNavigator && regexp.exec(safeNavigator.userAgent,);
  if (result && result[1]) {
    version2 = parseFloat(result[1],);
  }
  return version2;
};
var isChrome = () => safeNavigator && /Chrome/u.test(safeNavigator.userAgent,) && /Google Inc/u.test(safeNavigator.vendor,) && !isEdge();
var isSafari = () => safeNavigator && /Safari/u.test(safeNavigator.userAgent,) && /Apple Computer/u.test(safeNavigator.vendor,);
var isFirefox = () => safeNavigator && /Firefox\/\d+\.\d+$/u.test(safeNavigator.userAgent,);
var isFramerX = () => safeNavigator && /FramerX/u.test(safeNavigator.userAgent,);
var isEdge = () => safeNavigator && /Edg\//u.test(safeNavigator.userAgent,);
var isAndroid = () => safeNavigator && /android/iu.test(safeNavigator.userAgent,);
var iOSRegex = /iPhone|iPod|iPad/iu;
var macIntelRegex = /MacIntel/iu;
var isIOS = () => {
  if (!safeNavigator) return false;
  if (iOSRegex.test(safeNavigator.platform,)) return true;
  return macIntelRegex.test(safeNavigator.platform,) && safeNavigator.maxTouchPoints && safeNavigator.maxTouchPoints > 2;
};
var isMacOS = () => safeNavigator && /Mac/u.test(safeNavigator.platform,);
var isWindows = () => safeNavigator && /Win/u.test(safeNavigator.platform,);
var isTouch = () => safeWindow.ontouchstart === null && safeWindow.ontouchmove === null && safeWindow.ontouchend === null;
var isDesktop = () => deviceType() === 'desktop';
var isPhone = () => deviceType() === 'phone';
var isTablet = () => deviceType() === 'tablet';
var isMobile = () => isPhone() || isTablet();
var isFileUrl = (url) => url.startsWith('file://',);
var isDataUrl = (url) => url.startsWith('data:',);
var isTest = () => false;
var isRelativeUrl = (url) => !/^[a-z]{1,8}:\/\/.*$/i.test(url,);
var isLocalServerUrl = (url) => /[a-z]{1,8}:\/\/127\.0\.0\.1/i.test(url,) || /[a-zA-Z]{1,8}:\/\/localhost/u.test(url,);
var isLocalUrl = (url) => {
  if (isFileUrl(url,)) return true;
  if (isLocalServerUrl(url,)) return true;
  return false;
};
var isLocalAssetUrl = (url, baseUrl,) => {
  if (baseUrl === null) baseUrl = safeWindow.location.href;
  if (isDataUrl(url,)) return false;
  if (isLocalUrl(url,)) return true;
  if (isRelativeUrl(url,) && isLocalUrl(baseUrl,)) return true;
  return false;
};
var devicePixelRatio = () => safeWindow.devicePixelRatio;
var isJP2Supported = function () {
  if (isFirefox()) return false;
  return isWebKit();
};
var isWebPSupported = () => isChrome();
var deviceType = () => {
  if (safeNavigator && /tablet|iPad|Nexus 9/i.test(safeNavigator.userAgent,)) return 'tablet';
  if (safeNavigator && /mobi/iu.test(safeNavigator.userAgent,)) return 'phone';
  return 'desktop';
};
var deviceOS = () => {
  if (isMacOS()) return 'macos';
  if (isIOS()) return 'ios';
  if (isAndroid()) return 'android';
  if (isWindows()) return 'windows';
};
var deviceFont = (os) => {
  if (!os) {
    os = deviceOS();
  }
  const fonts = {
    apple: '-apple-system, BlinkMacSystemFont, SF Pro Text, SF UI Text, Helvetica Neue',
    google: 'Roboto, Helvetica Neue',
    microsoft: 'Segoe UI, Helvetica Neue',
  };
  if (os === 'macos') return fonts.apple;
  if (os === 'ios') return fonts.apple;
  if (os === 'android') return fonts.google;
  if (os === 'windows') return fonts.microsoft;
  return fonts.apple;
};
var environment = {
  isWebKit,
  webkitVersion,
  isChrome,
  isSafari,
  isFirefox,
  isFramerX,
  isEdge,
  isAndroid,
  isIOS,
  isMacOS,
  isWindows,
  isTouch,
  isDesktop,
  isPhone,
  isTablet,
  isMobile,
  isFileUrl,
  isDataUrl,
  isRelativeUrl,
  isLocalServerUrl,
  isLocalUrl,
  isLocalAssetUrl,
  devicePixelRatio,
  isJP2Supported,
  isWebPSupported,
  deviceType,
  deviceOS,
  deviceFont,
  safariVersion,
};
var isChrome2 = /* @__PURE__ */ isChrome();
function collectLayoutHintDataProps(props, center,) {
  props['data-framer-layout-hint-center-x'] = center === true || center === 'x' ? true : void 0;
  props['data-framer-layout-hint-center-y'] = center === true || center === 'y' ? true : void 0;
}
function layoutHintDataPropsForCenter(center,) {
  const props = {};
  if (!center || !isChrome2 || RenderTarget.current() !== RenderTarget.canvas) {
    return props;
  }
  collectLayoutHintDataProps(props, center,);
  return props;
}
function nodeIdFromString(str,) {
  return str.replace(/^id_/u, '',).replace(/\\/gu, '',);
}
function countNodeRender() {
  if (true) return;
  const perf = asRecord(safeWindow,)['perf'];
  if (!perf) return;
  perf.nodeRender();
}
function processOverrideForwarding(props, children,) {
  if (!children) {
    children = props.children;
    if (!children) {
      return {
        props,
        children,
      };
    }
  }
  const _forwardedOverrides = props._forwardedOverrides;
  if (!_forwardedOverrides) {
    return {
      props,
      children,
    };
  }
  children = React4.Children.map(children, (child) => {
    if (!React4.isValidElement(child,)) return child;
    return React4.cloneElement(child, {
      _forwardedOverrides,
    },);
  },);
  return {
    props,
    children,
  };
}
function transformTemplate(center,) {
  return (_, generated,) => {
    if (center === true) {
      return `translate(-50%, -50%) ${generated}`;
    } else {
      if (center === 'x') {
        return `translateX(-50%) ${generated}`;
      } else if (center === 'y') {
        return `translateY(-50%) ${generated}`;
      }
    }
    return generated || 'none';
  };
}
function useLayoutId2(props, {
  specificLayoutId,
  postfix,
} = {},) {
  const {
    name,
    layoutIdKey,
    duplicatedFrom,
    __fromCodeComponentNode = false,
    drag: drag2,
  } = props;
  const {
    getLayoutId,
    enabled,
  } = useContext(LayoutIdContext,);
  return useMemo2(() => {
    if (!enabled) return props.layoutId;
    const existingLayoutId = specificLayoutId || props.layoutId;
    if (!existingLayoutId) {
      if (drag2 || !layoutIdKey || __fromCodeComponentNode) return void 0;
    }
    const layoutIdCandidate = existingLayoutId || getLayoutId({
      id: layoutIdKey,
      name,
      duplicatedFrom,
    },);
    if (!layoutIdCandidate) return void 0;
    return postfix ? `${layoutIdCandidate}-${postfix}` : layoutIdCandidate;
  }, [enabled,],);
}
var useIsomorphicLayoutEffect2 = typeof document !== 'undefined' ? useLayoutEffect : useEffect;
var ComponentContainerContext = /* @__PURE__ */ React4.createContext(false,);
function useForceUpdate2() {
  const [_, setForcedRenderCount,] = React4.useState(0,);
  return React4.useCallback(() => setForcedRenderCount((v) => v + 1), [],);
}
var DEFAULT_SIZE = 200;
var SharedObserver = class {
  constructor() {
    __publicField(this, 'sharedResizeObserver',);
    __publicField(this, 'callbacks', /* @__PURE__ */ new WeakMap(),);
    this.sharedResizeObserver = new ResizeObserver(this.updateResizedElements.bind(this,),);
  }
  updateResizedElements(entries,) {
    for (const entry of entries) {
      const callbackForElement = this.callbacks.get(entry.target,);
      if (callbackForElement) callbackForElement(entry.contentRect,);
    }
  }
  observeElementWithCallback(element, callback,) {
    this.sharedResizeObserver.observe(element,);
    this.callbacks.set(element, callback,);
  }
  unobserve(element,) {
    this.sharedResizeObserver.unobserve(element,);
    this.callbacks.delete(element,);
  }
};
var sharedResizeObserver = /* @__PURE__ */ (() => isBrowser2() ? new SharedObserver() : void 0)();
function useRerenderOnResize(ref,) {
  const update = useForceUpdate2();
  useEffect(() => {
    const element = ref == null ? void 0 : ref.current;
    if (!element) return;
    sharedResizeObserver == null ? void 0 : sharedResizeObserver.observeElementWithCallback(ref.current, update,);
    return () => {
      sharedResizeObserver == null ? void 0 : sharedResizeObserver.unobserve(element,);
    };
  }, [ref, update,],);
}
function useMeasuredSize(ref,) {
  const forceUpdate = useForceUpdate2();
  const size = React4.useRef(null,);
  function updateSize(newSize,) {
    if (newSize.width === 0 && newSize.height === 0) return;
    if (!size.current || newSize.height !== size.current.height || newSize.width !== size.current.width) {
      size.current = {
        width: newSize.width,
        height: newSize.height,
      };
      forceUpdate();
    }
  }
  useIsomorphicLayoutEffect2(() => {
    if (!ref.current) return;
    const {
      offsetWidth,
      offsetHeight,
    } = ref.current;
    updateSize({
      width: offsetWidth,
      height: offsetHeight,
    },);
    sharedResizeObserver.observeElementWithCallback(ref.current, updateSize,);
    return () => {
      if (!ref.current) return;
      sharedResizeObserver.unobserve(ref.current,);
    };
  }, [],);
  return size.current;
}
var SIZE_COMPATIBILITY_WRAPPER_ATTRIBUTE = 'data-framer-size-compatibility-wrapper';
var withMeasuredSize = (Component17) => (props) => {
  const ref = React4.useRef(null,);
  const size = useMeasuredSize(ref,);
  const dataProps = {
    [SIZE_COMPATIBILITY_WRAPPER_ATTRIBUTE]: true,
  };
  const shouldRender = Boolean(size,);
  const fallbackWidth = props.width ?? DEFAULT_SIZE;
  const fallbackHeight = props.height ?? DEFAULT_SIZE;
  return /* @__PURE__ */ jsx3('div', {
    style: {
      width: '100%',
      height: '100%',
      pointerEvents: 'none',
    },
    ref,
    ...dataProps,
    children: shouldRender && /* @__PURE__ */ jsx3(Component17, {
      ...props,
      width: (size == null ? void 0 : size.width) ?? fallbackWidth,
      height: (size == null ? void 0 : size.height) ?? fallbackHeight,
    },),
  },);
};
function getMeasurableCodeComponentChildren(element,) {
  const childrenCollection = element.firstElementChild && element.firstElementChild.hasAttribute(SIZE_COMPATIBILITY_WRAPPER_ATTRIBUTE,)
    ? element.firstElementChild.children
    : element.children;
  return [...childrenCollection,].filter(isMeasurable,).map(unwrapInlinedDisplayContents,);
}
function isMeasurable(element,) {
  if (
    element instanceof HTMLBaseElement || element instanceof HTMLHeadElement || element instanceof HTMLLinkElement ||
    element instanceof HTMLMetaElement || element instanceof HTMLScriptElement || element instanceof HTMLStyleElement ||
    element instanceof HTMLTitleElement
  ) {
    return false;
  }
  return element instanceof HTMLElement || element instanceof SVGElement;
}
function unwrapInlinedDisplayContents(element,) {
  if (!(element instanceof HTMLElement)) return element;
  if (element.children.length === 0) return element;
  if (element.style.display !== 'contents') return element;
  const firstMeasurableChild = [...element.children,].find(isMeasurable,);
  if (firstMeasurableChild) {
    return unwrapInlinedDisplayContents(firstMeasurableChild,);
  }
  return element;
}
function useMeasureLayout(props, ref, getChildren = () => [], options = {},) {
  const {
    id: id3,
    visible,
    _needsMeasure,
  } = props;
  const {
    skipHook = false,
  } = options;
  const inCodeComponent = useContext(ComponentContainerContext,);
  const onCanvas = RenderTarget.current() === RenderTarget.canvas;
  useIsomorphicLayoutEffect2(() => {
    if (!onCanvas || inCodeComponent || skipHook) {
      return;
    }
    if (!(ref.current && id3 && visible && _needsMeasure)) {
      return;
    }
    runtime.queueMeasureRequest(nodeIdFromString(id3,), ref.current, getChildren(ref.current,),);
  },);
}
function measureClosestComponentContainer(element,) {
  const container = element.closest('[data-framer-component-container]',);
  if (!container) return;
  runtime.queueMeasureRequest(nodeIdFromString(container.id,), container, getMeasurableCodeComponentChildren(container,),);
}
var smallValue = '0.000001px';
var translateZ = /* @__PURE__ */ (() => ` translateZ(${smallValue})`)();
var useTranslateZHack = /* @__PURE__ */ (() => isFramerX() || isSafari() || isTest())();
function forceLayerBackingWithMotionStyle(motionStyle,) {
  motionStyle.willChange = 'transform';
  const onCanvas = RenderTarget.current() === RenderTarget.canvas;
  if (useTranslateZHack && onCanvas) {
    motionStyle.translateZ = smallValue;
  }
}
function forceLayerBackingWithCSSProperties(cssProperties,) {
  cssProperties.willChange = 'transform';
  setTranslateZHack(cssProperties, true,);
}
function setTranslateZHack(style2, enabled,) {
  const onCanvas = RenderTarget.current() === RenderTarget.canvas;
  if (!useTranslateZHack || !onCanvas) {
    return;
  }
  const transform2 = isString(style2.transform,) ? style2.transform || '' : '';
  if (enabled) {
    const hasTranslateZ = transform2.includes(translateZ,);
    if (!hasTranslateZ) {
      style2.transform = transform2 + translateZ;
    }
  } else {
    style2.transform = transform2.replace(translateZ, '',);
  }
}
function resetSetStyle(element, key7, toValue, microtask2 = true,) {
  if (!element) {
    return;
  }
  const style2 = asRecord(element.style,);
  const value = toValue ? toValue : style2[key7];
  const reset = () => {
    if (!isValidCSSStyleValue(value,)) return;
    style2[key7] = value;
  };
  style2[key7] = null;
  if (microtask2) {
    void Promise.resolve().then(reset,);
  } else {
    setTimeout(reset, 0,);
  }
}
function isValidCSSStyleValue(value,) {
  return isString(value,) || isNumber2(value,) || isNull(value,);
}
var Layer = /* @__PURE__ */ (() => {
  class Layer2 extends Component2 {
    constructor() {
      super(...arguments,);
      __publicField(this, 'layerElement', null,);
      __publicField(this, 'setLayerElement', (element) => {
        this.layerElement = element;
      },);
    }
    static applyWillChange(props, style2, usingMotionStyle,) {
      if (props.willChangeTransform) {
        if (usingMotionStyle) {
          forceLayerBackingWithMotionStyle(style2,);
        } else {
          forceLayerBackingWithCSSProperties(style2,);
        }
      }
    }
    /** @internal */
    shouldComponentUpdate(nextProps, nextState,) {
      return nextProps._needsMeasure || this.state !== nextState || !isEqual(this.props, nextProps,);
    }
    /** @internal */
    componentDidUpdate(prevProps,) {
      if (asRecord(this.props,)['clip'] && asRecord(this.props,)['radius'] === 0 && asRecord(prevProps,)['radius'] !== 0) {
        resetSetStyle(this.layerElement, 'overflow', 'hidden', false,);
      }
    }
  }
  __publicField(Layer2, 'defaultProps', {},);
  return Layer2;
})();
function manageCache(cache2, maxEntries,) {
  const size = cache2.size;
  if (size < maxEntries) return;
  let i = Math.round(Math.random(),);
  for (const key7 of cache2.keys()) {
    if ((++i & 1) === 1) continue;
    cache2.delete(key7,);
  }
}
function memoize2(maxEntries, cache2, key7, create,) {
  const r = cache2.get(key7,);
  if (r) return r;
  manageCache(cache2, maxEntries,);
  const g = create(key7,);
  cache2.set(key7, g,);
  return g;
}
var hash = (value) => {
  let hasher = 0,
    i,
    chr;
  if (value.length === 0) return hasher;
  for (i = 0; i < value.length; i++) {
    chr = value.charCodeAt(i,);
    hasher = (hasher << 5) - hasher + chr;
    hasher |= 0;
  }
  return hasher;
};
var ConvertColor = {
  hueRotate: (color2, angle,) => {
    return Color.toHslString(Color.hueRotate(Color(color2,), angle,),);
  },
  setAlpha: (color2, alpha2,) => {
    return Color.toRgbString(Color.alpha(Color(color2,), alpha2,),);
  },
  getAlpha: (color2) => {
    const obj = stringToObject(color2,);
    return obj ? obj.a : 1;
  },
  multiplyAlpha: (color2, alpha2,) => {
    return Color.toRgbString(Color.multiplyAlpha(Color(color2,), alpha2,),);
  },
  /**
   * @internal
   */
  toHexValue: (color2) => {
    return Color.toHex(Color(color2,),).toUpperCase();
  },
  toHex: (color2) => {
    return Color.toHexString(Color(color2,),).toUpperCase();
  },
  toRgb: (color2) => {
    return Color.toRgb(Color(color2,),);
  },
  toRgbString: (color2) => {
    return Color.toRgbString(Color(color2,),);
  },
  toHSV: (color2) => {
    return Color.toHsv(Color(color2,),);
  },
  toHSL: (color2) => {
    return Color.toHsl(Color(color2,),);
  },
  toHslString: (color2) => {
    return Color.toHslString(Color(color2,),);
  },
  toHsvString: (color2) => {
    return Color.toHsvString(Color(color2,),);
  },
  hsvToHSLString: (hsv) => {
    return Color.toHslString(Color(hsvToStr(hsv.h, hsv.s, hsv.v, hsv.a,),),);
  },
  /**
   * @internal
   */
  hsvToHexValue: (hsv) => {
    return Color.toHex(Color(hsvToStr(hsv.h, hsv.s, hsv.v, hsv.a,),),).toUpperCase();
  },
  hsvToHex: (hsv) => {
    return Color.toHexString(Color(hsvToStr(hsv.h, hsv.s, hsv.v, hsv.a,),),).toUpperCase();
  },
  hsvToRgbString: (hsv) => {
    return Color.toRgbString(Color(hsvToStr(hsv.h, hsv.s, hsv.v, hsv.a,),),);
  },
  hsvToString: (hsv) => {
    return hsvToStr(hsv.h, hsv.s, hsv.v,);
  },
  rgbaToString: (color2) => {
    return Color.toRgbString(Color(color2,),);
  },
  /**
   * @internal
   */
  rgbToHexValue: (color2) => {
    return Color.toHex(Color(color2,),);
  },
  rgbToHexString: (color2) => {
    return Color.toHexString(Color(color2,),);
  },
  hslToString: (color2) => {
    return Color.toHslString(Color(color2,),);
  },
  hslToRgbString: (color2) => {
    return Color.toRgbString(Color(color2,),);
  },
  toColorPickerSquare: (h) => {
    return Color.toRgbString(Color({
      h,
      s: 1,
      l: 0.5,
      a: 1,
    },),);
  },
  isValid: (color2) => {
    return Color(color2,).isValid !== false;
  },
  equals: (a, b,) => {
    if (Color.isP3String(a,) || Color.isP3String(b,)) return a === b;
    if (typeof a === 'string') {
      a = Color(a,);
    }
    if (typeof b === 'string') {
      b = Color(b,);
    }
    return Color.equal(a, b,);
  },
  toHexOrRgbaString: (input) => {
    const color2 = Color(input,);
    return color2.a !== 1 ? Color.toRgbString(color2,) : Color.toHexString(color2,);
  },
  /**
   * Converts a color to a string to consistent formats for animating.
   */
  toFormatString: (color2) => {
    if (Color.isP3String(color2,)) return color2;
    return Color.toRgbString(Color(color2,),);
  },
};
var CSSVariableRegExp = /var\(.+\)/u;
var colorCache = /* @__PURE__ */ new Map();
function cachedMultiplyAlpha(s, a,) {
  const key7 = [s, a,];
  if (CSSVariableRegExp.test(s,)) {
    return s;
  }
  return memoize2(1e3, colorCache, key7, () => ConvertColor.multiplyAlpha(s, a,),);
}
function gradientColorStops(gradient, alpha2 = 1,) {
  let stops;
  if ('stops' in gradient) {
    stops = gradient.stops;
  } else {
    stops = [{
      value: gradient.start,
      position: 0,
    }, {
      value: gradient.end,
      position: 1,
    },];
  }
  if (alpha2 === 1) {
    return stops;
  } else {
    return stops.map((stop) => ({
      ...stop,
      value: cachedMultiplyAlpha(stop.value, alpha2,),
    }));
  }
}
function gradientColorStopsHash(gradient, alpha2,) {
  let result = 0;
  gradientColorStops(gradient, alpha2,).forEach((stop) => {
    result ^= hash(stop.value,) ^ stop.position;
  },);
  return result;
}
var multiStopGradientKeys = ['stops',];
function isMultiStopGradient(value,) {
  return value && multiStopGradientKeys.every((key7) => key7 in value);
}
var simpleGradientKeys = ['start', 'end',];
function isSimpleGradient(value,) {
  return value && simpleGradientKeys.every((key7) => key7 in value);
}
var linearGradientKeys = ['angle', 'alpha',];
var LinearGradient = {
  /**
   * @param value -
   */
  isLinearGradient: (value) => {
    return isObject2(value,) && linearGradientKeys.every((key7) => key7 in value) &&
      (isSimpleGradient(value,) || isMultiStopGradient(value,));
  },
  /** @internal */
  hash: (linearGradient) => {
    return linearGradient.angle ^ gradientColorStopsHash(linearGradient, linearGradient.alpha,);
  },
  /** @internal */
  toCSS: (linearGradient, overrideAngle, getStopValue,) => {
    const stops = gradientColorStops(linearGradient, linearGradient.alpha,);
    const angle = overrideAngle !== void 0 ? overrideAngle : linearGradient.angle;
    const cssStops = stops.map((stop) =>
      `${(getStopValue == null ? void 0 : getStopValue(stop.value,)) ?? stop.value} ${stop.position * 100}%`
    );
    return `linear-gradient(${angle}deg, ${cssStops.join(', ',)})`;
  },
};
var radialGradientKeys = ['widthFactor', 'heightFactor', 'centerAnchorX', 'centerAnchorY', 'alpha',];
var RadialGradient = {
  /**
   * @param value -
   * @public
   */
  isRadialGradient: (value) => {
    return isObject2(value,) && radialGradientKeys.every((key7) => key7 in value) &&
      (isSimpleGradient(value,) || isMultiStopGradient(value,));
  },
  /** @internal */
  hash: (radialGradient) => {
    return radialGradient.centerAnchorX ^ radialGradient.centerAnchorY ^ radialGradient.widthFactor ^ radialGradient.heightFactor ^
      gradientColorStopsHash(radialGradient, radialGradient.alpha,);
  },
  /** @internal */
  toCSS: (radialGradient, getStopValue,) => {
    const {
      alpha: alpha2,
      widthFactor,
      heightFactor,
      centerAnchorX,
      centerAnchorY,
    } = radialGradient;
    const stops = gradientColorStops(radialGradient, alpha2,);
    const cssStops = stops.map((stop, index,) => {
      const nextStop = stops[index + 1];
      const position = stop.position === 1 && (nextStop == null ? void 0 : nextStop.position) === 1 ? stop.position - 1e-4 : stop.position;
      return `${(getStopValue == null ? void 0 : getStopValue(stop.value,)) ?? stop.value} ${position * 100}%`;
    },);
    return `radial-gradient(${widthFactor * 100}% ${heightFactor * 100}% at ${centerAnchorX * 100}% ${centerAnchorY * 100}%, ${
      cssStops.join(', ',)
    })`;
  },
};
function collectBackgroundFromProps({
  background,
  backgroundColor,
}, style2,) {
  if (backgroundColor) {
    if (typeof backgroundColor === 'string' || isMotionValue2(backgroundColor,)) {
      style2.backgroundColor = backgroundColor;
    } else if (Color.isColorObject(background,)) {
      style2.backgroundColor = background.initialValue || Color.toRgbString(background,);
    }
  } else if (background) {
    background = Animatable.get(background, null,);
    if (typeof background === 'string' || isMotionValue2(background,)) {
      style2.background = background;
    } else if (LinearGradient.isLinearGradient(background,)) {
      style2.background = LinearGradient.toCSS(background,);
    } else if (RadialGradient.isRadialGradient(background,)) {
      style2.background = RadialGradient.toCSS(background,);
    } else if (Color.isColorObject(background,)) {
      style2.backgroundColor = background.initialValue || Color.toRgbString(background,);
    }
  }
}
function extractStyleFromProps(props, name, styleRef, into,) {
  if (into === void 0) {
    into = name;
  }
  if (props[name] !== void 0) {
    styleRef[into] = props[name];
    return;
  }
}
function hasLeftAndRight(style2,) {
  if (!style2) return false;
  return style2.left !== void 0 && style2.right !== void 0;
}
function hasTopAndBottom(style2,) {
  if (!style2) return false;
  return style2.top !== void 0 && style2.bottom !== void 0;
}
function getStyleForFrameProps(props,) {
  if (!props) {
    return {};
  }
  const style2 = {};
  if (props.preserve3d === true) {
    style2.transformStyle = 'preserve-3d';
  } else if (props.preserve3d === false) {
    style2.transformStyle = 'flat';
  }
  if (props.backfaceVisible === true) {
    style2.backfaceVisibility = 'visible';
  } else if (props.backfaceVisible === false) {
    style2.backfaceVisibility = 'hidden';
  }
  if (style2.backfaceVisibility) {
    style2.WebkitBackfaceVisibility = style2.backfaceVisibility;
  }
  if (props.perspective !== void 0) {
    style2.perspective = style2.WebkitPerspective = props.perspective;
  }
  if (!props.__fromCanvasComponent) {
    if (props.center === true) {
      style2.left = '50%';
      style2.top = '50%';
    } else {
      if (props.center === 'x') {
        style2.left = '50%';
      } else if (props.center === 'y') {
        style2.top = '50%';
      }
    }
  }
  extractStyleFromProps(props, 'size', style2,);
  extractStyleFromProps(props, 'width', style2,);
  extractStyleFromProps(props, 'height', style2,);
  extractStyleFromProps(props, 'minWidth', style2,);
  extractStyleFromProps(props, 'minHeight', style2,);
  extractStyleFromProps(props, 'top', style2,);
  extractStyleFromProps(props, 'right', style2,);
  extractStyleFromProps(props, 'bottom', style2,);
  extractStyleFromProps(props, 'left', style2,);
  extractStyleFromProps(props, 'position', style2,);
  extractStyleFromProps(props, 'overflow', style2,);
  extractStyleFromProps(props, 'opacity', style2,);
  if (!props._border || !props._border.borderWidth) extractStyleFromProps(props, 'border', style2,);
  extractStyleFromProps(props, 'borderRadius', style2,);
  extractStyleFromProps(props, 'radius', style2, 'borderRadius',);
  extractStyleFromProps(props, 'color', style2,);
  extractStyleFromProps(props, 'shadow', style2, 'boxShadow',);
  extractStyleFromProps(props, 'x', style2,);
  extractStyleFromProps(props, 'y', style2,);
  extractStyleFromProps(props, 'z', style2,);
  extractStyleFromProps(props, 'rotate', style2,);
  extractStyleFromProps(props, 'rotateX', style2,);
  extractStyleFromProps(props, 'rotateY', style2,);
  extractStyleFromProps(props, 'rotateZ', style2,);
  extractStyleFromProps(props, 'scale', style2,);
  extractStyleFromProps(props, 'scaleX', style2,);
  extractStyleFromProps(props, 'scaleY', style2,);
  extractStyleFromProps(props, 'skew', style2,);
  extractStyleFromProps(props, 'skewX', style2,);
  extractStyleFromProps(props, 'skewY', style2,);
  extractStyleFromProps(props, 'originX', style2,);
  extractStyleFromProps(props, 'originY', style2,);
  extractStyleFromProps(props, 'originZ', style2,);
  collectBackgroundFromProps(props, style2,);
  return style2;
}
function hasEvents(props,) {
  for (const key7 in props) {
    if (
      key7 === 'drag' || key7.startsWith('while',) ||
      typeof asRecord(props,)[key7] === 'function' && key7.startsWith('on',) && !key7.includes('Animation',)
    ) {
      return true;
    }
  }
  return false;
}
var pointerEvents = [
  'onClick',
  'onDoubleClick',
  'onMouse',
  'onMouseDown',
  'onMouseUp',
  'onTapDown',
  'onTap',
  'onTapUp',
  'onPointer',
  'onPointerDown',
  'onPointerUp',
  'onTouch',
  'onTouchDown',
  'onTouchUp',
];
var pointerEventsSet = /* @__PURE__ */ (() =>
  /* @__PURE__ */ new Set([...pointerEvents, ...pointerEvents.map((event) => `${event}Capture`),// Add capture event variants
  ],))();
function getCursorFromEvents(props,) {
  if (props.drag) {
    return 'grab';
  }
  for (const key7 in props) {
    if (pointerEventsSet.has(key7,)) {
      return 'pointer';
    }
  }
  return void 0;
}
var overflowKey = 'overflow';
function hasScrollableContent(props,) {
  if (hasScrollingOverflow(props,)) return true;
  if (!props.style) return false;
  if (hasScrollingOverflow(props.style,)) return true;
  return false;
}
function hasScrollingOverflow(props,) {
  if (overflowKey in props && (props[overflowKey] === 'scroll' || props[overflowKey] === 'auto')) return true;
  return false;
}
function unwrapFrameProps(frameProps,) {
  const {
    left,
    top,
    bottom,
    right,
    width,
    height,
    center,
    _constraints,
    size,
    widthType,
    heightType,
    positionFixed,
    positionAbsolute,
  } = frameProps;
  const minWidth = resolveMotionValue(frameProps.minWidth,);
  const minHeight = resolveMotionValue(frameProps.minHeight,);
  const maxWidth = resolveMotionValue(frameProps.maxWidth,);
  const maxHeight = resolveMotionValue(frameProps.maxHeight,);
  const constraintProps = {
    top: resolveMotionValue(top,),
    left: resolveMotionValue(left,),
    bottom: resolveMotionValue(bottom,),
    right: resolveMotionValue(right,),
    width: resolveMotionValue(width,),
    height: resolveMotionValue(height,),
    size: resolveMotionValue(size,),
    center,
    _constraints,
    widthType,
    heightType,
    positionFixed,
    positionAbsolute,
    minWidth,
    minHeight,
    maxWidth,
    maxHeight,
  };
  return constraintProps;
}
var defaultFrameRect = {
  x: 0,
  y: 0,
  width: 200,
  height: 200,
};
function useStyleAndRect(props,) {
  React4.useInsertionEffect(() => {
    injectComponentCSSRules();
  }, [],);
  const inCodeComponent = useContext(ComponentContainerContext,);
  const {
    style: style2,
    _initialStyle,
    __fromCanvasComponent,
    size,
  } = props;
  const unwrappedProps = unwrapFrameProps(props,);
  const constraintsRect = useConstraints(unwrappedProps,);
  const defaultStyle = {
    display: 'block',
    flex: (style2 == null ? void 0 : style2.flex) ?? '0 0 auto',
    userSelect: RenderTarget.current() !== RenderTarget.preview ? 'none' : void 0,
  };
  if (!props.__fromCanvasComponent) {
    defaultStyle.backgroundColor = props.background === void 0 ? 'rgba(0, 170, 255, 0.3)' : void 0;
  }
  const shouldDisablePointerEvents = !hasEvents(props,) && !props.__fromCanvasComponent && !hasScrollableContent(props,);
  const safeToEditPointerEvents = props.style ? !('pointerEvents' in props.style) : true;
  if (shouldDisablePointerEvents && safeToEditPointerEvents) {
    defaultStyle.pointerEvents = 'none';
  }
  const addTextCentering = React4.Children.count(props.children,) > 0 && React4.Children.toArray(props.children,).every((child) => {
    return typeof child === 'string' || typeof child === 'number';
  },);
  const centerTextStyle = addTextCentering && {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    textAlign: 'center',
  };
  const propsStyle = getStyleForFrameProps(props,);
  if (size === void 0 && !__fromCanvasComponent) {
    if (!hasLeftAndRight(propsStyle,)) {
      defaultStyle.width = defaultFrameRect.width;
    }
    if (!hasTopAndBottom(propsStyle,)) {
      defaultStyle.height = defaultFrameRect.height;
    }
  }
  if (unwrappedProps.minWidth !== void 0) {
    defaultStyle.minWidth = unwrappedProps.minWidth;
  }
  if (unwrappedProps.minHeight !== void 0) {
    defaultStyle.minHeight = unwrappedProps.minHeight;
  }
  let constraintsStyle = {};
  if (constraintsEnabled(unwrappedProps,)) {
    if (constraintsRect && !isAutoSized(props,)) {
      constraintsStyle = {
        left: constraintsRect.x,
        top: constraintsRect.y,
        width: constraintsRect.width,
        height: constraintsRect.height,
        right: void 0,
        bottom: void 0,
      };
    }
  }
  Object.assign(defaultStyle, centerTextStyle, _initialStyle, propsStyle, constraintsStyle, style2,);
  Object.assign(defaultStyle, {
    overflowX: defaultStyle.overflowX ?? defaultStyle.overflow,
    overflowY: defaultStyle.overflowY ?? defaultStyle.overflow,
    overflow: void 0,
  },);
  Layer.applyWillChange(props, defaultStyle, true,);
  let resultStyle = defaultStyle;
  if (!defaultStyle.transform) {
    resultStyle = {
      x: 0,
      y: 0,
      ...defaultStyle,
    };
  }
  const isRenderingStaticContent = isStaticRenderer();
  if (props.positionSticky) {
    if (!isRenderingStaticContent || inCodeComponent) {
      resultStyle.position = 'sticky';
      resultStyle.willChange = 'transform';
      resultStyle.zIndex = 1;
      resultStyle.top = props.positionStickyTop;
      resultStyle.right = props.positionStickyRight;
      resultStyle.bottom = props.positionStickyBottom;
      resultStyle.left = props.positionStickyLeft;
    }
  } else if (isRenderingStaticContent && (props.positionFixed || props.positionAbsolute)) {
    resultStyle.position = 'absolute';
  }
  if ('rotate' in resultStyle && resultStyle.rotate === void 0) {
    delete resultStyle.rotate;
  }
  return [resultStyle, constraintsRect,];
}
var filteredProps = /* @__PURE__ */ new Set([
  'width',
  'height',
  'opacity',
  'overflow',
  'radius',
  'background',
  'color',
  'x',
  'y',
  'z',
  'rotate',
  'rotateX',
  'rotateY',
  'rotateZ',
  'scale',
  'scaleX',
  'scaleY',
  'skew',
  'skewX',
  'skewY',
  'originX',
  'originY',
  'originZ',
],);
function getMotionProps(props,) {
  const motionProps = {};
  for (const key7 in props) {
    const isValid = isValidMotionProp(key7,) || isPropValid(key7,);
    if (isValid && !filteredProps.has(key7,)) {
      motionProps[key7] = asRecord(props,)[key7];
    } else if (key7 === 'positionTransition' || key7 === 'layoutTransition') {
      motionProps['layout'] = true;
      if (typeof asRecord(props,)[key7] !== 'boolean' && !props.transition) {
        motionProps['transition'] = asRecord(props,)[key7];
      }
    }
  }
  return motionProps;
}
function hasDataFramerName(props,) {
  return 'data-framer-name' in props;
}
var VisibleFrame = /* @__PURE__ */ forwardRef(function VisibleFrame2(props, forwardedRef,) {
  const {
    name,
    center,
    border,
    _border,
    __portal,
  } = props;
  const {
    props: propsWithOverrides,
    children,
  } = processOverrideForwarding(props,);
  const motionProps = getMotionProps(propsWithOverrides,);
  const layoutId = useLayoutId2(props,);
  const cursor = getCursorFromEvents(props,);
  const fallbackRef = useRef3(null,);
  const ref = forwardedRef ?? fallbackRef;
  const dataProps = {
    'data-framer-component-type': props.componentType ?? 'Frame',
    'data-framer-cursor': cursor,
    'data-framer-highlight': cursor === 'pointer' ? true : void 0,
    'data-layoutid': layoutId,
    'data-framer-offset-parent-id': asRecord(props,)['data-framer-offset-parent-id'],
  };
  if (!hasDataFramerName(props,) && name) {
    asRecord(dataProps,)['data-framer-name'] = name;
  }
  const [currentStyle, rect,] = useStyleAndRect(propsWithOverrides,);
  const unwrappedProps = unwrapFrameProps(propsWithOverrides,);
  const autoSized = isAutoSized(unwrappedProps,);
  if (center && !(rect && !autoSized && constraintsEnabled(unwrappedProps,))) {
    if (!motionProps.transformTemplate) motionProps.transformTemplate = transformTemplate(center,);
    Object.assign(dataProps, layoutHintDataPropsForCenter(center,),);
  } else if (!motionProps.transformTemplate) {
    motionProps.transformTemplate = void 0;
  }
  useMeasureLayout(props, ref,);
  const backgroundImage = backgroundImageFromProps(props,);
  const inCodeComponent = useContext(ComponentContainerContext,);
  const parentSize = resolveParentSize(propsWithOverrides, unwrappedProps, rect, inCodeComponent,);
  const wrappedContent = useProvideParentSize(
    /* @__PURE__ */ jsxs(Fragment, {
      children: [
        backgroundImage
          ? /* @__PURE__ */ jsx3(BackgroundImageComponent, {
            alt: props.alt ?? '',
            image: backgroundImage,
            containerSize: rect ?? void 0,
            nodeId: props.id && nodeIdFromString(props.id,),
            layoutId,
          },)
          : null,
        children,
        /* @__PURE__ */ jsx3(Border, {
          ..._border,
          border,
          layoutId,
        },),
      ],
    },),
    parentSize,
  );
  const MotionComponent = htmlElementAsMotionComponent(props.as,);
  return /* @__PURE__ */ jsxs(MotionComponent, {
    ...dataProps,
    ...motionProps,
    layoutId,
    style: currentStyle,
    ref,
    children: [wrappedContent, __portal,],
  },);
},);
var FrameWithMotion = /* @__PURE__ */ forwardRef(function FrameWithMotion2(props, ref,) {
  countNodeRender();
  const {
    visible = true,
  } = props;
  if (!visible) return null;
  return /* @__PURE__ */ jsx3(VisibleFrame, {
    ...props,
    ref,
  },);
},);
function resolveParentSize(props, unwrappedProps, rect, inCodeComponent,) {
  if (inCodeComponent) {
    const parentSize = rect
      ? {
        width: rect.width,
        height: rect.height,
      }
      : 1;
    return parentSize;
  }
  const {
    _usesDOMRect,
  } = props;
  const {
    widthType = 0,
    heightType = 0,
    width,
    height,
  } = unwrappedProps;
  if (rect && !_usesDOMRect) {
    return rect;
  }
  if (widthType === 0 && heightType === 0 && typeof width === 'number' && typeof height === 'number') {
    return {
      width,
      height,
    };
  }
  if (_usesDOMRect || props.positionFixed || props.positionAbsolute) {
    return 2;
  }
  return 0;
}
function EmptyState({
  title = '',
  description = 'Click and drag the connector to any frame on the canvas \u2192',
  children,
  size,
  hide,
  insideUserCodeComponent = false,
  position = 'absolute',
},) {
  const {
    target,
  } = RenderEnvironment;
  const childCount = React4.Children.count(children,);
  if (insideUserCodeComponent && childCount === 0) {
    return /* @__PURE__ */ jsx3(FrameWithMotion, {
      ...size,
      'data-name': 'placeholder',
    },);
  }
  if (target !== RenderTarget.canvas) return null;
  if (hide) return null;
  if (childCount !== 0) return null;
  return /* @__PURE__ */ jsx3(FrameWithMotion, {
    className: 'framerInternalUI-canvasPlaceholder',
    top: 0,
    left: 0,
    bottom: 0,
    right: 0,
    style: {
      position,
      ...size,
    },
    children: /* @__PURE__ */ jsx3('div', {
      style: {
        display: 'flex',
        alignItems: 'center',
        lineHeight: '1.4',
        height: '100%',
        width: '100%',
      },
      children: /* @__PURE__ */ jsxs('div', {
        style: {
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          flexDirection: 'column',
          width: '100%',
          // Use a mask to fade out the right edge of the content as it gets cropped.
          WebkitMaskImage: `linear-gradient(90deg, black, black calc(100% - 12px * ${scaleFactor}), transparent)`,
        },
        children: [
          /* @__PURE__ */ jsx3(Title, {
            children: title,
          },),
          /* @__PURE__ */ jsx3(Description, {
            children: description,
          },),
        ],
      },),
    },),
  }, 'empty-state',);
}
var scaleFactor = 'var(--framerInternalCanvas-canvasPlaceholderContentScaleFactor, 1)';
function Title({
  children,
},) {
  return /* @__PURE__ */ jsx3('span', {
    style: {
      display: 'flex',
      flexDirection: 'column',
      textAlign: 'center',
      flexGrow: 1,
      flexShrink: 0,
      fontWeight: 600,
      marginBottom: '5px',
    },
    children,
  },);
}
function Description({
  children,
},) {
  return /* @__PURE__ */ jsx3('span', {
    style: {
      display: 'flex',
      flexDirection: 'column',
      textAlign: 'center',
      flexGrow: 1,
      flexShrink: 0,
      fontWeight: 400,
      maxWidth: '200px',
    },
    children,
  },);
}
var TREE_ROOT_ID = '__LAYOUT_TREE_ROOT';
var SharedLayoutContext = /* @__PURE__ */ React4.createContext({
  schedulePromoteTree: () => {},
  scheduleProjectionDidUpdate: () => {},
  initLead: () => {},
},);
var SharedLayoutRoot = class extends Component2 {
  constructor() {
    super(...arguments,);
    __publicField(this, 'shouldAnimate', false,);
    __publicField(this, 'transition',);
    __publicField(this, 'lead',);
    __publicField(this, 'follow',);
    __publicField(this, 'scheduledPromotion', false,);
    __publicField(this, 'scheduledDidUpdate', false,);
    __publicField(this, 'scheduleProjectionDidUpdate', () => {
      this.scheduledDidUpdate = true;
    },);
    __publicField(this, 'schedulePromoteTree', (tree, transition, shouldAnimate,) => {
      this.follow = this.lead;
      this.shouldAnimate = shouldAnimate;
      this.lead = tree;
      this.transition = transition;
      this.scheduledPromotion = true;
    },);
    __publicField(this, 'initLead', (tree, shouldAnimate,) => {
      this.follow = this.lead;
      this.lead = tree;
      if (this.follow && shouldAnimate) {
        this.follow.layoutMaybeMutated = true;
      }
    },);
    __publicField(this, 'sharedLayoutContext', {
      schedulePromoteTree: this.schedulePromoteTree,
      scheduleProjectionDidUpdate: this.scheduleProjectionDidUpdate,
      initLead: this.initLead,
    },);
  }
  // Runs after all descendent SharedLayoutTree finish taking snapshots in
  // their getSnapshotBeforeUpdate lifecycle method.
  getSnapshotBeforeUpdate() {
    var _a;
    if (!this.scheduledPromotion || !this.lead || !this.follow) return null;
    const needsReset = ((_a = this.lead) == null ? void 0 : _a.layoutMaybeMutated) && !this.shouldAnimate;
    this.lead.projectionNodes.forEach((projectionNode) => {
      var _a2;
      projectionNode == null ? void 0 : projectionNode.promote({
        needsReset,
        transition: this.shouldAnimate ? this.transition : void 0,
        preserveFollowOpacity: projectionNode.options.layoutId === TREE_ROOT_ID && !((_a2 = this.follow) == null ? void 0 : _a2.isExiting),
      },);
    },);
    if (this.shouldAnimate) {
      this.follow.layoutMaybeMutated = true;
    } else {
      this.scheduleProjectionDidUpdate();
    }
    this.lead.layoutMaybeMutated = false;
    this.transition = void 0;
    this.scheduledPromotion = false;
    return null;
  }
  componentDidUpdate() {
    var _a, _b;
    if (!this.lead) return null;
    if (this.scheduledDidUpdate) {
      (_b = (_a = this.lead.rootProjectionNode) == null ? void 0 : _a.root) == null ? void 0 : _b.didUpdate();
      this.scheduledDidUpdate = false;
    }
  }
  render() {
    return /* @__PURE__ */ jsx3(SharedLayoutContext.Provider, {
      value: this.sharedLayoutContext,
      children: this.props.children,
    },);
  }
};
var rootStyles = {
  width: '100%',
  height: '100%',
  backgroundColor: 'none',
};
function MagicMotionCrossfadeRoot(props,) {
  return /* @__PURE__ */ jsx3(motion.div, {
    layoutId: TREE_ROOT_ID,
    style: rootStyles,
    children: props.children,
  },);
}
function useMemoOne(factory, inputs,) {
  const initial = useState(() => ({
    inputs,
    result: factory(),
  }))[0];
  const isFirstRun = useRef3(true,);
  const committed = useRef3(initial,);
  const useCache = isFirstRun.current || Boolean(inputs && committed.current.inputs && isEqual(inputs, committed.current.inputs, false,),);
  const cache2 = useCache ? committed.current : {
    inputs,
    result: factory(),
  };
  useEffect(() => {
    isFirstRun.current = false;
    committed.current = cache2;
  }, [cache2,],);
  return cache2.result;
}
function setRef(ref, value,) {
  if (isFunction(ref,)) {
    ref(value,);
  } else if (isMutableRef(ref,)) {
    ref.current = value;
  }
}
function isMutableRef(ref,) {
  return isObject2(ref,) && 'current' in ref;
}
function refHasValue(ref,) {
  return isMutableRef(ref,) && ref.current !== null;
}
function useStableRefWithObserver() {
  const callbacks = useConstant2(() => /* @__PURE__ */ new Set());
  const cleanups = useConstant2(() => /* @__PURE__ */ new Map());
  return useConstant2(() => (ref, refCallback,) => {
    return {
      get current() {
        return ref.current;
      },
      set current(value,) {
        if (value === ref.current) return;
        ref.current = value;
        if (refCallback) refCallback(value,);
        cleanups.forEach((cleanup, callback,) => {
          if (cleanup) {
            cleanup();
          } else {
            callback(null,);
          }
        },);
        if (value === null) {
          cleanups.clear();
          callbacks.clear();
          return;
        }
        callbacks.forEach((callback) => {
          const cleanup = callback(value,);
          cleanups.set(callback, cleanup,);
        },);
      },
      /**
       * Adds `fn` to the list of callbacks to be called when the ref is updated.
       * Executes `fn` immediately if the ref already has a value.
       */
      observe(fn,) {
        callbacks.add(fn,);
        const value = ref.current;
        if (value) {
          const cleanup = fn(value,);
          cleanups.set(fn, cleanup,);
        }
      },
      /**
       * Removes `fn` from the list of callbacks.
       * Runs the cleanup for `fn` if it has been called before.
       */
      unobserve(fn,) {
        if (!fn) return;
        callbacks.delete(fn,);
        if (!cleanups.has(fn,)) return;
        const cleanupFn = cleanups.get(fn,);
        if (cleanupFn) {
          cleanupFn();
        } else {
          fn(null,);
        }
        cleanups.delete(fn,);
      },
    };
  });
}
function useObserverRef(forwardedRef,) {
  const fallbackRef = useRef3(null,);
  const createStableRefWithObserver = useStableRefWithObserver();
  return useConstant2(() => {
    if (isMutableRef(forwardedRef,)) return createStableRefWithObserver(forwardedRef,);
    if (isFunction(forwardedRef,)) return createStableRefWithObserver(fallbackRef, forwardedRef,);
    return createStableRefWithObserver(fallbackRef,);
  },);
}
function useRefEffect(ref, effect, deps,) {
  const effectRef = useRef3();
  const depsChangedRef = useRef3();
  useMemoOne(() => {
    if (depsChangedRef.current !== void 0) {
      depsChangedRef.current = true;
    }
  }, deps ?? [{},],);
  if (!ref) return;
  const depsChanged = depsChangedRef.current;
  if (depsChanged === false) return;
  depsChangedRef.current = false;
  ref.unobserve(effectRef.current,);
  ref.observe(effect,);
  effectRef.current = effect;
}
var SharedIntersectionObserver = class {
  constructor(options,) {
    __publicField(this, 'sharedIntersectionObserver',);
    __publicField(this, 'callbacks', /* @__PURE__ */ new WeakMap(),);
    this.sharedIntersectionObserver = new IntersectionObserver(this.intersectionObserverCallback.bind(this,), options,);
  }
  intersectionObserverCallback(entries, observer2,) {
    for (const entry of entries) {
      const callbackForElement = this.callbacks.get(entry.target,);
      if (callbackForElement) callbackForElement(entry, observer2,);
    }
  }
  observeElementWithCallback(element, callback,) {
    if (!this.sharedIntersectionObserver) return;
    this.sharedIntersectionObserver.observe(element,);
    this.callbacks.set(element, callback,);
  }
  unobserve(element,) {
    if (!this.sharedIntersectionObserver) return;
    this.sharedIntersectionObserver.unobserve(element,);
    this.callbacks.delete(element,);
  }
  get root() {
    var _a;
    return (_a = this.sharedIntersectionObserver) == null ? void 0 : _a.root;
  }
};
var SharedIntersectionObserverContext = /* @__PURE__ */ createContext(/* @__PURE__ */ new Map(),);
function observeElement(observers2, key7, element, root, callback, rootMargin, threshold,) {
  let observer2 = observers2.get(key7,);
  if (!observer2 || observer2.root !== (root == null ? void 0 : root.current)) {
    observer2 = new SharedIntersectionObserver({
      root: root == null ? void 0 : root.current,
      rootMargin,
      threshold,
    },);
    observers2.set(key7, observer2,);
  }
  observer2.observeElementWithCallback(element, callback,);
  return () => {
    observer2.unobserve(element,);
  };
}
function _useSharedIntersectionObserver(ref, callback, options,) {
  const key7 = useConstant2(() => `${options.rootMargin}`);
  const observers2 = useContext(SharedIntersectionObserverContext,);
  const {
    enabled,
    root,
    rootMargin,
    threshold,
  } = options;
  useRefEffect(ref, (element) => {
    if (!enabled) return;
    if (element === null) return;
    return observeElement(observers2, key7, element, root, callback, rootMargin, threshold,);
  }, [enabled, callback, root, rootMargin, threshold,],);
}
var useSharedIntersectionObserver = typeof IntersectionObserver === 'undefined' ? noop2 : _useSharedIntersectionObserver;
var thresholds2 = /* @__PURE__ */ new Array(100,).fill(void 0,).map((_, i,) => i * 0.01);
var ViewportContext = /* @__PURE__ */ React4.createContext(null,);
function useAppearEffect(ref, appearCallback, options,) {
  const internalState = React4.useRef({
    isInView: false,
    hasAnimatedOnce: false,
  },);
  const {
    enabled,
    animateOnce,
    threshold,
    rootMargin = `0px 0px 0px 0px`,
  } = options;
  const callback = React4.useCallback((entry) => {
    const {
      isInView,
      hasAnimatedOnce,
    } = internalState.current;
    const isIntersecting = isIntersectingWithThreshold(entry, (threshold == null ? void 0 : threshold.y) ?? 0,);
    if (isIntersecting && !isInView) {
      if (animateOnce && hasAnimatedOnce) return;
      internalState.current.hasAnimatedOnce = true;
      internalState.current.isInView = true;
      appearCallback(true,);
      return;
    }
    if (!isIntersecting && isInView) {
      internalState.current.isInView = false;
      if (animateOnce) return;
      appearCallback(false,);
      return;
    }
  }, [animateOnce, threshold == null ? void 0 : threshold.y, appearCallback,],);
  useSharedIntersectionObserver(ref, callback, {
    threshold: thresholds2,
    rootMargin,
    enabled: enabled ?? true,
  },);
}
function calculatedIntersection(intersectionRect, boundingClientRect,) {
  if (boundingClientRect.height === 0) return 0;
  return intersectionRect.height / Math.min(boundingClientRect.height, safeWindow.innerHeight,);
}
function isIntersectingWithThreshold({
  boundingClientRect,
  intersectionRect,
  isIntersecting,
}, threshold,) {
  if (boundingClientRect.height === 0) return isIntersecting;
  return isIntersecting && calculatedIntersection(intersectionRect, boundingClientRect,) >= threshold;
}
var LayoutTree = class extends Component2 {
  constructor() {
    super(...arguments,);
    __publicField(this, 'layoutMaybeMutated', false,);
    __publicField(this, 'projectionNodes', /* @__PURE__ */ new Map(),);
    __publicField(this, 'rootProjectionNode',);
    __publicField(this, 'isExiting',);
    __publicField(this, 'shouldPreserveFollowOpacity', (child) => {
      return child.options.layoutId === TREE_ROOT_ID && !this.props.isExiting;
    },);
    __publicField(this, 'switchLayoutGroupContext', {
      register: (child) => this.addChild(child,),
      deregister: (child) => this.removeChild(child,),
      // Configs to use for the initial promotion on mount in Motion
      transition: this.props.isLead !== void 0 && this.props.animatesLayout ? this.props.transition : void 0,
      shouldPreserveFollowOpacity: this.shouldPreserveFollowOpacity,
    },);
  }
  componentDidMount() {
    if (this.props.isLead) {
      this.props.sharedLayoutContext.initLead(this, !!this.props.animatesLayout,);
    }
  }
  shouldComponentUpdate(nextProps,) {
    const {
      isLead,
      isExiting,
      isOverlayed,
      animatesLayout,
      transition,
      sharedLayoutContext,
    } = nextProps;
    this.isExiting = isExiting;
    if (isLead === void 0) return true;
    const hasBecomeLead = !this.props.isLead && isLead;
    const hasExitBeenCancelled = this.props.isExiting && !isExiting;
    const shouldPromote = hasBecomeLead || hasExitBeenCancelled;
    const shouldDemote = !!this.props.isLead && !isLead;
    const overlayChanged = this.props.isOverlayed !== isOverlayed;
    if (shouldPromote || shouldDemote) {
      this.projectionNodes.forEach((projection) => projection == null ? void 0 : projection.willUpdate());
    }
    if (shouldPromote) {
      sharedLayoutContext.schedulePromoteTree(this, transition, !!animatesLayout,);
    } else if (overlayChanged) {
      sharedLayoutContext.scheduleProjectionDidUpdate();
    }
    return !!shouldPromote && !!animatesLayout;
  }
  addChild(child,) {
    const layoutId = child.options.layoutId;
    if (layoutId) {
      this.projectionNodes.set(layoutId, child,);
      this.setRootChild(child,);
    }
  }
  /**
   * As children are added, make sure that `this.rootProjectionNode` is always the
   * child with the smallest depth.
   */
  setRootChild(child,) {
    if (!this.rootProjectionNode) return this.rootProjectionNode = child;
    this.rootProjectionNode = this.rootProjectionNode.depth < child.depth ? this.rootProjectionNode : child;
  }
  removeChild(child,) {
    const layoutId = child.options.layoutId;
    if (layoutId) {
      this.projectionNodes.delete(layoutId,);
    }
  }
  render() {
    return /* @__PURE__ */ jsx3(SwitchLayoutGroupContext.Provider, {
      value: this.switchLayoutGroupContext,
      children: this.props.children,
    },);
  }
};
var SharedLayoutTree = (props) => {
  const sharedLayoutContext = React4.useContext(SharedLayoutContext,);
  return /* @__PURE__ */ jsx3(LayoutTree, {
    ...props,
    sharedLayoutContext,
  },);
};
var NavigationContainerContext = /* @__PURE__ */ React4.createContext(true,);
function useIsInCurrentNavigationTarget() {
  const isInCurrentNavigationTarget = useContext(NavigationContainerContext,);
  return isInCurrentNavigationTarget;
}
function newMap() {
  return /* @__PURE__ */ new Map();
}
function useMap() {
  return useConstant2(newMap,);
}
var NavigationTargetContext = /* @__PURE__ */ createContext({
  register: () => {},
  deregister: () => {},
},);
var NavigationTargetWrapper = ({
  isCurrent,
  isOverlayed,
  children,
},) => {
  const callbacks = useMap();
  const register = useCallback((fn) => {
    if (callbacks.has(fn,)) {
      console.warn('NavigationTargetWrapper: already registered',);
      return;
    }
    callbacks.set(fn, void 0,);
  }, [callbacks,/* constant, so should never change */
  ],);
  const deregister = useCallback((fn) => {
    const cleanup = callbacks.get(fn,);
    cleanup == null ? void 0 : cleanup();
    callbacks.delete(fn,);
  }, [callbacks,/* constant, so should never change */
  ],);
  const value = useRef3({
    register,
    deregister,
  },).current;
  useEffect(() => {
    callbacks.forEach((_, cb,) => {
      const newCleanup = cb(isCurrent, isOverlayed,);
      callbacks.set(cb, isFunction(newCleanup,) ? newCleanup : void 0,);
    },);
    return () => {
      callbacks.forEach((cleanup, cb,) => {
        if (!cleanup) return;
        cleanup();
        callbacks.set(cb, void 0,);
      },);
    };
  }, [isCurrent, isOverlayed, callbacks,/* constant, so should never change */
  ],);
  return /* @__PURE__ */ jsx3(NavigationTargetContext.Provider, {
    value,
    children,
  },);
};
function useOnCurrentTargetChange(callback, deps = [],) {
  const {
    register,
    deregister,
  } = useContext(NavigationTargetContext,);
  useEffect(() => {
    if (!callback) return;
    register(callback,);
    return () => deregister(callback,);
  }, [register, deregister, ...deps,],);
}
var NavigationContainer = /* @__PURE__ */ React4.memo(function NavigationContainer2({
  isLayeredContainer,
  isCurrent,
  isPrevious,
  isOverlayed = false,
  visible,
  transitionProps,
  children,
  backdropColor,
  onTapBackdrop,
  backfaceVisible,
  exitBackfaceVisible,
  animation,
  exitAnimation,
  instant,
  initialProps,
  exitProps,
  position = {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
  },
  withMagicMotion,
  index,
  areMagicMotionLayersPresent,
  id: id3,
  isInitial,
},) {
  const animate3 = useAnimation();
  const presence = useContext(PresenceContext,);
  const {
    persistLayoutIdCache,
  } = useContext(LayoutIdContext,);
  const previousState = useRef3({
    wasCurrent: void 0,
    wasPrevious: false,
    wasBeingRemoved: false,
    wasReset: true,
    origins: getOriginProps({}, initialProps, transitionProps,),
  },);
  const viewportRef = useRef3(null,);
  const isBeingRemoved = presence !== null && !presence.isPresent;
  if (isCurrent && previousState.current.wasCurrent === void 0) persistLayoutIdCache();
  useEffect(() => {
    if (isLayeredContainer || !animate3) return;
    if (isBeingRemoved) {
      previousState.current = {
        ...previousState.current,
        wasBeingRemoved: isBeingRemoved,
      };
      return;
    }
    const {
      wasPrevious,
      wasCurrent,
    } = previousState.current;
    const shouldAnimateIn = isCurrent && !wasCurrent ||
      // If the screen was being removed as a result of a "go back" transition, but that removal is interrupted,
      // resulting in this screen being restored to the current screen, we need to trigger an animation.
      !isBeingRemoved && previousState.current.wasBeingRemoved && isCurrent;
    const shouldAnimateOut = isPrevious && !wasPrevious;
    const origins = getOriginProps(previousState.current.origins, initialProps, transitionProps,);
    let wasReset = previousState.current.wasReset;
    if (shouldAnimateIn || shouldAnimateOut) {
      animate3.stop();
      void animate3.start({
        zIndex: index,
        ...origins,
        // @TODO: Ignored for now, but should re-check later.
        ...transitionProps,
        // biome-ignore lint/suspicious/noExplicitAny: has been this way from before the biome introduction
      },);
      wasReset = false;
    } else if (wasReset === false) {
      animate3.stop();
      animate3.set({
        zIndex: index,
        ...allAnimatableProperties,
        opacity: 0,
      },);
      wasReset = true;
    }
    previousState.current = {
      wasCurrent: !!isCurrent,
      wasPrevious: !!isPrevious,
      wasBeingRemoved: false,
      wasReset,
      origins,
    };
  }, [isCurrent, isPrevious, isBeingRemoved,],);
  const transition = instant
    ? {
      type: false,
    }
    : 'velocity' in animation
    ? {
      ...animation,
      velocity: 0,
    }
    : animation;
  const exitTransition = instant
    ? {
      type: false,
    }
    : exitAnimation || animation;
  const layout2 = {
    ...position,
  };
  if (layout2.left === void 0 || layout2.right === void 0) layout2.width = 'auto';
  if (layout2.top === void 0 || layout2.bottom === void 0) layout2.height = 'auto';
  const needsPerspective = contains3Dprops(transitionProps,) || contains3Dprops(initialProps,);
  const perspective = needsPerspective && (isLayeredContainer || isCurrent || isPrevious) ? 1200 : void 0;
  const identity = {
    ...allAnimatableProperties,
    ...previousState.current.origins,
  };
  const animations2 = isLayeredContainer
    ? {
      // biome-ignore lint/suspicious/noExplicitAny: has been this way from before the biome introduction
      initial: {
        ...identity,
        ...initialProps,
      },
      // biome-ignore lint/suspicious/noExplicitAny: has been this way from before the biome introduction
      animate: {
        ...identity,
        ...transitionProps,
        transition,
      },
      // Overlay animations are sometimes instant
      // biome-ignore lint/suspicious/noExplicitAny: has been this way from before the biome introduction
      exit: {
        ...identity,
        ...exitProps,
        transition: animation,
      },
      // Overlay exits are always animated
    }
    : {
      animate: animate3,
      // biome-ignore lint/suspicious/noExplicitAny: has been this way from before the biome introduction
      exit: {
        ...identity,
        ...exitProps,
        transition: exitTransition,
      },
    };
  const isPresent2 = !(isBeingRemoved || areMagicMotionLayersPresent === false);
  const isCurrentTarget = !!isCurrent && isPresent2;
  const forceOpacity = isCurrent && isInitial;
  return /* @__PURE__ */ jsxs(FrameWithMotion, {
    'data-framer-component-type': 'NavigationContainerWrapper',
    width: '100%',
    height: '100%',
    style: {
      position: 'absolute',
      transformStyle: 'flat',
      backgroundColor: 'transparent',
      overflow: 'hidden',
      // Unlike Overlays, Screens set zIndex via animation controls to ensure it's set in parallel with the animation being played.
      // However, when a screen exits, it needs to preserve it's zIndex, which can't be applied through an `exit` animation,
      // and might be impacted by the layer created by `perspective`.
      zIndex: isLayeredContainer || isBeingRemoved || isCurrent && withMagicMotion ? index : void 0,
      pointerEvents: void 0,
      visibility: visible ? 'visible' : 'hidden',
      perspective,
    },
    children: [
      isLayeredContainer && /* @__PURE__ */ jsx3(FrameWithMotion, {
        width: '100%',
        height: '100%',
        'data-framer-component-type': 'NavigationContainerBackdrop',
        transition: animation,
        initial: {
          opacity: instant && visible ? 1 : 0,
        },
        animate: {
          opacity: 1,
        },
        exit: {
          opacity: 0,
        },
        backgroundColor: backdropColor ? backdropColor : 'transparent',
        onTap: !isBeingRemoved ? onTapBackdrop : void 0,
      },),
      /* @__PURE__ */ jsx3(FrameWithMotion, {
        ...layout2,
        ...animations2,
        transition: {
          default: transition,
          originX: {
            type: false,
          },
          originY: {
            type: false,
          },
          originZ: {
            type: false,
          },
        },
        backgroundColor: 'transparent',
        backfaceVisible: !isBeingRemoved ? backfaceVisible : exitBackfaceVisible,
        'data-framer-component-type': 'NavigationContainer',
        'data-framer-is-current-navigation-target': !!isCurrent,
        style: {
          pointerEvents: void 0,
          // When we mount a new screen that is going to be animated in with animation controls,
          // we need to ensure that the screen is hidden until the animation starts.
          opacity: forceOpacity || isLayeredContainer || isCurrent && withMagicMotion ? 1 : 0,
        },
        'data-is-present': isPresent2 ? void 0 : false,
        ref: viewportRef,
        children: /* @__PURE__ */ jsx3(ViewportContext.Provider, {
          value: viewportRef,
          children: /* @__PURE__ */ jsx3(NavigationContainerContext.Provider, {
            value: isCurrentTarget,
            children: /* @__PURE__ */ jsx3(NavigationTargetWrapper, {
              isCurrent: isCurrentTarget,
              isOverlayed,
              children: /* @__PURE__ */ jsx3(SharedLayoutTree, {
                isLead: isCurrent,
                animatesLayout: !!withMagicMotion,
                transition,
                isExiting: !isPresent2,
                isOverlayed,
                id: id3,
                children,
              },),
            },),
          },),
        },),
      },),
    ],
  },);
}, shouldUsePreviousValue,);
function shouldUsePreviousValue(prevProps, nextProps,) {
  if (nextProps.isCurrent === void 0) return false;
  if (prevProps.isCurrent !== nextProps.isCurrent) return false;
  if (prevProps.isPrevious !== nextProps.isPrevious) return false;
  if (nextProps.isCurrent && prevProps.isOverlayed !== nextProps.isOverlayed) return false;
  return true;
}
function getOriginProps(currentOriginProps, initialProps, transitionProps,) {
  const result = {
    ...currentOriginProps,
  };
  if (initialProps) {
    if (isFiniteNumber(initialProps.originX,)) result.originX = initialProps.originX;
    if (isFiniteNumber(initialProps.originY,)) result.originY = initialProps.originY;
    if (isFiniteNumber(initialProps.originZ,)) result.originZ = initialProps.originZ;
  }
  if (transitionProps) {
    if (isFiniteNumber(transitionProps.originX,)) result.originX = transitionProps.originX;
    if (isFiniteNumber(transitionProps.originY,)) result.originY = transitionProps.originY;
    if (isFiniteNumber(transitionProps.originZ,)) result.originZ = transitionProps.originZ;
  }
  return result;
}
function contains3Dprops(containerProps,) {
  var _a, _b, _c;
  if (!containerProps) return false;
  const containsProps = 'rotateX' in containerProps || 'rotateY' in containerProps || 'z' in containerProps;
  if (!containsProps) return false;
  const toPropsContain3d = containerProps.rotateX !== 0 || containerProps.rotateY !== 0 || containerProps.z !== 0;
  const fromPropsContain3d =
    ((_a = containerProps == null ? void 0 : containerProps.transition) == null ? void 0 : _a.rotateX.from) !== 0 ||
    ((_b = containerProps == null ? void 0 : containerProps.transition) == null ? void 0 : _b.rotateY.from) !== 0 ||
    ((_c = containerProps == null ? void 0 : containerProps.transition) == null ? void 0 : _c.z.from) !== 0;
  return toPropsContain3d || fromPropsContain3d;
}
var allAnimatableProperties = {
  x: 0,
  y: 0,
  z: 0,
  rotate: 0,
  rotateX: 0,
  rotateY: 0,
  rotateZ: 0,
  scale: 1,
  scaleX: 1,
  scaleY: 1,
  scaleZ: 1,
  skew: 0,
  skewX: 0,
  skewY: 0,
  originX: 0.5,
  originY: 0.5,
  originZ: 0,
  opacity: 1,
};
var NavigatorMock = class {
  constructor() {
    __publicField(this, 'warning', () => {
      warnOnce2('The Navigator API is only available inside of Framer: https://www.framer.com/',);
    },);
    __publicField(this, 'goBack', () => this.warning(),);
    __publicField(this, 'instant', () => this.warning(),);
    __publicField(this, 'fade', () => this.warning(),);
    __publicField(this, 'push', () => this.warning(),);
    __publicField(this, 'modal', () => this.warning(),);
    __publicField(this, 'overlay', () => this.warning(),);
    __publicField(this, 'flip', () => this.warning(),);
    __publicField(this, 'customTransition', () => this.warning(),);
    __publicField(this, 'magicMotion', () => this.warning(),);
  }
};
var navigatorMock = /* @__PURE__ */ new NavigatorMock();
var NavigationContext = /* @__PURE__ */ createContext(navigatorMock,);
var TransitionDefaults = {
  Fade: {
    exit: {
      opacity: 0,
    },
    enter: {
      opacity: 0,
    },
  },
  PushLeft: {
    exit: {
      x: '-30%',
    },
    enter: {
      x: '100%',
    },
  },
  PushRight: {
    exit: {
      x: '30%',
    },
    enter: {
      x: '-100%',
    },
  },
  PushUp: {
    exit: {
      y: '-30%',
    },
    enter: {
      y: '100%',
    },
  },
  PushDown: {
    exit: {
      y: '30%',
    },
    enter: {
      y: '-100%',
    },
  },
  Instant: {
    animation: {
      type: false,
    },
    enter: {
      opacity: 0,
    },
  },
  Modal: {
    overCurrentContext: true,
    goBackOnTapOutside: true,
    position: {
      center: true,
    },
    enter: {
      opacity: 0,
      scale: 1.2,
    },
  },
  OverlayLeft: {
    overCurrentContext: true,
    goBackOnTapOutside: true,
    position: {
      right: 0,
      top: 0,
      bottom: 0,
    },
    enter: {
      x: '100%',
    },
  },
  OverlayRight: {
    overCurrentContext: true,
    goBackOnTapOutside: true,
    position: {
      left: 0,
      top: 0,
      bottom: 0,
    },
    enter: {
      x: '-100%',
    },
  },
  OverlayUp: {
    overCurrentContext: true,
    goBackOnTapOutside: true,
    position: {
      bottom: 0,
      left: 0,
      right: 0,
    },
    enter: {
      y: '100%',
    },
  },
  OverlayDown: {
    overCurrentContext: true,
    goBackOnTapOutside: true,
    position: {
      top: 0,
      left: 0,
      right: 0,
    },
    enter: {
      y: '-100%',
    },
  },
  FlipLeft: {
    backfaceVisible: false,
    exit: {
      rotateY: -180,
    },
    enter: {
      rotateY: 180,
    },
  },
  FlipRight: {
    backfaceVisible: false,
    exit: {
      rotateY: 180,
    },
    enter: {
      rotateY: -180,
    },
  },
  FlipUp: {
    backfaceVisible: false,
    exit: {
      rotateX: 180,
    },
    enter: {
      rotateX: -180,
    },
  },
  FlipDown: {
    backfaceVisible: false,
    exit: {
      rotateX: -180,
    },
    enter: {
      rotateX: 180,
    },
  },
  MagicMotion: {
    withMagicMotion: true,
  },
};
function pushTransition(options,) {
  const side = options && options.appearsFrom ? options.appearsFrom : 'right';
  switch (side) {
    case 'right':
      return TransitionDefaults.PushLeft;
    case 'left':
      return TransitionDefaults.PushRight;
    case 'bottom':
      return TransitionDefaults.PushUp;
    case 'top':
      return TransitionDefaults.PushDown;
  }
}
function overlayTransition(options,) {
  const side = options && options.appearsFrom ? options.appearsFrom : 'bottom';
  switch (side) {
    case 'right':
      return TransitionDefaults.OverlayLeft;
    case 'left':
      return TransitionDefaults.OverlayRight;
    case 'bottom':
      return TransitionDefaults.OverlayUp;
    case 'top':
      return TransitionDefaults.OverlayDown;
  }
}
function flipTransition(options,) {
  const side = options && options.appearsFrom ? options.appearsFrom : 'bottom';
  switch (side) {
    case 'right':
      return TransitionDefaults.FlipLeft;
    case 'left':
      return TransitionDefaults.FlipRight;
    case 'bottom':
      return TransitionDefaults.FlipUp;
    case 'top':
      return TransitionDefaults.FlipDown;
  }
}
var defaultState = () => ({
  current: -1,
  previous: -1,
  currentOverlay: -1,
  previousOverlay: -1,
  visualIndex: 0,
  overlayItemId: 0,
  historyItemId: 0,
  history: [],
  overlayStack: [],
  containers: {},
  containerIndex: {},
  containerVisualIndex: {},
  containerIsRemoved: {},
  transitionForContainer: {},
  previousTransition: null,
});
function reduceNavigationStateForAction(state, action,) {
  switch (action.type) {
    case 'addOverlay':
      return addOverlay(state, action.transition, action.component,);
    case 'removeOverlay':
      return removeOverlay(state,);
    case 'add':
      return add(state, action.key, action.transition, action.component,);
    case 'remove':
      return remove(state,);
    case 'update':
      return updateComponent(state, action.key, action.component,);
    case 'back':
      return back(state,);
    case 'forward':
      return forward(state,);
    default:
      return;
  }
}
function updateComponent(currentState, key7, component,) {
  return {
    ...currentState,
    containers: {
      ...currentState.containers,
      [key7]: component,
    },
  };
}
function addOverlay(currentState, transition, component,) {
  const currentOverlay = currentState.overlayStack[currentState.currentOverlay];
  if (currentOverlay && currentOverlay.component === component) return;
  const overlayItemId = currentState.overlayItemId + 1;
  const overlayStack = [...currentState.overlayStack, {
    key: `stack-${overlayItemId}`,
    component,
    transition,
  },];
  return {
    ...currentState,
    overlayStack,
    overlayItemId,
    currentOverlay: Math.max(0, Math.min(currentState.currentOverlay + 1, overlayStack.length - 1,),),
    previousOverlay: currentState.currentOverlay,
  };
}
function removeOverlay(currentState,) {
  return {
    ...currentState,
    overlayStack: [],
    currentOverlay: -1,
    previousOverlay: currentState.currentOverlay,
  };
}
function add(currentState, key7, transition, component,) {
  if (!currentState.containers[key7]) currentState.containers[key7] = component;
  currentState.history = currentState.history.slice(0, currentState.current + 1,);
  currentState.visualIndex = Math.max(currentState.history.length, 0,);
  const currentItem = currentState.history[currentState.history.length - 1];
  const isCurrentScreen = currentItem && currentItem.key === key7;
  currentState.overlayStack = [];
  if (isCurrentScreen && currentState.currentOverlay > -1) {
    return {
      ...currentState,
      currentOverlay: -1,
      previousOverlay: currentState.currentOverlay,
    };
  }
  if (isCurrentScreen) return;
  const nextIndex = currentState.containerVisualIndex[key7];
  const removed = currentState.containerIsRemoved[key7];
  const shouldMoveForward = (currentItem == null ? void 0 : currentItem.key) && transition.withMagicMotion
    ? isNextTargetForward(key7, nextIndex, removed, currentState.history,)
    : true;
  currentState.history.push({
    key: key7,
    transition,
    visualIndex: shouldMoveForward ? Math.max(currentState.visualIndex, 0,) : currentState.containerVisualIndex[key7],
  },);
  const current2 = currentState.current + 1;
  const previous = currentState.current;
  for (const containerKey in currentState.containerIndex) {
    if (currentState.containerIndex[containerKey] === current2) {
      currentState.containerIndex[containerKey] = findLatestHistoryIndex(containerKey, currentState.history,);
    }
  }
  currentState.containerIndex[key7] = current2;
  const {
    containerVisualIndex,
    containerIsRemoved,
  } = magicMotionPropsForAdd(currentState, key7, shouldMoveForward,);
  const transitionForContainer = updateTransitions(
    current2,
    previous,
    currentState.history,
    currentState.containerIndex,
    currentState.transitionForContainer,
  );
  return {
    ...currentState,
    current: current2,
    previous,
    containerVisualIndex,
    containerIsRemoved,
    transitionForContainer,
    previousTransition: null,
    currentOverlay: -1,
    historyItemId: currentState.historyItemId + 1,
    previousOverlay: currentState.currentOverlay,
  };
}
function back(currentState,) {
  const containers = {
    ...currentState.containers,
  };
  const nextState = remove(currentState,);
  if (!nextState) return;
  nextState.containers = containers;
  return nextState;
}
function forward(currentState,) {
  const nextItem = currentState.history[currentState.current + 1];
  if (!nextItem) return;
  const {
    key: key7,
    transition,
    component,
  } = nextItem;
  const history = [...currentState.history,];
  const nextState = add(currentState, key7, transition, component,);
  if (!nextState) return;
  nextState.history = history;
  return nextState;
}
function remove(currentState,) {
  const history = [...currentState.history.slice(0, currentState.current + 1,),];
  if (history.length === 1) return;
  const currentItem = history.pop();
  if (!currentItem) return;
  const target = history[history.length - 1];
  assert(target, 'The navigation history must have at least one component',);
  currentState.containerIndex[target.key] = history.length - 1;
  const shouldRemoveContainer = history.every((item) => item.key !== currentItem.key);
  if (shouldRemoveContainer) {
    delete currentState.containers[currentItem.key];
  }
  const current2 = currentState.current - 1;
  const previous = currentState.current;
  const {
    containerIsRemoved,
    containerVisualIndex,
    previousTransition,
    visualIndex,
  } = magicMotionPropsForRemove(currentState, target, currentItem,);
  const transitionForContainer = updateTransitions(
    current2,
    previous,
    currentState.history,
    currentState.containerIndex,
    currentState.transitionForContainer,
  );
  return {
    ...currentState,
    current: current2,
    previous,
    containerIsRemoved,
    containerVisualIndex,
    previousTransition,
    visualIndex,
    transitionForContainer,
  };
}
function magicMotionPropsForAdd(currentState, nextKey, shouldMoveForward,) {
  const update = {
    containerVisualIndex: {
      ...currentState.containerVisualIndex,
    },
    containerIsRemoved: {
      ...currentState.containerIsRemoved,
    },
  };
  if (shouldMoveForward) {
    update.containerVisualIndex[nextKey] = currentState.history.length - 1;
    update.containerIsRemoved[nextKey] = false;
  } else {
    const nextVisualIndex = currentState.containerVisualIndex[nextKey];
    for (const [key7, visualIndex,] of Object.entries(currentState.containerVisualIndex,)) {
      if (nextVisualIndex !== void 0 && visualIndex > nextVisualIndex) {
        update.containerIsRemoved[key7] = true;
      }
    }
  }
  return update;
}
function magicMotionPropsForRemove(currentState, target, currentItem,) {
  const validTargets = [target.key, currentItem.key,];
  const nextValidTarget = currentState.history[currentState.history.length - 2];
  const previousTransition = currentState.previousTransition === null ? null : {
    ...currentState.previousTransition,
  };
  const update = {
    containerIsRemoved: {
      ...currentState.containerIsRemoved,
    },
    containerVisualIndex: {
      ...currentState.containerVisualIndex,
    },
    previousTransition,
    visualIndex: currentState.visualIndex,
  };
  if (nextValidTarget) validTargets.push(nextValidTarget.key,);
  const targetVisualIndex = currentState.containerVisualIndex[target.key];
  const currentVisualIndex = currentState.containerVisualIndex[currentItem.key];
  const shouldRemoveLastKey = targetVisualIndex !== void 0 && currentVisualIndex !== void 0 && targetVisualIndex <= currentVisualIndex ||
    target.visualIndex !== void 0 && target.visualIndex < currentState.history.length - 1;
  const nextIndex = target.visualIndex;
  if (shouldRemoveLastKey) {
    update.containerIsRemoved[currentItem.key] = true;
    update.containerVisualIndex[target.key] = nextIndex !== void 0 ? nextIndex : currentState.history.length - 1;
  } else {
    update.visualIndex = currentState.visualIndex + 1;
    update.containerVisualIndex[target.key] = currentState.visualIndex + 1;
  }
  if (currentItem.transition.withMagicMotion) update.previousTransition = currentItem.transition || null;
  currentState.containerIsRemoved[target.key] = false;
  return update;
}
function findLatestHistoryIndex(key7, history,) {
  var _a;
  for (let index = history.length; index > history.length; index--) {
    if (((_a = history[index]) == null ? void 0 : _a.key) === key7) return index;
  }
  return -1;
}
function updateTransitions(current2, previous, history, containerIndex, transitionForContainer,) {
  const transitions = {
    ...transitionForContainer,
  };
  for (const [key7, screenIndex,] of Object.entries(containerIndex,)) {
    const transition = transitionForScreen(screenIndex, {
      current: current2,
      previous,
      history,
    },);
    if (transition) {
      transitions[key7] = transition;
    }
  }
  return transitions;
}
function isNextTargetForward(key7, index, removed, history,) {
  if (removed || index === void 0) return true;
  if (index === 0) return false;
  const forwardHistory = history.slice(index, history.length,);
  if (forwardHistory.findIndex((item) => item.key === key7) > -1) return true;
  const backwardsHistory = history.slice(0, index - 1,);
  if (backwardsHistory.findIndex((item) => item.key === key7) > -1) return false;
  return true;
}
function transitionForScreen(screenIndex, stackState,) {
  const {
    current: current2,
    previous,
    history,
  } = stackState;
  if (screenIndex !== current2 && screenIndex !== previous) return void 0;
  if (screenIndex === current2 && current2 > previous) {
    const item = history[screenIndex];
    return sequence('enter', item == null ? void 0 : item.transition.enter, item == null ? void 0 : item.transition.animation,);
  }
  if (screenIndex === previous && current2 > previous) {
    const item = history[screenIndex + 1];
    return sequence('exit', item == null ? void 0 : item.transition.exit, item == null ? void 0 : item.transition.animation,);
  }
  if (screenIndex === current2 && current2 < previous) {
    const item = history[screenIndex + 1];
    return sequence('enter', item == null ? void 0 : item.transition.exit, item == null ? void 0 : item.transition.animation,);
  }
  if (screenIndex === previous && current2 < previous) {
    const item = history[screenIndex];
    return sequence('exit', item == null ? void 0 : item.transition.enter, item == null ? void 0 : item.transition.animation,);
  }
}
var allAnimatableKeys = /* @__PURE__ */ objectKeys(allAnimatableProperties,);
function sequence(direction, transition, animation,) {
  const value = {};
  const from = {};
  allAnimatableKeys.forEach((property) => {
    value[property] = allAnimatableProperties[property];
    from[property] = {
      ...animation,
      from: allAnimatableProperties[property],
    };
  },);
  if (transition) {
    Object.keys(transition,).forEach((property) => {
      if (transition[property] === void 0) return;
      const transitionTo = transition[property];
      const transitionFrom = typeof transition[property] === 'string'
        ? `${asRecord(allAnimatableProperties,)[property]}%`
        : asRecord(allAnimatableProperties,)[property];
      asRecord(value,)[property] = direction === 'enter' ? transitionFrom : transitionTo;
      from[property] = {
        ...animation,
        from: direction === 'enter' ? transitionTo : transitionFrom,
        velocity: 0,
      };
    },);
  }
  return {
    ...value,
    transition: {
      ...from,
    },
  };
}
var NavigationConsumer = /* @__PURE__ */ (() => NavigationContext.Consumer)();
var NavigationCallbackContext = /* @__PURE__ */ React4.createContext(void 0,);
var NavigationCallbackProvider = /* @__PURE__ */ (() => NavigationCallbackContext.Provider)();
var IsInitialNavigationContext = /* @__PURE__ */ React4.createContext(void 0,);
var Navigation = /* @__PURE__ */ (() => {
  var _lastEventTimeStamp, _a, _Navigation_instances, getStackState_fn, isSameEventTransition_fn, _navigationAction, transition_fn;
  return _a = class extends Component2 {
    constructor(props,) {
      var _a2;
      super(props,);
      __privateAdd(this, _Navigation_instances,);
      __privateAdd(this, _lastEventTimeStamp, null,);
      __publicField(this, 'state', defaultState(),);
      __privateAdd(this, _navigationAction, (action2) => {
        if (!this.props.enabled && this.state.history.length > 0) return;
        const newState2 = reduceNavigationStateForAction(this.state, action2,);
        if (!newState2) return;
        const {
          skipLayoutAnimation,
        } = this.props;
        const historyItem = newState2.history[newState2.current];
        const withMagicMotion = action2.type === 'add' && action2.transition.withMagicMotion ||
          action2.type === 'forward' && (historyItem == null ? void 0 : historyItem.transition.withMagicMotion) ||
          action2.type === 'remove' && !!newState2.previousTransition;
        const updateState = () => {
          var _a22;
          this.setState(newState2,);
          if (historyItem == null ? void 0 : historyItem.key) {
            (_a22 = this.context) == null ? void 0 : _a22.call(this, historyItem.key,);
          }
        };
        if (skipLayoutAnimation && !withMagicMotion) {
          skipLayoutAnimation(updateState,);
        } else {
          updateState();
        }
      },);
      __publicField(this, 'goBack', () => {
        var _a22;
        if (__privateMethod(this, _Navigation_instances, isSameEventTransition_fn,).call(this,)) return;
        __privateSet(this, _lastEventTimeStamp, ((_a22 = globalThis.event) == null ? void 0 : _a22.timeStamp) || null,);
        if (this.state.currentOverlay !== -1) {
          return __privateGet(this, _navigationAction,).call(this, {
            type: 'removeOverlay',
          },);
        }
        return __privateGet(this, _navigationAction,).call(this, {
          type: 'remove',
        },);
      },);
      const component = this.props.children;
      if (!component || !isReactChild(component,) || !isReactElement(component,)) return;
      const transition = {
        ...TransitionDefaults.Instant,
      };
      const key7 = ((_a2 = component.key) == null ? void 0 : _a2.toString()) || `stack-${this.state.historyItemId + 1}`;
      const action = {
        type: 'add',
        key: key7,
        transition,
        component,
      };
      const newState = reduceNavigationStateForAction(this.state, action,);
      if (!newState) return;
      this.state = newState;
    }
    componentDidMount() {
      var _a2;
      const historyItem = this.state.history[this.state.current];
      if (!historyItem) return;
      (_a2 = this.context) == null ? void 0 : _a2.call(this, historyItem.key,);
    }
    UNSAFE_componentWillReceiveProps(props,) {
      var _a2;
      const component = props['children'];
      if (!isReactChild(component,) || !isReactElement(component,)) return;
      const key7 = (_a2 = component.key) == null ? void 0 : _a2.toString();
      if (!key7) return;
      if (this.state.history.length === 0) {
        __privateMethod(this, _Navigation_instances, transition_fn,).call(this, component, TransitionDefaults.Instant,);
      } else {
        __privateGet(this, _navigationAction,).call(this, {
          type: 'update',
          key: key7,
          component,
        },);
      }
    }
    componentWillUnmount() {
      var _a2, _b;
      (_b = (_a2 = this.props).resetProjection) == null ? void 0 : _b.call(_a2,);
    }
    instant(component,) {
      __privateMethod(this, _Navigation_instances, transition_fn,).call(this, component, TransitionDefaults.Instant, void 0,);
    }
    fade(component, options,) {
      __privateMethod(this, _Navigation_instances, transition_fn,).call(this, component, TransitionDefaults.Fade, options,);
    }
    push(component, options,) {
      __privateMethod(this, _Navigation_instances, transition_fn,).call(this, component, pushTransition(options,), options,);
    }
    modal(component, options,) {
      __privateMethod(this, _Navigation_instances, transition_fn,).call(this, component, TransitionDefaults.Modal, options,);
    }
    overlay(component, options,) {
      __privateMethod(this, _Navigation_instances, transition_fn,).call(this, component, overlayTransition(options,), options,);
    }
    flip(component, options,) {
      __privateMethod(this, _Navigation_instances, transition_fn,).call(this, component, flipTransition(options,), options,);
    }
    magicMotion(component, options,) {
      __privateMethod(this, _Navigation_instances, transition_fn,).call(this, component, TransitionDefaults.MagicMotion, options,);
    }
    customTransition(component, transition,) {
      __privateMethod(this, _Navigation_instances, transition_fn,).call(this, component, transition,);
    }
    render() {
      var _a2, _b, _c, _d, _e;
      const stackState = __privateMethod(this, _Navigation_instances, getStackState_fn,).call(this, {
        overCurrentContext: false,
      },);
      const overlayStackState = __privateMethod(this, _Navigation_instances, getStackState_fn,).call(this, {
        overCurrentContext: true,
      },);
      const activeOverlay = activeOverlayItem(overlayStackState,);
      const isOverlayVisible = overlayStackState.current > -1;
      const isInitial = this.state.history.length === 1;
      const contentContainers = [];
      for (const [key7, component,] of Object.entries(this.state.containers,)) {
        const index = this.state.containerIndex[key7];
        assert(index !== void 0, 'Container\'s index must be registered',);
        const visualIndex = this.state.containerVisualIndex[key7];
        assert(visualIndex !== void 0, 'Container\'s visual index must be registered',);
        const removed = this.state.containerIsRemoved[key7];
        const historyItem = this.state.history[index];
        const transitionProps = this.state.transitionForContainer[key7];
        const isCurrent = index === this.state.current;
        const isPrevious = index === this.state.previous;
        const areMagicMotionLayersPresent = isCurrent ? false : removed;
        const withMagicMotion = ((_a2 = historyItem == null ? void 0 : historyItem.transition) == null ? void 0 : _a2.withMagicMotion) ||
          isCurrent && !!this.state.previousTransition;
        contentContainers.push(/* @__PURE__ */ jsx3(NavigationContainer, {
          id: key7,
          index: visualIndex,
          isInitial,
          isCurrent,
          isPrevious,
          isOverlayed: isOverlayVisible,
          visible: isCurrent || isPrevious,
          position: (_b = historyItem == null ? void 0 : historyItem.transition) == null ? void 0 : _b.position,
          instant: isInstantContainerTransition(index, stackState,),
          transitionProps,
          animation: animationPropsForContainer(index, stackState,),
          backfaceVisible: getBackfaceVisibleForScreen(index, stackState,),
          exitAnimation: (_c = historyItem == null ? void 0 : historyItem.transition) == null ? void 0 : _c.animation,
          exitBackfaceVisible: (_d = historyItem == null ? void 0 : historyItem.transition) == null ? void 0 : _d.backfaceVisible,
          exitProps: (_e = historyItem == null ? void 0 : historyItem.transition) == null ? void 0 : _e.enter,
          withMagicMotion,
          areMagicMotionLayersPresent: areMagicMotionLayersPresent ? false : void 0,
          children: /* @__PURE__ */ jsx3(MagicMotionCrossfadeRoot, {
            children: containerContent({
              component,
              transition: historyItem == null ? void 0 : historyItem.transition,
            },),
          },),
        }, key7,),);
      }
      const overlayContainers = this.state.overlayStack.map((item, stackIndex,) => {
        return /* @__PURE__ */ jsx3(NavigationContainer, {
          isLayeredContainer: true,
          isCurrent: stackIndex === this.state.currentOverlay,
          position: item.transition.position,
          initialProps: initialPropsForOverlay(stackIndex, overlayStackState,),
          transitionProps: transitionPropsForOverlay(stackIndex, overlayStackState,),
          instant: isInstantContainerTransition(stackIndex, overlayStackState, true,),
          animation: animationPropsForContainer(stackIndex, overlayStackState,),
          exitProps: item.transition.enter,
          visible: containerIsVisible(stackIndex, overlayStackState,),
          backdropColor: backdropColorForTransition(item.transition,),
          backfaceVisible: getBackfaceVisibleForOverlay(stackIndex, overlayStackState,),
          onTapBackdrop: backdropTapAction(item.transition, this.goBack,),
          index: this.state.current + 1 + stackIndex,
          children: containerContent({
            component: item.component,
            transition: item.transition,
          },),
        }, item.key,);
      },);
      return /* @__PURE__ */ jsx3(FrameWithMotion, {
        'data-framer-component-type': 'NavigationRoot',
        top: 0,
        left: 0,
        width: '100%',
        height: '100%',
        position: 'relative',
        style: {
          overflow: 'hidden',
          backgroundColor: 'unset',
          pointerEvents: void 0,
          ...this.props.style,
        },
        children: /* @__PURE__ */ jsx3(NavigationContext.Provider, {
          value: this,
          children: /* @__PURE__ */ jsxs(IsInitialNavigationContext.Provider, {
            value: isInitial,
            children: [
              /* @__PURE__ */ jsx3(NavigationContainer, {
                isLayeredContainer: true,
                position: void 0,
                initialProps: {},
                instant: false,
                transitionProps: transitionPropsForStackWrapper(activeOverlay,),
                animation: animationForStackWrapper(activeOverlay,),
                backfaceVisible: backfaceVisibleForStackWrapper(activeOverlay,),
                visible: true,
                backdropColor: void 0,
                onTapBackdrop: void 0,
                index: 0,
                children: /* @__PURE__ */ jsx3(LayoutIdProvider, {
                  children: /* @__PURE__ */ jsx3(SharedLayoutRoot, {
                    children: /* @__PURE__ */ jsx3(AnimatePresence, {
                      presenceAffectsLayout: false,
                      children: contentContainers,
                    },),
                  },),
                },),
              },),
              /* @__PURE__ */ jsx3(AnimatePresence, {
                children: overlayContainers,
              },),
            ],
          },),
        },),
      },);
    }
  },
    _lastEventTimeStamp = /* @__PURE__ */ new WeakMap(),
    _Navigation_instances = /* @__PURE__ */ new WeakSet(),
    getStackState_fn = function (options,) {
      const {
        current: current2,
        previous,
        currentOverlay,
        previousOverlay,
      } = this.state;
      if (options.overCurrentContext) {
        return {
          current: currentOverlay,
          previous: previousOverlay,
          history: this.state.overlayStack,
        };
      }
      return {
        current: current2,
        previous,
        history: this.state.history,
      };
    },
    /**
     * To prevent bubbling events from triggering multiple transitions,
     * we ensure that the current event has a different timestamp then the event that triggered the last transition.
     * We use Window.event to ensure that even transitions invoked by code components - and may not pass a reference to the event - are caught.
     * This works better than measuring the time of transition calls with performance.now()
     * because the time between calls can get longer and longer as more screens are added to the stack,
     * preventing a deterministic time between transitions to be used to determine if they were triggered at the same time or not.
     */
    isSameEventTransition_fn = function () {
      if (!globalThis.event) return false;
      return __privateGet(this, _lastEventTimeStamp,) === globalThis.event.timeStamp;
    },
    _navigationAction = /* @__PURE__ */ new WeakMap(),
    transition_fn = function (component, transitionTraits, transitionOptions,) {
      var _a2, _b;
      if (__privateMethod(this, _Navigation_instances, isSameEventTransition_fn,).call(this,)) return;
      __privateSet(this, _lastEventTimeStamp, ((_a2 = globalThis.event) == null ? void 0 : _a2.timeStamp) || null,);
      if (!component || !isReactChild(component,) || !isReactElement(component,)) return;
      const transition = {
        ...transitionTraits,
        ...transitionOptions,
      };
      const overCurrentContext = !!transition.overCurrentContext;
      if (overCurrentContext) {return __privateGet(this, _navigationAction,).call(this, {
          type: 'addOverlay',
          transition,
          component,
        },);}
      const key7 = ((_b = component.key) == null ? void 0 : _b.toString()) || `stack-${this.state.historyItemId + 1}`;
      __privateGet(this, _navigationAction,).call(this, {
        type: 'add',
        key: key7,
        transition,
        component,
      },);
    },
    __publicField(_a, 'defaultProps', {
      enabled: true,
    },),
    __publicField(_a, 'contextType', NavigationCallbackContext,),
    _a;
})();
var animationDefault = {
  stiffness: 500,
  damping: 50,
  restDelta: 1,
  type: 'spring',
};
function activeOverlayItem(overlayStack,) {
  let currentOverlayItem;
  let previousOverlayItem;
  if (overlayStack.current !== -1) {
    currentOverlayItem = overlayStack.history[overlayStack.current];
  } else {
    previousOverlayItem = overlayStack.history[overlayStack.previous];
  }
  return {
    currentOverlayItem,
    previousOverlayItem,
  };
}
function transitionPropsForStackWrapper({
  currentOverlayItem,
},) {
  return currentOverlayItem && currentOverlayItem.transition.exit;
}
function animationForStackWrapper({
  currentOverlayItem,
  previousOverlayItem,
},) {
  if (currentOverlayItem && currentOverlayItem.transition.animation) {
    return currentOverlayItem.transition.animation;
  }
  if (previousOverlayItem && previousOverlayItem.transition.animation) {
    return previousOverlayItem.transition.animation;
  }
  return animationDefault;
}
function backfaceVisibleForStackWrapper({
  currentOverlayItem,
  previousOverlayItem,
},) {
  if (currentOverlayItem) return currentOverlayItem.transition.backfaceVisible;
  return previousOverlayItem && previousOverlayItem.transition.backfaceVisible;
}
function backdropColorForTransition(transition,) {
  if (transition.backdropColor) return transition.backdropColor;
  if (transition.overCurrentContext) return 'rgba(4,4,15,.4)';
  return void 0;
}
function getBackfaceVisibleForOverlay(containerIndex, stackState,) {
  const {
    current: current2,
    history,
  } = stackState;
  if (containerIndex === current2) {
    const navigationItem = history[containerIndex];
    if (navigationItem && navigationItem.transition) {
      return navigationItem.transition.backfaceVisible;
    }
    return true;
  } else if (containerIndex < current2) {
    const navigationItem = history[containerIndex + 1];
    if (navigationItem && navigationItem.transition) {
      return navigationItem.transition.backfaceVisible;
    }
    return true;
  } else {
    const navigationItem = history[containerIndex];
    if (navigationItem && navigationItem.transition) {
      return navigationItem.transition.backfaceVisible;
    }
    return true;
  }
}
function initialPropsForOverlay(containerIndex, stackState,) {
  const navigationItem = stackState.history[containerIndex];
  if (navigationItem) return navigationItem.transition.enter;
}
function getBackfaceVisibleForScreen(screenIndex, stackState,) {
  var _a, _b, _c, _d;
  const {
    current: current2,
    previous,
    history,
  } = stackState;
  if (screenIndex === previous && current2 > previous || screenIndex === current2 && current2 < previous) {
    return (_b = (_a = history[screenIndex + 1]) == null ? void 0 : _a.transition) == null ? void 0 : _b.backfaceVisible;
  }
  return (_d = (_c = history[screenIndex]) == null ? void 0 : _c.transition) == null ? void 0 : _d.backfaceVisible;
}
function transitionPropsForOverlay(overlayIndex, stackState,) {
  const {
    current: current2,
    history,
  } = stackState;
  if (overlayIndex === current2) {
    return;
  } else if (overlayIndex < current2) {
    const navigationItem = history[overlayIndex + 1];
    if (navigationItem && navigationItem.transition) {
      return navigationItem.transition.exit;
    }
  } else {
    const navigationItem = history[overlayIndex];
    if (navigationItem && navigationItem.transition) {
      return navigationItem.transition.enter;
    }
  }
}
function animationPropsForContainer(containerIndex, stackState,) {
  const {
    current: current2,
    previous,
    history,
  } = stackState;
  const containerCurrent = previous > current2 ? previous : current2;
  if (containerIndex < containerCurrent) {
    const navigationItem = history[containerIndex + 1];
    if (navigationItem && navigationItem.transition.animation) {
      return navigationItem.transition.animation;
    }
  } else if (containerIndex !== containerCurrent) {
    const navigationItem = history[containerIndex];
    if (navigationItem && navigationItem.transition.animation) {
      return navigationItem.transition.animation;
    }
  } else {
    const navigationItem = history[containerIndex];
    if (navigationItem == null ? void 0 : navigationItem.transition.animation) {
      return navigationItem.transition.animation;
    }
  }
  return animationDefault;
}
function isInstantContainerTransition(containerIndex, stackState, overCurrentContext,) {
  const {
    current: current2,
    previous,
    history,
  } = stackState;
  if (overCurrentContext && history.length > 1) return true;
  if (containerIndex !== previous && containerIndex !== current2) return true;
  if (current2 === previous) return true;
  return false;
}
function containerIsVisible(containerIndex, stackState,) {
  const {
    current: current2,
    previous,
  } = stackState;
  if (containerIndex > current2 && containerIndex > previous) return false;
  if (containerIndex === current2) return true;
  return false;
}
function containerContent(item,) {
  const content = React4.Children.map(item.component, (child) => {
    var _a;
    if (!isReactChild(child,) || !isReactElement(child,) || !child.props) {
      return child;
    }
    const props = {
      style: child.props.style ?? {},
    };
    const position = (_a = item == null ? void 0 : item.transition) == null ? void 0 : _a.position;
    const shouldStretchWidth = !position || position.left !== void 0 && position.right !== void 0;
    const shouldStretchHeight = !position || position.top !== void 0 && position.bottom !== void 0;
    const canStretchStyle = 'style' in child.props ? isObject2(child.props.style,) : true;
    if (shouldStretchWidth) {
      const canStretchWidth = 'width' in child.props;
      if (canStretchWidth) props.width = '100%';
      if (canStretchStyle) props.style.width = '100%';
    }
    if (shouldStretchHeight) {
      const canStretchHeight = 'height' in child.props;
      if (canStretchHeight) props.height = '100%';
      if (canStretchStyle) props.style.height = '100%';
    }
    return React4.cloneElement(child, props,);
  },);
  return content;
}
function backdropTapAction(transition, goBackAction,) {
  if (transition.goBackOnTapOutside !== false) return goBackAction;
}
function NavigationWrapper(props,) {
  const resetProjection = useResetProjection();
  const skipLayoutAnimation = useInstantLayoutTransition();
  React4.useInsertionEffect(() => {
    injectComponentCSSRules();
  }, [],);
  return /* @__PURE__ */ jsx3(Navigation, {
    ...props,
    resetProjection,
    skipLayoutAnimation,
    children: props.children,
  },);
}
var import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics_cjs(), 1,);
var NavigateTo = /* @__PURE__ */ ((NavigateTo2) => {
  NavigateTo2['Previous'] = '@Previous';
  return NavigateTo2;
})(NavigateTo || {},);
var NavigationTransitionType = /* @__PURE__ */ ((NavigationTransitionType2) => {
  NavigationTransitionType2['push'] = 'push';
  NavigationTransitionType2['instant'] = 'instant';
  NavigationTransitionType2['fade'] = 'fade';
  NavigationTransitionType2['modal'] = 'modal';
  NavigationTransitionType2['overlay'] = 'overlay';
  NavigationTransitionType2['flip'] = 'flip';
  NavigationTransitionType2['magicMotion'] = 'magicMotion';
  return NavigationTransitionType2;
})(NavigationTransitionType || {},);
function WithNavigator(BaseComponent, navigationTransition, navigationTransitionDirection, NavigationTarget, navigationTransitionOptions,) {
  const InternalWithNavigator = class extends React4.Component {
    render() {
      return /* @__PURE__ */ jsx3(NavigationContext.Consumer, {
        children: (navigation) => {
          const navigate = () => {
            if (navigationTransition === 'goBack') {
              navigation.goBack();
              return;
            }
            if (!NavigationTarget) return;
            const component = NavigationTarget();
            const appearsFrom = transitionDirectionToSide(navigationTransitionDirection,);
            switch (navigationTransition) {
              case 'instant':
                navigation.instant(component,);
                break;
              case 'fade':
                navigation.fade(component,);
                break;
              case 'modal':
                navigation.modal(component, navigationTransitionOptions,);
                break;
              case 'push':
                navigation.push(component, {
                  appearsFrom,
                },);
                break;
              case 'overlay':
                navigation.overlay(component, {
                  ...navigationTransitionOptions,
                  appearsFrom,
                },);
                break;
              case 'flip':
                navigation.flip(component, {
                  appearsFrom,
                },);
                break;
              case 'magicMotion':
                navigation.magicMotion(component, {},);
                break;
            }
          };
          const {
            onTap,
            ...props
          } = this.props;
          if (onTap) {
            props.onTap = (...args) => {
              onTap.apply(this, args,);
              navigate.apply(this, args,);
            };
          } else {
            props.onTap = navigate;
          }
          return /* @__PURE__ */ jsx3(BaseComponent, {
            ...props,
          },);
        },
      },);
    }
  };
  (0, import_hoist_non_react_statics.default)(InternalWithNavigator, BaseComponent,);
  return InternalWithNavigator;
}
function transitionDirectionToSide(direction,) {
  switch (direction) {
    case 'left':
      return 'right';
    case 'right':
      return 'left';
    case 'up':
      return 'bottom';
    case 'down':
      return 'top';
  }
}
var AnimateSharedLayout = (props) => props.children;
var import_hoist_non_react_statics3 = __toESM(require_hoist_non_react_statics_cjs(), 1,);
function pointForEvent(event, customTarget = null,) {
  let target;
  if (customTarget instanceof HTMLElement) {
    target = customTarget;
  }
  if (!target && event.target instanceof HTMLElement) {
    target = event.target;
  }
  if (!target) {
    return {
      x: event.pageX,
      y: event.pageY,
    };
  }
  if (typeof safeWindow.webkitConvertPointFromPageToNode === 'function') {
    let webkitPoint = new safeWindow.WebKitPoint(event.pageX, event.pageY,);
    webkitPoint = safeWindow.webkitConvertPointFromPageToNode(target, webkitPoint,);
    return {
      x: webkitPoint.x,
      y: webkitPoint.y,
    };
  }
  const rect = target.getBoundingClientRect();
  const width = parseFloat(target.style.width,);
  const height = parseFloat(target.style.height,);
  const scale2 = {
    x: width ? width / rect.width : 1,
    y: height ? height / rect.height : 1,
  };
  const point2 = {
    x: scale2.x * (event.pageX - rect.left - target.clientLeft + target.scrollLeft),
    y: scale2.y * (event.pageY - rect.top - target.clientTop + target.scrollTop),
  };
  return point2;
}
var FramerEvent = class _FramerEvent {
  /**
   * @internal
   */
  constructor(originalEvent, session,) {
    this.originalEvent = originalEvent;
    this.session = session;
    __publicField(this, 'time', Date.now(),);
    __publicField(this, 'loopTime', MainLoop.time,);
    __publicField(this, 'point',);
    __publicField(this, 'devicePoint',);
    __publicField(this, 'target',);
    __publicField(this, 'delta',);
    const customTarget = session && session.startEvent && session.startEvent.target || originalEvent.target;
    const eventLike = _FramerEvent.eventLikeFromOriginalEvent(originalEvent,);
    this.point = pointForEvent(eventLike, customTarget,);
    const deviceTarget = session && session.originElement ? session.originElement : document.body;
    this.devicePoint = pointForEvent(eventLike, deviceTarget,);
    this.target = originalEvent.target || null;
    const lastEvent = session && session.lastEvent;
    if (originalEvent instanceof WheelEvent) {
      this.delta = {
        x: originalEvent.deltaX,
        y: originalEvent.deltaY,
      };
    } else if (lastEvent && this.devicePoint && lastEvent.devicePoint) {
      this.delta = Point.subtract(this.devicePoint, lastEvent.devicePoint,);
    } else {
      this.delta = {
        x: 0,
        y: 0,
      };
    }
  }
  static eventLikeFromOriginalEvent(originalEvent,) {
    if ('touches' in originalEvent) {
      let touches = originalEvent.touches;
      if (!touches || !touches.length) {
        if (originalEvent.changedTouches && originalEvent.changedTouches.length) {
          touches = originalEvent.changedTouches;
        }
      }
      const firstTouch = touches[0];
      if (!touches || !firstTouch) {
        return {
          pageX: 0,
          pageY: 0,
          target: null,
        };
      }
      const pageX = firstTouch.clientX || firstTouch.screenX || firstTouch.pageX;
      const pageY = firstTouch.clientY || firstTouch.screenY || firstTouch.pageY;
      return {
        pageX,
        pageY,
        target: originalEvent.target,
      };
    }
    return originalEvent;
  }
  /**
   * @internal
   */
  velocity(t,) {
    return this.session ? this.session.velocity(t,) : {
      x: 0,
      y: 0,
    };
  }
  /**
   * @internal
   */
  get offset() {
    return this.session ? this.session.offset(this,) : {
      x: 0,
      y: 0,
    };
  }
  /**
   * @internal
   */
  get isLeftMouseClick() {
    if (environment.isTouch()) {
      return void 0;
    }
    if ('button' in this.originalEvent && 'buttons' in this.originalEvent && 'ctrlKey' in this.originalEvent) {
      return (this.originalEvent.button === 0 || this.originalEvent.buttons === 1) && !this.originalEvent.ctrlKey;
    }
    return false;
  }
};
var import_hoist_non_react_statics2 = __toESM(require_hoist_non_react_statics_cjs(), 1,);
var clamp2 = (value, a, b,) => {
  const min = Math.min(a, b,);
  const max = Math.max(a, b,);
  if (value < min) {
    value = min;
  }
  if (value > max) {
    value = max;
  }
  return value;
};
var DraggingContext = /* @__PURE__ */ React4.createContext({
  dragging: false,
},);
function WithDragging(Component17,) {
  const _WithDraggingHOC = class _WithDraggingHOC2 extends React4.Component {
    constructor(props, defaultProps,) {
      super(props, defaultProps,);
      __publicField(this, 'state', {
        isDragging: false,
      },);
      __publicField(this, 'x', Animatable(0,),);
      __publicField(this, 'y', Animatable(0,),);
      __publicField(this, 'onChangePosition', (change, transaction,) => {
        if (change.value === change.oldValue) {
          return;
        }
        if (this.props.onMove) {
          this.props.onMove(this.point, this,);
        }
      },);
      __publicField(this, 'isMoving', false,);
      __publicField(this, 'isAnimating', false,);
      __publicField(this, 'directionLockAxis', null,);
      __publicField(this, 'layerStartPoint', null,);
      __publicField(this, 'correctedLayerStartPoint', null,);
      __publicField(this, 'previousPoint', null,);
      __publicField(this, '_constraints', null,);
      __publicField(this, 'animation', null,);
      __publicField(this, 'panStart', (event) => {
        if (!this.props.enabled) {
          return;
        }
        this.isMoving = this.isAnimating;
        this.stopAnimation();
        this.resetdirectionLock();
        this.layerStartPoint = this.point;
        this.correctedLayerStartPoint = this.point;
        if (this._constraints && this.props.bounce) {
          this.correctedLayerStartPoint = this.constrainPosition(
            this.correctedLayerStartPoint,
            this._constraints,
            1 / this.props.overdragScale,
          );
        }
        this.previousPoint = this.correctedLayerStartPoint;
        if (!this.state.isDragging) {
          this.setState({
            isDragging: true,
          },);
        }
        if (this.props.onDragSessionStart) {
          this.props.onDragSessionStart(event, this,);
        }
      },);
      __publicField(this, 'pan', (event) => {
        const {
          enabled,
          speedX,
          speedY,
          directionLock,
          overdragScale,
          vertical,
          horizontal,
          pixelAlign,
          onDragStart,
          onDragWillMove,
          onDragDidMove,
          onDragSessionMove,
        } = this.props;
        if (!enabled) {
          return;
        }
        assert(this.previousPoint !== null, 'previousPoint must be set in panStart()',);
        let point2 = {
          ...this.previousPoint,
        };
        point2.x += event.delta.x * speedX;
        point2.y += event.delta.y * speedY;
        this.previousPoint = {
          ...point2,
        };
        if (this._constraints) {
          point2 = this.constrainPosition(point2, this._constraints, overdragScale,);
        }
        if (directionLock) {
          if (this.directionLockAxis === null) {
            const offset = event.offset;
            offset.x = offset.x * speedX;
            offset.y = offset.y * speedY;
            this.updatedirectionLock(offset,);
            return;
          } else {
            assert(this.layerStartPoint !== null, 'layerStartPoint must be set in panStart()',);
            if (this.directionLockAxis === 'y') {
              point2.x = this.layerStartPoint.x;
            }
            if (this.directionLockAxis === 'x') {
              point2.y = this.layerStartPoint.y;
            }
          }
        }
        if (!this.state.isDragging) {
          this.setState({
            isDragging: true,
          },);
          this.isMoving = true;
          if (onDragStart) {
            onDragStart(event, this,);
          }
        }
        if (onDragWillMove) {
          onDragWillMove(event, this,);
        }
        if (pixelAlign) {
          point2.x = Math.round(point2.x,);
          point2.y = Math.round(point2.y,);
        }
        if (!horizontal && !vertical) {
          return;
        }
        let axis = null;
        if (horizontal && !vertical) {
          axis = 'x';
        } else if (vertical && !horizontal) {
          axis = 'y';
        }
        this.setPoint(point2, axis,);
        if (onDragDidMove) {
          onDragDidMove(event, this,);
        }
        if (onDragSessionMove) {
          onDragSessionMove(event, this,);
        }
      },);
      __publicField(this, 'panEnd', (event) => {
        if (!this.props.enabled) {
          return;
        }
        this.startAnimation(event,);
        const {
          onDragSessionEnd,
          onDragEnd,
        } = this.props;
        if (this.state.isDragging) {
          if (onDragEnd) {
            onDragEnd(event, this,);
          }
        }
        if (onDragSessionEnd) {
          onDragSessionEnd(event, this,);
        }
        if (this.state.isDragging) {
          this.setState({
            isDragging: false,
          },);
        }
        this.isMoving = this.isAnimating;
      },);
      __publicField(this, 'mouseWheelStart', (event) => {
        this.correctedLayerStartPoint = this.point;
        this.previousPoint = this.correctedLayerStartPoint;
        this.stopAnimation();
      },);
      __publicField(this, 'mouseWheel', (event) => {
        const {
          enabled,
          speedX,
          speedY,
          vertical,
          horizontal,
          pixelAlign,
          onDragWillMove,
          onDragDidMove,
          mouseWheel,
        } = this.props;
        if (!mouseWheel || !enabled) {
          return;
        }
        let point2 = {
          ...this.point,
        };
        point2.x -= event.delta.x * speedX;
        point2.y -= event.delta.y * speedY;
        if (this._constraints) {
          point2 = this.constrainPosition(point2, this._constraints, 0, false,);
        }
        if (onDragWillMove) {
          onDragWillMove(event, this,);
        }
        if (pixelAlign) {
          point2.x = Math.round(point2.x,);
          point2.y = Math.round(point2.y,);
        }
        if (!horizontal && !vertical) {
          return;
        }
        let axis = null;
        if (horizontal && !vertical) {
          axis = 'x';
        } else if (vertical && !horizontal) {
          axis = 'y';
        }
        this.setPoint(point2, axis,);
        if (onDragDidMove) {
          onDragDidMove(event, this,);
        }
      },);
      __publicField(this, 'mouseWheelEnd', (event) => {},);
      __publicField(this, 'onAnimationStep', (axis, value,) => {
        if (axis === 'x' && this.props.horizontal === false) {
          return;
        }
        if (axis === 'y' && this.props.vertical === false) {
          return;
        }
        let delta = 0;
        if (this.constraints) {
          if (this.props.bounce) {
            delta = value - this.getValue(axis,);
          } else {
            const {
              minX,
              minY,
              maxX,
              maxY,
            } = this.calculateConstraints(this._constraints,);
            if (axis === 'x') {
              delta = clamp2(value, minX, maxX,) - this.getValue(axis,);
            }
            if (axis === 'y') {
              delta = clamp2(value, minY, maxY,) - this.getValue(axis,);
            }
          }
        } else {
          delta = value - this.getValue(axis,);
        }
        const updatePoint = this.point;
        if (axis === 'x') {
          updatePoint[axis] = updatePoint[axis] + delta;
        }
        if (axis === 'y') {
          updatePoint[axis] = updatePoint[axis] + delta;
        }
        this.setPoint(updatePoint, axis,);
      },);
      __publicField(this, 'onAnimationStop', (axis) => {
        if (axis === 'x' && this.props.horizontal === false) {
          return;
        }
        if (axis === 'y' && this.props.vertical === false) {
          return;
        }
        if (!this.animation) {
          return;
        }
        if (this.props.pixelAlign) {
          const point2 = this.point;
          point2.x = Math.round(point2.x,);
          point2.y = Math.round(point2.y,);
          this.setPoint(point2, axis,);
        }
        if (this.animation.x.isFinished() && this.animation.y.isFinished()) {
          return this.stopAnimation();
        }
      },);
      __publicField(this, 'stopAnimation', () => {
        this.isAnimating = false;
        this.isMoving = false;
        if (!this.animation) {
          return;
        }
        this.animation.x.cancel();
        this.animation.y.cancel();
        if (this.props.onDragAnimationEnd) {
          this.props.onDragAnimationEnd(this.animation, this,);
        }
        this.animation = null;
      },);
      const x = this.props.left;
      const y = this.props.top;
      if (!x) {
        this.x = Animatable(0,);
      } else if (isAnimatable2(x,)) {
        this.x = x;
      } else {
        this.x = Animatable(x,);
      }
      if (!y) {
        this.y = Animatable(0,);
      } else if (isAnimatable2(y,)) {
        this.y = y;
      } else {
        this.y = Animatable(y,);
      }
      this.x.onUpdate(this.onChangePosition,);
      this.y.onUpdate(this.onChangePosition,);
      const constraints = this.props.constraints;
      if (constraints) {
        this.constraints = constraints;
      }
    }
    UNSAFE_componentWillReceiveProps(props,) {
      if (this.props.left !== props.left && isFiniteNumber(props.left,)) {
        this.x.set(props.left,);
      }
      if (this.props.top !== props.top && isFiniteNumber(props.top,)) {
        this.y.set(props.top,);
      }
      const constraints = props.constraints;
      if (constraints) {
        this.constraints = constraints;
      }
    }
    get point() {
      return {
        x: this.x.get(),
        y: this.y.get(),
      };
    }
    setPoint(point2, axis = null,) {
      switch (axis) {
        case 'x':
          this.x.set(point2.x,);
          break;
        case 'y':
          this.y.set(point2.y,);
          break;
        case null:
          this.x.set(point2.x,);
          this.y.set(point2.y,);
          break;
      }
    }
    getValue(axis,) {
      switch (axis) {
        case 'x':
          return this.x.get();
        case 'y':
          return this.y.get();
      }
    }
    get width() {
      const width = this.props.width;
      if (!width) {
        return 100;
      }
      if (isAnimatable2(width,)) {
        return width.get();
      }
      if (typeof width === 'string') {
        return parseFloat(width,);
      }
      return width;
    }
    get height() {
      const height = this.props.height;
      if (!height) {
        return 100;
      }
      if (isAnimatable2(height,)) {
        return height.get();
      }
      if (typeof height === 'string') {
        return parseFloat(height,);
      }
      return height;
    }
    get constraints() {
      return this._constraints;
    }
    set constraints(value,) {
      if (value !== null && typeof value === 'object') {
        this._constraints = {
          x: value.x || 0,
          y: value.y || 0,
          width: value.width || 0,
          height: value.height || 0,
        };
      } else {
        this._constraints = null;
      }
      if (this._constraints) {
        this.updateAnimationConstraints(this._constraints,);
      }
    }
    get constraintsOffset() {
      if (!this.constraints) {
        return {
          x: 0,
          y: 0,
        };
      }
      const {
        minX,
        minY,
        maxX,
        maxY,
      } = this.calculateConstraints(this._constraints,);
      const point2 = this.point;
      const constrainedPoint = {
        x: clamp2(point2.x, minX, maxX,),
        y: clamp2(point2.y, minY, maxY,),
      };
      const offset = {
        x: point2.x - constrainedPoint.x,
        y: point2.y - constrainedPoint.y,
      };
      return offset;
    }
    get isBeyondConstraints() {
      const constraintsOffset = this.constraintsOffset;
      if (constraintsOffset.x !== 0) {
        return true;
      }
      if (constraintsOffset.y !== 0) {
        return true;
      }
      return false;
    }
    clampAndScale(value, min, max, scale2, scaleAllowed,) {
      if (!scaleAllowed) {
        return clamp2(value, min, max,);
      }
      if (value < min) {
        value = min + (value - min) * scale2;
      }
      if (value > max) {
        value = max + (value - max) * scale2;
      }
      return value;
    }
    calculateConstraints(bounds,) {
      if (!bounds) {
        return {
          minX: Infinity,
          maxX: Infinity,
          minY: Infinity,
          maxY: Infinity,
        };
      }
      if (bounds.width < this.width) {
        bounds.width = this.width;
      }
      if (bounds.height < this.height) {
        bounds.height = this.height;
      }
      const constraints = {
        minX: Rect.minX(bounds,),
        maxX: Rect.maxX(bounds,),
        minY: Rect.minY(bounds,),
        maxY: Rect.maxY(bounds,),
      };
      constraints.maxX -= this.width;
      constraints.maxY -= this.height;
      return constraints;
    }
    constrainPosition(proposedPoint, bounds, scale2, overdrag = this.props.overdrag,) {
      const {
        maxX,
        maxY,
        minX,
        minY,
      } = this.calculateConstraints(this._constraints,);
      const point2 = {
        x: this.clampAndScale(proposedPoint.x, minX, maxX, scale2, overdrag,),
        y: this.clampAndScale(proposedPoint.y, minY, maxY, scale2, overdrag,),
      };
      if (this.props.speedX === 0 || this.props.horizontal === false) {
        point2.x = proposedPoint.x;
      }
      if (this.props.speedY === 0 || this.props.vertical === false) {
        point2.y = proposedPoint.y;
      }
      return point2;
    }
    /* private */
    updatedirectionLock(correctedDelta,) {
      if (Math.abs(correctedDelta.y,) > this.props.directionLockThreshold.y) {
        this.directionLockAxis = 'y';
      } else if (Math.abs(correctedDelta.x,) > this.props.directionLockThreshold.x) {
        this.directionLockAxis = 'x';
      }
      if (this.directionLockAxis !== null) {
        if (this.props.onDragDirectionLockStart) {
          this.props.onDragDirectionLockStart(this.directionLockAxis, this,);
        }
      }
    }
    resetdirectionLock() {
      this.directionLockAxis = null;
    }
    // Inertial scroll animation
    setupAnimation() {
      if (this.animation) {
        return;
      }
      this.animation = {
        x: this.setupAnimationForAxis('x',),
        y: this.setupAnimationForAxis('y',),
      };
      this.updateAnimationConstraints(this._constraints,);
    }
    setupAnimationForAxis(axis,) {
      const animator = new InertialScrollAnimator({
        momentum: this.props.momentumOptions,
        bounce: this.props.bounceOptions,
      },);
      const updateCallback = (value) => {
        this.onAnimationStep(axis, value,);
      };
      const doneCallback = () => {
        this.onAnimationStop(axis,);
      };
      return new MainLoopAnimationDriver(animator, updateCallback, doneCallback,);
    }
    updateAnimationConstraints(constraints,) {
      if (!this.animation) {
        return;
      }
      if (constraints) {
        const {
          minX,
          minY,
          maxX,
          maxY,
        } = this.calculateConstraints(constraints,);
        this.animation.x.animator.setLimits(minX, maxX,);
        this.animation.y.animator.setLimits(minY, maxY,);
      } else {
        this.animation.x.animator.setLimits(-Infinity, Infinity,);
        this.animation.y.animator.setLimits(-Infinity, Infinity,);
      }
    }
    startAnimation(event,) {
      const {
        momentum,
        bounce,
        momentumVelocityMultiplier,
        speedX,
        speedY,
        overdrag,
        onDragAnimationStart,
      } = this.props;
      if (!(momentum || bounce)) {
        return;
      }
      if (this.isBeyondConstraints === false && momentum === false) {
        return;
      }
      if (this.isBeyondConstraints === false && this.state.isDragging === false) {
        return;
      }
      const {
        minX,
        minY,
        maxX,
        maxY,
      } = this.calculateConstraints(this._constraints,);
      const startAnimationX = overdrag === true || this.point.x > minX && this.point.x < maxX;
      const startAnimationY = overdrag === true || this.point.y > minY && this.point.y < maxY;
      if (startAnimationX === startAnimationY && startAnimationY === false) {
        return;
      }
      const velocity = event.velocity(0.1,);
      let velocityX = velocity.x * momentumVelocityMultiplier * speedX;
      let velocityY = velocity.y * momentumVelocityMultiplier * speedY;
      if (this.directionLockAxis === 'x') {
        velocityY = 0;
      }
      if (this.directionLockAxis === 'y') {
        velocityX = 0;
      }
      this.setupAnimation();
      this.isAnimating = true;
      this.isMoving = true;
      if (!this.animation) {
        return;
      }
      this.animation.x.animator.setState({
        x: this.point.x,
        v: velocityX,
      },);
      if (startAnimationX) {
        this.animation.x.play();
      }
      this.animation.y.animator.setState({
        x: this.point.y,
        v: velocityY,
      },);
      if (startAnimationY) {
        this.animation.y.play();
      }
      if (onDragAnimationStart) {
        onDragAnimationStart(this.animation, this,);
      }
    }
    wrapHandler(ownHandler, originalHandler,) {
      if (!originalHandler) {
        return ownHandler;
      }
      return (event) => {
        ownHandler(event,);
        originalHandler(event,);
      };
    }
    render() {
      const originalProps = {
        ...this.props,
      };
      Object.keys(_WithDraggingHOC2.draggingDefaultProps,).forEach((key7) => {
        delete asRecord(originalProps,)[key7];
      },);
      originalProps.onPanStart = this.wrapHandler(this.panStart, originalProps.onPanStart,);
      originalProps.onPan = this.wrapHandler(this.pan, originalProps.onPan,);
      originalProps.onPanEnd = this.wrapHandler(this.panEnd, originalProps.onPanEnd,);
      originalProps.onMouseWheelStart = this.wrapHandler(this.mouseWheelStart, originalProps.onMouseWheelStart,);
      originalProps.onMouseWheel = this.wrapHandler(this.mouseWheel, originalProps.onMouseWheel,);
      originalProps.onMouseWheelEnd = this.wrapHandler(this.mouseWheelEnd, originalProps.onMouseWheelEnd,);
      originalProps.left = this.x;
      originalProps.top = this.y;
      return /* @__PURE__ */ jsx3(DraggingContext.Provider, {
        value: {
          dragging: this.state.isDragging,
        },
        children: /* @__PURE__ */ jsx3(Component17, {
          ...originalProps,
        },),
      },);
    }
  };
  __publicField(_WithDraggingHOC, 'draggingDefaultProps', {
    momentum: true,
    momentumOptions: {
      friction: 2.1,
      tolerance: 1,
    },
    momentumVelocityMultiplier: 800,
    speedX: 1,
    speedY: 1,
    bounce: true,
    bounceOptions: {
      friction: 40,
      tension: 200,
      tolerance: 1,
    },
    directionLock: false,
    directionLockThreshold: {
      x: 10,
      y: 10,
    },
    overdrag: true,
    overdragScale: 0.5,
    pixelAlign: true,
    velocityTimeout: 100,
    velocityScale: 890,
    horizontal: true,
    vertical: true,
    enabled: true,
    constraints: {},
    mouseWheel: false,
  },);
  __publicField(_WithDraggingHOC, 'defaultProps', Object.assign({}, Component17.defaultProps, _WithDraggingHOC.draggingDefaultProps,),);
  let WithDraggingHOC = _WithDraggingHOC;
  const withDragging = WithDraggingHOC;
  (0, import_hoist_non_react_statics2.default)(withDragging, Component17,);
  return withDragging;
}
var hoverProps = {
  onMouseEnter: 'mouseenter',
  onMouseLeave: 'mouseleave',
};
var hoverEventKeys = /* @__PURE__ */ Object.keys(hoverProps,);
var eventHandlerMapping = {
  panstart: ['onPanStart',],
  pan: ['onPan',],
  panend: ['onPanEnd',],
  tapstart: ['onTapStart', 'onMouseDown',],
  tap: ['onTap', 'onClick',],
  tapend: ['onTapEnd', 'onMouseUp',],
  mousewheelstart: ['onMouseWheelStart',],
  mousewheel: ['onMouseWheel',],
  mousewheelend: ['onMouseWheelEnd',],
};
var tapEventKeys = /* @__PURE__ */ new Set(['tapstart', 'tap', 'tapend',],);
function WithEvents(BaseComponent,) {
  var _a;
  const withEvents = (_a = class extends React4.Component {
    constructor() {
      super(...arguments,);
      __publicField(this, 'shouldCancelTap', false,);
      __publicField(this, 'activeEventListeners', /* @__PURE__ */ new Map(),);
      __publicField(this, 'hasFramerEventListener', false,);
      __publicField(this, 'component', React4.createRef(),);
    }
    get element() {
      return this.component.current && this.component.current.element;
    }
    componentDidMount() {
      this.addEventListeners();
    }
    componentDidUpdate(prevProps,) {
      this.addEventListeners(prevProps,);
    }
    componentWillUnmount() {
      this.removeEventListeners();
    }
    addEventListeners(prevProps,) {
      if (this.element && !this.hasFramerEventListener) {
        this.element.addEventListener('FramerEvent', ({
          detail,
        },) => {
          const type = detail.type;
          const framerEvent = detail.event;
          this.handleEvent(type, framerEvent,);
        },);
        hoverEventKeys.forEach((eventName) => this.addHoverEvent(eventName,));
        this.hasFramerEventListener = true;
      } else if (this.element && prevProps) {
        hoverEventKeys.forEach((eventName) => this.checkHoverEvent(eventName, prevProps,));
      } else if (!this.element) {
        this.hasFramerEventListener = false;
      }
    }
    removeEventListeners() {
      hoverEventKeys.forEach((eventName) => this.removeHoverEvent(eventName,));
    }
    addHoverEvent(eventName,) {
      const originalEventListener = this.props[eventName];
      if (this.element && originalEventListener) {
        const eventListener = (e) => {
          const framerEvent = new FramerEvent(e,);
          originalEventListener(framerEvent,);
        };
        this.activeEventListeners.set(eventName, eventListener,);
        const domEventName = hoverProps[eventName];
        this.element.addEventListener(domEventName, eventListener,);
      }
    }
    removeHoverEvent(eventName,) {
      const eventListener = this.activeEventListeners.get(eventName,);
      if (this.element && eventListener) {
        const domEventName = hoverProps[eventName];
        this.element.removeEventListener(domEventName, eventListener,);
        this.activeEventListeners.delete(eventName,);
      }
    }
    checkHoverEvent(eventName, prevProps,) {
      if (prevProps[eventName] !== this.props[eventName]) {
        this.removeHoverEvent(eventName,);
        this.addHoverEvent(eventName,);
      }
    }
    handleEvent(type, framerEvent,) {
      const eventListenerKeys = eventHandlerMapping[type];
      if (!eventListenerKeys) return;
      eventListenerKeys.forEach((eventKey) => {
        const eventListener = this.props[eventKey];
        const cancelEvent = this.shouldCancelTap && tapEventKeys.has(eventKey,);
        if (eventListener && !cancelEvent) {
          eventListener(framerEvent,);
        }
      },);
    }
    render() {
      return /* @__PURE__ */ jsx3(DraggingContext.Consumer, {
        children: (value) => {
          this.shouldCancelTap = value.dragging;
          return /* @__PURE__ */ jsx3(BaseComponent, {
            ...this.props,
            ref: this.component,
          },);
        },
      },);
    }
  },
    __publicField(_a, 'defaultProps', Object.assign({}, BaseComponent.defaultProps,),),
    _a);
  (0, import_hoist_non_react_statics3.default)(withEvents, BaseComponent,);
  return withEvents;
}
var hasOwnProperty = (obj, prop,) => Object.prototype.hasOwnProperty.call(obj, prop,);
var $private = /* @__PURE__ */ Symbol('private',);
var ObservableObject = /* @__PURE__ */ (() => {
  function ObservableObject2(initial = {}, makeAnimatables = false, observeAnimatables = true,) {
    const unproxiedState = {
      [$private]: {
        makeAnimatables,
        observeAnimatables,
        observers: new Observers(),
        reset() {
          for (const key7 in state) {
            if (hasOwnProperty(state, key7,)) {
              const value = hasOwnProperty(initial, key7,) ? asRecord(initial,)[key7] : void 0;
              if (value !== void 0) {
                state[key7] = value;
              } else {
                delete state[key7];
              }
            }
          }
        },
        transactions: /* @__PURE__ */ new Set(),
      },
    };
    const state = new Proxy(unproxiedState, sharedProxyHandler,);
    Object.assign(state, initial,);
    return state;
  }
  ObservableObject2.resetObject = (target) => {
    return target[$private].reset();
  };
  ObservableObject2.addObserver = (target, observer2,) => {
    return target[$private].observers.add(observer2,);
  };
  return ObservableObject2;
})();
var ObservableObjectProxyHandler = class {
  constructor() {
    __publicField(this, 'set', (target, key7, value, receiver,) => {
      if (key7 === $private) {
        return false;
      }
      const privateObject = target[$private];
      let animatable;
      let rawValue;
      if (isAnimatable2(value,)) {
        animatable = value;
        rawValue = animatable.get();
      } else {
        rawValue = value;
      }
      if (privateObject.makeAnimatables && typeof value !== 'function' && typeof value !== 'object' && !animatable) {
        animatable = Animatable(value,);
      }
      if (privateObject.observeAnimatables && animatable) {
        const transactions = privateObject.transactions;
        animatable.onUpdate({
          update: (change, transaction,) => {
            if (transaction) {
              transactions.add(transaction,);
            }
            privateObject.observers.notify({
              value: receiver,
            }, transaction,);
          },
          finish: (transaction) => {
            if (transactions.delete(transaction,)) {
              privateObject.observers.finishTransaction(transaction,);
            }
          },
        },);
      }
      let result = false;
      let changed = true;
      const targetValue = asRecord(target,)[key7];
      if (targetValue !== void 0) {
        if (isAnimatable2(targetValue,)) {
          changed = targetValue.get() !== rawValue;
          targetValue.set(rawValue,);
        } else {
          changed = targetValue !== rawValue;
          asRecord(target,)[key7] = rawValue;
        }
        const rawValueIsObject = rawValue !== null && typeof rawValue === 'object';
        if (Array.isArray(rawValue,) || rawValueIsObject) changed = true;
        result = true;
      } else {
        if (animatable) {
          value = animatable;
        }
        result = Reflect.set(target, key7, value,);
      }
      if (changed) {
        privateObject.observers.notify({
          value: receiver,
        },);
      }
      return result;
    },);
    __publicField(this, 'get', (target, key7, receiver,) => {
      if (key7 === $private) {
        return asRecord(target,)[key7];
      }
      const value = Reflect.get(target, key7, receiver,);
      return typeof value === 'function' ? value.bind(receiver,) : value;
    },);
  }
  deleteProperty(target, key7,) {
    const result = Reflect.deleteProperty(target, key7,);
    target[$private].observers.notify({
      value: target,
    },);
    return result;
  }
  ownKeys(target,) {
    const keys3 = Reflect.ownKeys(target,);
    const privateIndex = keys3.indexOf($private,);
    if (privateIndex !== -1) {
      keys3.splice(privateIndex, 1,);
    }
    return keys3;
  }
  getOwnPropertyDescriptor(target, key7,) {
    if (key7 === $private) {
      return void 0;
    }
    return Reflect.getOwnPropertyDescriptor(target, key7,);
  }
};
var sharedProxyHandler = /* @__PURE__ */ new ObservableObjectProxyHandler();
function collectBlendingFromProps(node, style2,) {
  if (!node.blendingMode || node.blendingMode === 'normal') return;
  style2.mixBlendMode = node.blendingMode;
}
var key2 = 'opacity';
function withOpacity(target,) {
  return key2 in target;
}
function collectOpacityFromProps(props, style2,) {
  if (!withOpacity(props,)) return;
  const opacity = Animatable.getNumber(props.opacity,);
  if (opacity === 1) return;
  style2.opacity = opacity;
}
function collectOverflowFromProps(props, style2,) {
  if (props.overflow) {
    style2.overflow = props.overflow;
  }
}
var key3 = 'radius';
function hasRadius(props,) {
  return key3 in props;
}
function getRadiusValue(value,) {
  let num = Number(value,);
  if (typeof value === 'string' && Number.isNaN(num,)) {
    return value;
  } else if (isAnimatable2(value,)) {
    num = Animatable.getNumber(value,);
  }
  return num ? `${num}px` : '0';
}
function hasRadiusValue(value,) {
  return value && value !== '0';
}
function collectRadiusFromProps(props, style2,) {
  if (!hasRadius(props,)) return;
  const {
    radius,
  } = props;
  if (typeof radius === 'string' || isAnimatable2(radius,) || isFiniteNumber(radius,)) {
    const radiusValue = getRadiusValue(radius,);
    if (hasRadiusValue(radiusValue,)) {
      style2.borderTopLeftRadius =
        style2.borderTopRightRadius =
        style2.borderBottomRightRadius =
        style2.borderBottomLeftRadius =
          radiusValue;
    }
  } else if (radius) {
    const topLeft = getRadiusValue(radius.topLeft,);
    const topRight = getRadiusValue(radius.topRight,);
    const bottomRight = getRadiusValue(radius.bottomRight,);
    const bottomLeft = getRadiusValue(radius.bottomLeft,);
    if (hasRadiusValue(topLeft,) || hasRadiusValue(topRight,) || hasRadiusValue(bottomRight,) || hasRadiusValue(bottomLeft,)) {
      style2.borderTopLeftRadius = topLeft;
      style2.borderTopRightRadius = topRight;
      style2.borderBottomRightRadius = bottomRight;
      style2.borderBottomLeftRadius = bottomLeft;
    }
  }
}
function collectTextColorFromProps(props, style2,) {
  const {
    color: color2,
  } = props;
  if (typeof color2 === 'string') {
    style2.color = color2;
  } else if (Color.isColorObject(color2,)) {
    style2.color = color2.initialValue || Color.toRgbString(color2,);
  }
}
var shadowKeys = ['color', 'x', 'y', 'blur',];
var Shadow = {
  is: (shadow) => {
    return shadow && shadowKeys.every((key7) => key7 in shadow);
  },
};
var boxShadowKeys = ['x', 'y', 'color', 'inset', 'blur', 'spread',];
var BoxShadow = {
  is: (shadow) => {
    return shadow && boxShadowKeys.every((key7) => key7 in shadow);
  },
  toCSS: (shadow) => {
    const inset2 = shadow.inset ? 'inset ' : '';
    return `${inset2}${shadow.x}px ${shadow.y}px ${shadow.blur}px ${shadow.spread}px ${shadow.color}`;
  },
};
function shadowsAsFilter(shadows,) {
  const filters = [];
  if (shadows && shadows.length) {
    const dropShadows = shadows.map((shadowItem) => {
      return `drop-shadow(${shadowItem.x}px ${shadowItem.y}px ${shadowItem.blur}px ${shadowItem.color})`;
    },);
    filters.push(...dropShadows,);
  }
  return filters;
}
function collectTextShadowsForProps(props, style2,) {
  if (!props.shadows || props.shadows.length === 0) return;
  const textShadow = props.shadows.map((shadow) => {
    return `${shadow.x}px ${shadow.y}px ${shadow.blur}px ${shadow.color}`;
  },).join(', ',);
  if (!textShadow) return;
  style2.textShadow = textShadow;
}
function collectBoxShadowsForProps(props, style2,) {
  if (!props.shadows || props.shadows.length === 0) return;
  const boxShadow = props.shadows.map((shadowItem) => BoxShadow.toCSS(shadowItem,)).join(', ',);
  if (!boxShadow) return;
  style2.boxShadow = boxShadow;
}
function shadowForShape(boxShadows, rect, shapeId, fillEnabled, strokeEnabled, strokeWidth, strokeClipId, svgStrokeAttributes,) {
  const definition = [];
  let outsetElement = null;
  let insetElement = null;
  let maskElement = null;
  const needsStrokeClip = false;
  const shadows = [];
  const insetShadows = [];
  const svgShadowClass = 'svg-shadow';
  const svgShadowProps = RenderTarget.current() === RenderTarget.canvas
    ? {
      className: svgShadowClass,
    }
    : {};
  for (const shadow of boxShadows) {
    shadow.inset ? insetShadows.push(shadow,) : shadows.push(shadow,);
  }
  if (shadows.length > 0) {
    shadows.reverse();
    const outsideShadowId = shapeId.add('_shadow_out',);
    const normalizedFrame = Rect.atOrigin(rect,);
    const shadowRects = [normalizedFrame,];
    for (const shadow of shadows) {
      const shadowFrame = localShadowFrame(shadow, normalizedFrame, true,);
      if (shadowFrame === null) {
        continue;
      }
      shadowRects.push(shadowFrame,);
    }
    let maxBlur = 0;
    const filterElements = [];
    const mergeElements = [];
    for (let i = 0, il = shadows.length; i < il; i++) {
      const shadow = shadows[i];
      if (!shadow) continue;
      const shadowElements = outerShadowElements(shapeId, shadow, i,);
      maxBlur = Math.max(maxBlur, shadow.blur,);
      filterElements.push(shadowElements.filterElements,);
      mergeElements.push(shadowElements.mergeElement,);
    }
    let expandStrokeWidth = strokeWidth;
    if (!isFiniteNumber(expandStrokeWidth,)) expandStrokeWidth = 0;
    let miter = svgStrokeAttributes.strokeMiterlimit;
    if (!isFiniteNumber(miter,)) miter = 4;
    let shadowRect = Rect.merge(...shadowRects,);
    shadowRect = Rect.inflate(shadowRect, (expandStrokeWidth * miter / 2 + maxBlur) * 1.1,);
    const width = rect.width + (strokeWidth ? strokeWidth / 2 : 0);
    const height = rect.height + (strokeWidth ? strokeWidth / 2 : 0);
    const filterX = shadowRect.x / width * 100;
    const filterY = shadowRect.y / height * 100;
    const filterWidth = shadowRect.width / width * 100;
    const filterHeight = shadowRect.height / height * 100;
    const svgRect = {
      x: `${filterX.toFixed(1,)}%`,
      y: `${filterY.toFixed(1,)}%`,
      width: `${filterWidth.toFixed(1,)}%`,
      height: `${filterHeight.toFixed(1,)}%`,
    };
    definition.push(/* @__PURE__ */ jsxs('filter', {
      id: outsideShadowId.id,
      filterUnits: 'objectBoundingBox',
      ...svgRect,
      ...svgShadowProps,
      children: [
        filterElements,
        shadows.length > 1
          ? /* @__PURE__ */ jsx3('feMerge', {
            children: mergeElements,
          },)
          : null,
      ],
    }, outsideShadowId.id,),);
    const maskId = shapeId.add('mask',);
    maskElement = /* @__PURE__ */ jsxs('mask', {
      id: maskId.id,
      ...svgRect,
      children: [
        /* @__PURE__ */ jsx3('rect', {
          ...svgRect,
          fill: 'white',
        },),
        /* @__PURE__ */ jsx3('use', {
          href: shapeId.link,
          fill: 'black',
          fillOpacity: fillEnabled ? void 0 : 0,
        },),
      ],
    },);
    outsetElement = /* @__PURE__ */ jsx3('g', {
      filter: outsideShadowId.urlLink,
      ...svgShadowProps,
      mask: maskId.urlLink,
      children: /* @__PURE__ */ jsx3('use', {
        ...svgStrokeAttributes,
        fill: 'black',
        fillOpacity: fillEnabled ? void 0 : 0,
        stroke: 'black',
        strokeOpacity: strokeEnabled ? void 0 : 0,
        strokeWidth: strokeEnabled ? strokeWidth : 0,
        xlinkHref: shapeId.link,
        clipPath: strokeClipId.urlLink,
      },),
    },);
  }
  if (insetShadows.length) {
    insetShadows.reverse();
    const insideShadowId = shapeId.add('_shadow_inside',);
    const normalizedFrame = Rect.atOrigin(rect,);
    const shadowFrames = [normalizedFrame,];
    for (const shadow of insetShadows) {
      const shadowFrame = localShadowFrame(shadow, normalizedFrame, true,);
      if (shadowFrame === null) {
        continue;
      }
      shadowFrames.push(shadowFrame,);
    }
    const shadowRect = Rect.merge(...shadowFrames,);
    const width = rect.width + (strokeWidth ? strokeWidth / 2 : 0.1);
    const height = rect.height + (strokeWidth ? strokeWidth / 2 : 0.1);
    const filterX = shadowRect.x / width * 100;
    const filterY = shadowRect.y / height * 100;
    const filterWidth = shadowRect.width / width * 100;
    const filterHeight = shadowRect.height / height * 100;
    const filterElements = [];
    const mergeElements = [];
    for (let i = 0, il = insetShadows.length; i < il; i++) {
      const shadow = insetShadows[i];
      if (!shadow) continue;
      const shadowElements = innerShadowElements(shapeId, shadow, i,);
      filterElements.push(shadowElements.filterElements,);
      mergeElements.push(shadowElements.mergeElement,);
    }
    definition.push(/* @__PURE__ */ jsxs('filter', {
      id: insideShadowId.id,
      x: `${filterX.toFixed(1,)}%`,
      y: `${filterY.toFixed(1,)}%`,
      width: `${filterWidth.toFixed(1,)}%`,
      height: `${filterHeight.toFixed(1,)}%`,
      filterUnits: 'objectBoundingBox',
      ...svgShadowProps,
      children: [
        filterElements,
        insetShadows.length > 1
          ? /* @__PURE__ */ jsx3('feMerge', {
            children: mergeElements,
          },)
          : null,
      ],
    }, insideShadowId.id,),);
    let clipPath;
    if (needsStrokeClip) {
      clipPath = strokeClipId.urlLink;
    }
    insetElement = /* @__PURE__ */ jsx3('use', {
      fill: 'black',
      fillOpacity: '1',
      filter: insideShadowId.urlLink,
      xlinkHref: shapeId.link,
      clipPath,
      ...svgShadowProps,
    },);
  }
  return {
    definition,
    outsetElement,
    insetElement,
    needsStrokeClip,
    maskElement,
  };
}
function outerShadowElements(shapeID, shadow, index,) {
  const shadowKey = shapeID.add('_outer_shadow' + index,);
  const filterElements = /* @__PURE__ */ jsx3(OuterShadowFilterElements, {
    shadow,
    shadowKey,
  }, shadowKey.id + '-filters',);
  const mergeElement = /* @__PURE__ */ jsx3('feMergeNode', {
    in: shadowKey.id,
  }, shadowKey.id + '-merge',);
  return {
    filterElements,
    mergeElement,
  };
}
var OuterShadowFilterElements = (props) => {
  const {
    shadow,
    shadowKey,
  } = props;
  const offsetId = shadowKey.add('offset',).id;
  const blurId = shadowKey.add('blur',).id;
  const floodId = shadowKey.add('flood',).id;
  return /* @__PURE__ */ jsxs(Fragment, {
    children: [
      /* @__PURE__ */ jsx3('feOffset', {
        dx: shadow.x,
        dy: shadow.y,
        in: 'SourceAlpha',
        result: offsetId,
      },),
      /* @__PURE__ */ jsx3('feGaussianBlur', {
        stdDeviation: shadow.blur / 2,
        in: offsetId,
        result: blurId,
      },),
      /* @__PURE__ */ jsx3('feFlood', {
        floodColor: shadow.color,
        result: floodId,
      },),
      /* @__PURE__ */ jsx3('feComposite', {
        in: floodId,
        in2: blurId,
        operator: 'in',
        result: shadowKey.id,
      },),
    ],
  },);
};
function innerShadowElements(shapeID, shadow, index,) {
  const shadowKey = shapeID.add('_inside_shadow' + index,);
  const filterElements = /* @__PURE__ */ jsx3(InnerShadowFilterElements, {
    shadow,
    shadowKey,
  }, shadowKey.id + '-filters',);
  const mergeElement = /* @__PURE__ */ jsx3('feMergeNode', {
    in: shadowKey.id,
  }, shadowKey.id + '-merge',);
  return {
    filterElements,
    mergeElement,
  };
}
var InnerShadowFilterElements = (props) => {
  const {
    shadow,
    shadowKey,
  } = props;
  const blurId = shadowKey.add('blur',).id;
  const offsetId = shadowKey.add('offset',).id;
  const compositeId = shadowKey.add('composite',).id;
  const floodId = shadowKey.add('flood',).id;
  return /* @__PURE__ */ jsxs(Fragment, {
    children: [
      /* @__PURE__ */ jsx3('feGaussianBlur', {
        stdDeviation: shadow.blur / 2,
        in: 'SourceAlpha',
        result: blurId,
      },),
      /* @__PURE__ */ jsx3('feOffset', {
        dx: shadow.x,
        dy: shadow.y,
        in: blurId,
        result: offsetId,
      },),
      /* @__PURE__ */ jsx3('feComposite', {
        in: offsetId,
        in2: 'SourceAlpha',
        operator: 'arithmetic',
        k2: '-1',
        k3: '1',
        result: compositeId,
      },),
      /* @__PURE__ */ jsx3('feFlood', {
        floodColor: shadow.color,
        result: floodId,
      },),
      /* @__PURE__ */ jsx3('feComposite', {
        in: floodId,
        in2: compositeId,
        operator: 'in',
        result: shadowKey.id,
      },),
    ],
  },);
};
function calcMaxRealisticShadowBlur(distance2, focus,) {
  return interpolate([0, 0.5, 1,], [distance2 * 5, distance2, 0,],)(focus,);
}
var maxSpread = 5;
function calcRealisticShadowSpread(diffusion,) {
  return mix(-maxSpread, 0, diffusion,);
}
function localShadowFrame(shadow, frame2, isSVG = false,) {
  if (!isSVG && asRecord(shadow,)['inset']) return null;
  let growth = shadow.blur;
  let minX;
  let maxX;
  let minY;
  let maxY;
  if (isSVG) {
    minX = -Math.abs(shadow.x,) - growth;
    maxX = Math.abs(shadow.x,) + frame2.width + growth;
    minY = -Math.abs(shadow.y,) - growth;
    maxY = Math.abs(shadow.y,) + frame2.height + growth;
  } else if (BoxShadow.is(shadow,) && shadow.type === 'realistic') {
    growth = 'focus' in shadow && 'diffusion' in shadow
      ? calcMaxRealisticShadowBlur(distance(shadow.x, shadow.y,), shadow.focus,) + calcRealisticShadowSpread(shadow.diffusion,)
      : 0;
    if (shadow.x >= 0) {
      minX = 0 - growth;
      maxX = shadow.x + frame2.width + growth;
    } else {
      minX = shadow.x - growth;
      maxX = frame2.width + growth;
    }
    if (shadow.y >= 0) {
      minY = 0 - growth;
      maxY = shadow.y + frame2.height + growth;
    } else {
      minY = shadow.y - growth;
      maxY = frame2.height + growth;
    }
  } else {
    if ('spread' in shadow) {
      growth += shadow.spread;
    }
    minX = shadow.x - growth;
    maxX = shadow.x + frame2.width + growth;
    minY = shadow.y - growth;
    maxY = shadow.y + frame2.height + growth;
  }
  if (maxX <= minX || maxY <= minY) return null;
  return {
    x: minX,
    y: minY,
    width: maxX - minX,
    height: maxY - minY,
  };
}
function collectLayerFilters(props, style2,) {
  const filters = [];
  if (isFiniteNumber(props.brightness,)) {
    filters.push(`brightness(${props.brightness / 100})`,);
  }
  if (isFiniteNumber(props.contrast,)) {
    filters.push(`contrast(${props.contrast / 100})`,);
  }
  if (isFiniteNumber(props.grayscale,)) {
    filters.push(`grayscale(${props.grayscale / 100})`,);
  }
  if (isFiniteNumber(props.hueRotate,)) {
    filters.push(`hue-rotate(${props.hueRotate}deg)`,);
  }
  if (isFiniteNumber(props.invert,)) {
    filters.push(`invert(${props.invert / 100})`,);
  }
  if (isFiniteNumber(props.saturate,)) {
    filters.push(`saturate(${props.saturate / 100})`,);
  }
  if (isFiniteNumber(props.sepia,)) {
    filters.push(`sepia(${props.sepia / 100})`,);
  }
  if (isFiniteNumber(props.blur,)) {
    filters.push(`blur(${props.blur}px)`,);
  }
  if (props.dropShadows) {
    filters.push(...shadowsAsFilter(props.dropShadows,),);
  }
  if (filters.length === 0) return;
  style2.filter = style2.WebkitFilter = filters.join(' ',);
}
function collectBackgroundFilters(props, style2,) {
  if (isFiniteNumber(props.backgroundBlur,)) {
    style2.backdropFilter = style2.WebkitBackdropFilter = `blur(${props.backgroundBlur}px)`;
  }
}
function collectFiltersFromProps(props, style2,) {
  collectBackgroundFilters(props, style2,);
  collectLayerFilters(props, style2,);
}
function collectVisualStyleFromProps(props, style2, isTextNode = false,) {
  collectBackgroundFromProps(props, style2,);
  collectRadiusFromProps(props, style2,);
  collectFiltersFromProps(props, style2,);
  collectBlendingFromProps(props, style2,);
  collectOverflowFromProps(props, style2,);
  collectOpacityFromProps(props, style2,);
  collectTextColorFromProps(props, style2,);
  if (isTextNode) {
    collectTextShadowsForProps(props, style2,);
  } else {
    collectBoxShadowsForProps(props, style2,);
  }
}
var getNumber = /* @__PURE__ */ (() => Animatable.getNumber)();
var transformDefaults = {
  z: 0,
  rotation: 0,
  rotationX: 0,
  rotationY: 0,
  rotationZ: 0,
  scale: 1,
  scaleX: 1,
  scaleY: 1,
  scaleZ: 1,
  skew: 0,
  skewX: 0,
  skewY: 0,
  originX: 0.5,
  originY: 0.5,
  originZ: 0,
};
function getRotation(rotation, rotate2,) {
  if (typeof rotate2 === 'string') {
    rotate2 = parseFloat(rotate2,);
  }
  return isFiniteNumber(rotate2,) ? rotate2 : getNumber(rotation,);
}
function collectTransformFromProps(props, rect, style2,) {
  const motionStyle = style2;
  const x = typeof rect.x === 'number' ? `${rect.x}px` : rect.x;
  const y = typeof rect.y === 'number' ? `${rect.y}px` : rect.y;
  const z = getNumber(props.z,);
  const scaleZ = getNumber(props.scaleZ,);
  const originZ = getNumber(props.originZ,);
  const rotationZ = getRotation(props.rotationZ, resolveMotionValue(motionStyle.rotateZ,),);
  const rotationX = getRotation(props.rotationX, resolveMotionValue(motionStyle.rotateX,),);
  const rotationY = getRotation(props.rotationY, resolveMotionValue(motionStyle.rotateY,),);
  const scale2 = getNumber(props.scale,);
  const scaleX2 = getNumber(props.scaleX,);
  const scaleY2 = getNumber(props.scaleY,);
  const skew = getNumber(props.skew,);
  const skewX = getNumber(props.skewX,);
  const skewY = getNumber(props.skewY,);
  const rotation = getRotation(props.rotation, resolveMotionValue(motionStyle.rotate,),);
  const force3d = RenderEnvironment.target === RenderTarget.export;
  if (force3d || z !== 0 || scaleZ !== 1 || originZ !== 0 || rotationZ !== 0 || rotationX !== 0 || rotationY !== 0) {
    style2.transform = `
            ${`translate3d(${x}, ${y}, ${z}px)`}
            scale3d(${scaleX2 * scale2}, ${scaleY2 * scale2}, ${scaleZ})
            skew(${skew}deg,${skew}deg)
            skewX(${skewX}deg)
            skewY(${skewY}deg)
            translateZ(${originZ}px)
            rotateX(${rotationX}deg)
            rotateY(${rotationY}deg)
            rotateZ(${(rotation + rotationZ).toFixed(4,)}deg)
            translateZ(${-originZ}px)`;
  } else {
    style2.transform = `
            ${`translate(${x}, ${y})`}
            scale(${scaleX2 * scale2}, ${scaleY2 * scale2})
            skew(${skew}deg,${skew}deg)
            skewX(${skewX}deg)
            skewY(${skewY}deg)
            rotate(${rotation.toFixed(4,)}deg)`;
  }
  const transformOrigin = `${getNumber(props.originX,) * 100}% ${getNumber(props.originY,) * 100}%`;
  style2.transformOrigin = transformOrigin;
  style2.WebkitTransformOrigin = transformOrigin;
}
function cssBackgroundSize(size,) {
  switch (size) {
    case 'fit':
      return 'contain';
    case 'stretch':
      return '100% 100%';
    default:
      return 'cover';
  }
}
function collectBackgroundImageFromProps(props, style2,) {
  const image = backgroundImageFromProps(props,);
  if (image) {
    style2.backgroundImage = `url("${image.src}")`;
    style2.backgroundSize = cssBackgroundSize(image.fit,);
    style2.backgroundRepeat = 'no-repeat';
    style2.backgroundPosition = 'center';
  }
}
function toPixelString(value,) {
  return isFiniteNumber(value,) ? `${value}px` : value;
}
function applyLayoutProp(style2, props, key7,) {
  if (props[key7] !== void 0) {
    const value = Animatable.get(props[key7], void 0,);
    asRecord(style2,)[key7] = toPixelString(value,);
  }
}
var DeprecatedFrame = /* @__PURE__ */ (() => {
  const _DeprecatedFrameInner = class _DeprecatedFrameInner2 extends Layer {
    constructor() {
      super(...arguments,);
      __publicField(this, 'element', null,);
      __publicField(this, 'imageDidChange', false,);
      __publicField(this, 'state', {
        size: null,
      },);
      __publicField(this, 'updateStyle', () => {
        if (!this.element) {
          return;
        }
        Object.assign(this.element.style, this.getStyle(),);
      },);
      __publicField(this, 'setElement', (element) => {
        this.element = element;
        this.setLayerElement(element,);
      },);
      __publicField(this, 'propsObserver',);
      __publicField(this, 'propsObserverCancel',);
      __publicField(this, 'sizeObserver',);
      __publicField(this, 'sizeObserverCancel',);
      __publicField(this, 'onPropsChange', (props) => {
        const rect = _DeprecatedFrameInner2.rect(Animatable.objectToValues(props.value,),);
        if (this.state.size && isAnimatable2(this.state.size.width,) && isAnimatable2(props.value.width,)) {
          this.state.size.width.set(rect.width,);
        }
        if (this.state.size && isAnimatable2(this.state.size.height,) && isAnimatable2(props.value.height,)) {
          this.state.size.height.set(rect.height,);
        }
        this.updateStyle();
      },);
      __publicField(this, 'onSizeChange', () => {
        this.updateStyle();
      },);
    }
    static rect(props,) {
      const constraintValues = ConstraintValues.fromProperties(props,);
      const parentSizeInfo = props.parentSize
        ? {
          sizing: props.parentSize,
          positioning: props.parentSize,
          viewport: null,
        }
        : null;
      return ConstraintValues.toRect(constraintValues, parentSizeInfo, null, true,);
    }
    get rect() {
      return _DeprecatedFrameInner2.rect(this.props,);
    }
    static getDerivedStateFromProps(nextProps, prevState,) {
      const size = _DeprecatedFrameInner2.updatedSize(nextProps, prevState,);
      const {
        target,
      } = RenderEnvironment;
      const nextBackgroundImageSrc = nextProps.background && BackgroundImage.isImageObject(nextProps.background,)
        ? nextProps.background.src
        : null;
      if (nextBackgroundImageSrc) {
        return {
          size,
        };
      }
      if (prevState.size) {
        if (target === RenderTarget.preview) {
          return null;
        }
        if (prevState.size.width === size.width && prevState.size.height === size.height) {
          return null;
        }
      }
      return {
        size,
      };
    }
    static updatedSize(props, state,) {
      const rect = _DeprecatedFrameInner2.rect(props,);
      let size = state.size;
      const newSize = {
        width: rect.width,
        height: rect.height,
      };
      const {
        target,
      } = RenderEnvironment;
      if (!size) {
        if (target === RenderTarget.preview) {
          size = ObservableObject(newSize, true,);
        } else {
          size = newSize;
        }
      } else {
        if (isAnimatable2(size.width,) && isAnimatable2(size.height,)) {
          size.width.set(newSize.width,);
          size.height.set(newSize.height,);
        } else {
          size = newSize;
        }
      }
      return size;
    }
    getStyle() {
      const rect = this.rect;
      const style2 = {
        display: 'block',
        position: 'absolute',
        width: `${rect.width}px`,
        height: `${rect.height}px`,
        pointerEvents: void 0,
        // TODO: this should be "none" for non-event consuming instances, for performance.
        userSelect: 'none',
      };
      let left = Animatable.get(this.props.left, void 0,);
      let top = Animatable.get(this.props.top, void 0,);
      Object.assign(style2, this.props._initialStyle,);
      const hasParentSize = this.context.parentSize !== 1;
      const perspective = Animatable.get(this.props.perspective, void 0,);
      style2.perspective = perspective;
      style2.WebkitPerspective = perspective;
      let backfaceVisibility = void 0;
      const backfaceVisible = Animatable.get(this.props.backfaceVisible, void 0,);
      if (backfaceVisible === true) {
        backfaceVisibility = 'visible';
      } else if (backfaceVisible === false) {
        backfaceVisibility = 'hidden';
      }
      style2.backfaceVisibility = backfaceVisibility;
      style2.WebkitBackfaceVisibility = backfaceVisibility;
      const preserve3d = Animatable.get(this.props.preserve3d, void 0,);
      if (preserve3d === true) {
        style2.transformStyle = 'preserve-3d';
      } else if (preserve3d === false) {
        style2.transformStyle = 'flat';
      }
      if (!hasParentSize) {
        applyLayoutProp(style2, this.props, 'right',);
        applyLayoutProp(style2, this.props, 'bottom',);
        const width = Animatable.get(this.props.width, void 0,);
        const stringWidth = toPixelString(width,);
        const height = Animatable.get(this.props.height, void 0,);
        const stringHeight = toPixelString(height,);
        if (typeof left === 'string' && left.endsWith('%',) && this.props.right === null) {
          left = `calc(${left} - calc(${stringWidth}} / 2))`;
          style2.width = stringWidth;
        }
        if (typeof top === 'string' && top.endsWith('%',) && this.props.bottom === null) {
          top = `calc(${top} - calc(${stringHeight} / 2))`;
          style2.height = stringHeight;
        }
        if (top !== void 0 && style2.bottom !== void 0) {
          style2.height = void 0;
          top = toPixelString(Animatable.get(this.props.top, void 0,),);
        } else {
          style2.height = stringHeight;
        }
        if (left !== void 0 && style2.right !== void 0) {
          style2.width = void 0;
          left = toPixelString(Animatable.get(this.props.left, void 0,),);
        } else {
          style2.width = stringWidth;
        }
      }
      const transformRect = {
        ...rect,
      };
      if (typeof left !== 'undefined') {
        transformRect.x = left;
      }
      if (typeof top !== 'undefined') {
        transformRect.y = top;
      }
      collectTransformFromProps(this.props, transformRect, style2,);
      collectVisualStyleFromProps(this.props, style2,);
      collectBackgroundImageFromProps(this.props, style2,);
      Layer.applyWillChange(this.props, style2, false,);
      if (this.props.style) {
        Object.assign(style2, this.props.style,);
      }
      return style2;
    }
    componentDidMount() {
      const {
        target,
      } = RenderEnvironment;
      if (target === RenderTarget.preview) {
        this.propsObserver = ObservableObject(this.props, true,);
        this.propsObserverCancel = ObservableObject.addObserver(this.propsObserver, this.onPropsChange,);
        if (this.props.parentSize && isAnimatable2(this.props.parentSize.width,) && isAnimatable2(this.props.parentSize.height,)) {
          this.sizeObserver = ObservableObject(this.props.parentSize, true,);
          this.sizeObserverCancel = ObservableObject.addObserver(this.sizeObserver, this.onSizeChange,);
        }
      }
    }
    componentDidUpdate() {
      const {
        target,
      } = RenderEnvironment;
      this.propsObserverCancel && this.propsObserverCancel();
      this.sizeObserverCancel && this.sizeObserverCancel();
      if (target === RenderTarget.preview) {
        this.propsObserver = ObservableObject(this.props, true,);
        this.propsObserverCancel = ObservableObject.addObserver(this.propsObserver, this.onPropsChange,);
        if (this.props.parentSize && isAnimatable2(this.props.parentSize.width,) && isAnimatable2(this.props.parentSize.height,)) {
          this.sizeObserver = ObservableObject(this.props.parentSize, true,);
          this.sizeObserverCancel = ObservableObject.addObserver(this.sizeObserver, this.onSizeChange,);
        }
      }
    }
    componentWillUnmount() {
      this.propsObserverCancel && this.propsObserverCancel();
      this.propsObserverCancel = void 0;
      this.sizeObserverCancel && this.sizeObserverCancel();
      this.sizeObserverCancel = void 0;
    }
    render() {
      countNodeRender();
      const {
        visible,
        id: id3,
        className: className2,
      } = this.props;
      if (!visible) {
        return null;
      }
      const style2 = this.getStyle();
      const rect = this.rect;
      const parentSize = {
        width: rect.width,
        height: rect.height,
      };
      return /* @__PURE__ */ jsxs('div', {
        id: id3,
        style: style2,
        ref: this.setElement,
        className: className2,
        children: [
          /* @__PURE__ */ jsx3(ProvideParentSize, {
            parentSize,
            children: this.layoutChildren(),
          },),
          /* @__PURE__ */ jsx3(Border, {
            ...this.props,
          },),
        ],
      },);
    }
    layoutChildren() {
      const _forwardedOverrides = this.props._forwardedOverrides;
      let children = React4.Children.map(this.props.children, (child) => {
        if (isConstraintSupportingChild(child,)) {
          return React4.cloneElement(child, {
            parentSize: this.state.size,
            _forwardedOverrides,
            // biome-ignore lint/suspicious/noExplicitAny: deprecated code
          },);
        } else if (_forwardedOverrides && child) {
          return React4.cloneElement(child, {
            _forwardedOverrides,
          },);
        } else {
          return child;
        }
      },);
      if (children && children.length === 1 && typeof children[0] === 'string') {
        children = [/* @__PURE__ */ jsx3(Center, {
          children,
        }, '0',),];
      }
      return children;
    }
  };
  __publicField(_DeprecatedFrameInner, 'supportsConstraints', true,);
  __publicField(_DeprecatedFrameInner, 'defaultFrameSpecificProps', {
    ...constraintDefaults,
    ...transformDefaults,
    opacity: 1,
    background: Color('rgba(0, 170, 255, 0.3)',),
    visible: true,
    borderWidth: 0,
    borderColor: '#222',
    borderStyle: 'solid',
  },);
  __publicField(_DeprecatedFrameInner, 'defaultProps', {
    ...Layer.defaultProps,
    ..._DeprecatedFrameInner.defaultFrameSpecificProps,
  },);
  let DeprecatedFrameInner = _DeprecatedFrameInner;
  DeprecatedFrameInner.contextType = ConstraintsContext;
  return DeprecatedFrameInner;
})();
function Center(props,) {
  const style2 = Object.assign({}, {
    height: '100%',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    fontFamily: 'Helvetica',
  }, props.style || {},);
  return /* @__PURE__ */ jsx3('div', {
    style: style2,
    children: props.children,
  },);
}
var frameWithMotionPropsFields = [
  '_border',
  '_constraints',
  'animate',
  'initial',
  'variants',
  'transition',
  'inherit',
  'center',
  'initial',
  'transformTemplate',
  'animate',
  'variants',
  'transition',
  'onUpdate',
  'onAnimationComplete',
  'onPanSessionStart',
  'onTapCancel',
  'whileTap',
  'whileHover',
  'onHoverStart',
  'onHoverEnd',
  'drag',
  'dragDirectionLock',
  'dragPropagation',
  'dragConstraints',
  'dragElastic',
  'dragMomentum',
  'dragTransition',
  'onDragStart',
  'onDragEnd',
  'onDrag',
  'onDirectionLock',
  'onDragTransitionEnd',
  'x',
  'y',
  'rotate',
  'rotateX',
  'rotateY',
  'rotateZ',
  'position',
  'border',
  'borderRadius',
  'shadow',
  'size',
];
var deprecatedFramePropsFields = ['autoSize', 'aspectRatio', 'borderWidth', 'borderStyle', 'borderColor', 'centerX', 'centerY',];
function isDeprecatedFrameProps(props,) {
  let field;
  for (const propKey in props) {
    if (isAnimatable2(props[propKey],)) return true;
  }
  for (field of frameWithMotionPropsFields) {
    if (props.hasOwnProperty(field,)) return false;
  }
  for (field of deprecatedFramePropsFields) {
    if (props.hasOwnProperty(field,)) return true;
  }
  return false;
}
var DeprecatedFrameWithEvents = /* @__PURE__ */ WithEvents(DeprecatedFrame,);
var Frame = /* @__PURE__ */ (() => {
  const FrameInner = forwardRef(function FrameInner2(props, ref,) {
    const parentSize = useParentSize();
    if (isDeprecatedFrameProps(props,)) {
      const currentParentSize = props.parentSize || deprecatedParentSize(parentSize,);
      return /* @__PURE__ */ jsx3(DeprecatedFrameWithEvents, {
        ...props,
        parentSize: currentParentSize,
      },);
    }
    return /* @__PURE__ */ jsx3(FrameWithMotion, {
      ...props,
      ref,
    },);
  },);
  FrameInner['displayName'] = 'Frame';
  return FrameInner;
})();
var Draggable = /* @__PURE__ */ WithDragging(DeprecatedFrameWithEvents,);
function useInfiniteScroll({
  ref: elementRef,
  loadMore,
  rootMargin = '0px',
  threshold,
  paginationInfo,
},) {
  const callback = React4.useCallback((entries) => {
    for (let i = 0; i < entries.length; ++i) {
      const entry = entries[i];
      if (entry.isIntersecting) {
        loadMore();
        return;
      }
    }
  }, [loadMore,],);
  React4.useEffect(() => {
    if (!elementRef.current) return;
    const observer2 = new IntersectionObserver(callback, {
      rootMargin,
      threshold,
    },);
    observer2.observe(elementRef.current,);
    return () => {
      observer2.disconnect();
    };
  }, [elementRef, callback, rootMargin, threshold, paginationInfo.currentPage,],);
}
function withInfiniteScroll(Component17,) {
  return React4.forwardRef(({
    __paginationInfo,
    __loadMore,
    ...props
  }, ref,) => {
    const backupRef = React4.useRef(null,);
    const infiniteScrollRef = ref ?? backupRef;
    useInfiniteScroll({
      rootMargin: '500px',
      loadMore: __loadMore,
      ref: infiniteScrollRef,
      paginationInfo: __paginationInfo,
    },);
    return /* @__PURE__ */ jsx3(Component17, {
      ...props,
      ref: infiniteScrollRef,
    },);
  },);
}
function debounce(fn, time2,) {
  let timeout;
  const debounced = (...args) => {
    safeWindow.clearTimeout(timeout,);
    timeout = safeWindow.setTimeout(fn, time2, ...args,);
  };
  const cancel = () => {
    safeWindow.clearTimeout(timeout,);
  };
  debounced.cancel = cancel;
  return debounced;
}
function useWheelScroll(ref, {
  enabled,
  initial,
  prev,
  direction,
  constraints,
  offsetX,
  offsetY,
  onScrollStart,
  onScroll,
  onScrollEnd,
},) {
  const isWheelScrollActive = useRef3(false,);
  const getPointData = useCallback(() => {
    const point2 = getPoint(offsetX, offsetY,);
    const data2 = {
      point: point2,
      velocity: {
        x: offsetX.getVelocity(),
        y: offsetY.getVelocity(),
      },
      offset: {
        x: point2.x - initial.x,
        y: point2.y - initial.y,
      },
      delta: {
        x: point2.x - prev.x,
        y: point2.y - prev.y,
      },
    };
    prev.x = point2.x;
    prev.y = point2.y;
    return data2;
  }, [],);
  let handler;
  if (enabled) {
    let clampX2 = function (v,) {
        return constraints.current === null ? v : clamp2(v, constraints.current.left, constraints.current.right,);
      },
      clampY2 = function (v,) {
        return constraints.current === null ? v : clamp2(v, constraints.current.top, constraints.current.bottom,);
      },
      updateX2 = function (delta,) {
        offsetX.stop();
        offsetX.set(clampX2(offsetX.get() - delta,),);
      },
      updateY2 = function (delta,) {
        offsetY.stop();
        offsetY.set(clampY2(offsetY.get() - delta,),);
      };
    var clampX = clampX2,
      clampY = clampY2,
      updateX = updateX2,
      updateY = updateY2;
    const debouncedOnScrollEnd = debounce(() => {
      onScrollEnd && onScrollEnd(getPointData(),);
      isWheelScrollActive.current = false;
    }, 200,);
    handler = (e) => {
      e.preventDefault();
      if (!isWheelScrollActive.current) {
        const x = offsetX.get();
        const y = offsetY.get();
        initial.x = x;
        initial.y = y;
        prev.x = x;
        prev.y = y;
        onScrollStart && onScrollStart(getPointData(),);
        isWheelScrollActive.current = true;
      }
      switch (direction) {
        case 'horizontal':
          updateX2(e.deltaX,);
          break;
        case 'vertical':
          updateY2(e.deltaY,);
          break;
        default:
          updateX2(e.deltaX,);
          updateY2(e.deltaY,);
      }
      onScroll && onScroll(getPointData(),);
      debouncedOnScrollEnd();
    };
  }
  useDomEvent(ref, 'wheel', handler, {
    passive: false,
  },);
}
function getPoint(x, y,) {
  return {
    x: x.get(),
    y: y.get(),
  };
}
function hasPaddingPerSide(props,) {
  const {
    paddingPerSide,
    paddingTop,
    paddingBottom,
    paddingLeft,
    paddingRight,
  } = props;
  return paddingPerSide !== false &&
    (paddingTop !== void 0 || paddingBottom !== void 0 || paddingLeft !== void 0 || paddingRight !== void 0);
}
function paddingFromProps(props,) {
  const {
    padding = 0,
    paddingTop,
    paddingBottom,
    paddingLeft,
    paddingRight,
  } = props;
  if (hasPaddingPerSide(props,)) {
    return {
      top: paddingTop !== void 0 ? paddingTop : padding,
      bottom: paddingBottom !== void 0 ? paddingBottom : padding,
      left: paddingLeft !== void 0 ? paddingLeft : padding,
      right: paddingRight !== void 0 ? paddingRight : padding,
    };
  }
  return {
    top: padding,
    bottom: padding,
    left: padding,
    right: padding,
  };
}
function makePaddingString({
  top,
  left,
  bottom,
  right,
},) {
  if (top === right && right === bottom && bottom === left) {
    return `${top}px`;
  }
  return `${top}px ${right}px ${bottom}px ${left}px`;
}
var Stack = /* @__PURE__ */ (() => {
  const StackInner = React4.forwardRef(function StackInner2(stackProps, forwardedRef,) {
    const {
      as = 'div',
      direction = 'vertical',
      distribution = 'start',
      alignment = 'center',
      gap = 10,
      wrap: wrap2 = false,
      useFlexboxGap: externalUseFlexboxGap = true,
      children,
      style: styleProp,
      className: className2,
      willChangeTransform,
      __fromCodeComponentNode,
      parentSize,
      __contentWrapperStyle,
      ...containerProps
    } = stackProps;
    const useFlexboxGap = externalUseFlexboxGap || wrap2;
    const stackRef = React4.useRef(null,);
    const flexDirection = toFlexDirection(direction,);
    const isReverse = isReverseDirection(flexDirection,);
    const justifyContent = toJustifyOrAlignment(distribution,);
    const padding = hasPaddingPerSide(containerProps,) || containerProps.padding
      ? makePaddingString(paddingFromProps(containerProps,),)
      : void 0;
    const style2 = {
      ...styleProp,
    };
    Layer.applyWillChange(
      {
        willChangeTransform,
      },
      style2,
      true,
    );
    if (__fromCodeComponentNode && !constraintsEnabled(unwrapFrameProps(containerProps,),)) {
      containerProps.width = '100%';
      containerProps.height = '100%';
      containerProps._constraints = {
        enabled: true,
      };
    }
    const layoutId = useLayoutId2(stackProps,);
    const {
      children: _children,
      props,
    } = processOverrideForwarding(containerProps, children,);
    const widthType = containerProps.widthType ?? (containerProps.width === 'auto' ? 2 : 0);
    const heightType = containerProps.heightType ?? (containerProps.height === 'auto' ? 2 : 0);
    const fractionChildren = handleFraction(_children, direction, widthType, heightType,);
    const gapChildren = wrapInGapElementForLegacyGap(fractionChildren, gap, flexDirection, justifyContent, useFlexboxGap, wrap2,);
    const content = useProvideParentSize(gapChildren, parentSize ?? 1,/* Disabled */
    );
    const attributes = {
      'data-framer-component-type': 'Stack',
    };
    const fromCanvasComponent = containerProps.__fromCanvasComponent;
    if (fromCanvasComponent) attributes['data-framer-generated'] = true;
    const alignItems = toJustifyOrAlignment(alignment,);
    const contentWrapperStyle = {
      display: 'flex',
      flexDirection,
      flexWrap: wrap2 ? 'wrap' : 'nowrap',
      justifyContent,
      alignItems,
      alignContent: alignItems,
      padding,
      ...__contentWrapperStyle,
    };
    const gapEnabled = isGapEnabled(gap, justifyContent, wrap2,);
    if (useFlexboxGap && gapEnabled) {
      const gapSupportedInMainAxis = isGapSupportedInMainAxis(justifyContent,);
      if (gapSupportedInMainAxis || direction !== 'horizontal') {
        asRecord(contentWrapperStyle,)['--stack-native-column-gap'] = `${gap}px`;
      }
      if (gapSupportedInMainAxis || direction !== 'vertical') {
        asRecord(contentWrapperStyle,)['--stack-native-row-gap'] = `${gap}px`;
      }
    }
    if (contentWrapperStyle.width === void 0) {
      contentWrapperStyle.width = widthType === 2 ? 'min-content' : '100%';
    }
    if (contentWrapperStyle.height === void 0) {
      contentWrapperStyle.height = heightType === 2 ? 'min-content' : '100%';
    }
    if (fromCanvasComponent) {
      if (styleProp == null ? void 0 : styleProp.width) contentWrapperStyle.width = styleProp == null ? void 0 : styleProp.width;
      if (styleProp == null ? void 0 : styleProp.height) contentWrapperStyle.height = styleProp == null ? void 0 : styleProp.height;
    }
    return /* @__PURE__ */ jsx3(FrameWithMotion, {
      as,
      background: fromCanvasComponent ? void 0 : 'none',
      ...props,
      layoutId,
      ref: useForwardedRef(forwardedRef, stackRef,),
      ...attributes,
      style: style2,
      className: className2,
      layoutScroll: true,
      children: /* @__PURE__ */ jsx3(motion.div, {
        'data-framer-stack-content-wrapper': true,
        'data-framer-stack-direction-reverse': isReverse,
        'data-framer-stack-gap-enabled': gapEnabled,
        style: contentWrapperStyle,
        children: content,
      },),
    },);
  },);
  StackInner.defaultProps = {
    distribution: 'start',
  };
  StackInner.displayName = 'Stack';
  addPropertyControls(StackInner, {
    direction: {
      type: 'segmentedenum',
      options: ['horizontal', 'vertical',],
      title: 'Direction',
      defaultValue: 'vertical',
    },
    distribution: {
      type: 'enum',
      options: ['start', 'center', 'end', 'space-between', 'space-around', 'space-evenly',],
      optionTitles: ['Start', 'Center', 'End', 'Space Between', 'Space Around', 'Space Evenly',],
      title: 'Distribute',
      defaultValue: 'space-around',
    },
    alignment: {
      type: 'segmentedenum',
      options: ['start', 'center', 'end',],
      title: 'Align',
      defaultValue: 'center',
    },
    gap: {
      type: 'number',
      min: 0,
      title: 'Gap',
      hidden: (props) => {
        return props.distribution !== void 0 && ['space-between', 'space-around', 'space-evenly',].includes(props.distribution,);
      },
      defaultValue: 10,
    },
    padding: {
      type: 'fusednumber',
      toggleKey: 'paddingPerSide',
      toggleTitles: ['Padding', 'Padding per side',],
      valueKeys: ['paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft',],
      valueLabels: ['t', 'r', 'b', 'l',],
      min: 0,
      title: 'Padding',
      defaultValue: 0,
    },
  },);
  return StackInner;
})();
function isFractionDimension(dimension,) {
  return typeof dimension === 'string' && dimension.endsWith('fr',);
}
function fraction(dimension,) {
  const value = parseFloat(dimension,);
  return isFiniteNumber(value,) ? value : 0;
}
function handleFraction(children, direction, widthType, heightType,) {
  return React4.Children.map(children, (child) => {
    if (!isReactChild(child,) || !isReactElement(child,)) return;
    const isVertical = direction === 'vertical';
    const style2 = {};
    let hasFraction = false;
    const {
      style: propsStyle,
      size,
    } = child.props;
    let {
      width,
      height,
    } = child.props;
    if (size !== void 0) {
      if (width === void 0) width = size;
      if (height === void 0) height = size;
    }
    let newWidth = width;
    let newHeight = height;
    if (isFractionDimension(width,)) {
      hasFraction = true;
      hasFraction = true;
      if (isVertical) {
        if (widthType === 2) {
          style2.alignSelf = 'stretch';
          newWidth = 'auto';
        } else {
          newWidth = `${fraction(width,) * 100}%`;
        }
      } else {
        newWidth = 1;
        style2.flexGrow = fraction(width,);
        style2.flexBasis = 0;
      }
      style2.width = newWidth;
    }
    if (isFractionDimension(height,)) {
      hasFraction = true;
      if (isVertical) {
        newHeight = 1;
        style2.flexGrow = fraction(height,);
        style2.flexBasis = 0;
      } else {
        if (heightType === 2) {
          style2.alignSelf = 'stretch';
          newHeight = 'auto';
        } else {
          newHeight = `${fraction(height,) * 100}%`;
        }
      }
      style2.height = newHeight;
    }
    if (!hasFraction) return child;
    const nextStyle = {
      ...propsStyle,
      ...style2,
    };
    return React4.cloneElement(child, {
      width: newWidth,
      height: newHeight,
      style: nextStyle,
    },);
  },);
}
function isGapSupportedInMainAxis(justifyContent,) {
  if (!justifyContent) return false;
  return !['space-between', 'space-around', 'space-evenly', 'stretch',].includes(justifyContent,);
}
function isGapEnabled(gap, justifyContent, wrap2,) {
  if (!gap) {
    return false;
  }
  if (!wrap2 && !isGapSupportedInMainAxis(justifyContent,)) {
    return false;
  }
  return true;
}
function wrapInGapElementForLegacyGap(children, gap, direction, justifyContent, useFlexboxGap, wrap2,) {
  const gapStyle = {
    // We need the wrapper to have `display: contents` to prevent the child
    // margins from collapsing when using the fallback gap solution.
    // https://codesandbox.io/s/dreamy-haslett-01ie5?file=/src/styles.css
    display: 'contents',
  };
  const gapEnabled = isGapEnabled(gap, justifyContent, wrap2,);
  if (gapEnabled) {
    const isVertical = isVerticalDirection(direction,);
    asRecord(gapStyle,)['--stack-gap-x'] = `${isVertical ? 0 : gap}px`;
    asRecord(gapStyle,)['--stack-gap-y'] = `${isVertical ? gap : 0}px`;
  }
  return /* @__PURE__ */ jsx3('div', {
    'data-framer-legacy-stack-gap-enabled': gapEnabled,
    'data-framer-stack-flexbox-gap': useFlexboxGap,
    style: gapStyle,
    children,
  },);
}
function toFlexDirection(direction,) {
  switch (direction) {
    case 'vertical':
      return 'column';
    case 'horizontal':
      return 'row';
    default:
      return direction;
  }
}
function isVerticalDirection(direction,) {
  return direction === 'column' || direction === 'column-reverse';
}
function isReverseDirection(direction,) {
  switch (direction) {
    case 'column-reverse':
    case 'row-reverse':
      return true;
    default:
      return false;
  }
}
function toJustifyOrAlignment(distribution,) {
  switch (distribution) {
    case 'start':
      return 'flex-start';
    case 'end':
      return 'flex-end';
    default:
      return distribution;
  }
}
function useForwardedRef(forwardedRef, innerRef,) {
  return (element) => {
    innerRef.current = element;
    if (typeof forwardedRef === 'function') {
      forwardedRef(element,);
    } else if (forwardedRef) {
      forwardedRef.current = element;
    }
  };
}
var pageContentWrapperType = 'PageContentWrapper';
function PageContainer({
  children,
  effect,
  dragEnabled,
  direction,
  contentHeight,
  contentWidth,
  alignment,
  gap,
  isLastPage,
  contentOffsetRef,
  constraintsRef,
  directionLock,
  onDragStart,
  onDrag,
  onDragEnd,
  layoutId,
},) {
  const isHorizontalDirection = direction === 'horizontal';
  const dragAxis = isHorizontalDirection ? 'x' : 'y';
  const hasHorizontalGap = isHorizontalDirection && !isLastPage && gap;
  const hasVerticalGap = !isHorizontalDirection && !isLastPage && gap;
  const hasAutoWidth = contentWidth !== 'stretch' && isHorizontalDirection;
  const hasAutoHeight = contentHeight !== 'stretch' && !isHorizontalDirection;
  const wrapperWidth = hasAutoWidth ? 'auto' : '100%';
  const wrapperHeight = hasAutoHeight ? 'auto' : '100%';
  const containerWidth = hasHorizontalGap && wrapperWidth === '100%' ? `calc(100% + ${gap}px)` : wrapperWidth;
  const containerHeight = hasVerticalGap && wrapperHeight === '100%' ? `calc(100% + ${gap}px)` : wrapperHeight;
  return /* @__PURE__ */ jsx3(FrameWithMotion, {
    position: 'relative',
    'data-framer-component-type': 'PageContainer',
    width: containerWidth,
    height: containerHeight,
    layoutId: layoutId ? `${layoutId}-container` : void 0,
    backgroundColor: 'transparent',
    drag: dragEnabled ? dragAxis : false,
    dragDirectionLock: directionLock,
    _dragX: contentOffsetRef.current.x,
    _dragY: contentOffsetRef.current.y,
    dragConstraints: constraintsRef.current,
    onDrag,
    onDragStart,
    onDragEnd,
    preserve3d: true,
    style: {
      pointerEvents: void 0,
      paddingRight: hasHorizontalGap ? gap : 0,
      paddingBottom: hasVerticalGap ? gap : 0,
    },
    children: /* @__PURE__ */ jsx3(FrameWithMotion, {
      position: 'relative',
      'data-framer-component-type': pageContentWrapperType,
      width: wrapperWidth,
      height: wrapperHeight,
      preserve3d: false,
      backgroundColor: 'transparent',
      style: {
        ...effect,
        pointerEvents: void 0,
        display: 'flex',
        flexDirection: isHorizontalDirection ? 'row' : 'column',
        alignItems: alignment && toJustifyOrAlignment(alignment,),
      },
      children,
    }, effect ? Object.keys(effect,).join('',) : '',),
  },);
}
var Page = /* @__PURE__ */ React4.forwardRef(function Page2(props, forwardedRef,) {
  var _a;
  const {
    direction = 'horizontal',
    contentWidth = 'stretch',
    contentHeight = 'stretch',
    alignment = 'start',
    currentPage = 0,
    animateCurrentPageUpdate = true,
    gap: gapValue = 10,
    padding: _padding = 0,
    momentum = false,
    dragEnabled = true,
    defaultEffect: _defaultEffect = 'none',
    background = 'transparent',
    overflow = 'hidden',
    __fromCodeComponentNode,
    effect: _effect,
    children,
    contentOffsetX,
    contentOffsetY,
    onChangePage,
    onScrollStart,
    onScroll,
    onDragStart,
    onDrag,
    onDragEnd,
    directionLock,
    onScrollEnd,
    onDirectionLock: _onDirectionLock,
    onUpdate: _onUpdate,
    wheelEnabled = false,
    layoutId: specificLayoutId,
    ...rest
  } = props;
  const layoutId = useLayoutId2(props, {
    specificLayoutId,
    postfix: 'page',
  },);
  const containerProps = {
    ...rest,
    background,
  };
  const hasMountedRef = React4.useRef(false,);
  const hasFixedSize = RenderTarget.hasRestrictions() && props.__fromCodeComponentNode && isFiniteNumber(containerProps.width,) &&
    isFiniteNumber(containerProps.height,);
  if (!hasFixedSize && __fromCodeComponentNode && !containerProps.__fromCanvasComponent) {
    containerProps.width = '100%';
    containerProps.height = '100%';
    containerProps._constraints = {
      enabled: true,
    };
  }
  const {
    initial,
    prev,
  } = React4.useRef({
    initial: {
      x: 0,
      y: 0,
    },
    prev: {
      x: 0,
      y: 0,
    },
  },).current;
  const isHorizontal = direction === 'horizontal';
  let gap = gapValue;
  if (gap < 0) {
    warnOnce2(`The 'gap' property of Page component can not be negative, but is ${gapValue}.`,);
    gap = 0;
  }
  React4.useInsertionEffect(() => {
    injectComponentCSSRules();
  }, [],);
  const pageCount = React4.Children.count(children,);
  const maxOffsetRef = React4.useRef(0,);
  const constraints = React4.useRef({
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
  },);
  const fallbackContainerRef = React4.useRef(null,);
  const containerRef = forwardedRef || fallbackContainerRef;
  const scrollableRef = React4.useRef(null,);
  const pageEffectValuesRef = React4.useRef([],);
  const pageRectsRef = React4.useRef([],);
  const internalX = useMotionValue(isMotionValue2(contentOffsetX,) ? 0 : contentOffsetX ?? 0,);
  const internalY = useMotionValue(isMotionValue2(contentOffsetY,) ? 0 : contentOffsetY ?? 0,);
  const contentOffsetRef = React4.useRef({
    x: isMotionValue2(contentOffsetX,) ? contentOffsetX : internalX,
    y: isMotionValue2(contentOffsetY,) ? contentOffsetY : internalY,
  },);
  const currentContentPageRef = React4.useRef(currentPage,);
  const propsBoundedCurrentPageRef = React4.useRef(currentPage,);
  const latestPropsRef = React4.useRef(props,);
  latestPropsRef.current = props;
  const lastDirectionRef = React4.useRef(props.direction,);
  const snapToPage = useSnapToPage(currentContentPageRef, contentOffsetRef, isHorizontal,);
  const [_, setForceUpdateCount,] = React4.useState(0,);
  const containerSizeRef = React4.useRef({
    width: 200,
    height: 200,
  },);
  if (hasFixedSize && isFiniteNumber(containerProps.width,) && isFiniteNumber(containerProps.height,)) {
    containerSizeRef.current.width = containerProps.width;
    containerSizeRef.current.height = containerProps.height;
  }
  const updateOnResize = React4.useCallback(() => {
    if (!hasFixedSize) startTransition2(() => setForceUpdateCount((v) => v + 1));
  }, [hasFixedSize,],);
  React4.useEffect(() => {
    if (RenderTarget.current() !== RenderTarget.preview) return;
    globalThis.addEventListener('resize', updateOnResize,);
    return () => {
      globalThis.removeEventListener('resize', updateOnResize,);
    };
  }, [updateOnResize,],);
  const applyEffects = () => {
    pageEffectValuesRef.current.forEach((effectDictionary, index,) => {
      const values = effectValues(index, latestPropsRef, pageRectsRef, contentOffsetRef, maxOffsetRef,);
      if (!effectDictionary || !values) return;
      for (const [key7, value,] of Object.entries(values,)) {
        const effectValue = effectDictionary[key7];
        if (isMotionValue2(effectValue,)) {
          effectValue.set(value,);
        }
      }
    },);
  };
  const updateMaxOffsetFromPageContents = (containerSize) => {
    const newPageContentRects = getPageContentRects(containerRef, containerSize, direction, gap,);
    if (newPageContentRects) pageRectsRef.current = newPageContentRects;
    const newMaxOffset = getMaxOffset(containerSizeRef.current, pageRectsRef.current, direction, latestPropsRef.current,);
    if (newMaxOffset !== maxOffsetRef.current) {
      maxOffsetRef.current = newMaxOffset;
      constraints.current.top = -newMaxOffset;
      constraints.current.left = -newMaxOffset;
      if (RenderTarget.current() === RenderTarget.canvas) setForceUpdateCount((v) => v + 1);
    }
  };
  const measureContainerSize = () => {
    const element = containerRef.current;
    if (!element) return null;
    const {
      offsetWidth,
      offsetHeight,
    } = element;
    const currentSize = containerSizeRef.current;
    if (offsetWidth !== currentSize.width || offsetHeight !== currentSize.height) {
      containerSizeRef.current = {
        width: offsetWidth,
        height: offsetHeight,
      };
      return containerSizeRef.current;
    }
    return null;
  };
  const updateAndSnapToPage = (newPage, mount = false,) => {
    const newBoundedCurrentPage = getBoundedCurrentPage(newPage, pageCount,);
    const boundedCurrentPageDidChange = newBoundedCurrentPage !== propsBoundedCurrentPageRef.current;
    if (boundedCurrentPageDidChange) {
      propsBoundedCurrentPageRef.current = newBoundedCurrentPage;
      updateCurrentPage(newBoundedCurrentPage, currentContentPageRef, !mount ? onChangePage : void 0,);
    }
    const offset = offsetForPage(newBoundedCurrentPage, pageCount, pageRectsRef, isHorizontal, maxOffsetRef,);
    const animated = animateCurrentPageUpdate && RenderTarget.current() !== RenderTarget.canvas && !mount;
    snapToPage(newBoundedCurrentPage, offset, {
      animated,
    },);
  };
  useIsomorphicLayoutEffect2(() => {
    if (hasMountedRef.current) return;
    requestAnimationFrame(() => {
      currentContentPageRef.current = currentPage;
      const contentOffset = contentOffsetRef.current;
      contentOffset.x.on('change', applyEffects,);
      contentOffset.y.on('change', applyEffects,);
      applyEffects();
      hasMountedRef.current = true;
      const containerSize = measureContainerSize() ?? containerSizeRef.current;
      updateMaxOffsetFromPageContents(containerSize,);
      updateAndSnapToPage(currentContentPageRef.current, true,);
    },);
  }, [],);
  React4.useEffect(() => {
    if (currentPage !== currentContentPageRef.current) updateAndSnapToPage(currentPage,);
  }, [currentPage,],);
  const handleMeasureLifecycle = () => {
    const newContainerSize = measureContainerSize();
    updateMaxOffsetFromPageContents(newContainerSize ?? containerSizeRef.current,);
    updateAndSnapToPage(currentContentPageRef.current,);
    if (newContainerSize || direction !== lastDirectionRef.current) {
      if (direction === 'horizontal') {
        contentOffsetRef.current.y.set(0,);
      } else {
        contentOffsetRef.current.x.set(0,);
      }
      lastDirectionRef.current = direction;
    }
  };
  useIsomorphicLayoutEffect2(() => {
    if (RenderTarget.current() !== RenderTarget.canvas) return;
    handleMeasureLifecycle();
  },);
  const onDragStartHandler = (event, info,) => {
    if (onScrollStart) onScrollStart(info,);
    if (onDragStart) onDragStart(event, info,);
    prev.x = initial.x = info.point.x;
    prev.y = initial.y = info.point.y;
  };
  const onDragHandler = (event, info,) => {
    if (onScroll) onScroll(info,);
    if (onDrag) onDrag(event, info,);
    prev.x = info.point.x;
    prev.y = info.point.y;
  };
  const onDragTransitionEnd = () => {
    if (props.onDragTransitionEnd) props.onDragTransitionEnd();
    if (onScrollEnd) {
      const {
        x,
        y,
      } = contentOffsetRef.current;
      const point2 = {
        x: x.get(),
        y: y.get(),
      };
      onScrollEnd({
        point: point2,
        velocity: {
          x: x.getVelocity(),
          y: y.getVelocity(),
        },
        offset: {
          x: point2.x - initial.x,
          y: point2.y - initial.y,
        },
        delta: {
          x: point2.x - prev.x,
          y: point2.y - prev.y,
        },
      },);
    }
  };
  const onDragEndHandler = async (event, info,) => {
    const contentOffset = isHorizontal ? contentOffsetRef.current.x : contentOffsetRef.current.y;
    contentOffset.stop();
    const startPosition = contentOffset.get();
    const axis = isHorizontal ? 'x' : 'y';
    const velocity = info.velocity[axis];
    let index = nearestPageIndex(pageRectsRef.current, startPosition, startPosition, isHorizontal, momentum,);
    if (velocity) {
      animateValue({
        type: 'inertia',
        keyframes: [startPosition,],
        velocity,
        modifyTarget: (endPosition) => {
          index = nearestPageIndex(pageRectsRef.current, startPosition, endPosition, isHorizontal, momentum,);
          return endPosition;
        },
      },).stop();
    }
    updateCurrentPage(index, currentContentPageRef, onChangePage,);
    const offset = offsetForPage(index, pageCount, pageRectsRef, isHorizontal, maxOffsetRef,);
    if (onDragEnd) onDragEnd(event, info,);
    const handler = contentOffsetRef.current[axis];
    handler.set(startPosition,);
    animate(handler, offset, {
      type: 'spring',
      velocity,
      stiffness: 500,
      damping: 50,
      onComplete: onDragTransitionEnd,
    },);
  };
  pageEffectValuesRef.current = [];
  const childComponents = React4.Children.map(children, (child, index,) => {
    if (!isReactChild(child,) || !isReactElement(child,)) {
      return child;
    }
    const update = {
      right: void 0,
      bottom: void 0,
      top: void 0,
      left: void 0,
      _constraints: {
        enabled: false,
      },
      style: void 0,
    };
    if (containerProps.__fromCanvasComponent) {
      update.style = child.props.style ?? {};
      if (contentWidth === 'stretch') update.style.width = '100%';
      if (contentHeight === 'stretch') update.style.height = '100%';
    } else {
      if (contentWidth === 'stretch') update.width = '100%';
      if (contentHeight === 'stretch') update.height = '100%';
    }
    let effectDictionary;
    const values = effectValues(index, latestPropsRef, pageRectsRef, contentOffsetRef, maxOffsetRef,);
    if (values) {
      effectDictionary = {};
      for (const key7 in values) {
        effectDictionary[key7] = motionValue(values[key7],);
      }
    }
    pageEffectValuesRef.current.push(effectDictionary,);
    return /* @__PURE__ */ jsx3(PageContainer, {
      effect: effectDictionary,
      dragEnabled,
      direction,
      contentHeight,
      contentWidth,
      alignment,
      gap,
      isLastPage: index === pageCount - 1,
      contentOffsetRef,
      constraintsRef: constraints,
      directionLock,
      onDragStart: onDragStartHandler,
      onDrag: onDragHandler,
      onDragEnd: onDragEndHandler,
      layoutId: layoutId ? `${layoutId}-${index}` : void 0,
      children: React4.cloneElement(child, update,),
    }, index,);
  },);
  useWheelScroll(scrollableRef, {
    enabled: wheelEnabled,
    initial,
    prev,
    direction,
    constraints,
    offsetX: contentOffsetRef.current.x,
    offsetY: contentOffsetRef.current.y,
    onScrollStart,
    onScroll,
    onScrollEnd,
  },);
  return /* @__PURE__ */ jsx3(FrameWithMotion, {
    'data-framer-component-type': 'PageWrapper',
    preserve3d: false,
    perspective: hasEffect(props,) ? 1200 : void 0,
    ...containerProps,
    style: {
      pointerEvents: void 0,
      ...containerProps.style,
      overflow,
    },
    layoutId,
    ref: containerRef,
    onLayoutMeasure: handleMeasureLifecycle,
    children: /* @__PURE__ */ jsxs(FrameWithMotion, {
      'data-framer-component-type': 'Page',
      ref: scrollableRef,
      background: null,
      x: contentOffsetRef.current.x,
      y: contentOffsetRef.current.y,
      width: '100%',
      height: '100%',
      preserve3d: true,
      layout: true,
      layoutId: layoutId !== void 0 ? layoutId + '-page' : void 0,
      style: {
        padding: makePaddingString(paddingFromProps(props,),),
        display: 'flex',
        flexDirection: isHorizontal ? 'row' : 'column',
        pointerEvents: (_a = props.style) == null ? void 0 : _a.pointerEvents,
      },
      children: [
        /* @__PURE__ */ jsx3(EmptyState, {
          title: 'Page',
          description: 'Click and drag the connector to any frame on the canvas \u2192',
          size: containerSizeRef.current,
          insideUserCodeComponent: !__fromCodeComponentNode,
          children,
        },),
        childComponents,
      ],
    },),
  },);
},);
function cubeEffect(info,) {
  const {
    normalizedOffset,
    direction,
  } = info;
  const isHorizontal = direction === 'horizontal';
  return {
    originX: normalizedOffset < 0 ? 1 : 0,
    originY: normalizedOffset < 0 ? 1 : 0,
    rotateY: isHorizontal ? Math.min(Math.max(-90, normalizedOffset * 90,), 90,) : 0,
    rotateX: isHorizontal ? 0 : Math.min(Math.max(-90, normalizedOffset * -90,), 90,),
    backfaceVisibility: 'hidden',
    WebkitBackfaceVisibility: 'hidden',
  };
}
function coverflowEffect(info,) {
  const {
    normalizedOffset,
    direction,
  } = info;
  const isHorizontal = direction === 'horizontal';
  return {
    rotateY: isHorizontal ? Math.min(45, Math.max(-45, normalizedOffset * -45,),) : 0,
    rotateX: isHorizontal ? 0 : Math.min(45, Math.max(-45, normalizedOffset * 45,),),
    originX: isHorizontal ? normalizedOffset < 0 ? 0 : 1 : 0.5,
    originY: isHorizontal ? 0.5 : normalizedOffset < 0 ? 0 : 1,
    x: isHorizontal ? `${normalizedOffset * -25}%` : 0,
    y: isHorizontal ? 0 : `${normalizedOffset * -25}%`,
    z: -Math.abs(normalizedOffset,),
    scale: 1 - Math.abs(normalizedOffset / 10,),
  };
}
function calcPileAxisOffset(offset, length,) {
  return offset * length - offset * 8;
}
function pileEffect(info,) {
  const {
    normalizedOffset,
    direction,
    size,
  } = info;
  const isHorizontal = direction === 'horizontal';
  const absoluteOffset = Math.abs(normalizedOffset,);
  return {
    x: normalizedOffset < 0 && isHorizontal ? calcPileAxisOffset(absoluteOffset, size.width,) : 0,
    y: normalizedOffset < 0 && !isHorizontal ? calcPileAxisOffset(absoluteOffset, size.height,) : 0,
    scale: normalizedOffset < 0 ? 1 - absoluteOffset / 50 : 1,
  };
}
function wheelEffect(info,) {
  const {
    normalizedOffset,
    direction,
    size,
  } = info;
  const isHorizontal = direction === 'horizontal';
  const originZ = (isHorizontal ? size.width : size.height) * 18 / (2 * Math.PI);
  const rotateX = isHorizontal ? 0 : normalizedOffset * -20;
  const rotateY = isHorizontal ? normalizedOffset * 20 : 0;
  const y = isHorizontal ? 0 : normalizedOffset * -size.height;
  const x = isHorizontal ? normalizedOffset * -size.width : 0;
  return {
    opacity: 1 - Math.abs(normalizedOffset,) / 4,
    transform: `translate(${x}px, ${y}px) translateZ(-${originZ}px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) translateZ(${originZ}px)`,
  };
}
function getDefaultEffect(type,) {
  switch (type) {
    case 'cube':
      return cubeEffect;
    case 'coverflow':
      return coverflowEffect;
    case 'pile':
      return pileEffect;
    case 'wheel':
      return wheelEffect;
    default:
      return null;
  }
}
function nearestPageIndex(pageRects, startPosition, endPosition, isHorizontalDirection, allowSkippingPages,) {
  const distanceToStart = function (rect,) {
    const rectPosition = isHorizontalDirection ? rect.x : rect.y;
    return Math.abs(rectPosition + startPosition,);
  };
  const distanceToEnd = function (rect,) {
    const rectPosition = isHorizontalDirection ? rect.x : rect.y;
    return Math.abs(rectPosition + endPosition,);
  };
  if (allowSkippingPages) {
    const closestPages = [...pageRects,].sort((a, b,) => distanceToEnd(a,) - distanceToEnd(b,));
    if (!closestPages[0]) return -1;
    return pageRects.indexOf(closestPages[0],);
  } else {
    const closestToStart = [...pageRects,].sort((a, b,) => distanceToStart(a,) - distanceToStart(b,));
    if (closestToStart.length === 1 && closestToStart[0]) return pageRects.indexOf(closestToStart[0],);
    const pageA = closestToStart[0];
    const pageB = closestToStart[1];
    if (!pageA || !pageB) return -1;
    const closestPages = [pageA, pageB,].sort((a, b,) => distanceToEnd(a,) - distanceToEnd(b,));
    if (!closestPages[0]) return -1;
    return pageRects.indexOf(closestPages[0],);
  }
}
function getPageContentRects(containerRef, containerSize, direction, gap,) {
  var _a;
  const containerElement = containerRef.current;
  if (!containerElement) return;
  const contentWrappers = [];
  (_a = containerElement.firstChild) == null ? void 0 : _a.childNodes.forEach((node) => {
    const childNode = node.firstChild;
    if (!(childNode instanceof HTMLElement)) return;
    const componentType = childNode.getAttribute('data-framer-component-type',);
    if (componentType === pageContentWrapperType) {
      contentWrappers.push(childNode,);
    }
  },);
  const sizes = [];
  contentWrappers.forEach((contentWrapper) => {
    if (contentWrapper instanceof HTMLElement && contentWrapper.firstChild instanceof HTMLElement) {
      let width = contentWrapper.firstChild.offsetWidth;
      let height = contentWrapper.firstChild.offsetHeight;
      if (isTest()) {
        width = 100;
        height = 100;
      }
      sizes.push({
        width,
        height,
      },);
    } else {
      sizes.push(null,);
    }
  },);
  let maxX = 0;
  let maxY = 0;
  const isHorizontal = direction === 'horizontal';
  return sizes.map((queriedSize) => {
    const size = queriedSize || containerSize;
    const x = maxX;
    const y = maxY;
    if (isHorizontal) {
      maxX += size.width + gap;
    } else {
      maxY += size.height + gap;
    }
    return {
      ...size,
      x,
      y,
    };
  },);
}
function getMaxOffset(containerSize, pageContentRects, direction, paddingProps,) {
  const lastPageRect = pageContentRects[pageContentRects.length - 1];
  if (!lastPageRect) return 0;
  const paddingSides = paddingFromProps(paddingProps,);
  const isHorizontal = direction === 'horizontal';
  const paddingStart = isHorizontal ? paddingSides.left : paddingSides.top;
  const paddingEnd = isHorizontal ? paddingSides.right : paddingSides.bottom;
  const pageWidth = isHorizontal ? lastPageRect.width : lastPageRect.height;
  const containerWidth = isHorizontal ? containerSize.width : containerSize.height;
  const freeSpace = containerWidth - paddingStart - paddingEnd - pageWidth;
  const target = isHorizontal ? lastPageRect.x : lastPageRect.y;
  if (freeSpace <= 0) return Math.max(target, 0,);
  return Math.max(target - freeSpace, 0,);
}
function offsetForPage(index, pageCount, pageRectsRef, isHorizontal, maxOffsetRef,) {
  const pageIndex = Math.max(0, Math.min(pageCount - 1, index,),);
  const currentPageRect = pageRectsRef.current[pageIndex];
  if (!currentPageRect) {
    return 0;
  }
  if (isHorizontal) {
    return -Math.min(currentPageRect.x, maxOffsetRef.current,);
  } else {
    return -Math.min(currentPageRect.y, maxOffsetRef.current,);
  }
}
function useSnapToPage(currentContentPageRef, contentOffsetRef, isHorizontal,) {
  return (pageIndex, offset, options,) => {
    currentContentPageRef.current = pageIndex;
    const contentOffset = isHorizontal ? contentOffsetRef.current.x : contentOffsetRef.current.y;
    if (!options || !options.animated) {
      contentOffset.set(offset,);
      return;
    }
    const axis = isHorizontal ? 'x' : 'y';
    const value = contentOffsetRef.current[axis];
    value.set(contentOffset.get(),);
    animate(value, offset, {
      type: 'spring',
      velocity: contentOffset.getVelocity(),
      stiffness: 500,
      damping: 50,
    },);
  };
}
function getBoundedCurrentPage(pageIndex, pageCount,) {
  return pageIndex >= 0 ? Math.min(pageIndex, pageCount - 1,) : (pageIndex % pageCount + pageCount) % pageCount;
}
function effectValues(index, latestPropsRef, pageRectsRef, contentOffsetRef, maxOffsetRef,) {
  const {
    direction: latestDirection = 'horizontal',
    defaultEffect: latestDefaultEffect,
    effect: latestEffect,
    gap: latestGap = 10,
  } = latestPropsRef.current;
  const latestIsHorizontal = latestDirection === 'horizontal';
  const pageRect = pageRectsRef.current[index] || {
    x: latestIsHorizontal ? index * 200 + latestGap : 0,
    y: latestIsHorizontal ? 0 : index * 200 + latestGap,
    width: 200,
    height: 200,
  };
  const effectFunction = latestEffect || getDefaultEffect(latestDefaultEffect,);
  if (!effectFunction) return null;
  let offset;
  let normalizedOffset;
  const contentOffset = contentOffsetRef.current;
  const maxScrollOffset = maxOffsetRef.current;
  if (latestIsHorizontal) {
    offset = Math.min(pageRect.x, maxScrollOffset,) + (contentOffset ? contentOffset.x.get() : 0);
    normalizedOffset = offset / (pageRect.width + latestGap);
  } else {
    offset = Math.min(pageRect.y, maxScrollOffset,) + (contentOffset ? contentOffset.y.get() : 0);
    normalizedOffset = offset / (pageRect.height + latestGap);
  }
  const size = {
    width: pageRect.width,
    height: pageRect.height,
  };
  return effectFunction({
    offset,
    normalizedOffset,
    size,
    index,
    direction: latestDirection,
    gap: latestGap,
    pageCount: pageRectsRef.current.length,
  },);
}
function hasEffect(props,) {
  return !!props.effect || !!getDefaultEffect(props.defaultEffect,);
}
function updateCurrentPage(newPageIndex, currentContentPageRef, onChangePage,) {
  if (currentContentPageRef.current === newPageIndex) return;
  if (onChangePage) onChangePage(newPageIndex, currentContentPageRef.current,);
  currentContentPageRef.current = newPageIndex;
}
var Page3 = /* @__PURE__ */ (() => {
  const ContentDimension = {
    Auto: 'auto',
    Stretch: 'stretch',
  };
  const pageContentDimensionOptions = [ContentDimension.Auto, ContentDimension.Stretch,];
  const pageContentDimensionTitles = /* @__PURE__ */ pageContentDimensionOptions.map((option) => {
    switch (option) {
      case ContentDimension.Auto:
        return 'Auto';
      case ContentDimension.Stretch:
        return 'Stretch';
    }
  },);
  const pageEffectOptions = ['none', 'cube', 'coverflow', 'wheel', 'pile',];
  const pageEffectTitles = /* @__PURE__ */ pageEffectOptions.map((option) => {
    switch (option) {
      case 'none':
        return 'None';
      case 'cube':
        return 'Cube';
      case 'coverflow':
        return 'Cover Flow';
      case 'wheel':
        return 'Wheel';
      case 'pile':
        return 'Pile';
    }
  },);
  const pageAlignmentOptions = ['start', 'center', 'end',];
  const genericAlignmentTitles = /* @__PURE__ */ pageAlignmentOptions.map((option) => {
    switch (option) {
      case 'start':
        return 'Start';
      case 'center':
        return 'Center';
      case 'end':
        return 'End';
    }
  },);
  Page.defaultProps = {
    gap: 10,
    directionLock: false,
  };
  addPropertyControls(Page, {
    direction: {
      type: 'enum',
      options: ['horizontal', 'vertical',],
      title: 'Direction',
      defaultValue: 'horizontal',
      displaySegmentedControl: true,
      optionIcons: ['direction-horizontal', 'direction-vertical',],
    },
    directionLock: {
      type: 'boolean',
      title: 'Lock',
      enabledTitle: '1 Axis',
      disabledTitle: 'Off',
      defaultValue: true,
    },
    contentWidth: {
      type: 'enum',
      options: pageContentDimensionOptions,
      optionTitles: pageContentDimensionTitles,
      title: 'Width',
      defaultValue: ContentDimension.Stretch,
      displaySegmentedControl: true,
    },
    contentHeight: {
      type: 'enum',
      options: pageContentDimensionOptions,
      optionTitles: pageContentDimensionTitles,
      title: 'Height',
      defaultValue: ContentDimension.Stretch,
      displaySegmentedControl: true,
    },
    alignment: {
      type: 'enum',
      options: pageAlignmentOptions,
      optionTitles: genericAlignmentTitles,
      title: 'Align',
      hidden(props,) {
        const {
          direction,
          contentWidth,
          contentHeight,
        } = props;
        const isHorizontalDirection = direction === 'horizontal';
        const crossDimension = isHorizontalDirection ? contentHeight : contentWidth;
        return crossDimension === ContentDimension.Stretch;
      },
      defaultValue: 'start',
      displaySegmentedControl: true,
      optionIcons: {
        direction: {
          horizontal: ['align-top', 'align-middle', 'align-bottom',],
          vertical: ['align-left', 'align-center', 'align-right',],
        },
      },
    },
    gap: {
      type: 'number',
      min: 0,
      title: 'Gap',
      defaultValue: 0,
    },
    padding: {
      type: 'fusednumber',
      toggleKey: 'paddingPerSide',
      toggleTitles: ['Padding', 'Padding per side',],
      valueKeys: ['paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft',],
      valueLabels: ['T', 'R', 'B', 'L',],
      min: 0,
      title: 'Padding',
      defaultValue: 0,
    },
    overflow: {
      type: 'enum',
      title: 'Overflow',
      defaultValue: 'hidden',
      options: ['visible', 'hidden',],
      optionTitles: ['Visible', 'Hidden',],
      displaySegmentedControl: true,
    },
    currentPage: {
      type: 'number',
      min: 0,
      title: 'Current',
      displayStepper: true,
      defaultValue: 0,
    },
    momentum: {
      type: 'boolean',
      enabledTitle: 'On',
      disabledTitle: 'Off',
      title: 'Momentum',
      defaultValue: false,
    },
    dragEnabled: {
      type: 'boolean',
      title: 'Drag',
      enabledTitle: 'On',
      disabledTitle: 'Off',
      defaultValue: true,
    },
    wheelEnabled: {
      type: 'boolean',
      title: 'Wheel',
      enabledTitle: 'On',
      disabledTitle: 'Off',
      defaultValue: false,
    },
    defaultEffect: {
      type: 'enum',
      options: pageEffectOptions,
      optionTitles: pageEffectTitles,
      title: 'Effect',
      defaultValue: 'none',
    },
    children: {
      type: 'array',
      title: 'Content',
      control: {
        type: 'componentinstance',
        title: 'Page',
      },
    },
  },);
  Page.supportsConstraints = true;
  return Page;
})();
function stateName(state,) {
  switch (state) {
    case 2:
      return 'Possible';
    case 4:
      return 'Began';
    case 8:
      return 'Changed';
    case 16:
      return 'Ended';
    case 32:
      return 'Failed';
    case 64:
      return 'Cancelled';
    case 128:
      return 'Recognized';
    default:
      return 'Unknown';
  }
}
function containsBitmask(value, bitmask,) {
  return (value & bitmask) !== 0;
}
var GestureRecognizer = class {
  constructor() {
    __publicField(this, '_state', 2,/* Possible */
    );
    __publicField(this, 'handler', null,);
    __publicField(this, 'preventers', [],);
  }
  get state() {
    return this._state;
  }
  setState(state,) {
    this._state = state;
  }
  get isPrevented() {
    let prevented = false;
    for (const recognizer of this.preventers) {
      if (recognizer.state & (4 | 8 | 16)) {
        prevented = true;
        break;
      }
    }
    return prevented;
  }
  canBePreventedBy(recognizer,) {
    this.preventers.push(recognizer,);
  }
  hasState(bitmask,) {
    return containsBitmask(this.state, bitmask,);
  }
  stateSwitch(newState,) {
    let allowedStates;
    switch (this.state) {
      case 2:
        allowedStates = 4 | 128 | 32;
        break;
      case 4:
        allowedStates = 8 | 64 | 16;
        break;
      case 8:
        allowedStates = 8 | 64 | 16;
        break;
      case 128:
      case 16:
      case 64:
      case 32:
        allowedStates = 2;
        break;
      default:
        allowedStates = 0;
    }
    if (!containsBitmask(newState, allowedStates,)) {
      console.warn(`Unallowed state change from ${stateName(this.state,)} to ${stateName(newState,)}`,);
      return;
    }
    this.setState(newState,);
  }
  cancel() {
    if (
      this.hasState(4 | 8,/* Changed */
      )
    ) {
      this.setState(64,/* Cancelled */
      );
    }
    this.reset();
  }
  reset() {
    if (
      !this.hasState(2,/* Possible */
      )
    ) {
      this.stateSwitch(2,/* Possible */
      );
    }
  }
};
var MouseWheelGestureRecognizer = class extends GestureRecognizer {
  constructor() {
    super(...arguments,);
    __publicField(this, 'startEvent', null,);
    __publicField(this, 'eventType', 'mousewheel',);
    __publicField(
      this,
      'onMouseWheelEnd',
      debounce((event) => {
        if (this.handler && this.startEvent) {
          this.stateSwitch(16,/* Ended */
          );
          this.handler.gestureEnded(this.eventType, event, this.startEvent.target,);
          this.startEvent = null;
          this.reset();
        }
      }, 300,),
    );
  }
  pointerSessionBegan(session, event,) {}
  pointerSessionMoved(session, event,) {}
  pointerSessionEnded(session, event,) {}
  mouseWheel(session, event,) {
    if (!this.handler) return;
    if (
      this.hasState(2,/* Possible */
      )
    ) {
      this.startEvent = event;
      this.stateSwitch(4,/* Began */
      );
      this.handler.gestureBegan(this.eventType, event, this.startEvent.target,);
      return;
    }
    if (
      this.hasState(4 | 8,/* Changed */
      ) && this.startEvent
    ) {
      this.stateSwitch(8,/* Changed */
      );
      this.handler.gestureChanged(this.eventType, event, this.startEvent.target,);
    }
    this.onMouseWheelEnd(event,);
  }
};
var PanGestureRecognizer = class extends GestureRecognizer {
  constructor() {
    super(...arguments,);
    __publicField(this, 'startEvent', null,);
    __publicField(this, 'eventType', 'pan',);
  }
  pointerSessionBegan(session, event,) {
    this.recognize(session, event,);
  }
  pointerSessionMoved(session, event,) {
    this.recognize(session, event,);
  }
  pointerSessionEnded(session, event,) {
    this.panend(event,);
  }
  recognize(session, event,) {
    if (Math.abs(event.delta.x,) > 0 || Math.abs(event.delta.y,) > 0) {
      if (this.startEvent) {
        this.pan(event,);
      } else {
        this.panstart(event,);
      }
    }
  }
  reset() {
    this.startEvent = null;
    super.reset();
  }
  panstart(event,) {
    if (
      !this.hasState(2,/* Possible */
      ) || event.isLeftMouseClick !== void 0 && !event.isLeftMouseClick
    ) {
      return;
    }
    this.stateSwitch(4,/* Began */
    );
    this.startEvent = event;
    if (this.handler && this.startEvent.target) {
      this.handler.gestureBegan(this.eventType, event, this.startEvent.target,);
    }
  }
  pan(event,) {
    if (
      !this.hasState(4 | 8,/* Changed */
      )
    ) {
      return;
    }
    if (!this.startEvent) {
      return;
    }
    this.stateSwitch(8,/* Changed */
    );
    if (this.handler && this.startEvent.target) {
      this.handler.gestureChanged(this.eventType, event, this.startEvent.target,);
    }
  }
  panend(event,) {
    if (
      !this.hasState(4 | 8,/* Changed */
      )
    ) {
      return;
    }
    if (!this.startEvent) {
      return;
    }
    this.stateSwitch(16,/* Ended */
    );
    if (this.handler && this.startEvent.target) {
      this.handler.gestureEnded(this.eventType, event, this.startEvent.target,);
    }
  }
};
var TapGestureRecognizer = class extends GestureRecognizer {
  constructor() {
    super(...arguments,);
    __publicField(this, 'eventType', 'tap',);
  }
  pointerSessionBegan(session, event,) {
    if (this.handler && (event.isLeftMouseClick === void 0 || event.isLeftMouseClick)) {
      this.handler.gestureBegan(this.eventType, event, null,);
    }
  }
  pointerSessionMoved(session, event,) {}
  pointerSessionEnded(session, event,) {
    if (this.isPrevented) {
      this.stateSwitch(32,/* Failed */
      );
    } else if (!session.startEvent || session.startEvent.target === event.target) {
      this.stateSwitch(128,/* Recognized */
      );
      if (this.handler) {
        this.handler.gestureChanged(this.eventType, event, null,);
      }
    } else {
      this.stateSwitch(32,/* Failed */
      );
    }
    if (this.handler) {
      this.handler.gestureEnded(this.eventType, event, null,);
    }
  }
};
var FramerEventSession = class {
  constructor(dispatcher, customOrigin,) {
    __publicField(this, 'events', [],);
    __publicField(this, 'recognizers', [],);
    __publicField(this, 'mouseWheelRecognizer', new MouseWheelGestureRecognizer(),);
    __publicField(this, 'dispatcher',);
    __publicField(this, 'originElement',);
    this.dispatcher = dispatcher;
    if (customOrigin) {
      this.originElement = customOrigin;
    } else {
      this.originElement = document.body;
    }
    const pan = new PanGestureRecognizer();
    const tap = new TapGestureRecognizer();
    pan.handler = this;
    tap.handler = this;
    this.mouseWheelRecognizer.handler = this;
    this.recognizers = [tap, pan,];
  }
  get isStarted() {
    return this.events.length !== 0;
  }
  get startEvent() {
    return this.isStarted ? this.events[0] : void 0;
  }
  get lastEvent() {
    return this.events[this.events.length - 1];
  }
  // Event handling
  processEvent(event,) {
    this.events.push(event,);
    return event;
  }
  pointerDown(event,) {
    if (this.isStarted) {
      return;
    }
    this.processEvent(event,);
    this.recognizers.map((r) => {
      r.cancel();
      r.pointerSessionBegan(this, event,);
    },);
  }
  pointerMove(event,) {
    if (!this.isStarted) {
      return;
    }
    this.processEvent(event,);
    this.recognizers.map((r) => {
      r.pointerSessionMoved(this, event,);
    },);
  }
  pointerUp(event,) {
    if (!this.isStarted) {
      return;
    }
    this.processEvent(event,);
    this.recognizers.map((r) => {
      r.pointerSessionEnded(this, event,);
    },);
    this.clearEvents();
    this.recognizers.map((r) => {
      r.reset();
    },);
  }
  mouseWheel(event,) {
    this.processEvent(event,);
    this.mouseWheelRecognizer.mouseWheel(this, event,);
    this.clearEvents();
  }
  clearEvents() {
    this.events = [];
  }
  dispatch(type, event, target = null,) {
    const dispatchTarget = target || this.startEvent && this.startEvent.target || event.target;
    if (dispatchTarget) {
      this.dispatcher(type, event, dispatchTarget,);
    }
  }
  // Gesture Handler
  gestureBegan(type, event, target,) {
    this.dispatch(`${type}start`, event, target,);
  }
  gestureChanged(type, event, target,) {
    this.dispatch(type, event, target,);
  }
  gestureEnded(type, event, target,) {
    this.dispatch(`${type}end`, event, target,);
  }
  // Calculatinos
  /**
   * Average velocity over last n seconds in pixels per second.
   * @param n - number of events to use for calculation
   */
  velocity(t = Loop.TimeStep * 2,) {
    if (!this.isStarted || this.events.length < 2) {
      return {
        x: 0,
        y: 0,
      };
    }
    const events = this.events;
    let i = events.length - 1;
    let event = null;
    while (i >= 0) {
      event = events[i] ?? null;
      if (!event || MainLoop.time - event.loopTime > t) {
        break;
      }
      i--;
    }
    if (!event) {
      return {
        x: 0,
        y: 0,
      };
    }
    const current2 = events[events.length - 1];
    if (!current2) {
      return {
        x: 0,
        y: 0,
      };
    }
    const time2 = (MainLoop.time - event.loopTime) * 1e3;
    if (time2 === 0) {
      return {
        x: 0,
        y: 0,
      };
    }
    const velocity = {
      x: (current2.devicePoint.x - event.devicePoint.x) / time2,
      y: (current2.devicePoint.y - event.devicePoint.y) / time2,
    };
    if (velocity.x === Infinity) {
      velocity.x = 0;
    }
    if (velocity.y === Infinity) {
      velocity.y = 0;
    }
    return velocity;
  }
  offset(event,) {
    if (!this.startEvent) {
      return {
        x: 0,
        y: 0,
      };
    }
    const subtract = (pointA, pointB,) => {
      return {
        x: pointA.x - pointB.x,
        y: pointA.y - pointB.y,
      };
    };
    return subtract(event.devicePoint, this.startEvent.devicePoint,);
  }
};
var MouseEventListener = class extends Component2 {
  constructor() {
    super(...arguments,);
    __publicField(this, 'domMouseDown', (originalEvent) => {
      safeWindow.addEventListener('mousemove', this.domMouseMove,);
      safeWindow.addEventListener('mouseup', this.domMouseUp,);
      const event = new FramerEvent(originalEvent, this.props.session,);
      this.props.session.pointerDown(event,);
    },);
    __publicField(this, 'domMouseMove', (originalEvent) => {
      const leftMouseButtonOnlyDown = originalEvent.buttons === void 0 ? originalEvent.which === 1 : originalEvent.buttons === 1;
      if (!leftMouseButtonOnlyDown) {
        this.domMouseUp(originalEvent,);
        return;
      }
      const event = new FramerEvent(originalEvent, this.props.session,);
      this.props.session.pointerMove(event,);
    },);
    __publicField(this, 'domMouseUp', (originalEvent) => {
      safeWindow.removeEventListener('mousemove', this.domMouseMove,);
      safeWindow.removeEventListener('mouseup', this.domMouseUp,);
      const event = new FramerEvent(originalEvent, this.props.session,);
      this.props.session.pointerUp(event,);
    },);
    __publicField(this, 'domMouseWheel', (originalEvent) => {
      const event = new FramerEvent(originalEvent, this.props.session,);
      this.props.session.mouseWheel(event,);
    },);
  }
  /**
   * @internal
   */
  render() {
    return this.props.children;
  }
  /**
   * @internal
   */
  componentDidMount() {
    safeWindow.addEventListener('mousedown', this.domMouseDown,);
    safeWindow.addEventListener('wheel', this.domMouseWheel,);
  }
  /**
   * @internal
   */
  componentWillUnmount() {
    safeWindow.removeEventListener('mousemove', this.domMouseMove,);
    safeWindow.removeEventListener('mousedown', this.domMouseDown,);
    safeWindow.removeEventListener('mouseup', this.domMouseUp,);
    safeWindow.removeEventListener('wheel', this.domMouseWheel,);
  }
};
var TouchEventListener = class extends Component2 {
  constructor() {
    super(...arguments,);
    __publicField(this, 'domTouchStart', (originalEvent) => {
      safeWindow.addEventListener('touchmove', this.domTouchMove,);
      safeWindow.addEventListener('touchend', this.domTouchEnd,);
      const event = new FramerEvent(originalEvent, this.props.session,);
      this.props.session.pointerDown(event,);
    },);
    __publicField(this, 'domTouchMove', (originalEvent) => {
      const event = new FramerEvent(originalEvent, this.props.session,);
      this.props.session.pointerMove(event,);
    },);
    __publicField(this, 'domTouchEnd', (originalEvent) => {
      safeWindow.removeEventListener('touchmove', this.domTouchMove,);
      safeWindow.removeEventListener('touchend', this.domTouchEnd,);
      const event = new FramerEvent(originalEvent, this.props.session,);
      this.props.session.pointerUp(event,);
    },);
  }
  /**
   * @internal
   */
  render() {
    return this.props.children;
  }
  /**
   * @internal
   */
  componentDidMount() {
    safeWindow.addEventListener('touchstart', this.domTouchStart,);
  }
  /**
   * @internal
   */
  componentWillUnmount() {
    safeWindow.removeEventListener('touchstart', this.domTouchStart,);
    safeWindow.removeEventListener('touchmove', this.domTouchMove,);
    safeWindow.removeEventListener('touchend', this.domTouchEnd,);
  }
};
var FramerEventListener = /* @__PURE__ */ environment.isTouch() ? TouchEventListener : MouseEventListener;
var directionMap = {
  horizontal: 'x',
  vertical: 'y',
  both: true,
};
function convertScrollDirectionToDrag(scrollDirection,) {
  return scrollDirection ? directionMap[scrollDirection] : scrollDirection;
}
var useUpdateChildSize = ({
  dragDirection,
  children,
  fromCanvasComponent,
},) => {
  return useMemo2(() => {
    return React4.Children.map(children, (child) => {
      if (child === null || typeof child !== 'object' || typeof child.type === 'string') {
        return child;
      }
      const updatedSize = {};
      switch (dragDirection) {
        case 'vertical':
          updatedSize.width = '100%';
          break;
        case 'horizontal':
          updatedSize.height = '100%';
          break;
        default:
          return child;
      }
      const update = fromCanvasComponent
        ? {
          style: Object.assign({}, child.props.style, updatedSize,),
        }
        : updatedSize;
      return React4.cloneElement(child, update,);
    },);
  }, [dragDirection, children, fromCanvasComponent,],);
};
var numberFromOptionalMotionValue = (value) => {
  return typeof value === 'number' ? value : value.get();
};
var EmulatedScroll = /* @__PURE__ */ React4.forwardRef(function EmulatedScroll2(props, forwardedRef,) {
  const {
    direction = 'vertical',
    directionLock = false,
    dragEnabled = true,
    dragElastic,
    dragMomentum,
    dragTransition,
    wheelEnabled = true,
    contentOffsetX = 0,
    contentOffsetY = 0,
    contentWidth,
    contentHeight,
    onScrollStart,
    onScroll,
    onScrollEnd,
    onDragStart,
    onDrag,
    onDragEnd,
    onUpdate,
    onDirectionLock,
    style: style2,
    children,
    scrollAnimate,
    resetOffset,
    overdragEnabled = true,
    layoutId: specificLayoutId,
    native: _native,
    ...containerProps
  } = props;
  const layoutId = useLayoutId2(props, {
    specificLayoutId,
    postfix: 'scroll',
  },);
  const defaultX = useMotionValue(typeof contentOffsetX === 'number' ? contentOffsetX : 0,);
  const defaultY = useMotionValue(typeof contentOffsetY === 'number' ? contentOffsetY : 0,);
  const x = isMotionValue2(contentOffsetX,) ? contentOffsetX : defaultX;
  const y = isMotionValue2(contentOffsetY,) ? contentOffsetY : defaultY;
  const measuredConstraints = useRef3(null,);
  const dragControls = useDragControls();
  const isInTarget = useIsInCurrentNavigationTarget();
  const wasInTargetRef = useRef3(true,);
  useInsertionEffect(() => {
    injectComponentCSSRules();
  }, [],);
  function setMeasureDragConstraints(constraints,) {
    constraints = offsetToZero(constraints,);
    if (contentWidth !== void 0) constraints.left = -contentWidth;
    if (contentHeight !== void 0) constraints.top = -contentHeight;
    return measuredConstraints.current = constraints;
  }
  const {
    initial,
    prev,
  } = useRef3({
    initial: {
      x: 0,
      y: 0,
    },
    prev: {
      x: 0,
      y: 0,
    },
  },).current;
  const isPreview = RenderTarget.current() === RenderTarget.preview;
  const containerFallbackRef = useRef3(null,);
  const containerRef = forwardedRef || containerFallbackRef;
  const contentRef = useRef3(null,);
  const lastOffsetRef = useRef3(null,);
  function shouldResetScroll(inTarget,) {
    const hasEnteredTarget = inTarget && wasInTargetRef.current === false;
    return resetOffset && hasEnteredTarget;
  }
  function measureAndUpdateScrollOffset() {
    if (!contentRef.current || !containerRef.current) return;
    const mustReset = shouldResetScroll(isInTarget,);
    wasInTargetRef.current = isInTarget;
    const previous = lastOffsetRef.current;
    if (previous === null && contentOffsetX === void 0 && contentOffsetY === void 0) return;
    const shouldUpdateOffset = previous === null || !isMotionValue2(contentOffsetX,) && contentOffsetX !== previous.offsetX ||
      !isMotionValue2(contentOffsetY,) && contentOffsetY !== previous.offsetY;
    const currentMaxXOffset = contentRef.current.offsetWidth - containerRef.current.offsetWidth;
    const currentMaxYOffset = contentRef.current.offsetHeight - containerRef.current.offsetHeight;
    const hasSizeChanged = currentMaxXOffset !== (previous == null ? void 0 : previous.maxXOffset) ||
      currentMaxYOffset !== (previous == null ? void 0 : previous.maxYOffset);
    const hasScrollOffsetChanged = (previous == null ? void 0 : previous.x) !== x.get() ||
      (previous == null ? void 0 : previous.y) !== y.get();
    const shouldStayPinned = hasSizeChanged && !hasScrollOffsetChanged;
    if (mustReset || shouldUpdateOffset || shouldStayPinned) {
      const currentOffsetX = direction !== 'vertical' ? numberFromOptionalMotionValue(contentOffsetX,) : 0;
      const currentOffsetY = direction !== 'horizontal' ? numberFromOptionalMotionValue(contentOffsetY,) : 0;
      const nextXOffset = -Math.min(currentOffsetX, currentMaxXOffset,);
      const nextYOffset = -Math.min(currentOffsetY, currentMaxYOffset,);
      x.set(nextXOffset,);
      y.set(nextYOffset,);
      lastOffsetRef.current = {
        maxXOffset: currentMaxXOffset,
        maxYOffset: currentMaxYOffset,
        offsetX: currentOffsetX,
        offsetY: currentOffsetY,
        x: nextXOffset,
        y: nextYOffset,
      };
    }
  }
  useIsomorphicLayoutEffect2(() => {
    if (RenderTarget.current() !== RenderTarget.canvas) return;
    measureAndUpdateScrollOffset();
  },);
  useIsomorphicLayoutEffect2(() => {
    if (RenderTarget.current() === RenderTarget.canvas) return;
    measureAndUpdateScrollOffset();
  }, [],);
  React4.useEffect(() => {
    if (shouldResetScroll(isInTarget,)) measureAndUpdateScrollOffset();
    if (isInTarget === false) wasInTargetRef.current = false;
  }, [isInTarget,],);
  const getLatestPoint = () => ({
    x: x.get(),
    y: y.get(),
  });
  const resetInitialPoint = useCallback(() => {
    const point2 = getLatestPoint();
    initial.x = point2.x;
    initial.y = point2.y;
    prev.x = point2.x;
    prev.y = point2.y;
  }, [],);
  const getPointData = useCallback(() => {
    const point2 = getLatestPoint();
    const data2 = {
      point: point2,
      velocity: {
        x: x.getVelocity(),
        y: y.getVelocity(),
      },
      offset: {
        x: point2.x - initial.x,
        y: point2.y - initial.y,
      },
      delta: {
        x: point2.x - prev.x,
        y: point2.y - prev.y,
      },
    };
    prev.x = point2.x;
    prev.y = point2.y;
    return data2;
  }, [x, y,],);
  const updateScrollListeners = useCallback(() => {
    onUpdate && onUpdate({
      x: x.get(),
      y: y.get(),
    },);
    onScroll && onScroll(getPointData(),);
  }, [onScroll, onUpdate, getPointData, x, y,],);
  const scheduleUpdateScrollListeners = useCallback(() => {
    frame.update(updateScrollListeners, false, true,);
  }, [updateScrollListeners,],);
  const onMotionDragStart = (event, info,) => {
    resetInitialPoint();
    onDragStart && onDragStart(event, info,);
    onScrollStart && onScrollStart(info,);
  };
  const onMotionDragTransitionEnd = () => onScrollEnd && onScrollEnd(getPointData(),);
  const onWheelScrollStart = (info) => {
    onScrollStart == null ? void 0 : onScrollStart(info,);
  };
  useWheelScroll(containerRef, {
    enabled: wheelEnabled,
    initial,
    prev,
    direction,
    offsetX: x,
    offsetY: y,
    onScrollStart: onWheelScrollStart,
    onScroll,
    onScrollEnd,
    constraints: measuredConstraints,
  },);
  const overdragX = useMotionValue(0,);
  const overdragY = useMotionValue(0,);
  useIsomorphicLayoutEffect2(() => {
    const setScrollX = (xValue) => {
      const element = containerRef.current;
      if (!(element instanceof HTMLDivElement)) return;
      element.scrollLeft = -xValue;
      const constraints = measuredConstraints.current;
      if (constraints && overdragEnabled) {
        let overdragXValue = 0;
        if (xValue > constraints.right) overdragXValue = xValue;
        if (xValue < constraints.left) overdragXValue = xValue - constraints.left;
        overdragX.set(overdragXValue,);
      }
      scheduleUpdateScrollListeners();
    };
    const currentX = x.get();
    if (currentX !== 0) setScrollX(currentX,);
    return x.on('change', setScrollX,);
  }, [x, overdragX, scheduleUpdateScrollListeners, overdragEnabled,],);
  useIsomorphicLayoutEffect2(() => {
    const setScrollY = (yValue) => {
      const element = containerRef.current;
      if (!(element instanceof HTMLDivElement)) return;
      element.scrollTop = -yValue;
      const constraints = measuredConstraints.current;
      if (constraints && overdragEnabled) {
        let overdragYValue = 0;
        if (yValue > constraints.bottom) overdragYValue = yValue;
        if (yValue < constraints.top) overdragYValue = yValue - constraints.top;
        overdragY.set(overdragYValue,);
      }
      scheduleUpdateScrollListeners();
    };
    const currentY = y.get();
    if (currentY !== 0) setScrollY(currentY,);
    return y.on('change', setScrollY,);
  }, [y, overdragY, scheduleUpdateScrollListeners, overdragEnabled,],);
  const nativeOnScroll = React4.useCallback(() => {
    const element = containerRef.current;
    if (!(element instanceof HTMLDivElement)) return;
    const xDelta = Math.abs(x.get() + element.scrollLeft,);
    const yDelta = Math.abs(y.get() + element.scrollTop,);
    if (xDelta > 1) x.set(-element.scrollLeft,);
    if (yDelta > 1) y.set(-element.scrollTop,);
  }, [x, y,],);
  const isEmpty2 = React4.Children.count(children,) === 0;
  const width = direction !== 'vertical' && !isEmpty2 ? 'auto' : '100%';
  const height = direction !== 'horizontal' && !isEmpty2 ? 'auto' : '100%';
  const size = !containerProps.__fromCanvasComponent
    ? {
      width: containerProps.__fromCodeComponentNode ? '100%' : containerProps.width,
      height: containerProps.__fromCodeComponentNode ? '100%' : containerProps.height,
    }
    : {};
  return /* @__PURE__ */ jsx3(FrameWithMotion, {
    'data-framer-component-type': 'Scroll',
    background: 'none',
    ...containerProps,
    ...size,
    style: {
      ...style2,
      willChange: isPreview ? 'transform' : void 0,
      // allows the scroll content to be hardware accelerated
      overflow: 'hidden',
    },
    onScroll: nativeOnScroll,
    preserve3d: containerProps.preserve3d,
    ref: containerRef,
    layoutId,
    layoutScroll: true,
    onBeforeLayoutMeasure: measureAndUpdateScrollOffset,
    children: /* @__PURE__ */ jsxs(FrameWithMotion, {
      'data-framer-component-type': 'ScrollContentWrapper',
      animate: scrollAnimate,
      drag: dragEnabled && convertScrollDirectionToDrag(direction,),
      dragDirectionLock: directionLock,
      dragElastic,
      dragMomentum,
      dragTransition,
      dragConstraints: containerRef,
      dragControls,
      onDragStart: onMotionDragStart,
      onDrag,
      onDragEnd,
      onDragTransitionEnd: onMotionDragTransitionEnd,
      onDirectionLock,
      onMeasureDragConstraints: setMeasureDragConstraints,
      width,
      height,
      _dragX: x,
      _dragY: y,
      position: 'relative',
      x: overdragEnabled ? overdragX : void 0,
      y: overdragEnabled ? overdragY : void 0,
      ref: contentRef,
      style: {
        display: isEmpty2 ? 'block' : 'inline-block',
        willChange: isPreview ? 'transform' : void 0,
        // makes the scroll content hardware accelerated
        backgroundColor: 'transparent',
        overflow: 'visible',
        minWidth: '100%',
        minHeight: '100%',
      },
      preserve3d: containerProps.preserve3d,
      children: [
        /* @__PURE__ */ jsx3(EmptyState, {
          size: {
            width: isFiniteNumber(containerProps.width,) ? containerProps.width : '100%',
            height: isFiniteNumber(containerProps.height,) ? containerProps.height : '100%',
          },
          insideUserCodeComponent: !containerProps.__fromCodeComponentNode,
          title: 'Scroll',
          description: 'Click and drag the connector to any frame on the canvas \u2192',
          children,
        },),
        useUpdateChildSize({
          dragDirection: direction,
          children,
          fromCanvasComponent: containerProps.__fromCanvasComponent,
        },),
      ],
    },),
  },);
},);
function offsetToZero({
  top,
  left,
  right,
  bottom,
},) {
  const width = right - left;
  const height = bottom - top;
  return {
    top: -height,
    left: -width,
    right: 0,
    bottom: 0,
  };
}
function cx(...classNames) {
  return classNames.filter(Boolean,).join(' ',);
}
function isRunningAnimation(...phases) {
  let runningAny = false;
  let cancelledAny = false;
  phases.forEach((phase) => {
    runningAny = runningAny || phase === 1;
    cancelledAny = cancelledAny || phase === 3;
  },);
  return runningAny && !cancelledAny;
}
function didFinishAnimations(...phases) {
  return phases.every((phase) => phase === 0 || phase === 2/* Completed */
  );
}
var timeConstant = 400;
function animatePointWithInertia({
  from,
  velocity,
  onUpdate,
  onComplete,
  onStop,
},) {
  const latest = from;
  let animationPhaseX = 0;
  let animationPhaseY = 0;
  const animations2 = [];
  const updateHandler = () => {
    if (isRunningAnimation(animationPhaseX, animationPhaseY,)) {
      onUpdate(latest,);
    }
  };
  const completionHandler = () => {
    if (didFinishAnimations(animationPhaseX, animationPhaseY,)) {
      onComplete();
    }
  };
  if (velocity.x) {
    animationPhaseX = 1;
    animations2.push(animateValue({
      keyframes: [from.x,],
      velocity: -velocity.x,
      timeConstant,
      onUpdate: (value) => {
        latest.x = value;
        frame.update(updateHandler, false, true,);
      },
      onComplete: () => {
        if (animationPhaseX !== 1) {
          throw Error('animation x should be running when completing',);
        }
        animationPhaseX = 2;
        completionHandler();
      },
    },),);
  }
  if (velocity.y) {
    animationPhaseY = 1;
    animations2.push(animateValue({
      keyframes: [from.y,],
      velocity: -velocity.y,
      timeConstant,
      onUpdate: (value) => {
        latest.y = value;
        frame.update(updateHandler, false, true,);
      },
      onComplete: () => {
        if (animationPhaseY !== 1) {
          throw Error('animation y should be running when completing',);
        }
        animationPhaseY = 2;
        completionHandler();
      },
    },),);
  }
  if (!isRunningAnimation(animationPhaseX, animationPhaseY,)) {
    completionHandler();
  }
  return {
    stop: () => {
      if (!isRunningAnimation(animationPhaseX, animationPhaseY,)) return;
      animations2.forEach((animation) => animation.stop());
      animationPhaseX = animationPhaseX === 1 ? 3 : animationPhaseX;
      animationPhaseY = animationPhaseY === 1 ? 3 : animationPhaseY;
      onStop();
    },
  };
}
var scrollThreshold = 3;
var isTouchDevice = /* @__PURE__ */ isTouch();
var isSafariBrowser = /* @__PURE__ */ isSafari();
function getTouchAction(element,) {
  if (!(element instanceof HTMLElement)) return null;
  return element.style.touchAction;
}
function canPanInDirection(element, direction,) {
  switch (direction) {
    case 'horizontal':
      return getTouchAction(element,) === 'pan-x';
    case 'vertical':
      return getTouchAction(element,) === 'pan-y';
    default:
      return false;
  }
}
function isInteractiveElement(element,) {
  const tag = element.tagName.toLowerCase();
  if (tag === 'input') return true;
  if (tag === 'text') return true;
  if (tag === 'textarea') return true;
  return false;
}
function canStartScrollFromElement(element, direction,) {
  if (!(element instanceof Element)) return false;
  if (isInteractiveElement(element,)) return false;
  if (element.hasAttribute('draggable',)) {
    if (!canPanInDirection(element, direction,)) {
      return false;
    }
  }
  return true;
}
function getEventPoint(event,) {
  return {
    x: event.pageX,
    y: event.pageY,
  };
}
function setPointerEvents(element, value,) {
  if (element == null ? void 0 : element.style) {
    element.style['pointerEvents'] = value;
  }
}
function getPointerEvents(element,) {
  var _a;
  return (_a = element == null ? void 0 : element.style) == null ? void 0 : _a['pointerEvents'];
}
var emptyObject = /* @__PURE__ */ Object.freeze({},);
function useEmulateTouchScroll(ref, direction, enabled,) {
  if (isTouchDevice) return emptyObject;
  if (RenderTarget.current() !== RenderTarget.preview) return emptyObject;
  const scrollAnimationControlsRef = React4.useRef(null,);
  useEffect(() => {
    if (!ref.current) return;
    const element = ref.current;
    let phase = 0;
    let targets = null;
    let downPoint = null;
    let scrollOffsetStart = null;
    let mouseMoveEvents = [];
    function onMouseMove(event,) {
      var _a;
      switch (phase) {
        case 0:
        case 4:
        case 3:
          return;
      }
      if (event.metaKey) return;
      const point2 = getEventPoint(event,);
      if (!downPoint) return;
      const offset = Point.subtract(point2, downPoint,);
      if (phase === 1 || phase === 5) {
        const deltaX = Math.abs(offset.x,);
        const deltaY = Math.abs(offset.y,);
        if ((deltaX > scrollThreshold || deltaY > scrollThreshold) && deltaX !== deltaY) {
          const scrollDirection = deltaX > deltaY ? 'horizontal' : 'vertical';
          const shouldIgnoreBecauseOfDirectionLock = direction === 'horizontal' && scrollDirection === 'vertical' ||
            direction === 'vertical' && scrollDirection === 'horizontal';
          if (shouldIgnoreBecauseOfDirectionLock) {
            phase = 3;
            return;
          }
          phase = 2;
          targets == null ? void 0 : targets.forEach(([target,],) => setPointerEvents(target, 'none',));
        }
      }
      if (isSafariBrowser) event.preventDefault();
      if (phase !== 2) return;
      (_a = safeWindow.getSelection()) == null ? void 0 : _a.empty();
      mouseMoveEvents = getRecentEvents([...mouseMoveEvents, event,],);
      if (scrollOffsetStart) {
        if (direction !== 'vertical') element.scrollLeft = scrollOffsetStart.x - offset.x;
        if (direction !== 'horizontal') element.scrollTop = scrollOffsetStart.y - offset.y;
      }
    }
    function onMouseUp(event,) {
      safeWindow.removeEventListener('mousemove', onMouseMove, false,);
      safeWindow.removeEventListener('mouseup', onMouseUp,);
      if (phase === 2 && targets) {
        targets.forEach(([target, originalPointerEventsValue,],) => setPointerEvents(target, originalPointerEventsValue || 'auto',));
      }
      targets = null;
      const velocity = calculateVelocity({
        mouseMoveEvents,
        mouseUpEvent: event,
      },);
      downPoint = null;
      if (phase === 2) {
        const shouldAnimateY = direction !== 'horizontal' && velocity.y !== 0;
        const shouldAnimateX = direction !== 'vertical' && velocity.x !== 0;
        if (!shouldAnimateY && !shouldAnimateX) {
          phase = 0;
          return;
        }
        phase = 4;
        scrollAnimationControlsRef.current = animatePointWithInertia({
          from: {
            x: element.scrollLeft,
            y: element.scrollTop,
          },
          velocity: {
            x: shouldAnimateX ? velocity.x : 0,
            y: shouldAnimateY ? velocity.y : 0,
          },
          onUpdate: (position) => {
            if (shouldAnimateX) element.scrollLeft = position.x;
            if (shouldAnimateY) element.scrollTop = position.y;
          },
          onStop: () => {
            if (phase !== 5) {
              phase = 0;
            }
            scrollAnimationControlsRef.current = null;
          },
          onComplete: () => {
            if (phase !== 4) {
              throw Error('On animation completion we should still be in the animation phase',);
            }
            phase = 0;
            scrollAnimationControlsRef.current = null;
          },
        },);
      } else {
        phase = 0;
      }
    }
    function onMouseWheel() {
      var _a;
      (_a = scrollAnimationControlsRef.current) == null ? void 0 : _a.stop();
    }
    function onMouseDown(event,) {
      var _a;
      if (!enabled) return;
      if (event.metaKey) return;
      if (!canStartScrollFromElement(event.target, direction,)) {
        if (phase === 4) {
          phase = 0;
          (_a = scrollAnimationControlsRef.current) == null ? void 0 : _a.stop();
        }
        return;
      }
      const previousPhase = phase;
      phase = previousPhase === 4 ? 5 : 1;
      downPoint = getEventPoint(event,);
      targets = document.elementsFromPoint(downPoint.x, downPoint.y,).filter((targetEl) =>
        targetEl instanceof HTMLElement || targetEl instanceof SVGElement
      ).map((targetEl) => [targetEl, getPointerEvents(targetEl,),]);
      scrollOffsetStart = {
        x: element.scrollLeft,
        y: element.scrollTop,
      };
      mouseMoveEvents = [];
      if (scrollAnimationControlsRef.current) {
        if (previousPhase !== 4) {
          throw Error('When stopping a drag animation we need to be animating',);
        }
        scrollAnimationControlsRef.current.stop();
      }
      safeWindow.addEventListener('mousemove', onMouseMove,);
      safeWindow.addEventListener('mouseup', onMouseUp,);
      element.addEventListener('mousewheel', onMouseWheel,);
    }
    element.addEventListener('mousedown', onMouseDown,);
    return () => {
      var _a;
      element.removeEventListener('mousedown', onMouseDown,);
      element.removeEventListener('mousewheel', onMouseWheel,);
      safeWindow.removeEventListener('mousemove', onMouseMove,);
      safeWindow.removeEventListener('mouseup', onMouseUp,);
      phase = 5;
      (_a = scrollAnimationControlsRef.current) == null ? void 0 : _a.stop();
    };
  }, [ref, direction, enabled,],);
  return React4.useMemo(() => {
    return {
      cancelEmulatedTouchScrollAnimation: () => {
        var _a;
        (_a = scrollAnimationControlsRef.current) == null ? void 0 : _a.stop();
      },
    };
  }, [],);
}
var timeDelta = /* @__PURE__ */ (() => 4 / 60 * 1e3)();
function getRecentEvents(events,) {
  const currentTime = new CustomEvent('getTime',).timeStamp;
  const maxAge = currentTime - timeDelta;
  return events.filter((event) => event.timeStamp > maxAge);
}
var zeroPoint = {
  x: 0,
  y: 0,
};
function calculateVelocity({
  mouseMoveEvents,
  mouseUpEvent,
},) {
  const recentMouseMoveEvents = getRecentEvents(mouseMoveEvents,);
  const oldestMouseMoveEvent = recentMouseMoveEvents[0];
  if (!oldestMouseMoveEvent) return zeroPoint;
  const deltaX = mouseUpEvent.clientX - oldestMouseMoveEvent.clientX;
  const deltaY = mouseUpEvent.clientY - oldestMouseMoveEvent.clientY;
  const time2 = mouseUpEvent.timeStamp - oldestMouseMoveEvent.timeStamp;
  if (time2 === 0) return zeroPoint;
  return {
    x: deltaX / time2 * 1e3,
    y: deltaY / time2 * 1e3,
  };
}
function useUpdateScrollOffset(ref, side, offset, cancelEmulatedTouchScrollAnimation,) {
  useIsomorphicLayoutEffect2(() => {
    if (isMotionValue2(offset,)) {
      const updateScrollLeft = () => {
        cancelEmulatedTouchScrollAnimation == null ? void 0 : cancelEmulatedTouchScrollAnimation();
        const element = ref.current;
        if (element) element[side] = Math.abs(offset.get(),);
      };
      updateScrollLeft();
      return offset.on('change', updateScrollLeft,);
    } else if (isFiniteNumber(offset,)) {
      const element = ref.current;
      if (!element) return;
      cancelEmulatedTouchScrollAnimation == null ? void 0 : cancelEmulatedTouchScrollAnimation();
      element[side] = Math.abs(offset,);
    }
  }, [offset,],);
}
var NativeScroll = /* @__PURE__ */ React4.forwardRef(function NativeScroll2(props, forwardedRef,) {
  const {
    direction = 'vertical',
    scrollBarVisible = false,
    dragEnabled = true,
    contentOffsetX = 0,
    contentOffsetY = 0,
    contentWidth: _contentWidth,
    contentHeight: _contentHeight,
    children,
    resetOffset,
    onScroll,
    className: className2,
    // Not (yet) supported
    directionLock: _directionLock = false,
    wheelEnabled: _wheelEnabled = true,
    scrollAnimate: _scrollAnimate,
    dragTransition: _dragTransition,
    dragMomentum: _dragMomentum,
    dragElastic: _dragElastic,
    overdragEnabled: _overdragEnabled = true,
    onScrollStart: _onScrollStart,
    onScrollEnd: _onScrollEnd,
    onDragStart: _onDragStart,
    onDrag: _onDrag,
    onDragEnd: _onDragEnd,
    onUpdate: _onUpdate,
    onDirectionLock: _onDirectionLock,
    layoutId: specificLayoutId,
    native: _native,
    // Rest
    ...containerProps
  } = props;
  const layoutId = useLayoutId2(props, {
    specificLayoutId,
    postfix: 'scroll',
  },);
  const fallbackRef = React4.useRef(null,);
  const ref = forwardedRef || fallbackRef;
  const {
    cancelEmulatedTouchScrollAnimation,
  } = useEmulateTouchScroll(ref, direction, dragEnabled,);
  useInsertionEffect(() => {
    injectComponentCSSRules();
  }, [],);
  const isInTarget = useIsInCurrentNavigationTarget();
  const previousIsInTargetRef = React4.useRef(isInTarget,);
  const updateScrollOffsetHandler = () => {
    if (!resetOffset) return;
    const previousIsTarget = previousIsInTargetRef.current;
    previousIsInTargetRef.current = isInTarget;
    const shouldResetOffset = isInTarget && !previousIsTarget;
    if (!shouldResetOffset) return;
    const element = ref.current;
    if (!element) return;
    if (direction !== 'vertical') {
      cancelEmulatedTouchScrollAnimation == null ? void 0 : cancelEmulatedTouchScrollAnimation();
      element.scrollLeft = Math.abs(isMotionValue2(contentOffsetX,) ? contentOffsetX.get() : contentOffsetX,);
    }
    if (direction !== 'horizontal') {
      cancelEmulatedTouchScrollAnimation == null ? void 0 : cancelEmulatedTouchScrollAnimation();
      element.scrollTop = Math.abs(isMotionValue2(contentOffsetY,) ? contentOffsetY.get() : contentOffsetY,);
    }
  };
  useIsomorphicLayoutEffect2(updateScrollOffsetHandler, [isInTarget,],);
  useUpdateScrollOffset(ref, 'scrollLeft', contentOffsetX, cancelEmulatedTouchScrollAnimation,);
  useUpdateScrollOffset(ref, 'scrollTop', contentOffsetY, cancelEmulatedTouchScrollAnimation,);
  const size = !containerProps.__fromCanvasComponent
    ? {
      width: containerProps.__fromCodeComponentNode ? '100%' : containerProps.width,
      height: containerProps.__fromCodeComponentNode ? '100%' : containerProps.height,
    }
    : {};
  return /* @__PURE__ */ jsxs(FrameWithMotion, {
    ref,
    'data-framer-component-type': 'NativeScroll',
    background: 'none',
    ...containerProps,
    ...size,
    onScroll,
    layoutId,
    onBeforeLayoutMeasure: updateScrollOffsetHandler,
    layoutScroll: true,
    className: cx(className2, `direction-${direction}`, !scrollBarVisible && 'scrollbar-hidden',),
    children: [
      /* @__PURE__ */ jsx3(EmptyState, {
        children,
        size: {
          width: isFiniteNumber(containerProps.width,) ? containerProps.width : '100%',
          height: isFiniteNumber(containerProps.height,) ? containerProps.height : '100%',
        },
        insideUserCodeComponent: !containerProps.__fromCodeComponentNode,
        title: 'Scroll',
        description: 'Click and drag the connector to any frame on the canvas \u2192',
      },),
      children,
    ],
  },);
},);
var Scroll = /* @__PURE__ */ (() => {
  const ScrollInner = React4.forwardRef(function ScrollInner2(props, forwardedRef,) {
    if (props.native) {
      return /* @__PURE__ */ jsx3(NativeScroll, {
        ref: forwardedRef,
        ...props,
      },);
    } else {
      return /* @__PURE__ */ jsx3(EmulatedScroll, {
        ref: forwardedRef,
        ...props,
      },);
    }
  },);
  ScrollInner.defaultProps = {
    directionLock: false,
  };
  addPropertyControls(ScrollInner, {
    native: {
      type: 'boolean',
      defaultValue: false,
    },
    direction: {
      type: 'segmentedenum',
      title: 'Direction',
      options: ['vertical', 'horizontal', 'both',],
      defaultValue: 'vertical',
    },
    contentOffsetX: {
      type: 'number',
      title: 'Offset X',
      defaultValue: 0,
      min: 0,
      step: 10,
      displayStepper: true,
      hidden: ({
        direction,
      },) => direction === 'vertical',
    },
    contentOffsetY: {
      type: 'number',
      title: 'Offset Y',
      defaultValue: 0,
      min: 0,
      step: 10,
      displayStepper: true,
      hidden: ({
        direction,
      },) => direction === 'horizontal',
    },
    directionLock: {
      type: 'boolean',
      title: 'Lock',
      enabledTitle: '1 Axis',
      disabledTitle: 'Off',
      defaultValue: true,
      hidden: ({
        native,
      },) => native === true,
    },
    dragEnabled: {
      type: 'boolean',
      title: 'Drag',
      enabledTitle: 'On',
      disabledTitle: 'Off',
      defaultValue: true,
    },
    overdragEnabled: {
      type: 'boolean',
      title: 'Overdrag',
      enabledTitle: 'On',
      disabledTitle: 'Off',
      defaultValue: true,
      hidden: ({
        native,
      },) => native === true,
    },
    wheelEnabled: {
      type: 'boolean',
      title: 'Wheel',
      enabledTitle: 'On',
      disabledTitle: 'Off',
      defaultValue: true,
      hidden: ({
        native,
      },) => native === true,
    },
    scrollBarVisible: {
      type: 'boolean',
      title: 'Scroll Bar',
      enabledTitle: 'Visible',
      disabledTitle: 'Hidden',
      defaultValue: false,
      hidden: ({
        native,
      },) => native === false,
    },
    resetOffset: {
      type: 'boolean',
      title: 'Reset',
      defaultValue: false,
    },
  },);
  ScrollInner.supportsConstraints = true;
  return ScrollInner;
})();
function useNavigation() {
  return useContext(NavigationContext,);
}
var data = /* @__PURE__ */ (() => {
  function Data2(initial = {},) {
    const _data = ObservableObject(initial, false, false,);
    Data2.addData(_data,);
    return _data;
  }
  Data2._stores = [];
  Data2.addData = (_data) => {
    Data2._stores.push(_data,);
  };
  Data2.reset = () => {
    Data2._stores.forEach((target) => ObservableObject.resetObject(target,));
  };
  Data2.addObserver = (target, observer2,) => {
    return ObservableObject.addObserver(target, observer2,);
  };
  return Data2;
})();
var Data = data;
var PropertyStore = /* @__PURE__ */ (() => {
  function PropertyStore2(initial = {}, makeAnimatables = false,) {
    deprecationWarning('PropertyStore', '1.0.0', 'Data() or ObservableObject()',);
    return ObservableObject(initial, makeAnimatables,);
  }
  PropertyStore2.addObserver = (target, observer2,) => {
    return ObservableObject.addObserver(target, observer2,);
  };
  return PropertyStore2;
})();
function bindActionsToStore(get, set, actions,) {
  const boundActions = {};
  for (const key7 in actions) {
    const action = actions[key7];
    if (!action) continue;
    boundActions[key7] = (data2) => set(action(get(), data2,),);
  }
  return boundActions;
}
function createStore(initialState2, unboundActions,) {
  let state = initialState2;
  let version2 = 0;
  const subscribers = /* @__PURE__ */ new Set();
  const notifySubscriber = (sub) => sub(version2,);
  const get = () => state;
  const set = (latestState) => {
    version2++;
    state = latestState;
    subscribers.forEach(notifySubscriber,);
  };
  const actions = unboundActions ? bindActionsToStore(get, set, unboundActions,) : set;
  return {
    get,
    set,
    getVersion: () => version2,
    getActions: () => actions,
    subscribe: (sub) => {
      subscribers.add(sub,);
      return () => subscribers.delete(sub,);
    },
  };
}
var defaultId = /* @__PURE__ */ Symbol('default',);
var DataContext = /* @__PURE__ */ createContext(defaultId,);
function createData(defaultState2, actions,) {
  const stores = /* @__PURE__ */ new Map();
  const useData = (id3, initialState2,) => {
    const contextId = useContext(DataContext,);
    id3 = id3 || contextId;
    const store = useMemo2(() => {
      if (!stores.has(id3,)) {
        stores.set(id3, createStore(initialState2 || defaultState2, actions,),);
      }
      return stores.get(id3,);
    }, [id3,],);
    const [, notifyUpdates,] = useState(store.getVersion(),);
    const storeValueAtHookCallTime = useMemo2(() => store.get(), [store,],);
    useEffect(() => {
      const unsubscribe = store.subscribe(notifyUpdates,);
      if (storeValueAtHookCallTime !== store.get()) {
        notifyUpdates(store.getVersion(),);
      }
      return unsubscribe;
    }, [store, storeValueAtHookCallTime,],);
    return [store.get(), store.getActions(),];
  };
  return useData;
}
var initialState = {
  update: 0,
};
var DataObserverContext = /* @__PURE__ */ React4.createContext({
  update: NaN,
},);
function useObserveData() {
  const context = React4.useContext(DataObserverContext,);
  return !Number.isNaN(context.update,);
}
var DataObserver = class extends Component2 {
  constructor() {
    super(...arguments,);
    __publicField(this, 'observers', [],);
    __publicField(this, 'state', initialState,);
    __publicField(this, 'taskAdded', false,);
    __publicField(this, 'frameTask', () => {
      this.setState({
        update: this.state.update + 1,
      },);
      this.taskAdded = false;
    },);
    __publicField(this, 'observer', () => {
      if (this.taskAdded) return;
      this.taskAdded = true;
      MainLoop.addFrameTask(this.frameTask,);
    },);
  }
  componentWillUnmount() {
    this.observers.map((cancel) => cancel());
    Data.reset();
  }
  render() {
    const {
      children,
    } = this.props;
    this.observers.map((cancel) => cancel());
    this.observers = [];
    Data._stores.forEach((d) => {
      const observer2 = Data.addObserver(d, this.observer,);
      this.observers.push(observer2,);
    },);
    return /* @__PURE__ */ jsx3(DataObserverContext.Provider, {
      value: {
        ...this.state,
      },
      children,
    },);
  }
};
var import_hoist_non_react_statics4 = __toESM(require_hoist_non_react_statics_cjs(), 1,);
function convertColorObject(prop,) {
  if (typeof prop === 'string' || isMotionValue2(prop,)) {
    return prop;
  } else if (LinearGradient.isLinearGradient(prop,)) {
    return LinearGradient.toCSS(prop,);
  } else if (RadialGradient.isRadialGradient(prop,)) {
    return RadialGradient.toCSS(prop,);
  } else if (Color.isColorObject(prop,)) {
    return Color.toRgbString(prop,);
  }
  return prop;
}
function convertColorProps(props,) {
  if (props.background || props.color) {
    const converted = Object.assign({}, props,);
    if (props.background) {
      converted.background = convertColorObject(props.background,);
    }
    if (props.color) {
      converted.color = convertColorObject(props.color,);
    }
    return converted;
  }
  return props;
}
function WithOverride(Component17, override,) {
  const useOverride = typeof override === 'function' ? (props) => override(convertColorProps(props,),) : () => convertColorProps(override,);
  const ComponentWithOverride = function (props,) {
    useContext(DataObserverContext,);
    const overrideProps = useOverride(props,);
    const {
      style: style2,
      ...rest
    } = props;
    return /* @__PURE__ */ jsx3(Component17, {
      ...rest,
      ...overrideProps,
      _initialStyle: style2,
    },);
  };
  (0, import_hoist_non_react_statics4.default)(ComponentWithOverride, Component17,);
  ComponentWithOverride['displayName'] = `WithOverride(${Component17.displayName || Component17.name})`;
  return ComponentWithOverride;
}
var prefix = '__framer__';
var prefixLength = /* @__PURE__ */ (() => prefix.length)();
function extractPrefixedProps(props, keys3,) {
  const result = {};
  const rest = {};
  for (const key7 in props) {
    const strippedKey = stripPrefixFromPrefixedKey(key7,);
    if (strippedKey && keys3.has(strippedKey,)) {
      result[strippedKey] = props[key7];
      continue;
    }
    rest[key7] = props[key7];
  }
  return [result, rest,];
}
function stripPrefixFromPrefixedKey(key7,) {
  if (key7.startsWith(prefix,)) {
    return key7.substr(prefixLength,);
  }
  return void 0;
}
var GeneratedComponentContext = /* @__PURE__ */ React4.createContext(void 0,);
function cloneChildrenWithProps(children, props, asNode,) {
  const cloned = React2.Children.map(children, (child) => {
    if (React2.isValidElement(child,)) {
      return React2.cloneElement(child, props,);
    }
    return child;
  },);
  if (asNode) return cloned;
  return /* @__PURE__ */ jsx3(Fragment, {
    children: cloned,
  },);
}
function useCloneChildrenWithPropsAndRef(forwardedRef,) {
  const hook = useConstant2(() => createHook(forwardedRef,));
  hook.useSetup(forwardedRef,);
  return hook.cloneAsElement;
}
function createHook(forwardedRef,) {
  const state = {
    forwardedRef,
    childRef: null,
    ref: null,
  };
  state.ref = createRefFunction(state,);
  const updateIfNeeded = (nextForwardedRef, ref,) => {
    if (!state.forwardedRef && state.forwardedRef === nextForwardedRef) {
      state.ref = ref;
      return;
    }
    let shouldUpdate = false;
    if (state.childRef !== ref) {
      state.childRef = ref;
      shouldUpdate = true;
    }
    if (state.forwardedRef !== nextForwardedRef) {
      state.forwardedRef = nextForwardedRef;
      shouldUpdate = true;
    }
    if (!shouldUpdate) return;
    state.ref = createRefFunction(state,);
  };
  let preventNextCall = false;
  function cloneChildrenWithPropsAndRef(children, props,) {
    if (preventNextCall) {
      ;
    }
    preventNextCall = true;
    if (React2.Children.count(children,) > 1 && forwardedRef) {
      if (false) {
        throw new ReferenceError('useCloneChildrenWithPropsAndRef: You should not have more than one child when using a forwarded ref.',);
      }
      state.forwardedRef = void 0;
      state.ref = state.childRef;
    }
    return React2.Children.map(children, (child) => {
      if (React2.isValidElement(child,)) {
        const ownRef = 'ref' in child ? child.ref : void 0;
        updateIfNeeded(state.forwardedRef, ownRef,);
        const newProps = isFunction(props,) ? props(child.props,) : props;
        return React2.cloneElement(
          child,
          state.ref !== ownRef
            ? {
              ...newProps,
              ref: state.ref,
            }
            : newProps,
        );
      }
      return child;
    },);
  }
  const cloneAsElement = function cloneAsElement2(children, props,) {
    return /* @__PURE__ */ jsx3(Fragment, {
      children: cloneChildrenWithPropsAndRef(children, props,),
    },);
  };
  cloneAsElement.cloneAsArray = cloneChildrenWithPropsAndRef;
  return {
    // used during render phase to sync props with state
    useSetup: (newRef) => {
      preventNextCall = false;
      updateIfNeeded(newRef, state.childRef,);
    },
    /**
     * Clones children and adds props and refs and returns them as a JSX.Element
     * Making it easier to use as it wraps them in a Fragment.
     */
    cloneAsElement,
  };
}
function createRefFunction(state,) {
  if (!state.forwardedRef) return state.childRef;
  const {
    forwardedRef: prevForwardedRef,
    childRef: prevChildRef,
  } = state;
  return (value) => {
    setRef(prevChildRef, value,);
    setRef(prevForwardedRef, value,);
  };
}
var StyleSheetContext = /* @__PURE__ */ React4.createContext(void 0,);
var framerPostSSRCSSSelector = 'style[data-framer-css-ssr-minified]';
var componentsWithServerRenderedStyles = /* @__PURE__ */ (() => {
  var _a;
  if (!isBrowser2()) return /* @__PURE__ */ new Set();
  const componentsWithSSRStylesAttr = (_a = document.querySelector(framerPostSSRCSSSelector,)) == null
    ? void 0
    : _a.getAttribute('data-framer-components',);
  if (!componentsWithSSRStylesAttr) return /* @__PURE__ */ new Set();
  return new Set(componentsWithSSRStylesAttr.split(' ',),);
})();
var framerCSSMarker = 'data-framer-css-ssr';
var withCSS = (Component17, escapedCSS, componentSerializationId,) =>
  React4.forwardRef((props, ref,) => {
    const {
      sheet,
      cache: cache2,
    } = React4.useContext(StyleSheetContext,) ?? {};
    const id3 = componentSerializationId;
    if (!isBrowser2()) {
      if (isFunction(escapedCSS,)) escapedCSS = escapedCSS(RenderTarget.current(),);
      const concatenatedCSS = Array.isArray(escapedCSS,) ? escapedCSS.join('\n',) : escapedCSS;
      return /* @__PURE__ */ jsxs(Fragment, {
        children: [
          /* @__PURE__ */ jsx3('style', {
            ...{
              [framerCSSMarker]: true,
            },
            'data-framer-component': id3,
            dangerouslySetInnerHTML: {
              __html: concatenatedCSS,
            },
          },),
          /* @__PURE__ */ jsx3(Component17, {
            ...props,
            ref,
          },),
        ],
      },);
    }
    useInsertionEffect(() => {
      if (id3 && componentsWithServerRenderedStyles.has(id3,)) return;
      const css22 = isFunction(escapedCSS,)
        ? escapedCSS(RenderTarget.current(),)
        : Array.isArray(escapedCSS,)
        ? escapedCSS
        : escapedCSS.split('\n',);
      css22.forEach((rule) => rule && injectCSSRule(rule, sheet, cache2,));
    }, [],);
    return /* @__PURE__ */ jsx3(Component17, {
      ...props,
      ref,
    },);
  },);
var SSRParentVariantsContext = /* @__PURE__ */ React4.createContext(void 0,);
var SSRVariantClassName = 'ssr-variant';
function renderBranchedChildrenFromPropertyOverrides(
  overrides,
  children,
  props,
  variantClassNames,
  primaryVariantId,
  parentVariants,
  cloneChildren,
  activeVariantId,
) {
  const childrenArray = React4.Children.toArray(children,);
  const child = childrenArray[0];
  if (childrenArray.length !== 1 || !React4.isValidElement(child,)) {
    console.warn('PropertyOverrides: expected exactly one React element for a child', children,);
    return cloneChildren(children, props,);
  }
  const branches = [];
  const nonOverriddenVariants = [];
  for (const [variantId,] of Object.entries(variantClassNames,)) {
    if (variantId === primaryVariantId) continue;
    const propOverrides = overrides[variantId];
    if (!propOverrides || !arePropOverridesEffectivelyDifferent(child.props, propOverrides,)) {
      nonOverriddenVariants.push(variantId,);
      continue;
    }
    const effectiveVariants = intersection([variantId,], parentVariants,);
    if (effectiveVariants.length) {
      branches.push({
        variants: effectiveVariants,
        propOverrides,
      },);
    }
  }
  if (branches.length === 0) return cloneChildren(child, props,);
  const remainingVariants = [primaryVariantId, ...nonOverriddenVariants,];
  const effectiveRemainingVariants = intersection(remainingVariants, parentVariants,);
  if (effectiveRemainingVariants.length) {
    branches.unshift({
      variants: effectiveRemainingVariants,
    },);
  }
  const renderedBranches = [];
  for (
    const {
      variants,
      propOverrides,
    } of branches
  ) {
    if (activeVariantId && !variants.includes(activeVariantId,)) {
      continue;
    }
    const key7 = variants.join('+',);
    let element =
      // We could omit the SSRParentVariantsContext if variants is the same as parentVariants, but that'd require
      // comparing arrays, so it might not really be an optimization. And since it's just a context, it doesn't
      // affect the size of the generated HTML.
      /* @__PURE__ */
      jsx3(SSRParentVariantsContext.Provider, {
        value: {
          primaryVariantId,
          variants: new Set(variants,),
        },
        children: cloneChildren(
          child,
          propOverrides
            ? {
              ...props,
              ...propOverrides,
            }
            : props,
        ),
      }, key7,);
    const hiddenClassNames = generateHiddenClassNames(variants, parentVariants, variantClassNames,);
    if (hiddenClassNames.length) {
      assert(branches.length > 1, 'Must branch out when there are hiddenClassNames',);
      element = /* @__PURE__ */ jsx3('div', {
        className: `${SSRVariantClassName} ${hiddenClassNames.join(' ',)}`,
        children: element,
      }, key7,);
    } else {
      assert(branches.length === 1, 'Cannot branch out when hiddenClassNames is empty',);
    }
    renderedBranches.push(element,);
  }
  assert(!activeVariantId || renderedBranches.length === 1, 'Must render exactly one branch when activeVariantId is given',);
  return renderedBranches;
}
var SSRVariants = /* @__PURE__ */ React4.forwardRef(function SSRVariants2({
  id: _nodeId,
  children,
  ...props
}, ref,) {
  const cloneWithRefs = useCloneChildrenWithPropsAndRef(ref,);
  if (isBrowser2()) {
    return cloneWithRefs(children, props,);
  }
  throw new Error('SSRVariants is no longer supported outside canvas and preview',);
},);
function variantHashFromClassName(className2,) {
  return className2.split('-',)[2];
}
function generateHiddenClassNames(showOnlyInVariantIds, parentVariants, variantClassNames,) {
  const classNames = [];
  for (const [variantId, variantClassName,] of Object.entries(variantClassNames,)) {
    const alreadyHiddenInParent = parentVariants && !parentVariants.has(variantId,);
    if (showOnlyInVariantIds.includes(variantId,) || alreadyHiddenInParent) continue;
    classNames.push(`hidden-${variantHashFromClassName(variantClassName,)}`,);
  }
  return classNames;
}
function intersection(variants, parentVariants,) {
  if (!parentVariants) return variants;
  return variants.filter((variant) => parentVariants.has(variant,));
}
function arePropOverridesEffectivelyDifferent(props, propOverrides,) {
  for (const key7 of Object.keys(propOverrides,)) {
    if (!isEqual(props[key7], propOverrides[key7], true,)) {
      return true;
    }
  }
  return false;
}
function propsForBreakpoint(variant, props, overrides,) {
  if (!overrides || !variant) return props;
  return {
    ...props,
    ...overrides[variant],
  };
}
var noopSubscribe = () => () => {};
var returnTrue = () => true;
var returnFalse = () => false;
var PropertyOverridesWithoutCSS = /* @__PURE__ */ React4.forwardRef(function PropertyOverrides(props, ref,) {
  const cloneWithRefs = useCloneChildrenWithPropsAndRef(ref,);
  const ancestorCtx = React4.useContext(SSRParentVariantsContext,);
  const isHydrationOrSSR = React4.useSyncExternalStore(noopSubscribe, returnFalse, returnTrue,);
  const action = useConstant2(() => {
    if (isHydrationOrSSR) {
      if (isBrowser2()) {
        return 1;
      } else {
        return 2;
      }
    } else {
      return 0;
    }
  },);
  const generatedComponentContext = React4.useContext(GeneratedComponentContext,);
  return useMemoOne(() => {
    const {
      breakpoint,
      overrides,
      children,
      ...restProps
    } = props;
    if (!generatedComponentContext) {
      console.warn('PropertyOverrides is missing GeneratedComponentContext',);
      return cloneWithRefs(children, restProps,);
    }
    const {
      primaryVariantId,
      variantClassNames,
    } = generatedComponentContext;
    const parentVariants = (ancestorCtx == null ? void 0 : ancestorCtx.primaryVariantId) === primaryVariantId
      ? ancestorCtx == null ? void 0 : ancestorCtx.variants
      : void 0;
    switch (action) {
      case 0:
        return cloneWithRefs(children, propsForBreakpoint(breakpoint, restProps, overrides,),);
      case 1:
        return renderBranchedChildrenFromPropertyOverrides(
          overrides,
          children,
          restProps,
          variantClassNames,
          primaryVariantId,
          parentVariants,
          cloneWithRefs,
          breakpoint,
          // only render the single, active branch
        );
      case 2:
        return renderBranchedChildrenFromPropertyOverrides(
          overrides,
          children,
          restProps,
          variantClassNames,
          primaryVariantId,
          parentVariants,
          // On the server, we use plain cloneChildrenWithProps instead of useCloneChildrenWithPropsAndRef,
          // because we can't clone one ref to multiple branched-out elements (useCloneChildrenWithPropsAndRef
          // even guards against it), but luckily, refs mean nothing on the server anyway.
          cloneChildrenWithProps,
          void 0,
          // render all branches
        );
      default:
        assertNever(action,);
    }
  }, [generatedComponentContext, ancestorCtx, cloneWithRefs, props,],);
},);
var PropertyOverrides2 =
  /* @__PURE__ */ (() => withCSS(PropertyOverridesWithoutCSS, `.${SSRVariantClassName} { display: contents }`, 'PropertyOverrides',))();
var defaultVariantKey = 'default';
var defaultVariants = /* @__PURE__ */ new Set([defaultVariantKey,],);
var _variantHashes;
var AnimationCollector = class {
  constructor() {
    __publicField(this, 'entries', /* @__PURE__ */ new Map(),);
    __privateAdd(this, _variantHashes, {},);
  }
  /** @deprecated */
  set(nodeId, prop, value, variantHash,) {
    switch (prop) {
      case 'transformTemplate': {
        assert(typeof value === 'string', `transformTemplate must be a string, received: ${value}`,);
        this.setHash(nodeId, variantHash, {
          transformTemplate: value,
          legacy: true,
        },);
        break;
      }
      case 'initial':
      case 'animate': {
        assert(typeof value === 'object', `${prop} must be a valid object, received: ${value}`,);
        this.setHash(nodeId, variantHash, {
          [prop]: value,
          legacy: true,
        },);
        break;
      }
      default:
        break;
    }
  }
  setHash(id3, variantHash = defaultVariantKey, value,) {
    const existing = this.entries.get(id3,) ?? {};
    const existingValue = existing[variantHash] ?? {};
    existing[variantHash] = value === null ? null : {
      ...existingValue,
      ...value,
    };
    this.entries.set(id3, existing,);
  }
  variantHash(variantId, info,) {
    if (variantId === (info == null ? void 0 : info.primaryVariantId)) return defaultVariantKey;
    const existing = __privateGet(this, _variantHashes,)[variantId];
    if (existing) return existing;
    const className2 = info == null ? void 0 : info.variantClassNames[variantId];
    if (!className2) return defaultVariantKey;
    return __privateGet(this, _variantHashes,)[variantId] = variantHashFromClassName(className2,);
  }
  setAll(id3, variants = defaultVariants, props, info,) {
    var _a;
    if (props === null) {
      for (const variantId of variants) {
        this.setHash(id3, this.variantHash(variantId, info,), null,);
      }
      return;
    }
    const transformTemplate2 = isFunction(props.transformTemplate,)
      ? (_a = props.transformTemplate) == null ? void 0 : _a.call(props, {}, framerAppearTransformTemplateToken,)
      : void 0;
    const initial = props.__framer__presenceInitial ?? props.initial;
    const animate3 = props.__framer__presenceAnimate ?? props.animate;
    const config = {
      initial: isObject2(initial,) ? initial : void 0,
      animate: isObject2(animate3,) ? animate3 : void 0,
      transformTemplate: isString(transformTemplate2,) ? transformTemplate2 : void 0,
    };
    for (const variantId of variants) this.setHash(id3, this.variantHash(variantId, info,), config,);
  }
  clear() {
    this.entries.clear();
  }
  toObject() {
    return Object.fromEntries(this.entries,);
  }
};
_variantHashes = /* @__PURE__ */ new WeakMap();
var framerAppearEffects = /* @__PURE__ */ new AnimationCollector();
function withOptimizedAppearEffect(Component17,) {
  return React4.forwardRef(({
    optimized,
    ...props
  }, ref,) => {
    var _a;
    const generatedComponentContext = React4.useContext(GeneratedComponentContext,);
    const variants = (_a = React4.useContext(SSRParentVariantsContext,)) == null ? void 0 : _a.variants;
    const id3 = props[framerAppearIdKey];
    if (id3 && !isBrowser2()) {
      framerAppearEffects.setAll(
        id3,
        variants,
        // A layer may have an optimization id, and an `animate` prop,
        // but not require optimization. For example in the case of a
        // layer where one variant has an appear effect, and another
        // variant has a scroll appear effect, the scroll appear effect
        // should not be optimized.
        optimized ? props : null,
        generatedComponentContext,
      );
    }
    const disabledProps = getDisabledFXPropsInStaticRenderer(props,);
    return /* @__PURE__ */ jsx3(Component17, {
      ref,
      ...props,
      ...disabledProps,
    },);
  },);
}
var optimizeAppear = (prop, id3, animateTargetAndTransition, variantHash,) => {
  if (!isBrowser2()) {
    framerAppearEffects.set(id3, prop, animateTargetAndTransition, variantHash,);
  }
  return animateTargetAndTransition;
};
var framerAppearTransformTemplateToken = '__Appear_Animation_Transform__';
var optimizeAppearTransformTemplate = (id3, fn,) => {
  if (!isBrowser2()) {
    const template = fn == null ? void 0 : fn({}, framerAppearTransformTemplateToken,);
    if (template === void 0) return fn;
    framerAppearEffects.set(id3, 'transformTemplate', template,);
  }
  return fn;
};
var framerAppearIdKey = 'data-framer-appear-id';
var framerAppearAnimationScriptKey = 'data-framer-appear-animation';
var getDisabledFXPropsInStaticRenderer = (props) => {
  const isRenderingStaticContent = isStaticRenderer();
  if (!isRenderingStaticContent) return void 0;
  return {
    animate: isVariantOrVariantList(props.animate,) ? props.animate : void 0,
    initial: isVariantOrVariantList(props.initial,) ? props.initial : void 0,
    exit: void 0,
  };
};
function isVariantOrVariantList(value,) {
  return isString(value,) || Array.isArray(value,);
}
var effectValuesKeys = [
  'opacity',
  'x',
  'y',
  'scale',
  'rotate',
  'rotateX',
  'rotateY',
  'skewX',
  'skewY', /** @deprecated */
  'transformPerspective',
];
var makeFXValues = (defaults) => {
  return {
    x: motionValue((defaults == null ? void 0 : defaults.x) ?? 0,),
    y: motionValue((defaults == null ? void 0 : defaults.y) ?? 0,),
    opacity: motionValue((defaults == null ? void 0 : defaults.opacity) ?? 1,),
    scale: motionValue((defaults == null ? void 0 : defaults.scale) ?? 1,),
    rotate: motionValue((defaults == null ? void 0 : defaults.rotate) ?? 0,),
    rotateX: motionValue((defaults == null ? void 0 : defaults.rotateX) ?? 0,),
    rotateY: motionValue((defaults == null ? void 0 : defaults.rotateY) ?? 0,),
    skewX: motionValue((defaults == null ? void 0 : defaults.skewX) ?? 0,),
    skewY: motionValue((defaults == null ? void 0 : defaults.skewY) ?? 0,),
    /** @deprecated */
    transformPerspective: motionValue((defaults == null ? void 0 : defaults.transformPerspective) ?? 0,),
  };
};
var defaultFXValues = {
  x: 0,
  y: 0,
  scale: 1,
  opacity: 1,
  rotate: 0,
  rotateX: 0,
  rotateY: 0,
  skewX: 0,
  skewY: 0,
  /** @deprecated */
  transformPerspective: 0,
};
function isFXValuesKey(key7,) {
  return key7 in defaultFXValues;
}
var effectEnabledStyle = {
  willChange: 'transform',
};
Object.freeze(effectEnabledStyle,);
var effectDisabledStyle = {};
Object.freeze(effectDisabledStyle,);
function useFXValues(values, enabled,) {
  const effect = useConstant2(() => ({
    values: makeFXValues(enabled ? values : void 0,),
  }));
  React4.useEffect(() => {
    if (enabled) return;
    for (const key7 of effectValuesKeys) {
      const value = defaultFXValues[key7];
      if (isUndefined(value,)) continue;
      effect.values[key7].set(value,);
    }
  }, [enabled,],);
  return effect;
}
var loopOptionsKeys = /* @__PURE__ */ new Set([
  'loopEffectEnabled',
  'loopTransition',
  'loop',
  'loopRepeatType',
  'loopRepeatDelay',
  'loopPauseOffscreen',
],);
var useDelay = () => {
  const timeoutRef = useRef3();
  useEffect(() => {
    return () => {
      clearTimeout(timeoutRef.current,);
    };
  }, [],);
  return async (d) =>
    new Promise((resolve) => {
      timeoutRef.current = setTimeout(() => {
        resolve(true,);
      }, d * 1e3,);
    },);
};
function useLoop({
  loopEffectEnabled,
  loopRepeatDelay,
  loopTransition,
  loopRepeatType,
  loop,
  loopPauseOffscreen,
}, ref,) {
  const shouldReduceMotion = useReducedMotionConfig();
  const values = useConstant2(makeFXValues,);
  const mirrorStateRef = useRef3(false,);
  const delay2 = useDelay();
  const animationPromiseRef = useRef3(null,);
  const animateValues = useCallback(async () => {
    if (!loop) return;
    const transition = loopTransition || void 0;
    const mirror = mirrorStateRef.current && loopRepeatType === 'mirror';
    const to = mirror ? defaultFXValues : loop;
    const from = mirror ? loop : defaultFXValues;
    mirrorStateRef.current = !mirrorStateRef.current;
    animationPromiseRef.current = Promise.all(effectValuesKeys.map((key7) => {
      if (shouldReduceMotion && key7 !== 'opacity') return;
      values[key7].jump(from[key7] ?? defaultFXValues[key7],);
      return new Promise((resolve) => {
        const opts = {
          ...transition,
          onComplete: () => resolve(),
        };
        const target = to[key7] ?? from[key7];
        if (typeof target === 'number') {
          animate(values[key7], target, opts,);
        }
      },);
    },),);
    return animationPromiseRef.current;
  }, [loop, loopRepeatType, loopTransition, shouldReduceMotion,],);
  const [isRunning, setIsRunning,] = useState(false,);
  const shouldRunRef = useRef3(false,);
  const animateLoop = useCallback(async () => {
    if (!loopEffectEnabled || !shouldRunRef.current) return;
    await animateValues();
    await delay2(loopRepeatDelay ?? 0,);
    void animateLoop();
  }, [animateValues, delay2, loopEffectEnabled, loopRepeatDelay,],);
  const start2 = useCallback(() => {
    if (shouldRunRef.current) return;
    shouldRunRef.current = true;
    startTransition2(() => setIsRunning(true,));
    void animateLoop();
  }, [animateLoop,],);
  const stop = useCallback((overrideRunRef = true,) => {
    effectValuesKeys.forEach((key7) => {
      values[key7].stop();
    },);
    effectValuesKeys.forEach((key7) => {
      values[key7].set(defaultFXValues[key7],);
    },);
    mirrorStateRef.current = false;
    if (overrideRunRef) {
      shouldRunRef.current = false;
      startTransition2(() => setIsRunning(false,));
    }
  }, [],);
  const hasLoop = loopEffectEnabled && loop;
  const startStopTabVisibilityListener = useCallback(() => {
    if (document.hidden) {
      stop(false,);
    } else if (shouldRunRef.current) {
      shouldRunRef.current = false;
      start2();
    }
  }, [start2, stop,],);
  useEffect(() => {
    if (!hasLoop) return;
    document.addEventListener('visibilitychange', startStopTabVisibilityListener,);
    return () => {
      document.removeEventListener('visibilitychange', startStopTabVisibilityListener,);
    };
  }, [hasLoop, startStopTabVisibilityListener,],);
  useEffect(() => {
    if (hasLoop && loopPauseOffscreen) return;
    if (hasLoop) {
      start2();
    } else {
      stop();
    }
  }, [start2, stop, loopPauseOffscreen, hasLoop,],);
  useEffect(() => {
    return () => stop();
  }, [stop,],);
  const isIntersectingRef = useRef3(false,);
  const stopAfterAnimationEnds = useCallback(async () => {
    if (!animationPromiseRef.current) return;
    await animationPromiseRef.current;
    if (isIntersectingRef.current) return;
    stop();
  }, [stop,],);
  const startAndStopBasedOnIntersection = useCallback((entry) => {
    if (entry.isIntersecting) {
      isIntersectingRef.current = true;
      start2();
    } else {
      isIntersectingRef.current = false;
      void stopAfterAnimationEnds();
    }
  }, [start2, stopAfterAnimationEnds,],);
  useSharedIntersectionObserver(ref, startAndStopBasedOnIntersection, {
    enabled: hasLoop && loopPauseOffscreen,
  },);
  const addWillChange = isRunning || !loopPauseOffscreen;
  return useMemo2(() => {
    return {
      values,
      style: hasLoop && addWillChange ? effectEnabledStyle : effectDisabledStyle,
    };
  }, [hasLoop, addWillChange,],);
}
function parallaxTransform(scrollY, originalPosition, speed, offset, adjustPosition,) {
  const speedFactor = speed / 100 - 1;
  const initialPosition = adjustPosition ? (originalPosition - offset) * speedFactor : 0;
  const scrollOffset = -scrollY * speedFactor;
  return initialPosition + scrollOffset;
}
var parallaxOptionsKeys = /* @__PURE__ */ new Set(['speed', 'adjustPosition', 'offset', 'parallaxTransformEnabled',],);
function useParallax(options, ref, visibilityStyle,) {
  const {
    speed = 100,
    offset = 0,
    adjustPosition = false,
    parallaxTransformEnabled,
  } = options;
  const originalPosition = React4.useRef(null,);
  const shouldReduceMotion = useReducedMotionConfig();
  const transform2 = React4.useCallback((yValue) => {
    if (originalPosition.current === null) return 0;
    if (speed === 100) return 0;
    return parallaxTransform(yValue, originalPosition.current, speed, offset, adjustPosition,);
  }, [speed, offset, adjustPosition,],);
  const {
    scrollY,
  } = useScroll();
  const parallaxY = useTransform(scrollY, transform2,);
  const visibility = useMotionValue(adjustPosition && originalPosition.current === null ? 'hidden' : visibilityStyle,);
  const defaultValue = useMotionValue(0,);
  useRefEffect(ref, (element) => {
    if (element === null || !parallaxTransformEnabled) return;
    frame.read(() => {
      var _a;
      originalPosition.current = ((_a = element.getBoundingClientRect()) == null ? void 0 : _a.top) ?? 0;
    },);
    frame.update(() => {
      parallaxY.set(transform2(scrollY.get(),),);
      if (adjustPosition) {
        visibility.set(visibilityStyle ?? 'initial',);
      }
    },);
  }, [adjustPosition, parallaxTransformEnabled,],);
  useOnRouteChange(() => {
    if (!parallaxTransformEnabled) return;
    parallaxY.set(0,);
  },);
  return {
    values: {
      y: shouldReduceMotion || !parallaxTransformEnabled ? defaultValue : parallaxY,
    },
    style: parallaxTransformEnabled
      ? {
        ...effectEnabledStyle,
        visibility,
      }
      : effectDisabledStyle,
  };
}
function getTransition(value,) {
  if (isString(value,) || !isObject2(value,)) return void 0;
  return value == null ? void 0 : value.transition;
}
function runEffectAnimation(target, effect, shouldReduceMotion, ref, appearId, instant,) {
  const transition = getTransition(target,);
  return Promise.all(effectValuesKeys.map((key7) => {
    return new Promise((resolve) => {
      if (shouldReduceMotion && key7 !== 'opacity') return resolve();
      const motionValue2 = effect.values[key7];
      motionValue2.stop();
      let value = !isObject2(target,) ? defaultFXValues[key7] : (target == null ? void 0 : target[key7]) ?? defaultFXValues[key7];
      if (isMotionValue(value,)) value = value.get();
      if (!isNumber2(value,)) return resolve();
      const visualElement = visualElementStore.get(ref.current,);
      if (visualElement) visualElement.setBaseTarget(key7, value,);
      let startTime;
      if (isString(appearId,) && !(motionValue2 == null ? void 0 : motionValue2.hasAnimated) && safeWindow.MotionHandoffAnimation) {
        const handoffAnimationStartTime = safeWindow.MotionHandoffAnimation(appearId, key7, frame,);
        if (handoffAnimationStartTime) {
          startTime = handoffAnimationStartTime;
        }
      }
      if (instant) {
        motionValue2.set(value,);
      } else {
        animate(motionValue2, value, {
          ...transition,
          velocity: 0,
          startTime,
          onComplete: () => resolve(),
        },);
      }
    },);
  },),);
}
var presenceOptionsKeys = /* @__PURE__ */ new Set(['presenceInitial', 'presenceAnimate', 'presenceExit',],);
function usePresenceAnimation(
  {
    initial: motionInitial,
    animate: motionAnimate,
    exit: motionExit,
    presenceInitial,
    presenceAnimate,
    presenceExit,
  },
  ref,
  enabled,
  style2,
  appearId,
) {
  const initial = presenceInitial ?? motionInitial;
  const animateConfig = presenceAnimate ?? motionAnimate;
  const exit = presenceExit ?? motionExit;
  const [isPresent2, safeToRemove,] = usePresence();
  const internalState = useRef3({
    lastPresence: false,
    lastAnimate: animateConfig,
    hasMounted: false,
    running: false,
  },);
  const effect = useConstant2(() => {
    const base = initial ?? style2;
    if (!isObject2(base,)) {
      return {
        values: makeFXValues(),
      };
    }
    const defaults = {};
    for (const key7 in base) {
      const value = isObject2(base,) ? base[key7] : void 0;
      if (!isNumber2(value,)) continue;
      defaults[key7] = value;
    }
    return {
      values: makeFXValues(defaults,),
    };
  },);
  useRefEffect(ref, (element) => {
    const {
      hasMounted,
    } = internalState.current;
    if (hasMounted && animateConfig) return;
    const visualElement = visualElementStore.get(element,);
    if (!visualElement) return;
    Object.assign(internalState.current, {
      hasMounted: true,
    },);
    for (const key7 in effect.values) {
      if (!isFXValuesKey(key7,)) continue;
      const value = style2 == null ? void 0 : style2[key7];
      visualElement.setBaseTarget(key7, isNumber2(value,) ? value : defaultFXValues[key7],);
    }
  }, [animateConfig,],);
  const shouldReduceMotion = useReducedMotionConfig();
  useRefEffect(ref, (element) => {
    if (!enabled) {
      safeToRemove == null ? void 0 : safeToRemove();
      return;
    }
    if (element === null) return;
    if (isPresent2 !== internalState.current.lastPresence) {
      Object.assign(internalState.current, {
        lastPresence: isPresent2,
      },);
      if (isPresent2) {
        if (initial && animateConfig) {
          Object.assign(internalState.current, {
            running: true,
          },);
          void runEffectAnimation(animateConfig, effect, shouldReduceMotion, ref, appearId,).then(() =>
            Object.assign(internalState.current, {
              running: false,
            },)
          );
        }
      } else if (exit) {
        Object.assign(internalState.current, {
          running: true,
        },);
        void runEffectAnimation(exit, effect, shouldReduceMotion, ref, appearId,).then(() =>
          Object.assign(internalState.current, {
            running: false,
          },)
        ).then(() => safeToRemove());
      } else {
        safeToRemove();
      }
      return;
    }
    const {
      lastAnimate,
      running,
    } = internalState.current;
    const hasAnimateChanged = !isEqual(animateConfig, lastAnimate,);
    if (!hasAnimateChanged || !animateConfig) return;
    Object.assign(internalState.current, {
      lastAnimate: animateConfig,
    },);
    void runEffectAnimation(animateConfig, effect, shouldReduceMotion, ref, appearId, !running,).then(() =>
      Object.assign(internalState.current, {
        running: false,
      },)
    );
  },);
  const effectEnabled = enabled && animateConfig;
  return useMemo2(() => {
    return {
      values: effect.values,
      style: effectEnabled ? effectEnabledStyle : effectDisabledStyle,
    };
  }, [effectEnabled,],);
}
function calcOffsetTop(element, container,) {
  let top = 0;
  let current2 = element;
  while (current2 && current2 !== container) {
    if (!(current2 instanceof HTMLElement)) break;
    top += current2.offsetTop;
    current2 = current2.offsetParent;
  }
  return top;
}
var scrollObserverOffset = 1;
function createTransformInputRange(transformTargets, threshold = 0, callback,) {
  var _a;
  const starts = [];
  const inputRange = [];
  for (let index = transformTargets.length; index >= 0; index--) {
    const {
      ref: targetRef,
      offset,
    } = transformTargets[index] ?? {};
    if (!targetRef || !targetRef.current) continue;
    const offsetTop = calcOffsetTop(targetRef.current, document.documentElement,);
    const top = offsetTop - scrollObserverOffset - (offset ?? 0) - threshold;
    const height = ((_a = targetRef.current) == null ? void 0 : _a.clientHeight) ?? 0;
    const previousTop = starts[starts.length - 1];
    const end = Math.max(top + height, 0,);
    starts.push(top,);
    inputRange.unshift(Math.max(top, 0,), previousTop === void 0 ? end : Math.min(end, Math.max(previousTop - 1, 0,),),);
    callback == null ? void 0 : callback(index,);
  }
  return inputRange;
}
function currentScrollDirection(offset, lastOffset = 0,) {
  if (offset < lastOffset) return 'up';
  return 'down';
}
var scrollDirectionThreshold = 4;
function useScrollDirectionChange(scrollDirection, cb, options = {},) {
  const {
    direction,
    target,
  } = scrollDirection ?? {};
  const {
    repeat = true,
    enabled = true,
  } = options;
  const currentRouteKey = useCurrentRouteKey();
  React4.useEffect(() => {
    if (!direction || !enabled) return;
    const _ = currentRouteKey;
    let lastOffset = void 0;
    let directionChangeOffset = 0;
    let lastDirection = void 0;
    let currentTarget = void 0;
    return scrollInfo(({
      y: scrollY,
    },) => {
      if (!repeat && currentTarget === target) return;
      if (scrollY.current > scrollY.scrollLength) return;
      if (scrollY.current < 0) return;
      const d = currentScrollDirection(scrollY.current, lastOffset,);
      lastOffset = scrollY.current;
      const hasDirectionChanged = d !== lastDirection;
      lastDirection = d;
      if (hasDirectionChanged) {
        directionChangeOffset = scrollY.current;
      } else {
        const delta = Math.abs(scrollY.current - directionChangeOffset,);
        if (delta < scrollDirectionThreshold) return;
        const nextTarget = d === direction ? target : void 0;
        if (nextTarget !== currentTarget) cb(nextTarget,);
        currentTarget = nextTarget;
      }
    },);
  }, [currentRouteKey, direction, repeat, target, enabled, cb,],);
}
var styleAppearOptionsKeys = /* @__PURE__ */ new Set([
  'threshold',
  'animateOnce',
  'opacity',
  'targetOpacity',
  'x',
  'y',
  'scale',
  'transition',
  'rotate',
  'rotateX',
  'rotateY',
  'perspective',
  'enter',
  'exit',
  'animate',
  'styleAppearEffectEnabled',
  'targets',
  'scrollDirection',
],);
var defaultOutputRange = ['animate', 'animate',];
var defaultRanges = {
  inputRange: [],
  outputRange: [],
};
function createInputOutputRange(targets, threshold, hasExit,) {
  const inputRange = createTransformInputRange(targets, threshold,);
  const outputRange = [...defaultOutputRange,];
  const firstRange = inputRange[0];
  if (!isNumber2(firstRange,)) return defaultRanges;
  if (firstRange > 1) {
    inputRange.unshift(0, firstRange - 1,);
    outputRange.unshift('initial', 'initial',);
  }
  if (hasExit) {
    const idx = inputRange.length - 1;
    const last = inputRange[idx];
    if (!isNumber2(last,)) return defaultRanges;
    inputRange.push(last + 1,);
    outputRange.push('exit',);
  }
  return {
    inputRange,
    outputRange,
  };
}
function makeStyle(defaults,) {
  return {
    x: (defaults == null ? void 0 : defaults.x) ?? defaultFXValues.x,
    y: (defaults == null ? void 0 : defaults.y) ?? defaultFXValues.y,
    scale: (defaults == null ? void 0 : defaults.scale) ?? defaultFXValues.scale,
    opacity: (defaults == null ? void 0 : defaults.opacity) ?? defaultFXValues.opacity,
    transformPerspective: (defaults == null ? void 0 : defaults.transformPerspective) ?? defaultFXValues.transformPerspective,
    rotate: (defaults == null ? void 0 : defaults.rotate) ?? defaultFXValues.rotate,
    rotateX: (defaults == null ? void 0 : defaults.rotateX) ?? defaultFXValues.rotateX,
    rotateY: (defaults == null ? void 0 : defaults.rotateY) ?? defaultFXValues.rotateY,
    skewX: (defaults == null ? void 0 : defaults.skewX) ?? defaultFXValues.skewX,
    skewY: (defaults == null ? void 0 : defaults.skewY) ?? defaultFXValues.skewY,
    transition: (defaults == null ? void 0 : defaults.transition) ?? void 0,
  };
}
function useAnimationVariants({
  opacity,
  targetOpacity,
  perspective: transformPerspective,
  enter,
  exit,
  animate: animateVariant2,
  ...defaultStyles
},) {
  return React4.useMemo(() => ({
    initial: enter ?? makeStyle({
      ...defaultStyles,
      opacity: opacity ?? targetOpacity ?? 1,
      transformPerspective,
    },),
    animate: animateVariant2 ?? makeStyle({
      opacity: targetOpacity,
    },),
    exit: exit ?? makeStyle(),
  }), // biome-ignore lint/correctness/useExhaustiveDependencies: `defaultStyles` makes this memo re-run on every render, but that appears to be fine.
  [animateVariant2, defaultStyles, enter, exit, opacity, targetOpacity, transformPerspective,],);
}
function useStyleAppearEffect(options, ref,) {
  const shouldReduceMotion = useReducedMotionConfig();
  const variants = useAnimationVariants(options,);
  const enabled = options.styleAppearEffectEnabled;
  const effect = useFXValues(enabled ? variants.initial : variants.animate, enabled,);
  const playState = React4.useRef({
    isPlaying: false,
    scheduledAppearState: void 0,
    lastAppearState: !options.styleAppearEffectEnabled,
  },);
  const currentRouteKey = useCurrentRouteKey();
  const animation = React4.useRef();
  const runAnimation = React4.useCallback(async ({
    transition,
    ...target
  }, fromInitial,) => {
    const transitionWithFallback = transition ?? variants.animate.transition ?? options.transition;
    await animation.current;
    const visualElement = visualElementStore.get(ref.current,);
    animation.current = Promise.all(effectValuesKeys.map((key7) => {
      if (fromInitial) effect.values[key7].set(variants.initial[key7] ?? defaultFXValues[key7],);
      const toValue = target[key7] ?? defaultFXValues[key7];
      if (visualElement && typeof toValue !== 'object') {
        visualElement.setBaseTarget(key7, toValue,);
      }
      return new Promise((resolve) => {
        if (shouldReduceMotion && key7 !== 'opacity') {
          if (isNumber2(toValue,)) effect.values[key7].set(toValue,);
          resolve();
        } else {
          const opts = {
            restDelta: key7 === 'scale' ? 1e-3 : void 0,
            ...transitionWithFallback,
            onComplete: () => resolve(),
          };
          if (typeof toValue === 'number') {
            animate(effect.values[key7], toValue, opts,);
          }
        }
      },);
    },),);
  }, [],);
  const hasAnimatedOnce = options.animateOnce && playState.current.lastAppearState === true;
  const animateWithIntersectionObserver = !options.targets && options.styleAppearEffectEnabled && !options.scrollDirection &&
    !hasAnimatedOnce;
  useAppearEffect(ref, (appears) => {
    const {
      isPlaying,
      lastAppearState,
    } = playState.current;
    if (isPlaying) {
      playState.current.scheduledAppearState = appears;
      return;
    }
    playState.current.scheduledAppearState = void 0;
    playState.current.lastAppearState = appears;
    if (lastAppearState === appears) return;
    runAnimation(appears ? variants.animate : variants.exit, appears,);
  }, {
    enabled: animateWithIntersectionObserver,
    animateOnce: !!options.animateOnce,
    threshold: {
      y: options.threshold,
    },
  },);
  const animateWithScrollInfo = options.targets && enabled && !options.scrollDirection;
  React4.useEffect(() => {
    if (!animateWithScrollInfo) return;
    const playedState = {
      initial: true,
    };
    const _ = currentRouteKey;
    let lastVariant = 'initial';
    return scrollInfo(({
      y: scrollY,
    },) => {
      const {
        targets,
      } = options;
      if (!targets) return;
      if (!targets[0] || targets[0].ref && !targets[0].ref.current) return;
      const {
        inputRange,
        outputRange,
      } = createInputOutputRange(targets, (options.threshold ?? 0) * scrollY.containerLength, !!options.exit,);
      if (inputRange.length === 0 || inputRange.length !== outputRange.length) return;
      const variant = transform(scrollY.current, inputRange, outputRange,);
      if (options.animateOnce && playedState[variant]) return;
      playedState[variant] = true;
      if (lastVariant === variant) return;
      lastVariant = variant;
      const variantAnimation = asRecord(variants,)[variant];
      if (!variantAnimation) return;
      runAnimation(variantAnimation,);
    },);
  }, [currentRouteKey, animateWithScrollInfo,],);
  useScrollDirectionChange(options.scrollDirection, (target) => runAnimation(target ?? variants.animate,), {
    enabled,
    repeat: !options.animateOnce,
  },);
  useOnRouteChange(() => {
    var _a;
    if (!enabled) return;
    if (!options.targets && !options.scrollDirection) return;
    for (const key7 of effectValuesKeys) {
      effect.values[key7].set(((_a = variants.initial) == null ? void 0 : _a[key7]) ?? defaultFXValues[key7],);
    }
  },);
  return useMemo2(() => {
    return {
      values: effect.values,
      style: enabled ? effectEnabledStyle : effectDisabledStyle,
    };
  }, [enabled,],);
}
var styleTransformOptionsKeys = /* @__PURE__ */ new Set([
  'transformViewportThreshold',
  'styleTransformEffectEnabled',
  'transformTargets',
  'spring',
  'transformTrigger',
],);
var defaultValues = (transformTargets, shouldReduceMotion,) => {
  var _a;
  const initial = (_a = transformTargets == null ? void 0 : transformTargets[0]) == null ? void 0 : _a.target;
  return shouldReduceMotion
    ? {
      opacity: (initial == null ? void 0 : initial.opacity) ?? 1,
    }
    : initial;
};
var defaultRanges2 = () => ({
  opacity: [],
  x: [],
  y: [],
  scale: [],
  rotate: [],
  rotateX: [],
  rotateY: [],
  skewX: [],
  skewY: [],
  transformPerspective: [],
});
function useAttachOptionalSpring(values, spring2,) {
  const springs = React4.useRef({},);
  React4.useEffect(() => {
    if (spring2 === void 0) return;
    for (const key7 of objectKeys(values,)) {
      let startAnimation3 = function () {
        const active = springs.current[key7];
        if (active) active.stop();
        springs.current[key7] = animateValue({
          keyframes: [m2.get(), latestValue,],
          velocity: m2.getVelocity(),
          ...spring2,
          restDelta: 1e-3,
          onUpdate: latestSetter,
        },);
      };
      var startAnimation2 = startAnimation3;
      const m2 = values[key7];
      let latestSetter;
      let latestValue;
      m2.attach((v, set,) => {
        latestValue = v;
        latestSetter = set;
        frame.postRender(startAnimation3,);
        return m2.get();
      },);
    }
  }, [JSON.stringify(spring2,),],);
}
function createInputOutputRanges(transformTargets, threshold,) {
  const effectKeyOutputRange = defaultRanges2();
  const inputRange = createTransformInputRange(transformTargets, threshold, (index) => {
    var _a, _b, _c;
    const previousTarget = (_a = transformTargets[index - 1]) == null ? void 0 : _a.target;
    const currentTarget = (_b = transformTargets[index]) == null ? void 0 : _b.target;
    for (const key7 of effectValuesKeys) {
      (_c = effectKeyOutputRange[key7]) == null
        ? void 0
        : _c.unshift(
          (previousTarget == null ? void 0 : previousTarget[key7]) ?? 0,
          (currentTarget == null ? void 0 : currentTarget[key7]) ?? 0,
        );
    }
  },);
  return {
    inputRange,
    effectKeyOutputRange,
  };
}
function createPageOutputRange(transformTargets,) {
  var _a;
  const keyOutputRange = defaultRanges2();
  for (
    const {
      target,
    } of transformTargets
  ) {
    for (const key7 of effectValuesKeys) (_a = keyOutputRange[key7]) == null ? void 0 : _a.push(target[key7],);
  }
  return keyOutputRange;
}
var pageInputRange = [0, 1,];
function useStyleTransform({
  transformTrigger,
  styleTransformEffectEnabled,
  transformTargets,
  spring: spring2,
  transformViewportThreshold = 0,
}, ref,) {
  const shouldReduceMotion = useReducedMotionConfig();
  const effect = useFXValues(defaultValues(transformTargets, shouldReduceMotion,), styleTransformEffectEnabled,);
  const effectDisabled = !styleTransformEffectEnabled || !transformTargets;
  const triggerOnScroll = transformTrigger === 'onScrollTarget';
  const currentRouteKey = useCurrentRouteKey();
  useLayoutEffect(() => {
    if (effectDisabled || !triggerOnScroll) return;
    return scrollInfo(({
      y: scrollY,
    },) => {
      if (!transformTargets[0] || transformTargets[0].ref && !transformTargets[0].ref.current) {
        return;
      }
      const {
        inputRange: scrollYInputRange,
        effectKeyOutputRange,
      } = createInputOutputRanges(transformTargets, transformViewportThreshold * scrollY.containerLength,);
      if (scrollYInputRange.length === 0) return;
      for (const key7 of effectValuesKeys) {
        if (shouldReduceMotion && key7 !== 'opacity') continue;
        if (scrollYInputRange.length !== effectKeyOutputRange[key7].length) continue;
        if (effectKeyOutputRange[key7][0] === void 0) continue;
        effect.values[key7].set(transform(scrollY.current, scrollYInputRange, effectKeyOutputRange[key7],),);
      }
    },);
  }, [shouldReduceMotion, triggerOnScroll, transformViewportThreshold, transformTargets, effectDisabled,],);
  useRefEffect(ref, (element) => {
    if (effectDisabled || triggerOnScroll || element === null) {
      return;
    }
    const _ = currentRouteKey;
    const outputRange = createPageOutputRange(transformTargets,);
    return scrollInfo(
      ({
        y: scrollY,
      },) => {
        for (const key7 of effectValuesKeys) {
          if (shouldReduceMotion && key7 !== 'opacity') continue;
          if (pageInputRange.length !== outputRange[key7].length) continue;
          if (outputRange[key7][0] === void 0) continue;
          effect.values[key7].set(transform(scrollY.progress, pageInputRange, outputRange[key7],),);
        }
      },
      transformTrigger === 'onInView'
        ? {
          target: element ?? void 0,
          offset: ['start end', 'end end',],
        }
        : void 0,
    );
  }, [currentRouteKey, shouldReduceMotion, transformTrigger, triggerOnScroll, transformTargets, effectDisabled,],);
  useAttachOptionalSpring(effect.values, spring2,);
  useOnRouteChange(() => {
    if (effectDisabled) return;
    const values = defaultValues(transformTargets, shouldReduceMotion,);
    for (const key7 of effectValuesKeys) {
      effect.values[key7].set((values == null ? void 0 : values[key7]) ?? defaultFXValues[key7],);
    }
  },);
  return React4.useMemo(() => {
    return {
      values: effect.values,
      style: styleTransformEffectEnabled ? effectEnabledStyle : effectDisabledStyle,
    };
  }, [styleTransformEffectEnabled,],);
}
var groups = {
  parallax: parallaxOptionsKeys,
  styleAppear: styleAppearOptionsKeys,
  styleTransform: styleTransformOptionsKeys,
  loop: loopOptionsKeys,
  presence: presenceOptionsKeys,
};
var groupValues = /* @__PURE__ */ objectKeys(groups,);
function backwardsCompatibleEnabledCheck(key7, secondaryKey, object,) {
  return !(key7 in object) && secondaryKey in object || object[key7] === true;
}
function extractFXOptions(props,) {
  const result = {
    parallax: {},
    styleAppear: {},
    styleTransform: {},
    presence: {
      animate: props.animate,
      initial: props.initial,
      exit: props.exit,
    },
    loop: {},
    forwardedProps: {},
    targetOpacityValue: props.__targetOpacity,
    withPerspective: props.__perspectiveFX,
    inSmartComponent: props.__smartComponentFX,
  };
  for (const key7 in props) {
    if (key7 === '__targetOpacity' || key7 === '__perspectiveFX' || key7 === '__smartComponentFX') continue;
    const strippedKey = stripPrefixFromPrefixedKey(key7,);
    if (strippedKey) {
      for (const group of groupValues) {
        const keys3 = groups[group];
        if (keys3 == null ? void 0 : keys3.has(strippedKey,)) {
          result[group][strippedKey] = asRecord(props,)[key7];
          break;
        }
      }
    } else {
      result.forwardedProps[key7] = asRecord(props,)[key7];
    }
  }
  result.parallax.parallaxTransformEnabled = backwardsCompatibleEnabledCheck('parallaxTransformEnabled', 'speed', result.parallax,);
  result.styleAppear.styleAppearEffectEnabled = backwardsCompatibleEnabledCheck(
    'styleAppearEffectEnabled',
    'animateOnce',
    result.styleAppear,
  );
  return result;
}
var add2 = (values) => values.reduce((sum, value,) => sum += value, 0,);
var multiply = (values) => values.reduce((sum, value,) => sum = sum * value, 1,);
var reactRefObjectKey = 'current';
function isReactRefObject(value,) {
  return isObject2(value,) && reactRefObjectKey in value;
}
function addMotionValueStyle(style2, values,) {
  if (!style2 || !isObject2(style2,)) return values;
  for (const key7 in style2) {
    const value = style2[key7];
    if (!isMotionValue(value,) || !isFXValuesKey(key7,)) continue;
    if (!isNumber2(value.get(),)) continue;
    values[key7].push(value,);
  }
}
function isVariantOrVariantList2(value,) {
  return isString(value,) || Array.isArray(value,);
}
var withFX = (Component17) =>
  React4.forwardRef((props, forwardedRef,) => {
    var _a;
    if (props.__withFX) {
      return /* @__PURE__ */ jsx3(Component17, {
        ...props,
        animate: void 0,
        initial: void 0,
        exit: void 0,
        ref: forwardedRef,
      },);
    }
    const disabledProps = getDisabledFXPropsInStaticRenderer(props,);
    if (disabledProps) {
      return /* @__PURE__ */ jsx3(Component17, {
        ...props,
        ...disabledProps,
        ref: forwardedRef,
      },);
    }
    const {
      parallax = {},
      styleAppear = {},
      styleTransform = {},
      presence = {},
      loop = {},
      forwardedProps,
      targetOpacityValue,
      withPerspective,
      inSmartComponent = false,
    } = extractFXOptions(props,);
    const observerRef = useObserverRef(forwardedRef,);
    const {
      values: presenceEffectValues,
      style: presenceEffectStyle,
    } = usePresenceAnimation(presence, observerRef, inSmartComponent, props.style, props[optimizedAppearDataAttribute],);
    const {
      values: parallaxValues,
      style: parallaxStyle,
    } = useParallax(parallax, observerRef, (_a = props.style) == null ? void 0 : _a.visibility,);
    const {
      values: transformValues2,
      style: scrollStyle,
    } = useStyleTransform(styleTransform, observerRef,);
    const {
      values: appearEffectValues,
      style: scrollAppearStyle,
    } = useStyleAppearEffect(styleAppear, observerRef,);
    const {
      values: loopValues,
      style: loopStyle,
    } = useLoop(loop, observerRef,);
    const fxValues = React4.useMemo(() => {
      const layerOpacity = new MotionValue(targetOpacityValue ?? 1,);
      return {
        scale: [appearEffectValues.scale, loopValues.scale, presenceEffectValues.scale, transformValues2.scale,],
        opacity: [appearEffectValues.opacity, loopValues.opacity, presenceEffectValues.opacity, layerOpacity, transformValues2.opacity,],
        x: [appearEffectValues.x, loopValues.x, presenceEffectValues.x, transformValues2.x,],
        y: [appearEffectValues.y, loopValues.y, parallaxValues.y, presenceEffectValues.y, transformValues2.y,],
        rotate: [appearEffectValues.rotate, loopValues.rotate, presenceEffectValues.rotate, transformValues2.rotate,],
        rotateX: [appearEffectValues.rotateX, loopValues.rotateX, presenceEffectValues.rotateX, transformValues2.rotateX,],
        rotateY: [appearEffectValues.rotateY, loopValues.rotateY, presenceEffectValues.rotateY, transformValues2.rotateY,],
        skewX: [appearEffectValues.skewX, loopValues.skewX, presenceEffectValues.skewX, transformValues2.skewX,],
        skewY: [appearEffectValues.skewY, loopValues.skewY, presenceEffectValues.skewY, transformValues2.skewY,],
        /** @deprecated */
        transformPerspective: [transformValues2.transformPerspective, appearEffectValues.transformPerspective,// We stopped animating transformPerspective with `withFX`
          // before introducing `useLoop` etc, so it does not have a
          // value here on purpose.
        ],
      };
    }, [targetOpacityValue, transformValues2, parallaxValues, appearEffectValues, loopValues, presenceEffectValues,],);
    addMotionValueStyle(props.style, fxValues,);
    const scale2 = useTransform(fxValues.scale, multiply,);
    const opacity = useTransform(fxValues.opacity, multiply,);
    const x = useTransform(fxValues.x, add2,);
    const y = useTransform(fxValues.y, add2,);
    const rotate2 = useTransform(fxValues.rotate, add2,);
    const rotateX = useTransform(fxValues.rotateX, add2,);
    const rotateY = useTransform(fxValues.rotateY, add2,);
    const skewX = useTransform(fxValues.skewX, add2,);
    const skewY = useTransform(fxValues.skewY, add2,);
    const transformPerspective = useTransform(fxValues.transformPerspective, add2,);
    const {
      drag: drag2,
      dragConstraints,
    } = forwardedProps;
    useRerenderOnResize(drag2 && isReactRefObject(dragConstraints,) ? dragConstraints : void 0,);
    const motionValueStyle = {
      opacity,
      scale: scale2,
      x,
      y,
      rotate: rotate2,
      rotateX,
      rotateY,
      skewX,
      skewY,
    };
    if (isUndefined(withPerspective,)) motionValueStyle.transformPerspective = transformPerspective;
    const animate3 = isVariantOrVariantList2(props.animate,) ? props.animate : void 0;
    const initial = isVariantOrVariantList2(props.initial,) ? props.initial : void 0;
    const exit = isVariantOrVariantList2(props.exit,) ? props.exit : void 0;
    const motionGestures = inSmartComponent && !presence.presenceInitial
      ? {
        initial,
        animate: animate3,
        exit,
      }
      : {};
    return /* @__PURE__ */ jsx3(Component17, {
      ...forwardedProps,
      ...motionGestures,
      __withFX: true,
      style: {
        ...props.style,
        ...parallaxStyle,
        ...scrollStyle,
        ...loopStyle,
        ...motionValueStyle,
        ...scrollAppearStyle,
        ...presenceEffectStyle,
      },
      values: presenceEffectValues,
      ref: observerRef,
    },);
  },);
var withParallaxTransform = withFX;
var withStyleAppearEffect = withFX;
var Context = /* @__PURE__ */ createContext({},);
function ComponentPresetsProvider({
  presets,
  children,
},) {
  const lastPresets = useRef3(presets,);
  if (!isEqual(presets, lastPresets.current, false,)) {
    lastPresets.current = presets;
  }
  return /* @__PURE__ */ jsx3(Context.Provider, {
    value: lastPresets.current,
    children,
  },);
}
function ComponentPresetsConsumer({
  componentIdentifier,
  children,
},) {
  const componentPresets = useContext(Context,);
  const presetProps = componentPresets[componentIdentifier] ?? {};
  return children(presetProps,);
}
var ComponentViewportContext = /* @__PURE__ */ React4.createContext({},);
function useComponentViewport() {
  return React4.useContext(ComponentViewportContext,);
}
var ComponentViewportProvider = /* @__PURE__ */ React4.forwardRef(function ComponentViewportProvider2({
  width,
  height,
  y,
  children,
  ...rest
}, ref,) {
  const componentViewport = React4.useMemo(() => {
    return {
      width,
      height,
      y,
    };
  }, [width, height, y,],);
  const cloneWithPropsAndRef = useCloneChildrenWithPropsAndRef(ref,);
  return /* @__PURE__ */ jsx3(ComponentViewportContext.Provider, {
    value: componentViewport,
    children: cloneWithPropsAndRef(children, rest,),
  },);
},);
var withGeneratedLayoutId = (Component17) =>
  React4.forwardRef((props, ref,) => {
    const layoutId = useLayoutId2(props,);
    return /* @__PURE__ */ jsx3(Component17, {
      layoutId,
      ...props,
      layoutIdKey: void 0,
      duplicatedFrom: void 0,
      ref,
    },);
  },);
var shouldSuspenseBoundariesBeActive = false;
var SynchronousSuspenseErrorBoundary = class extends Component2 {
  constructor() {
    super(...arguments,);
    __publicField(this, 'state', {
      error: void 0,
    },);
  }
  static getDerivedStateFromError(error,) {
    return {
      error,
    };
  }
  // Note: SynchronousSuspenseErrorBoundary is relying on some narrow implementation details of React
  // which we don’t fully understand: https://www.notion.so/framer/SuspenseThatPreservesDOM-1b0adf6e8c968089ae0dc158fc514e6b?pvs=4#1d1adf6e8c96801a9ef2d6f2f0c27f8c
  //
  // As a side effect, `componentDidCatch` is usually *never* executed. If you do see the log below,
  // it means that you’re experiencing a scenario not covered by our tests.
  componentDidCatch(error, errorInfo,) {
    if (!isSuspense426Error(error,)) return;
    const componentStack = errorInfo == null ? void 0 : errorInfo.componentStack;
    console.error(
      'Caught an error in SynchronousSuspenseErrorBoundary:\n\n',
      error,
      '\n\nComponent stack:\n',
      componentStack,
      '\n\nThis error indicates a state update wasn\u2019t wrapped with startTransition. Some of the UI might flash as a result. If you are the author of this website, check recently added custom code, and if the issue persists, report it to the Framer team via https://www.framer.com/contact/.',
    );
    const stack = error instanceof Error && typeof error.stack === 'string' ? error.stack : void 0;
    sendTrackingEvent('published_site_load_recoverable_error', {
      message: String(error,),
      stack,
      // only log componentStack if we don't have a stack
      componentStack: stack ? void 0 : componentStack,
    },);
  }
  render() {
    const error = this.state.error;
    if (error === void 0) return this.props.children;
    if (!isSuspense426Error(error,)) throw error;
    shouldSuspenseBoundariesBeActive = true;
    return this.props.children;
  }
};
function isSuspense426Error(error,) {
  const unminifiedMessage = 'A component suspended while responding to synchronous input.';
  const minifiedMessage = 'Minified React error #426';
  return error instanceof Error && (error.message.includes(unminifiedMessage,) || error.message.includes(minifiedMessage,));
}
var suspendPromise = /* @__PURE__ */ (() => typeof window !== 'undefined' ? new Promise(() => {},) : null)();
function Suspend() {
  if (typeof window === 'undefined' || shouldSuspenseBoundariesBeActive) {
    return /* @__PURE__ */ jsx3('div', {
      hidden: true,
      dangerouslySetInnerHTML: {
        __html: '<!-- SuspenseThatPreservesDOM fallback rendered -->',
      },
    },);
  }
  throw suspendPromise;
}
var suspend = /* @__PURE__ */ jsx3(Suspend, {},);
function SuspenseThatPreservesDom({
  children,
},) {
  return /* @__PURE__ */ jsx3(Suspense2, {
    fallback: suspend,
    children,
  },);
}
function NullFallback() {
  return /* @__PURE__ */ jsx3('div', {
    hidden: true,
    dangerouslySetInnerHTML: {
      __html: '<!-- Code boundary fallback rendered -->',
    },
  },);
}
var nullFallback = /* @__PURE__ */ jsx3(NullFallback, {},);
function collectErrorToAnalytics(error, errorInfo,) {
  if (!isWindow) return;
  if (Math.random() > 0.01) return;
  const stack = error instanceof Error && typeof error.stack === 'string' ? error.stack : null;
  const componentStack = errorInfo == null ? void 0 : errorInfo.componentStack;
  sendTrackingEvent('published_site_load_recoverable_error', {
    message: String(error,),
    stack,
    // only log componentStack if we don't have a stack
    componentStack: stack ? void 0 : componentStack,
  },);
}
function logError(...args) {
  if (false) return;
  console.error(...args,);
}
function shouldEnableCodeBoundaries() {
  return RenderTarget.current() !== RenderTarget.canvas;
}
function CodeComponentBoundary({
  getErrorMessage,
  fallback,
  children,
},) {
  if (!shouldEnableCodeBoundaries()) {
    return children;
  }
  return /* @__PURE__ */ jsx3(ServerSideErrorBoundary, {
    fallback,
    children: /* @__PURE__ */ jsx3(ClientSideErrorBoundary, {
      fallback,
      getErrorMessage,
      children,
    },),
  },);
}
var ClientSideErrorBoundary = class extends Component2 {
  constructor() {
    super(...arguments,);
    __publicField(this, 'state', {
      hasError: false,
    },);
  }
  static getDerivedStateFromError() {
    return {
      hasError: true,
    };
  }
  componentDidCatch(error, errorInfo,) {
    logError(this.props.getErrorMessage(), errorInfo == null ? void 0 : errorInfo.componentStack,);
    collectErrorToAnalytics(error, errorInfo,);
  }
  render() {
    const {
      children,
      fallback = nullFallback,
    } = this.props;
    const {
      hasError,
    } = this.state;
    return hasError ? fallback : children;
  }
};
function ServerSideErrorBoundary({
  children,
  fallback = nullFallback,
},) {
  return typeof window === 'undefined'
    ? // On the server, Suspense fallback is activated by errors. So we use the actual Suspense,
    // and render the actual error fallback if Suspense activates.
    /* @__PURE__ */
    jsx3(Suspense2, {
      fallback,
      children,
    },)
    : // On the client, Suspense fallback is activated by data fetching. So we use SuspenseThatPreservesDom,
    // because we don’t want to render a fallback if the boundary gets inadvertently activated.
    //
    // “Why won’t you just render plain children without Suspense?” Because that would cause a hydration mismatch
    // (the server has Suspense, the client doesn’t).
    /* @__PURE__ */
    jsx3(SuspenseThatPreservesDom, {
      children,
    },);
}
var DeprecatedContainerErrorBoundary = class extends Component2 {
  constructor() {
    super(...arguments,);
    __publicField(this, 'state', {
      hasError: false,
    },);
  }
  // We use `componentDidCatch` instead of `static getDerivedStateFromError()` because the latter could also catch hydration errors.
  // Hydration errors are recoverable by React, so we don't want to hide the coponent in that case (since the tree will not unmount).
  componentDidCatch(error, errorInfo,) {
    const componentStack = errorInfo == null ? void 0 : errorInfo.componentStack;
    console.error(
      'Error in component (see previous log). This component has been hidden. Please check any custom code or code overrides to fix.',
      componentStack,
    );
    this.setState({
      hasError: true,
    },);
    collectErrorToAnalytics(error, errorInfo,);
  }
  render() {
    const {
      children,
    } = this.props;
    const {
      hasError,
    } = this.state;
    return hasError ? null : children;
  }
};
var ExternalComponentContext = /* @__PURE__ */ (() => React4.createContext(void 0,))();
function useNearestExternalComponent() {
  return React4.useContext(ExternalComponentContext,);
}
function useFurthestExternalComponent() {
  const nearestExternalComponent = useNearestExternalComponent();
  const furthestExternalComponent = React4.useMemo(() => {
    if (!nearestExternalComponent) return void 0;
    let item = nearestExternalComponent;
    while (item.parent && item.parent.level > 0) {
      item = item.parent;
    }
    return item;
  }, [nearestExternalComponent,],);
  return furthestExternalComponent;
}
function IsExternalComponent({
  children,
  scopeId,
  nodeId,
},) {
  const parent = useNearestExternalComponent();
  const newValue = React4.useMemo(() => ({
    level: ((parent == null ? void 0 : parent.level) ?? 0) + 1,
    scopeId,
    nodeId,
    parent,
  }), [scopeId, nodeId, parent,],);
  return /* @__PURE__ */ jsx3(ExternalComponentContext.Provider, {
    value: newValue,
    children,
  },);
}
var CRASH_ERROR_MESSAGE_PREFIX = 'code-crash:';
function formatCodeCrashLocationFromSourceNode(scopeId, nodeId,) {
  return `${CRASH_ERROR_MESSAGE_PREFIX}${scopeId}:${nodeId}`;
}
function getErrorMessageForComponent(scopeId, nodeId,) {
  return getErrorMessageFor('component', scopeId, nodeId,);
}
function getErrorMessageForOverride(scopeId, nodeId,) {
  return getErrorMessageFor('override', scopeId, nodeId,);
}
function getErrorMessageFor(element, scopeId, nodeId,) {
  return `A code ${element} crashed while rendering due to the error above. To find and fix it, open the project in the editor \u2192 open Quick Actions (press Cmd+K or Ctrl+K) \u2192 paste this: ${
    formatCodeCrashLocationFromSourceNode(scopeId, nodeId,)
  } \u2192 click \u201CShow Layer\u201D.`;
}
function shouldWrapComponentWithBoundary(
  scopeIdOfThisComponent,
  scopeIdOfNearestExternalComponent,
  externalComponentLevel,
  isAuthoredByUser,
  isExternalComponent,
  inComponentSlot,
) {
  const isLocalComponentInstance = isNodeLocalToProject(
    scopeIdOfThisComponent,
    scopeIdOfNearestExternalComponent,
    externalComponentLevel,
    inComponentSlot,
  );
  return (
    // case 1: all (local instances) of (local) (code components)
    isLocalComponentInstance && !isExternalComponent && isAuthoredByUser ||
    // case 2: all (local instances) of (external components)
    isLocalComponentInstance && isExternalComponent
  );
}
function shouldWrapOverrideWithBoundary(
  scopeIdOfNodeWithOverride,
  scopeIdOfNearestExternalComponent,
  externalComponentLevel,
  inComponentSlot,
) {
  return isNodeLocalToProject(scopeIdOfNodeWithOverride, scopeIdOfNearestExternalComponent, externalComponentLevel, inComponentSlot,);
}
function isNodeLocalToProject(scopeIdOfThisNode, scopeIdOfNearestExternalComponent, externalComponentLevel, inComponentSlot,) {
  if (isUndefined(externalComponentLevel,)) return true;
  const nodeIsDefinedInSameScopeAsExternalComponent = scopeIdOfThisNode === scopeIdOfNearestExternalComponent;
  if (
    // We know a component instance is local when it’s nested inside one external component,
    externalComponentLevel === 1 &&
    // and it lives in a slot,
    inComponentSlot &&
    // and it’s a slot of *that sole external component* (and not some other local component
    // with slots that lives inside the external component).
    nodeIsDefinedInSameScopeAsExternalComponent
  ) {
    return true;
  }
  return false;
}
function useMaybeWrapComponentWithCodeBoundary(children, scopeId, nodeId, isAuthoredByUser, isModuleExternal, inComponentSlot,) {
  const nearestExternalComponent = useNearestExternalComponent();
  if (
    // Those props will either be all undefined, which means the Container hasn’t yet been
    // re-serialized since we introduced code boundaries, and we should use the old
    // ContainerErrorBoundary – or all defined, which means we have enough information to use
    // the new boundary.
    isUndefined(scopeId,) || isUndefined(nodeId,)
  ) {
    return /* @__PURE__ */ jsx3(DeprecatedContainerErrorBoundary, {
      children,
    },);
  }
  const shouldWrapWithBoundary = shouldWrapComponentWithBoundary(
    scopeId,
    nearestExternalComponent == null ? void 0 : nearestExternalComponent.scopeId,
    nearestExternalComponent == null ? void 0 : nearestExternalComponent.level,
    isAuthoredByUser ?? false,
    isModuleExternal ?? false,
    inComponentSlot ?? false,
  );
  if (shouldWrapWithBoundary) {
    children = /* @__PURE__ */ jsx3(CodeComponentBoundary, {
      getErrorMessage: getErrorMessageForComponent.bind(null, scopeId, nodeId,),
      fallback: null,
      children,
    },);
  }
  if (isModuleExternal) {
    children = /* @__PURE__ */ jsx3(IsExternalComponent, {
      scopeId,
      nodeId,
      children,
    },);
  }
  return children;
}
var ContainerInner = /* @__PURE__ */ React4.forwardRef(({
  children,
  layoutId,
  as,
  scopeId,
  nodeId,
  isAuthoredByUser,
  isModuleExternal,
  inComponentSlot,
  ...props
}, ref,) => {
  const outerLayoutId = useConstant2(() => layoutId ? `${layoutId}-container` : void 0);
  const MotionComponent = htmlElementAsMotionComponent(as,);
  const clonedChildren = React4.Children.map(children, (child) => {
    return React4.isValidElement(child,)
      ? React4.cloneElement(child, {
        layoutId,
      },)
      : child;
  },);
  const childrenWithCodeBoundary = useMaybeWrapComponentWithCodeBoundary(
    clonedChildren,
    scopeId,
    nodeId,
    isAuthoredByUser,
    isModuleExternal,
    inComponentSlot,
  );
  return /* @__PURE__ */ jsx3(MotionComponent, {
    layoutId: outerLayoutId,
    ...props,
    ref,
    children: /* @__PURE__ */ jsx3(ComponentContainerContext.Provider, {
      value: true,
      children: /* @__PURE__ */ jsx3(AutomaticLayoutIds, {
        enabled: false,
        children: /* @__PURE__ */ jsx3(LayoutGroup, {
          id: layoutId ?? '',
          inherit: 'id',
          children: childrenWithCodeBoundary,
        },),
      },),
    },),
  },);
},);
var Container = /* @__PURE__ */ withGeneratedLayoutId(ContainerInner,);
var SmartComponentScopedContainer = /* @__PURE__ */ React4.forwardRef((props, ref,) => {
  const {
    as,
    children,
    // Code boundary-specific props
    scopeId,
    nodeId,
    isAuthoredByUser,
    rendersWithMotion,
    isModuleExternal,
    inComponentSlot,
    // Other props, including some possibly used-passed ones
    ...otherProps
  } = props;
  const childrenWithCodeBoundary = useMaybeWrapComponentWithCodeBoundary(
    children,
    scopeId,
    nodeId,
    isAuthoredByUser,
    isModuleExternal,
    inComponentSlot,
  );
  const tagName = props.as ?? 'div';
  if (props.rendersWithMotion) {
    const Component17 = htmlElementAsMotionComponent(tagName,);
    return /* @__PURE__ */ jsx3(Component17, {
      ...otherProps,
      ref,
      style: props.style,
      children: childrenWithCodeBoundary,
    },);
  } else {
    const Component17 = tagName;
    const {
      layoutId,
      layoutDependency,
      ...plainHTMLRenderableProps
    } = otherProps;
    return (
      // Passing `props.style` explicitly to allow TypeScript to narrow the type of `props.style` according
      // to the value of `props.rendersWithMotion`.
      /* @__PURE__ */
      jsx3(Component17, {
        ...plainHTMLRenderableProps,
        ref,
        style: props.style,
        children: childrenWithCodeBoundary,
      },)
    );
  }
},);
var CustomCursorContext = /* @__PURE__ */ createContext({
  onRegisterCursors: () => () => {},
  registerCursors: () => {},
},);
var replaceCursorClassName = 'framer-cursor-none';
var cursorComponentClassName = 'framer-pointer-events-none';
function getActiveDefinitions(map2, previousDefinitions, newDefinitions,) {
  const allCursors = {};
  for (const [, hashes,] of map2) {
    for (const hash2 of hashes) {
      const value = allCursors[hash2] ?? previousDefinitions[hash2] ?? newDefinitions[hash2];
      if (value) allCursors[hash2] = value;
    }
  }
  return allCursors;
}
var CustomCursorContextProvider = /* @__PURE__ */ memo2(function CustomCursorList({
  children,
},) {
  const value = useConstant2(() => {
    const events = /* @__PURE__ */ new Set();
    let allCursors = {};
    const byCaller = /* @__PURE__ */ new Map();
    return {
      onRegisterCursors: (callback) => {
        callback(allCursors,);
        events.add(callback,);
        return () => events.delete(callback,);
      },
      registerCursors: (cursors, id3,) => {
        byCaller.set(id3, Object.keys(cursors,),);
        allCursors = getActiveDefinitions(byCaller, allCursors, cursors,);
        for (const callback of events) callback(allCursors,);
        return () => {
          byCaller.delete(id3,);
        };
      },
    };
  },);
  const shouldReduceMotion = useReducedMotionConfig();
  return /* @__PURE__ */ jsxs(CustomCursorContext.Provider, {
    value,
    children: [children, !shouldReduceMotion && /* @__PURE__ */ jsx3(CustomCursorComponent, {},),],
  },);
},);
var CustomCursorHost =
  /* @__PURE__ */ (() =>
    withCSS(CustomCursorContextProvider, [
      `.${replaceCursorClassName}, .${replaceCursorClassName} * { cursor: none !important; }`,
      `.${cursorComponentClassName}, .${cursorComponentClassName} * { pointer-events: none !important; }`,
    ], 'framer-lib-cursors-host',))();
var staticCursorStyle = /* @__PURE__ */ (() => ({
  position: 'fixed',
  top: 0,
  left: 0,
  zIndex: 12 + 1,
  // Max framer z-index + 1
  pointerEvents: 'none',
}))();
function customCursorReplacesNativeCursor(cursor,) {
  if (!cursor) return false;
  if (cursor.placement || cursor.alignment) return false;
  return true;
}
function valueForCursorAlignment(alignment,) {
  switch (alignment) {
    case 'start':
      return '0%';
    case 'center':
      return '-50%';
    case 'end':
      return '-100%';
    default:
      assertNever(alignment,);
  }
}
function getCenteringTransform(placement, alignment = 'center',) {
  switch (placement) {
    case 'top':
      return `${valueForCursorAlignment(alignment,)}, -100%`;
    case 'right':
      return `0%, ${valueForCursorAlignment(alignment,)}`;
    case 'bottom':
      return `${valueForCursorAlignment(alignment,)}, 0%`;
    case 'left':
      return `-100%, ${valueForCursorAlignment(alignment,)}`;
    default:
      return '-50%, -50%';
  }
}
var portalIdAttribute = 'data-framer-portal-id';
function getCursorHash(x, y,) {
  let el = document.elementFromPoint(x, y,);
  while (el) {
    if (el === document.body) return void 0;
    const value = el.getAttribute('data-framer-cursor',);
    if (value) return value;
    if (el.hasAttribute(portalIdAttribute,)) {
      const id3 = el.getAttribute(portalIdAttribute,);
      el = el.parentElement;
      if (id3) el = document.getElementById(id3,) ?? el;
    } else {
      el = el.parentElement;
    }
  }
  return void 0;
}
function isEmptyObject(object,) {
  for (const _ in object) return false;
  return true;
}
var CustomCursorComponent = /* @__PURE__ */ memo2(function CustomCursorComponent2() {
  const {
    onRegisterCursors,
  } = useContext(CustomCursorContext,);
  const [hasHoverCapability, setHasHoverCapability,] = useState(false,);
  const pointerX = useMotionValue(0,);
  const pointerY = useMotionValue(0,);
  const opacity = useMotionValue(0,);
  const cursorRef = useRef3(null,);
  const internalState = useRef3({
    cursors: {},
    cursorHash: void 0,
  },);
  const forceRender = useForceUpdate2();
  useLayoutEffect(() => {
    const noHoverMQ = safeWindow.matchMedia('(any-hover: none)',);
    function updateRender(e,) {
      if (e.matches) {
        startTransition2(() => setHasHoverCapability(false,));
      } else {
        setHasHoverCapability(true,);
      }
    }
    noHoverMQ.addEventListener('change', updateRender,);
    if (!noHoverMQ.matches) {
      setHasHoverCapability(true,);
    }
    return () => {
      noHoverMQ.removeEventListener('change', updateRender,);
    };
  }, [],);
  useEffect(() => {
    if (!hasHoverCapability) return;
    let x2 = 0;
    let y2 = 0;
    function updateValues() {
      pointerX.set(x2,);
      pointerY.set(y2,);
      animate(opacity, 1, {
        type: 'tween',
        duration: 0.2,
      },);
    }
    const updateVariant = () => {
      if (isEmptyObject(internalState.current.cursors,)) return;
      const hash2 = getCursorHash(x2, y2,);
      if (hash2 !== internalState.current.cursorHash) {
        internalState.current.cursorHash = hash2;
        frame.update(() => forceRender());
      }
    };
    function updateCursor(e,) {
      if (e.pointerType === 'touch') {
        cancelFrame(updateVariant,);
        return;
      }
      frame.read(updateVariant, true,);
      x2 = e.clientX;
      y2 = e.clientY;
      frame.update(updateValues,);
    }
    function fireEventToTarget(e,) {
      if (e.target === cursorRef.current || !cursorRef.current) return;
      const event = new PointerEvent(e.type, {
        bubbles: true,
        cancelable: e.cancelable,
        pointerType: e.pointerType,
        pointerId: e.pointerId,
        composed: e.composed,
        isPrimary: e.isPrimary,
        buttons: e.buttons,
        button: e.button,
      },);
      frame.update(() => {
        var _a;
        (_a = cursorRef.current) == null ? void 0 : _a.dispatchEvent(event,);
      },);
    }
    safeWindow.addEventListener('pointermove', updateCursor,);
    document.addEventListener('pointerdown', fireEventToTarget,);
    document.addEventListener('pointerup', fireEventToTarget,);
    frame.read(updateVariant, true,);
    return () => {
      safeWindow.removeEventListener('pointermove', updateCursor,);
      document.removeEventListener('pointerdown', fireEventToTarget,);
      document.removeEventListener('pointerup', fireEventToTarget,);
      cancelFrame(updateVariant,);
    };
  }, [opacity, pointerX, pointerY, forceRender, hasHoverCapability,],);
  useEffect(() => {
    if (!hasHoverCapability) return;
    function hideCursor() {
      void animate(opacity, 0, {
        type: 'tween',
        duration: 0.2,
      },);
    }
    document.addEventListener('mouseleave', hideCursor,);
    safeWindow.addEventListener('blur', hideCursor,);
    return () => {
      document.removeEventListener('mouseleave', hideCursor,);
      safeWindow.removeEventListener('blur', hideCursor,);
    };
  }, [opacity, hasHoverCapability,],);
  useLayoutEffect(() => {
    function updateCursors(newCursors,) {
      internalState.current.cursors = newCursors;
      internalState.current.cursorHash = !isEmptyObject(newCursors,) ? getCursorHash(pointerX.get(), pointerY.get(),) : null;
      forceRender();
    }
    const unregister = onRegisterCursors(updateCursors,);
    return () => {
      unregister();
      document.body.classList.toggle(replaceCursorClassName, false,);
    };
  }, [pointerX, pointerY, onRegisterCursors, forceRender,],);
  const {
    cursors,
    cursorHash,
  } = internalState.current;
  const cursor = cursorHash ? cursors[cursorHash] : null;
  const replaceNativeCursor = customCursorReplacesNativeCursor(cursor,);
  useLayoutEffect(() => {
    if (!hasHoverCapability) return;
    document.body.classList.toggle(replaceCursorClassName, replaceNativeCursor,);
  }, [replaceNativeCursor, hasHoverCapability,],);
  const Cursor = cursor == null ? void 0 : cursor.component;
  const spring2 = (cursor == null ? void 0 : cursor.transition) ?? {
    duration: 0,
  };
  const sprungX = useSpring(pointerX, spring2,);
  const sprungY = useSpring(pointerY, spring2,);
  const x = useTransform(() => {
    var _a;
    return sprungX.get() + (((_a = cursor == null ? void 0 : cursor.offset) == null ? void 0 : _a.x) ?? 0);
  },);
  const y = useTransform(() => {
    var _a;
    return sprungY.get() + (((_a = cursor == null ? void 0 : cursor.offset) == null ? void 0 : _a.y) ?? 0);
  },);
  const alignment = cursor == null ? void 0 : cursor.alignment;
  const placement = cursor == null ? void 0 : cursor.placement;
  const transformTemplate2 = useCallback((_, t,) => `translate(${getCenteringTransform(placement, alignment,)}) ${t}`, [
    alignment,
    placement,
  ],);
  if (!hasHoverCapability || !cursor || !Cursor) return null;
  return /* @__PURE__ */ jsx3(Cursor, {
    transformTemplate: transformTemplate2,
    style: {
      ...staticCursorStyle,
      x,
      y,
      opacity,
    },
    globalTapTarget: true,
    variant: cursor == null ? void 0 : cursor.variant,
    ref: cursorRef,
    className: cursorComponentClassName,
  },);
},);
function useCustomCursors(webPageCursors,) {
  const {
    registerCursors,
  } = useContext(CustomCursorContext,);
  const cursors = useConstant2(() => webPageCursors);
  const id3 = useId();
  useLayoutEffect(() => {
    return registerCursors(cursors, id3,);
  }, [registerCursors, id3,],);
}
var Polygon = {
  /**
   * Determine if the vertices are ordered clockwise or counter-clockwise. This works for simple
   * (non-self-intersecting) convex polygons. If the polygon is collapsed into a line (signedArea = 0), we consider it
   * clockwise for it works with how Framer draws the polygons.
   * See: https://paulbourke.net/geometry/polygonmesh/
   * @internal */
  isClockwise: (points) => {
    return Polygon.signedArea(points,) <= 0;
  },
  /**
   * Calculate the signed area to determine if the vertices go clockwise or counter clockwise. We flip all the y
   * values because the y axis in our canvas coordinate is fipped.
   * See: https://mathworld.wolfram.com/PolygonArea.html
   * @internal */
  signedArea: (points) => {
    let sum = 0;
    const len = points.length;
    for (let i = 0; i < len; i++) {
      const pointA = points[i];
      const pointB = points[(i + 1) % len];
      if (!pointA || !pointB) continue;
      sum += pointA.x * -pointB.y - pointB.x * -pointA.y;
    }
    return 1 / 2 * sum;
  },
  /**
   * Determine if some Point lies inside (or on) the polygon formed by other
   * Points. The other points must be provided in a clockwise/counter
   * clockwise order otherwise the line segments we create to test the polygon
   * will not be representative.
   *
   * Solution for convex polygons based on:
   * https://www.eecs.umich.edu/courses/eecs380/HANDOUTS/PROJ2/InsidePoly.html
   *
   * We create a line segment for each side of the polygon. The point we are
   * testing must be on or on the same side of each line segment.
   *
   * @internal
   */
  containsPoint: (polygonPoints2, point2,) => {
    var _a, _b, _c, _d;
    let sign = void 0;
    for (let i = 0; i < polygonPoints2.length; i++) {
      if (Point.isEqual(polygonPoints2[i], point2,)) return true;
      const x1 = ((_a = polygonPoints2[i]) == null ? void 0 : _a.x) ?? 0;
      const y1 = ((_b = polygonPoints2[i]) == null ? void 0 : _b.y) ?? 0;
      const i2 = (i + 1) % polygonPoints2.length;
      if (Point.isEqual(polygonPoints2[i2], point2,)) return true;
      const x2 = ((_c = polygonPoints2[i2]) == null ? void 0 : _c.x) ?? 0;
      const y2 = ((_d = polygonPoints2[i2]) == null ? void 0 : _d.y) ?? 0;
      const d = (point2.x - x1) * (y2 - y1) - (point2.y - y1) * (x2 - x1);
      if (d === 0) continue;
      const localSign = d > 0;
      sign ??= localSign;
      if (sign !== localSign) return false;
    }
    return true;
  },
  /** @internal */
  intersects: (pointsA, pointsB,) => {
    if (pointsA.length < 1 || pointsB.length < 1) return false;
    const boundingRectA = Rect.boundingRectFromPoints(pointsA,);
    const boundingRectB = Rect.boundingRectFromPoints(pointsB,);
    if (!Rect.intersects(boundingRectA, boundingRectB,)) return false;
    const edgesA = [];
    const pointsALength = pointsA.length;
    pointsA.forEach((point2, index,) => {
      const nextPoint = pointsA[(index + 1) % pointsALength];
      if (!nextPoint) return;
      edgesA.push(Line(point2, nextPoint,),);
    },);
    const edgesB = [];
    const pointsBLength = pointsB.length;
    pointsB.forEach((point2, index,) => {
      const nextPoint = pointsB[(index + 1) % pointsBLength];
      if (!nextPoint) return;
      edgesB.push(Line(point2, nextPoint,),);
    },);
    for (const edgeA of edgesA) {
      for (const edgeB of edgesB) {
        const intersection2 = Line.intersection(edgeA, edgeB, true,);
        if (intersection2) return true;
      }
    }
    if (Polygon.containsPoint(pointsB, pointsA[0],)) return true;
    if (Polygon.containsPoint(pointsA, pointsB[0],)) return true;
    return false;
  },
  /** @internal */
  contains: (pointsA, pointsB,) => {
    for (let i = 0; i < pointsB.length; i++) {
      if (!Polygon.containsPoint(pointsA, pointsB[i],)) return false;
    }
    return true;
  },
  /** @internal */
  clipToRect: (points, rect,) => {
    const edges = Rect.edges(rect,);
    const seen = /* @__PURE__ */ new Set();
    const count = points.length;
    const clippedPoints = [];
    const originalPoints = [];
    for (let i = 0; i < count; i++) {
      const point2 = points[i];
      const nextPoint = points[(i + 1) % count];
      if (Rect.containsPoint(rect, point2,)) {
        const intersectionKey = keyForPoint(point2,);
        seen.add(intersectionKey,);
        originalPoints.push(point2,);
        if (Rect.containsPoint(rect, nextPoint,)) continue;
      }
      const line = Line(point2, nextPoint,);
      edges.forEach((edge) => {
        const intersection2 = Line.intersection(line, edge, true,);
        if (!intersection2) return;
        const intersectionKey = keyForPoint(intersection2,);
        if (seen.has(intersectionKey,)) return;
        seen.add(intersectionKey,);
        clippedPoints.push(intersection2,);
      },);
    }
    if (clippedPoints.length === 0) return originalPoints;
    Rect.points(rect,).forEach((point2) => {
      if (!Polygon.containsPoint(points, point2,)) return;
      seen.add(keyForPoint(point2,),);
      clippedPoints.push(point2,);
    },);
    return Point.sortClockwise([...originalPoints, ...clippedPoints,],);
  },
};
function keyForPoint(point2,) {
  return `${point2 == null ? void 0 : point2.x}-${point2 == null ? void 0 : point2.y}`;
}
function invertPlacement(placement,) {
  switch (placement) {
    case 'top':
      return 'bottom';
    case 'right':
      return 'left';
    case 'bottom':
      return 'top';
    case 'left':
      return 'right';
    default:
      assertNever(placement,);
  }
}
function preferredOffset(point2, length, max, collisionDetectionPadding = 0,) {
  const min = Math.max(point2, collisionDetectionPadding,);
  if (point2 < min) return min;
  const size = length + collisionDetectionPadding;
  if (min + size > max) return max - size;
  return min;
}
function collisionAxis(placement, rect, windowSize,) {
  switch (placement) {
    case 'top':
    case 'bottom':
      if (rect.y < 0 || rect.y + rect.height > windowSize.height) return 'y';
      return void 0;
    case 'left':
    case 'right':
      if (rect.x < 0 || rect.x + rect.width > windowSize.width) return 'x';
      return void 0;
    default:
      assertNever(placement,);
  }
}
function getPlacementAndOffsetAvoidingScreenCollision(rect, placement, offset, windowSize,) {
  switch (collisionAxis(placement, rect, windowSize,)) {
    case 'x':
      return {
        placement: invertPlacement(placement,),
        x: offset.x * -1,
        y: offset.y,
      };
    case 'y':
      return {
        placement: invertPlacement(placement,),
        x: offset.x,
        y: offset.y * -1,
      };
    default:
      return {
        placement,
        x: offset.x,
        y: offset.y,
      };
  }
}
function getSafePlacementFloatingPositionRect(
  anchor,
  element,
  placement,
  alignment,
  offset,
  collisionDetectionSize,
  collisionDetectionPadding,
) {
  const rebasedRect = Rect.rebaseRectOnto(element, anchor, placement, alignment,);
  const preferredRect = {
    x: rebasedRect.x + offset.x,
    y: rebasedRect.y + offset.y,
    width: element.width,
    height: element.height,
  };
  if (!collisionDetectionSize) return [placement, preferredRect,];
  const {
    x,
    y,
    placement: safePlacement,
  } = getPlacementAndOffsetAvoidingScreenCollision(preferredRect, placement, offset, collisionDetectionSize,);
  const rebasedCollisionRect = Rect.rebaseRectOnto(element, anchor, safePlacement, alignment,);
  return [safePlacement, {
    x: preferredOffset(rebasedCollisionRect.x + x, element.width, collisionDetectionSize.width, collisionDetectionPadding,),
    y: preferredOffset(rebasedCollisionRect.y + y, element.height, collisionDetectionSize.height, collisionDetectionPadding,),
    width: element.width,
    height: element.height,
  },];
}
function preferredPoint(a, b, points,) {
  if (Polygon.containsPoint([b, ...points,], a,)) return b;
  return a;
}
var minInset = 5;
function safeAreaPolygonConstraints(rect,) {
  return {
    constrainX: (value) => Math.min(Math.max(value, rect.x + minInset,), rect.x + rect.width - minInset,),
    constrainY: (value) => Math.min(Math.max(value, rect.y + minInset,), rect.y + rect.height - minInset,),
  };
}
var mouseOffset = 4;
function polygonPoints(
  {
    x,
    y,
  },
  placement,
  rect,
  {
    constrainX,
    constrainY,
  },
) {
  const [tl, bl, tr, br,] = Rect.points(rect,);
  switch (placement) {
    case 'left': {
      const mousePoint = {
        x: constrainX(x - mouseOffset,),
        y,
      };
      return [mousePoint, preferredPoint(br, bl, [mousePoint, tr,],), preferredPoint(tr, tl, [mousePoint, br,],),];
    }
    case 'right': {
      const mousePoint = {
        x: constrainX(x + mouseOffset,),
        y,
      };
      return [mousePoint, preferredPoint(bl, br, [mousePoint, tl,],), preferredPoint(tl, tr, [mousePoint, bl,],),];
    }
    case 'top': {
      const mousePoint = {
        x,
        y: constrainY(y - mouseOffset,),
      };
      return [mousePoint, preferredPoint(bl, tl, [mousePoint, br,],), preferredPoint(br, tr, [mousePoint, bl,],),];
    }
    case 'bottom': {
      const mousePoint = {
        x,
        y: constrainY(y + mouseOffset,),
      };
      return [mousePoint, preferredPoint(tl, bl, [mousePoint, tr,],), preferredPoint(tr, br, [mousePoint, tl,],),];
    }
    default:
      assertNever(placement,);
  }
}
function safeAreaInset(placement, delta,) {
  switch (placement) {
    case 'left':
      return `${Math.min(delta.y, 0,)}px auto auto 0px`;
    case 'right':
      return `${Math.min(delta.y, 0,)}px 0px auto auto`;
    case 'top':
      return `0px auto auto ${Math.min(delta.x, 0,)}px`;
    case 'bottom':
      return `auto auto 0px ${Math.min(delta.x, 0,)}px`;
    default:
      assertNever(placement,);
  }
}
function floatingPositionSafeAreaStyle(x, y, placement, anchorRect, floatingRect,) {
  const minX = Math.min(floatingRect.x, anchorRect.x,);
  const minY = Math.min(floatingRect.y, anchorRect.y,);
  const rect = Rect.merge(anchorRect, floatingRect,);
  const points = polygonPoints(
    {
      x,
      y,
    },
    placement,
    floatingRect,
    safeAreaPolygonConstraints(anchorRect,),
  ).map((point2) => `${point2.x - minX}px ${point2.y - minY}px`).join(', ',);
  return {
    height: `${rect.height}px`,
    width: `${rect.width}px`,
    clipPath: `polygon(${points})`,
    inset: safeAreaInset(placement, Rect.delta(anchorRect, floatingRect,),),
  };
}
function valueForFloatingAlignment(alignment,) {
  switch (alignment) {
    case 'start':
      return 0;
    case 'center':
      return 0.5;
    case 'end':
      return 1;
    default:
      assertNever(alignment,);
  }
}
function motionOriginFromFloatingPosition(placement = 'bottom', alignment = 'center',) {
  switch (placement) {
    case 'top':
      return {
        originX: valueForFloatingAlignment(alignment,),
        originY: 1,
      };
    case 'right':
      return {
        originX: 0,
        originY: valueForFloatingAlignment(alignment,),
      };
    case 'bottom':
      return {
        originX: valueForFloatingAlignment(alignment,),
        originY: 0,
      };
    case 'left':
      return {
        originX: 1,
        originY: valueForFloatingAlignment(alignment,),
      };
    default:
      assertNever(placement,);
  }
}
function domReadGetAncestorInfo(anchorRef,) {
  var _a;
  let el = anchorRef.current;
  const info = {
    position: 'absolute',
    scrolls: false,
  };
  while (el) {
    if ((el == null ? void 0 : el.tagName) === 'BODY') return info;
    if (((_a = getComputedStyle(el,)) == null ? void 0 : _a.position) === 'fixed') info.position = 'fixed';
    if (el.scrollWidth > el.clientWidth || el.scrollHeight > el.clientHeight) info.scrolls = true;
    if (info.scrolls && info.position === 'fixed') return info;
    el = el.parentElement;
  }
  return info;
}
function domReadStartAnimationFrameLoop(onRead,) {
  frame.read(onRead, true,);
  return () => cancelFrame(onRead,);
}
function domWriteCreateUpdateSafeArea(safeAreaRef,) {
  let x = 0;
  let y = 0;
  return (anchorRect, calculatedRect, placement, event,) => {
    var _a;
    if (!((_a = safeAreaRef.current) == null ? void 0 : _a.style)) return;
    x = (event == null ? void 0 : event.clientX) ?? x;
    y = (event == null ? void 0 : event.clientY) ?? y;
    Object.assign(safeAreaRef.current.style, floatingPositionSafeAreaStyle(x, y, placement, anchorRect, calculatedRect,),);
  };
}
function domWriteUpdatePosition(floatingPositionRef, position, rect,) {
  if (!floatingPositionRef.current) return;
  Object.assign(floatingPositionRef.current.style, {
    position,
    visibility: 'visible',
    // Append "px" because we are assigning this object straight to style.
    left: ((rect == null ? void 0 : rect.x) ?? 0) + (position === 'fixed' ? 0 : safeWindow.scrollX) + 'px',
    top: ((rect == null ? void 0 : rect.y) ?? 0) + (position === 'fixed' ? 0 : safeWindow.scrollY) + 'px',
  },);
}
var FloatingStackingContext = /* @__PURE__ */ (() => {
  const Context2 = React4.createContext(/* @__PURE__ */ new Set(),);
  Context2.displayName = 'FloatingStackingContext';
  return Context2;
})();
function useDismissFloatingLayer(anchorRef, floatingPositionRef, safeAreaRef, {
  safeArea,
  onDismiss,
},) {
  const descendantStackingContext = useConstant2(() => /* @__PURE__ */ new Set());
  const ancestorStackingContext = React4.useContext(FloatingStackingContext,);
  const [isPresent2, safeToRemove,] = usePresence();
  React4.useEffect(() => {
    if (isPresent2) {
      if (!floatingPositionRef.current) return;
      floatingPositionRef.current.style.pointerEvents = '';
      ancestorStackingContext.add(floatingPositionRef.current,);
    } else {
      if (!floatingPositionRef.current) return;
      floatingPositionRef.current.style.pointerEvents = 'none';
      ancestorStackingContext.delete(floatingPositionRef.current,);
      safeToRemove();
    }
  }, [isPresent2, safeToRemove, floatingPositionRef, ancestorStackingContext,],);
  React4.useEffect(() => {
    if (!safeArea) {
      const handleEscape = (e) => {
        if (e.key !== 'Escape') return;
        onDismiss();
      };
      safeWindow.addEventListener('keyup', handleEscape,);
      return () => safeWindow.removeEventListener('keyup', handleEscape,);
    }
    let latestEvent;
    function maybeDismiss() {
      if (!latestEvent || descendantStackingContext.size !== 0) return;
      for (const element of document.elementsFromPoint(latestEvent.x, latestEvent.y,)) {
        if (element === anchorRef.current) return;
        if (element === floatingPositionRef.current) return;
        if (element === safeAreaRef.current) return;
      }
      onDismiss();
    }
    function scheduleMaybeDismiss(event,) {
      latestEvent = event;
      frame.read(maybeDismiss,);
    }
    safeWindow.addEventListener('mousemove', scheduleMaybeDismiss,);
    return () => {
      safeWindow.removeEventListener('mousemove', scheduleMaybeDismiss,);
    };
  }, [onDismiss, safeArea, anchorRef, safeAreaRef, floatingPositionRef,],);
  return descendantStackingContext;
}
function makeGetSafePlacementFloatingPositionRect({
  placement,
  alignment,
  offset,
  collisionDetectionSize,
  collisionDetectionPadding,
},) {
  return (anchor, element,) =>
    getSafePlacementFloatingPositionRect(anchor, element, placement, alignment, offset, collisionDetectionSize, collisionDetectionPadding,);
}
function useDynamicMotionOrigin(initialPlacement, alignment,) {
  return useConstant2(() => {
    const {
      originX,
      originY,
    } = motionOriginFromFloatingPosition(initialPlacement, alignment,);
    const origin = {
      x: motionValue(originX,),
      y: motionValue(originY,),
    };
    return [origin, (placement) => {
      const values = motionOriginFromFloatingPosition(placement, alignment,);
      origin.x.set(values.originX,);
      origin.y.set(values.originY,);
    },];
  },);
}
function childrenWithOrigin(child, {
  x,
  y,
},) {
  if (!child || !isReactChild(child,) || !isReactElement(child,)) return null;
  if (!isObject2(child.props.style,) && !isUndefined(child.props.style,)) return null;
  const style2 = {
    ...child.props.style,
    originX: x,
    originY: y,
  };
  return React4.cloneElement(child, {
    style: style2,
  },);
}
var overlayContainerId = 'overlay';
var templateOverlayContainerId = 'template-overlay';
function getPortalContainer(deprecatedSelector, inComponent,) {
  if (inComponent || isUndefined(deprecatedSelector,)) {
    const container2 = document.querySelector(`#${templateOverlayContainerId}`,) ?? document.querySelector(`#${overlayContainerId}`,);
    if (container2) return container2;
  }
  const container = isString(deprecatedSelector,) ? document.querySelector(deprecatedSelector,) : void 0;
  if (container) return container;
  return document.body;
}
function Floating({
  alignment,
  placement,
  safeArea,
  offsetX,
  offsetY,
  anchorRef,
  className: className2,
  children,
  portalSelector,
  zIndex,
  collisionDetection = false,
  collisionDetectionPadding,
  onDismiss,
  ...rest
},) {
  const floatingPositionRef = React4.useRef(null,);
  const safeAreaRef = React4.useRef(null,);
  const contentRef = React4.useRef(null,);
  const [origin, updateOrigin,] = useDynamicMotionOrigin(placement, alignment,);
  React4.useLayoutEffect(() => {
    if (!refHasValue(anchorRef,) || !contentRef.current || !placement || !alignment) return;
    const offset = {
      x: offsetX ?? 0,
      y: offsetY ?? 0,
    };
    let getSafePlacementRect;
    let position;
    let cleanup;
    let cleanupHasRun = false;
    let initialUpdateHasRun = false;
    let anchorRect;
    let elementRect;
    let safePlacement;
    let calculatedRect;
    let scrolls;
    let latestEvent;
    let updateSafeArea;
    const onRender = () => {
      if (cleanupHasRun) return;
      domWriteUpdatePosition(floatingPositionRef, position, calculatedRect,);
      if (safeArea) updateSafeArea(anchorRect, calculatedRect, safePlacement, latestEvent,);
      latestEvent = void 0;
    };
    const initialRender = () => {
      updateSafeArea = domWriteCreateUpdateSafeArea(safeAreaRef,);
      if (latestEvent) {
        onRender();
      } else {
        domWriteUpdatePosition(floatingPositionRef, position, calculatedRect,);
      }
      initialUpdateHasRun = true;
    };
    const onUpdate = () => {
      if (cleanupHasRun) return;
      updateOrigin(safePlacement,);
    };
    const domReadUpdateSafePlacementAndRect = () => {
      if (!getSafePlacementRect || cleanupHasRun) return;
      anchorRect = anchorRef.current.getBoundingClientRect();
      const safePlacementAndRect = getSafePlacementRect(anchorRect, elementRect,);
      safePlacement = safePlacementAndRect[0];
      calculatedRect = safePlacementAndRect[1];
    };
    frame.read(() => {
      if (cleanupHasRun || !contentRef.current) return;
      const ancestorInfo = domReadGetAncestorInfo(anchorRef,);
      position = ancestorInfo.position;
      elementRect = contentRef.current.getBoundingClientRect();
      getSafePlacementRect = makeGetSafePlacementFloatingPositionRect({
        placement,
        alignment,
        offset,
        collisionDetectionSize: collisionDetection
          ? {
            width: safeWindow.innerWidth,
            height: safeWindow.innerHeight,
          }
          : void 0,
        collisionDetectionPadding,
      },);
      domReadUpdateSafePlacementAndRect();
      frame.update(onUpdate,);
      frame.render(initialRender,);
      if (!ancestorInfo.scrolls) return;
      cleanup = domReadStartAnimationFrameLoop(domReadUpdateSafePlacementAndRect,);
    },);
    if (!safeArea) {
      return () => {
        cleanup == null ? void 0 : cleanup();
        cleanupHasRun = true;
      };
    }
    const handleMouseMove = (event) => {
      latestEvent = event;
      if (!initialUpdateHasRun) return;
      frame.read(domReadUpdateSafePlacementAndRect,);
      frame.update(onUpdate, false, true,);
      frame.render(onRender, false, true,);
    };
    const anchor = anchorRef.current;
    anchor.addEventListener('mousemove', handleMouseMove,);
    return () => {
      anchor.removeEventListener('mousemove', handleMouseMove,);
      cleanup == null ? void 0 : cleanup();
      cleanupHasRun = true;
    };
  }, [safeArea, placement, alignment, offsetX, offsetY, anchorRef, collisionDetection, collisionDetectionPadding, updateOrigin,],);
  const descendantContext = useDismissFloatingLayer(anchorRef, floatingPositionRef, safeAreaRef, {
    safeArea,
    onDismiss,
  },);
  const inComponent = useContext(ComponentContainerContext,);
  return ReactDOM.createPortal(
    /* @__PURE__ */ jsxs(motion.div, {
      ref: floatingPositionRef,
      className: className2,
      style: {
        // Start from the top left of the screen to prevent jumps.
        top: 0,
        left: 0,
        // Initially rendered as hidden, but the layout effect will set
        // to visible when the position is calculated.
        visibility: 'hidden',
        width: 'auto',
        height: 'auto',
        position: 'absolute',
        zIndex,
      },
      ...rest,
      children: [
        safeArea
          ? /* @__PURE__ */ jsx3('div', {
            ref: safeAreaRef,
            style: {
              position: 'absolute',
            },
            'data-safearea': true,
          },)
          : // biome-ignore lint/a11y/useKeyWithClickEvents: overlays don't support key events yet.
          /* @__PURE__ */
          jsx3('div', {
            style: {
              position: 'fixed',
              inset: 0,
            },
            'aria-hidden': true,
            onClick: onDismiss,
          },),
        /* @__PURE__ */ jsx3(FloatingStackingContext.Provider, {
          value: descendantContext,
          children: /* @__PURE__ */ jsx3('div', {
            ref: contentRef,
            children: childrenWithOrigin(children, origin,),
          },),
        },),
      ],
    },),
    getPortalContainer(portalSelector, inComponent,),
  );
}
var Instance = /* @__PURE__ */ React4.forwardRef(function Instance2({
  Component: Component17,
  ...props
}, ref,) {
  return Component17
    ? /* @__PURE__ */ jsx3(Component17, {
      ...props,
      ref,
    },)
    : null;
},);
var GracefullyDegradingErrorBoundary = class extends Component2 {
  constructor() {
    super(...arguments,);
    __publicField(this, 'state', {
      error: void 0,
    },);
    __publicField(this, 'message', 'Made UI non-interactive due to an error',);
    __publicField(this, 'messageFatal', 'Fatal error',);
    __publicField(
      this,
      'messageReport',
      'If you are the author of this website, please report this issue to the Framer team via https://www.framer.com/contact/',
    );
  }
  static getDerivedStateFromError(error,) {
    return {
      error,
    };
  }
  componentDidCatch(error,) {
    window.__framer_hadFatalError = true;
    if ('cause' in error) {
      error = error.cause;
    }
    console.error(
      `${isBot ? this.message : this.messageFatal}. ${this.messageReport}. Error:

`,
      error,
    );
    const sampleRate = Math.random();
    if (sampleRate > 0.5) return;
    const stack = error instanceof Error && typeof error.stack === 'string' ? error.stack : null;
    sendTrackingEvent('published_site_load_error', {
      message: String(error,),
      stack,
    },);
  }
  render() {
    var _a, _b;
    const error = this.state.error;
    if (!error) return this.props.children;
    const unwrappedError = 'cause' in error ? error.cause : error;
    const closingHTMLComment = /-->/gu;
    const closingHTMLCommentReplacement = '--!>';
    const dom = isBot ? ((_a = document.getElementById('main',)) == null ? void 0 : _a.innerHTML) || '' : // @FIXME: We should have a UI for fatal error recovery.
    // We don't have a UI for fatal error recovery currently, so we just render nothing for regular users. If we were to throw, React would unmount too.
    // We do render instead of throwing, so that:
    // - `componentDidCatch` runs (if we throw here, it does not)
    // - we can skip logging `Recoverable error during hydration`, because we know it was fatal.
    '';
    return (
      // This has the caveat that we will slightly modify the DOM, but it appears to be fine in this case.
      // The alternative would be to queue a new task that runs after and then set the innerHTML (= avoids the dummy-div), but that means we'll have DOM -> no DOM -> DOM transitions. With the div, we have DOM -> DOM and remove possible race-conditions.
      /* @__PURE__ */
      jsx3('div', {
        style: {
          display: 'contents',
        },
        suppressHydrationWarning: true,
        dangerouslySetInnerHTML: {
          __html:
            `<!-- DOM replaced by GracefullyDegradingErrorBoundary due to "${
              unwrappedError.message.replace(closingHTMLComment, closingHTMLCommentReplacement,)
            }". ${this.messageReport}: --><!-- Stack: ${
              (_b = error.stack) == null ? void 0 : _b.replace(closingHTMLComment, '--!>',)
            } -->` + dom,
        },
      },)
    );
  }
};
var LazyValue = class _LazyValue {
  constructor(resolver,) {
    this.resolver = resolver;
    __publicField(this, 'status',);
  }
  static is(value,) {
    return value instanceof _LazyValue;
  }
  /** Preload the value so it can be read() later. */
  preload() {
    if (this.status) {
      const status = this.status;
      if (status.type !== 'pending') return;
      return status.promise;
    }
    const promise = this.resolver().then((value) => {
      this.status = {
        type: 'fulfilled',
        value,
      };
    }, (error) => {
      this.status = {
        type: 'rejected',
        error,
      };
    },);
    this.status = {
      type: 'pending',
      promise,
    };
    return promise;
  }
  /** Synchronously read the value after calling preload() before. */
  read() {
    const status = this.status;
    if (!status) {
      throw new Error('Need to call preload() before read()',);
    }
    switch (status.type) {
      case 'pending':
        throw new Error('Need to wait for preload() to resolve',);
      case 'fulfilled':
        return status.value;
      case 'rejected':
        throw status.error;
      default:
        assertNever(status,);
    }
  }
  async readAsync() {
    const promise = this.preload();
    if (promise) await promise;
    return this.read();
  }
  use() {
    const promise = this.preload();
    if (promise) throw promise;
    return this.read();
  }
};
function findAnchorElement(target, withinElement,) {
  if (target instanceof HTMLAnchorElement) {
    return target;
  }
  if (target instanceof Element) {
    if (target === withinElement) {
      return null;
    }
    return findAnchorElement(target.parentElement, withinElement,);
  }
  return null;
}
function ChildrenCanSuspend({
  children,
},) {
  return /* @__PURE__ */ jsx3(SuspenseThatPreservesDom, {
    children,
  },);
}
function withChildrenCanSuspend(Component17,) {
  return forwardRef(function withChildrenCanSuspendInner(props, ref,) {
    return /* @__PURE__ */ jsx3(ChildrenCanSuspend, {
      children: /* @__PURE__ */ jsx3(Component17, {
        ...props,
        ref,
      },),
    },);
  },);
}
var linkKey = 'webPageId';
function isLinkToWebPage(link,) {
  return Boolean(link && typeof link === 'object' && linkKey in link,);
}
var PRELOAD_AFTER_MS = 500;
var OBSERVER_THRESHOLD = 0.9;
var LOW_MEMORY_THRESHOLD = 1.7;
var MAX_CONCURRENT_PRELOADS_SLOW_NETWORK = 4;
var MAX_CONCURRENT_PRELOADS_FAST_NETWORK = Infinity;
var nodeToRoute = /* @__PURE__ */ new WeakMap();
var preloadedRoutes = /* @__PURE__ */ new Set();
var routeToNodesInViewport = /* @__PURE__ */ new Map();
function getObserveRouteForPreloadingFn() {
  var _a;
  const connection = __unframerNavigator2.connection || __unframerNavigator2.mozConnection || __unframerNavigator2.webkitConnection || {};
  const lowDeviceMemory = __unframerNavigator2.deviceMemory && __unframerNavigator2.deviceMemory > LOW_MEMORY_THRESHOLD;
  let effectiveType, preloadDisabled, maxPreloadAmount;
  function updateConnection() {
    effectiveType = connection.effectiveType || '';
    preloadDisabled = connection.saveData || effectiveType.includes('2g',);
    maxPreloadAmount = effectiveType === '3g' || lowDeviceMemory
      ? MAX_CONCURRENT_PRELOADS_SLOW_NETWORK
      : MAX_CONCURRENT_PRELOADS_FAST_NETWORK;
  }
  (_a = connection.addEventListener) == null ? void 0 : _a.call(connection, 'change', updateConnection,);
  updateConnection();
  const observer2 = new IntersectionObserver(onPreloadIntersectionChange, {
    threshold: OBSERVER_THRESHOLD,
  },);
  let activePreloadsAmount = 0;
  async function preloadTimeout(route, target,) {
    if (preloadDisabled) return;
    const nodesInViewport = routeToNodesInViewport.get(route,);
    if (!(nodesInViewport == null ? void 0 : nodesInViewport.size) || preloadedRoutes.has(route,)) return;
    ++activePreloadsAmount;
    preloadedRoutes.add(route,);
    const preloadDone = preloadRoute(route,).catch(() => {
      if (false) {
        throw new Error(
          'Error in preloadRoute during preloadTimeout. This should never happen as it introduces bugs. Please make sure preloadRoute does not throw.',
        );
      }
    },);
    observer2.unobserve(target,);
    nodeToRoute.delete(target,);
    for (const node of nodesInViewport) {
      observer2.unobserve(node,);
      nodeToRoute.delete(node,);
    }
    nodesInViewport.clear();
    routeToNodesInViewport.delete(route,);
    await preloadDone;
    --activePreloadsAmount;
  }
  function onPreloadIntersectionChange(entries,) {
    var _a2;
    for (const entry of entries) {
      const target = entry.target;
      const route = nodeToRoute.get(target,);
      if (!route || preloadedRoutes.has(route,)) {
        observer2.unobserve(target,);
        nodeToRoute.delete(target,);
        continue;
      }
      const nodes = routeToNodesInViewport.get(route,);
      const amountOfNodesInViewport = ((_a2 = routeToNodesInViewport.get(route,)) == null ? void 0 : _a2.size) ?? 0;
      if (entry.isIntersecting) {
        if (activePreloadsAmount >= maxPreloadAmount) continue;
        if (nodes) nodes.add(target,);
        else routeToNodesInViewport.set(route, /* @__PURE__ */ new Set([target,],),);
        setTimeout(preloadTimeout.bind(void 0, route, target,), PRELOAD_AFTER_MS,);
      } else {
        if (nodes) nodes.delete(target,);
        if (amountOfNodesInViewport <= 1) routeToNodesInViewport.delete(route,);
      }
    }
  }
  return (route, node,) => {
    if (preloadedRoutes.has(route,)) return;
    nodeToRoute.set(node, route,);
    observer2.observe(node,);
    return () => {
      nodeToRoute.delete(node,);
      observer2.unobserve(node,);
    };
  };
}
var observeRouteForPreloading =
  // this also guards `window`
  !shouldPreloadBasedOnUA || typeof IntersectionObserver === 'undefined' ? null : /* @__PURE__ */ getObserveRouteForPreloadingFn();
var noLocale = Symbol('noLocale',);
var resolveSlugCache = /* @__PURE__ */ new Map();
function resolveSlug(unresolvedSlug, utilsByCollectionId, activeLocale,) {
  var _a, _b;
  const cache2 =
    (_b =
        (_a = resolveSlugCache == null ? void 0 : resolveSlugCache.get((activeLocale == null ? void 0 : activeLocale.id) ?? noLocale,)) ==
            null
          ? void 0
          : _a.get(unresolvedSlug.collectionId,)) == null
      ? void 0
      : _b.get(unresolvedSlug.collectionItemId,);
  if (cache2) return cache2;
  const collectionCache = resolveSlugCache.get((activeLocale == null ? void 0 : activeLocale.id) ?? noLocale,) ?? /* @__PURE__ */ new Map();
  resolveSlugCache.set((activeLocale == null ? void 0 : activeLocale.id) ?? noLocale, collectionCache,);
  const collectionItemCache = collectionCache.get(unresolvedSlug.collectionId,) ?? /* @__PURE__ */ new Map();
  collectionCache.set(unresolvedSlug.collectionId, collectionItemCache,);
  const lazyValue = new LazyValue(async () => {
    try {
      const getUtils = utilsByCollectionId[unresolvedSlug.collectionId];
      if (!getUtils) {
        throw new Error(`Key not found in collection utils for collection id: "${unresolvedSlug.collectionId}"`,);
      }
      const utils = await getUtils();
      if (!utils) throw new Error('Collection does not contain utility functions',);
      const slug = await utils.getSlugByRecordId(unresolvedSlug.collectionItemId, activeLocale ?? void 0,);
      return slug;
    } catch (error) {
      console.warn(`Failed to resolve slug: ${error instanceof Error ? error.message : 'Unknown error'}`,);
      return void 0;
    }
  },);
  collectionItemCache.set(unresolvedSlug.collectionItemId, lazyValue,);
  return lazyValue;
}
async function resolveSlugs(unresolvedPathSlugs, unresolvedHashSlugs, collectionUtils, activeLocale,) {
  async function handleSlugs(unresolvedSlugs,) {
    if (!unresolvedSlugs || !collectionUtils) return {};
    const result = {};
    for (const slugKey in unresolvedSlugs) {
      const unresolvedSlug = unresolvedSlugs[slugKey];
      assert(unresolvedSlug, 'unresolvedSlug should be defined',);
      const lazyValue = resolveSlug(unresolvedSlug, collectionUtils, activeLocale,);
      await lazyValue.preload();
      const value = lazyValue.read();
      if (value) {
        result[slugKey] = value;
      }
    }
    return result;
  }
  const [pathResult, slugResult,] = await Promise.allSettled([handleSlugs(unresolvedPathSlugs,), handleSlugs(unresolvedHashSlugs,),],);
  return {
    path: pathResult.status === 'fulfilled' ? pathResult.value : void 0,
    hash: slugResult.status === 'fulfilled' ? slugResult.value : void 0,
  };
}
function resolveSlugsWithSuspense(unresolvedPathSlugs, unresolvedHashSlugs, collectionUtils, activeLocale,) {
  const promises = [];
  function handleSlugs(unresolvedSlugs,) {
    if (!unresolvedSlugs || !collectionUtils) return void 0;
    const result2 = {};
    for (const slugKey in unresolvedSlugs) {
      const unresolvedSlug = unresolvedSlugs[slugKey];
      assert(unresolvedSlug, 'unresolvedSlug should be defined',);
      const lazyValue = resolveSlug(unresolvedSlug, collectionUtils, activeLocale,);
      const promise = lazyValue.preload();
      if (promise) {
        promises.push(promise,);
      } else {
        const value = lazyValue.read();
        if (value) {
          result2[slugKey] = value;
        }
      }
    }
    return result2;
  }
  const result = {
    path: handleSlugs(unresolvedPathSlugs,),
    hash: handleSlugs(unresolvedHashSlugs,),
  };
  if (promises.length) {
    throw Promise.allSettled(promises,);
  }
  return result;
}
function isInternalURL(href,) {
  if (href === void 0) return false;
  if (href.startsWith('#',) || href.startsWith('/',) || href.startsWith('.',)) return true;
  return false;
}
function isValidURL(href, isInternal,) {
  try {
    const url = new URL(href,);
    return Boolean(url.protocol,);
  } catch {}
  return isInternal;
}
async function findMatchingRouteAttributesForWebPageLink(router, currentRoute, pageLink, activeLocale, implicitPathVariables,) {
  const {
    webPageId,
    hash: hash2,
    pathVariables,
    hashVariables,
    unresolvedHashSlugs,
    unresolvedPathSlugs,
  } = pageLink;
  const resolvedSlugs = await resolveSlugs(unresolvedPathSlugs, unresolvedHashSlugs, router.collectionUtils, activeLocale,);
  return getRouteAttributes(router, currentRoute, webPageId, hash2, implicitPathVariables, pathVariables, hashVariables, resolvedSlugs,);
}
function findMatchingRouteAttributesForWebPageLinkWithSuspense(router, currentRoute, pageLink, activeLocale, implicitPathVariables,) {
  const {
    webPageId,
    hash: hash2,
    pathVariables,
    hashVariables,
    unresolvedHashSlugs,
    unresolvedPathSlugs,
  } = pageLink;
  const resolvedSlugs = resolveSlugsWithSuspense(unresolvedPathSlugs, unresolvedHashSlugs, router.collectionUtils, activeLocale,);
  return getRouteAttributes(router, currentRoute, webPageId, hash2, implicitPathVariables, pathVariables, hashVariables, resolvedSlugs,);
}
function findMatchingRouteAttributesForResolvedPath(router, path, implicitPathVariables,) {
  if (!router.routes || !router.getRoute) {
    return;
  }
  const isInternal = isInternalURL(path,);
  if (!isInternal) {
    return;
  }
  try {
    const [pathnameWithQueryParams, hash2,] = path.split('#', 2,);
    assert(pathnameWithQueryParams !== void 0, 'A href must have a defined pathname.',);
    const [pathname,] = pathnameWithQueryParams.split('?', 2,);
    assert(pathname !== void 0, 'A href must have a defined pathname.',);
    const {
      routeId,
      pathVariables,
    } = inferInitialRouteFromPath(router.routes, pathname,);
    const route = router.getRoute(routeId,);
    if (route) {
      const combinedPathVariables = Object.assign({}, implicitPathVariables, pathVariables,);
      return {
        routeId,
        route,
        href: path,
        // If the link is resolved (in ResolveLink), we trust that the hash is also resolved. Otherwise, it
        // should be resolved by getHashForRoute.
        elementId: hash2,
        pathVariables: combinedPathVariables,
      };
    }
  } catch {}
}
function getRouteAttributes(router, currentRoute, routeId, hash2, implicitPathVariables, pathVariables, hashVariables, resolvedSlugs,) {
  var _a;
  const combinedPathVariables = {
    ...implicitPathVariables,
    ...pathVariables,
    ...(resolvedSlugs == null ? void 0 : resolvedSlugs.path),
  };
  const combinedHashVariables = {
    ...implicitPathVariables,
    ...hashVariables,
    ...(resolvedSlugs == null ? void 0 : resolvedSlugs.hash),
  };
  const route = (_a = router.getRoute) == null ? void 0 : _a.call(router, routeId,);
  const resolvedHref = getPathForRoute(route, {
    currentRoutePath: currentRoute == null ? void 0 : currentRoute.path,
    currentPathVariables: currentRoute == null ? void 0 : currentRoute.pathVariables,
    hash: hash2,
    pathVariables: combinedPathVariables,
    hashVariables: combinedHashVariables,
    preserveQueryParams: router.preserveQueryParams,
    siteCanonicalURL: router.siteCanonicalURL,
  },);
  const resolvedHash = resolvedHref.split('#', 2,)[1];
  return {
    routeId,
    route,
    href: resolvedHref,
    elementId: resolvedHash,
    pathVariables: combinedPathVariables,
  };
}
function getRouteFromPageLink(pageLink, router, currentRoute,) {
  var _a;
  if (isString(pageLink,)) {
    const isInternal = isInternalURL(pageLink,);
    if (!router.routes || !router.getRoute || !currentRoute || !isInternal) {
      return;
    }
    const [pathnameWithQueryParams,] = pageLink.split('#', 2,);
    if (pathnameWithQueryParams === void 0) return;
    const [pathname,] = pathnameWithQueryParams.split('?', 2,);
    if (pathname === void 0) return;
    const {
      routeId,
    } = inferInitialRouteFromPath(router.routes, pathname,);
    return router.getRoute(routeId,);
  }
  const {
    webPageId,
  } = pageLink;
  return (_a = router.getRoute) == null ? void 0 : _a.call(router, webPageId,);
}
var elementKey = 'element';
var collectionKey = 'collection';
var collectionItemIdKey = 'collectionItemId';
var pathVariablesKey = 'pathVariables';
var mediaType = 'framer/page-link,';
function isFramerPageLink(value,) {
  return isString(value,) && value.startsWith(`data:${mediaType}`,);
}
function createFramerPageLink(targetId = null, options = {},) {
  const target = targetId ? targetId : 'none';
  const link = new URL(`data:${mediaType}${target}`,);
  if (options.element) {
    link.searchParams.append(elementKey, options.element,);
  }
  if (options.collectionItem) {
    link.searchParams.append(collectionKey, options.collectionItem.collection,);
    link.searchParams.append(collectionItemIdKey, options.collectionItem.collectionItemId,);
    link.searchParams.append(pathVariablesKey, new URLSearchParams(options.collectionItem.pathVariables,).toString(),);
  }
  return link.href;
}
function parseFramerPageLink(link,) {
  if (!isFramerPageLink(link,)) return;
  try {
    const url = new URL(link,);
    const target = url.pathname.substring(mediaType.length,);
    const searchParams = url.searchParams;
    const element = searchParams.has(elementKey,) ? searchParams.get(elementKey,) : void 0;
    let collectionItem;
    const collection = searchParams.get(collectionKey,);
    const collectionItemId = searchParams.get(collectionItemIdKey,);
    const pathVariablesValue = searchParams.get(pathVariablesKey,);
    if (collection && collectionItemId && pathVariablesValue) {
      const pathVariables = Object.fromEntries(new URLSearchParams(pathVariablesValue,).entries(),);
      collectionItem = {
        collection,
        collectionItemId,
        pathVariables,
      };
    }
    return {
      target: target === 'none' ? null : target,
      /**
       * For historical reason we used to set "element=none" into the
       * datalink, we no longer do that today, but we still keep this code
       * so we could parse legacy links correctly.
       */
      element: element === 'none' ? void 0 : element,
      collectionItem,
    };
  } catch {
    return;
  }
}
function shouldOpenLinkInNewTab(link,) {
  return !isFramerPageLink(link,);
}
function navigateFromAttributes(navigate, element, implicitPathVariables,) {
  var _a;
  let routeId = element.getAttribute('data-framer-page-link-target',/* Page */
  );
  let elementId;
  let pathVariables;
  if (routeId) {
    elementId = element.getAttribute('data-framer-page-link-element',/* Element */
    ) ?? void 0;
    const pathVariablesRaw = element.getAttribute('data-framer-page-link-path-variables',/* PathVariables */
    );
    if (pathVariablesRaw) {
      pathVariables = Object.fromEntries(new URLSearchParams(pathVariablesRaw,).entries(),);
    }
  } else {
    const href = element.getAttribute('href',);
    if (!href) return false;
    const link = parseFramerPageLink(href,);
    if (!link || !link.target) return false;
    routeId = link.target;
    elementId = link.element ?? void 0;
    pathVariables = (_a = link.collectionItem) == null ? void 0 : _a.pathVariables;
  }
  const smoothScroll = elementId ? element.dataset.framerSmoothScroll !== void 0 : void 0;
  navigate(routeId, elementId, Object.assign({}, implicitPathVariables, pathVariables,), smoothScroll,);
  return true;
}
function linkFromFramerPageLink(link,) {
  if (!isFramerPageLink(link,)) return link;
  const parsed = parseFramerPageLink(link,);
  if (!parsed) return void 0;
  const {
    target,
    element,
    collectionItem,
  } = parsed;
  if (!target) return void 0;
  return {
    webPageId: target,
    hash: element ?? void 0,
    pathVariables: createVariablesFromPageLinkCollectionItem(collectionItem,),
  };
}
function createVariablesFromPageLinkCollectionItem(collectionItem,) {
  if (!collectionItem) return void 0;
  const variables = {};
  for (const pathVariablesKey2 in collectionItem.pathVariables) {
    const value = collectionItem.pathVariables[pathVariablesKey2];
    if (value) variables[pathVariablesKey2] = value;
  }
  return variables;
}
var pathVariablesRegExp2 = /:([a-z]\w*)/gi;
var PathVariablesContext = /* @__PURE__ */ createContext(void 0,);
function useImplicitPathVariables() {
  var _a;
  const contextPathVariables = useContext(PathVariablesContext,);
  const currentPathVariables = (_a = useCurrentRoute()) == null ? void 0 : _a.pathVariables;
  const pathVariables = contextPathVariables || currentPathVariables;
  return pathVariables;
}
function linkMatchesRoute(route, {
  webPageId,
  hash: hash2,
  pathVariables,
}, implicitPathVariables,) {
  if (webPageId !== route.id) return false;
  if (hash2) return false;
  if (route.path && route.pathVariables) {
    const combinedPathVariable = Object.assign({}, implicitPathVariables, pathVariables,);
    for (const [, key7,] of route.path.matchAll(pathVariablesRegExp2,)) {
      if (!key7) return false;
      if (route.pathVariables[key7] !== combinedPathVariable[key7]) {
        return false;
      }
    }
  }
  return true;
}
function useLinkMatchesRoute(link,) {
  const route = useCurrentRoute();
  const contextPathVariables = useContext(PathVariablesContext,);
  if (!route) return false;
  const pageLink = isString(link,) ? linkFromFramerPageLink(link,) : link;
  return isLinkToWebPage(pageLink,) ? linkMatchesRoute(route, pageLink, contextPathVariables,) : false;
}
var AnchorLinkTarget = /* @__PURE__ */ ((AnchorLinkTarget2) => {
  AnchorLinkTarget2['_blank'] = '_blank';
  AnchorLinkTarget2['_self'] = '_self';
  return AnchorLinkTarget2;
})(AnchorLinkTarget || {},);
function propsForLink(href, options,) {
  const isInternal = isInternalURL(href,);
  const props = {
    href: href === '' || isValidURL(href, isInternal,) ? href : `https://${href}`,
    target: getTargetAttrValue(options == null ? void 0 : options.openInNewTab, isInternal,),
    rel: !isInternal ? combineRels('noopener', options == null ? void 0 : options.rel,) : void 0,
  };
  if (options == null ? void 0 : options.preserveParams) {
    props.href = forwardCurrentQueryParams(props.href ?? href,);
    props['data-framer-preserve-params'] = true;
  }
  if (options == null ? void 0 : options.trackLinkClick) {
    props.onClick = () => {
      void options.trackLinkClick(href,);
    };
  }
  return props;
}
function getTargetAttrValue(openInNewTab, isInternal,) {
  if (openInNewTab !== void 0) {
    return openInNewTab ? '_blank' : void 0;
  }
  return isInternal ? void 0 : '_blank';
}
function combineRels(rel, otherRel,) {
  if (rel && !otherRel) return rel;
  if (!rel && otherRel) return otherRel;
  if (rel && otherRel) return `${rel} ${otherRel}`;
  return void 0;
}
function linkInfoKey(link,) {
  var _a, _b;
  return `${link.scopeId}:${link.nodeId}:${(_a = link.furthestExternalComponent) == null ? void 0 : _a.scopeId}:${
    (_b = link.furthestExternalComponent) == null ? void 0 : _b.nodeId
  }`;
}
var NestedLinksCollector = class {
  constructor() {
    __publicField(this, 'collectedLinks', /* @__PURE__ */ new Map(),);
    __publicField(this, 'nestingInfo', /* @__PURE__ */ new Map(),);
  }
  clear() {
    this.collectedLinks.clear();
    this.nestingInfo.clear();
  }
  /**
   * Returns a Map of outer links to their inner links.
   *
   * NOTE: This function is called in the SSG renderer sandbox (<root>/src/ssg/src/ssg-sandbox-renderer/sandbox/worker/renderer.ts)
   */
  getLinks() {
    const result = /* @__PURE__ */ new Map();
    for (const [outerLinkKey, innerLinkKeys,] of this.nestingInfo) {
      const outerLinkInfo = this.collectedLinks.get(outerLinkKey,);
      assert(outerLinkInfo, `Outer link not found: ${outerLinkKey}`,);
      const links = Array.from(innerLinkKeys,).map((innerLinkKey) => {
        const innerLinkInfo = this.collectedLinks.get(innerLinkKey,);
        assert(innerLinkInfo, `Inner link not found: ${innerLinkKey}`,);
        return innerLinkInfo;
      },);
      result.set(outerLinkInfo, links,);
    }
    return result;
  }
  collectNestedLink(outerLink, innerLink,) {
    if (isWindow && !isTest() || !outerLink.nodeId || !innerLink.nodeId) {
      return;
    }
    this.collectedLinks.set(linkInfoKey(outerLink,), outerLink,);
    this.collectedLinks.set(linkInfoKey(innerLink,), innerLink,);
    const outerLinkNestingInfo = this.nestingInfo.get(linkInfoKey(outerLink,),) ?? /* @__PURE__ */ new Set();
    outerLinkNestingInfo.add(linkInfoKey(innerLink,),);
    this.nestingInfo.set(linkInfoKey(outerLink,), outerLinkNestingInfo,);
  }
};
var nestedLinksCollector = /* @__PURE__ */ new NestedLinksCollector();
function useIsOnFramerCanvas() {
  return RenderTarget.current() === RenderTarget.canvas;
}
var OuterLinkContext = /* @__PURE__ */ createContext(void 0,);
function useReplaceNestedLinks(children, scopeId, nodeId, href, propsAddedByLink, observerRef,) {
  const outerLink = useContext(OuterLinkContext,);
  const furthestExternalComponent = useFurthestExternalComponent();
  const innerLink = useMemo2(() => ({
    scopeId,
    nodeId,
    furthestExternalComponent,
  }), [scopeId, nodeId, furthestExternalComponent,],);
  const router = useRouter();
  const currentRoute = useCurrentRoute();
  const route = useMemo2(() => {
    const pageLink = isLinkToWebPage(href,) ? href : linkFromFramerPageLink(href,);
    if (!pageLink) return;
    return getRouteFromPageLink(pageLink, router, currentRoute,);
  }, [currentRoute, href, router,],);
  const {
    replaceNestedLinks,
  } = useLibraryFeatures();
  const isOnFramerCanvas = useIsOnFramerCanvas();
  const shouldReplaceLink = Boolean(
    replaceNestedLinks && !isOnFramerCanvas && (outerLink == null ? void 0 : outerLink.nodeId) && innerLink.nodeId,
  );
  const onClick = useCallback((event) => {
    var _a;
    if (!propsAddedByLink.href) return;
    event.preventDefault();
    event.stopPropagation();
    const isAppleDevice = /Mac|iPod|iPhone|iPad/u.test(__unframerNavigator2.userAgent,);
    if (isAppleDevice ? event.metaKey : event.ctrlKey) {
      openExternalLink(propsAddedByLink.href, '', '_blank',);
      return;
    }
    if (route) {
      (_a = propsAddedByLink.navigate) == null ? void 0 : _a.call(propsAddedByLink,);
    } else {
      openExternalLink(propsAddedByLink.href, propsAddedByLink.rel, propsAddedByLink.target,);
    }
  }, [propsAddedByLink, route,],);
  const onAuxClick = useCallback((event) => {
    if (!propsAddedByLink.href) return;
    event.preventDefault();
    event.stopPropagation();
    openExternalLink(propsAddedByLink.href, '', '_blank',);
  }, [propsAddedByLink,],);
  const onKeyDown = useCallback((event) => {
    var _a;
    if (!propsAddedByLink.href) return;
    if (event.key !== 'Enter') return;
    event.preventDefault();
    event.stopPropagation();
    if (route) {
      (_a = propsAddedByLink.navigate) == null ? void 0 : _a.call(propsAddedByLink,);
    } else {
      openExternalLink(propsAddedByLink.href, propsAddedByLink.rel, propsAddedByLink.target,);
    }
  }, [propsAddedByLink, route,],);
  useRefEffect(observerRef, (node) => {
    if (node === null) return;
    if (!shouldReplaceLink) return;
    node.dataset.hydrated = 'true';
  }, [shouldReplaceLink,],);
  let replacedChildren = children;
  if (shouldReplaceLink) {
    Children.forEach(children, (child) => {
      if (!isChildReplaceable(child,)) return;
      assert(
        linkInfoIsCollectable(outerLink,),
        'outerLink must have nodeId defined at this point; this was verified with `shouldReplaceLink` above',
      );
      assert(
        linkInfoIsCollectable(innerLink,),
        'innerLink must have nodeId defined at this point; this was verified with `shouldReplaceLink` above',
      );
      nestedLinksCollector.collectNestedLink(outerLink, innerLink,);
    },);
    replacedChildren = Children.map(children, (child) => {
      if (!isChildReplaceable(child,)) return child;
      const tag = maybeReplaceAnchorWithSpan(child.type,);
      const {
        children: childChildren,
        ...childProps
      } = child.props;
      const props = {
        ...childProps,
        // This attribute is used in `ssg/src/ssg-sandbox-renderer/worker/nestedLinks.ts` to handle the nested links clicks
        'data-nested-link': true,
        role: 'link',
        tabIndex: 0,
        onClick,
        onAuxClick,
        onKeyDown,
        as: childProps.as && maybeReplaceAnchorWithSpan(childProps.as,),
      };
      const ref = 'ref' in child ? child.ref : void 0;
      return createElement(tag, // We need to pass the ref here again, otherwise it will be lost
      {
        ...props,
        ref,
      }, childChildren,);
    },);
  }
  return /* @__PURE__ */ jsx3(OuterLinkContext.Provider, {
    value: innerLink,
    children: replacedChildren,
  },);
}
function linkInfoIsCollectable(linkInfo,) {
  return !isUndefined(linkInfo == null ? void 0 : linkInfo.nodeId,);
}
function isChildReplaceable(child,) {
  return isValidElement(child,) &&
    (maybeReplaceAnchorWithSpan(child.type,) !== child.type || maybeReplaceAnchorWithSpan(child.props.as,) !== child.props.as);
}
function openExternalLink(href, rel, target,) {
  const link = document.createElement('a',);
  link.href = href;
  if (rel) {
    link.rel = rel;
  }
  if (target) {
    link.target = target;
  }
  document.body.appendChild(link,);
  link.click();
  link.remove();
}
function maybeReplaceAnchorWithSpan(component,) {
  if (component === 'a') return 'span';
  if (isMotionComponent(component,) && unwrapMotionComponent(component,) === 'a') return motion.span;
  return component;
}
function useTrackLinkClick({
  nodeId,
  clickTrackingId,
  router,
  href,
  activeLocale,
},) {
  return useCallback(async (hrefAttribute) => {
    var _a, _b, _c, _d, _e;
    if (!((_a = router.pageviewEventData) == null ? void 0 : _a.current)) return;
    const pageviewEventData = router.pageviewEventData.current;
    const pageLink = isLinkToWebPage(href,) ? href : linkFromFramerPageLink(href,);
    if (!isLinkToWebPage(pageLink,)) {
      return sendTrackingEvent('published_site_click', {
        ...pageviewEventData,
        href: hrefAttribute ? makeUrlAbsolute(hrefAttribute,) : null,
        nodeId: nodeId ?? null,
        trackingId: clickTrackingId ?? null,
        targetRoutePath: null,
        targetWebPageId: null,
        targetCollectionItemId: null,
      }, 'eager',);
    }
    const targetWebPageId = pageLink.webPageId;
    const targetRoute = (_b = router == null ? void 0 : router.getRoute) == null ? void 0 : _b.call(router, targetWebPageId,);
    const targetRoutePath = (targetRoute == null ? void 0 : targetRoute.path) ?? null;
    let targetCollectionItemId = null;
    if (
      (targetRoute == null ? void 0 : targetRoute.collectionId) && pageLink.pathVariables &&
      ((_c = router.collectionUtils) == null ? void 0 : _c[targetRoute.collectionId])
    ) {
      const utils = await ((_e = (_d = router.collectionUtils)[targetRoute.collectionId]) == null ? void 0 : _e.call(_d,));
      const [slug,] = Object.values(pageLink.pathVariables,);
      if (utils && typeof slug === 'string') {
        targetCollectionItemId = (await utils.getRecordIdBySlug(slug, activeLocale || void 0,)) ?? null;
      }
    }
    return sendTrackingEvent('published_site_click', {
      ...pageviewEventData,
      href: hrefAttribute ? makeUrlAbsolute(hrefAttribute,) : null,
      nodeId: nodeId ?? null,
      trackingId: clickTrackingId ?? null,
      targetRoutePath,
      targetWebPageId,
      targetCollectionItemId,
    }, 'eager',);
  }, [nodeId, clickTrackingId, router, href, activeLocale,],);
}
function makeUrlAbsolute(href,) {
  try {
    const url = new URL(href, safeWindow.document.baseURI,);
    return url.origin === safeWindow.location.origin ? url.pathname + url.search + url.hash : url.href;
  } catch {
    return href;
  }
}
function performNavigation(router, routeId, elementId, combinedPathVariables, smoothScroll, beforeUrlUpdate,) {
  var _a, _b;
  const route = (_a = router.getRoute) == null ? void 0 : _a.call(router, routeId,);
  if (route && isLazyComponentType(route == null ? void 0 : route.page,)) {
    void route.page.preload();
  }
  (_b = router.navigate) == null ? void 0 : _b.call(router, routeId, elementId, combinedPathVariables, smoothScroll, beforeUrlUpdate,);
}
function createOnClickLinkHandler(router, routeId, href, trackLinkClick, elementId, combinedPathVariables, smoothScroll,) {
  return async (event) => {
    const usedMetaKey = event.metaKey;
    const anchorElement = findAnchorElement(event.target,);
    const isExternalLink = !anchorElement || anchorElement.getAttribute('target',) === '_blank';
    const shouldPerformNavigation = !usedMetaKey && !isExternalLink;
    const track = () => void trackLinkClick(href,);
    if (!shouldPerformNavigation) {
      await yieldToMain({
        priority: 'user-blocking',
        ensureContinueBeforeUnload: true,
        continueAfter: 'paint',
      },);
      track();
      return;
    }
    event.preventDefault();
    performNavigation(router, routeId, elementId, combinedPathVariables, smoothScroll, track,);
  };
}
function propsForRoutePath(href, router, currentRoute, linkOptions, implicitPathVariables,) {
  if (!currentRoute) return propsForLink(href, linkOptions,);
  const matchedRoute = findMatchingRouteAttributesForResolvedPath(router, href, implicitPathVariables,);
  if (!matchedRoute) return propsForLink(href, linkOptions,);
  const {
    routeId,
    route,
    elementId,
    pathVariables,
  } = matchedRoute;
  if (!route) return propsForLink(href, linkOptions,);
  const path = getPathForRoute(route, {
    // If the link is resolved, we trust that the slugs are resolved.
    currentRoutePath: currentRoute.path,
    currentPathVariables: currentRoute.pathVariables,
    // The hash value is already fully resolved so we don't need to
    // provide any hashVariables.
    hash: elementId,
    pathVariables,
    preserveQueryParams: router.preserveQueryParams && !isBot,
    // don't preserve query params for bots
    siteCanonicalURL: router.siteCanonicalURL,
  },);
  const anchorTarget = getTargetAttrValue(linkOptions.openInNewTab, true,);
  return {
    href: path,
    target: anchorTarget,
    onClick: createOnClickLinkHandler(
      router,
      routeId,
      path,
      linkOptions.trackLinkClick,
      elementId,
      pathVariables,
      linkOptions.smoothScroll,
    ),
    navigate: () => performNavigation(router, routeId, elementId, pathVariables, linkOptions.smoothScroll,),
    'data-framer-page-link-current': !elementId && currentRoute.id === routeId || void 0,
  };
}
var Link = /* @__PURE__ */ withChildrenCanSuspend(/* @__PURE__ */ forwardRef(function Link2({
  children,
  href,
  openInNewTab,
  smoothScroll,
  clickTrackingId,
  relValues,
  preserveParams,
  nodeId,
  scopeId,
  motionChild,
  ...restProps
}, forwardedRef,) {
  const router = useRouter();
  const currentRoute = useCurrentRoute();
  const implicitPathVariables = useImplicitPathVariables();
  const {
    activeLocale,
  } = useLocaleInfo();
  const trackLinkClick = useTrackLinkClick({
    nodeId,
    clickTrackingId,
    router,
    href,
    activeLocale,
  },);
  const propsAddedByLink = useMemo2(() => {
    if (!href) return {};
    const pageLink = isLinkToWebPage(href,) ? href : linkFromFramerPageLink(href,);
    if (!pageLink) return {};
    if (isString(pageLink,)) {
      return propsForRoutePath(pageLink, router, currentRoute, {
        openInNewTab,
        trackLinkClick,
        rel: relValues == null ? void 0 : relValues.join(' ',),
        preserveParams,
        smoothScroll,
      }, implicitPathVariables,);
    }
    const {
      routeId,
      href: resolvedHref,
      elementId,
      pathVariables,
    } = findMatchingRouteAttributesForWebPageLinkWithSuspense(router, currentRoute, pageLink, activeLocale, implicitPathVariables,);
    const anchorTarget = getTargetAttrValue(openInNewTab, true,);
    return {
      href: resolvedHref,
      target: anchorTarget,
      onClick: createOnClickLinkHandler(router, routeId, resolvedHref, trackLinkClick, elementId, pathVariables, smoothScroll,),
      navigate: () => performNavigation(router, routeId, elementId, pathVariables, smoothScroll,),
      'data-framer-page-link-current': currentRoute && linkMatchesRoute(currentRoute, pageLink, implicitPathVariables,) || void 0,
    };
  }, [
    href,
    router,
    activeLocale,
    implicitPathVariables,
    openInNewTab,
    currentRoute,
    smoothScroll,
    trackLinkClick,
    relValues,
    preserveParams,
  ],);
  const hasRef = isValidElement(children,) && 'ref' in children;
  const observerRef = useObserverRef(hasRef ? children.ref : void 0,);
  useRefEffect(observerRef, (node) => {
    var _a;
    if (node === null) return;
    const pageLink = isLinkToWebPage(href,) ? href : linkFromFramerPageLink(href,);
    if (!pageLink) return;
    const route = getRouteFromPageLink(pageLink, router, currentRoute,);
    if (!route) return;
    return (_a = observeRouteForPreloading) == null ? void 0 : _a(route, node,);
  }, [currentRoute, href, router,],);
  let replacedChildren = children;
  const {
    navigate,
    ...propsAddedByLinkExceptNavigate
  } = propsAddedByLink;
  const isInternalNavigation = Boolean(navigate,);
  const clone = useCloneChildrenWithPropsAndRef(forwardedRef,);
  replacedChildren = clone.cloneAsArray(replacedChildren, (childProps) =>
    cloneChildPropsWithAggregatedEvents(childProps, {
      ...restProps,
      ...rebindEventHandlersIfNeeded(propsAddedByLinkExceptNavigate, motionChild, isInternalNavigation,),
    }, observerRef,),);
  replacedChildren = useReplaceNestedLinks(replacedChildren, scopeId, nodeId, href, propsAddedByLink, observerRef,);
  return replacedChildren;
},),);
function cloneChildPropsWithAggregatedEvents(childProps, linkProps, observerRef,) {
  const aggregatedProps = {
    ...childProps,
    ...linkProps,
    ref: observerRef,
  };
  const {
    onTap,
    onClick,
  } = linkProps;
  if (!onTap && !onClick) {
    return aggregatedProps;
  }
  const {
    onClick: childOnClick,
    onTap: childOnTap,
  } = childProps;
  return {
    ...aggregatedProps,
    onClick: onClick || childOnClick
      ? (event) => {
        if (isFunction(childOnClick,)) {
          childOnClick == null ? void 0 : childOnClick(event,);
        }
        onClick == null ? void 0 : onClick(event,);
      }
      : void 0,
    onTap: onTap || childOnTap
      ? (event, info,) => {
        if (isFunction(childOnTap,)) {
          childOnTap == null ? void 0 : childOnTap(event, info,);
        }
        onTap == null ? void 0 : onTap(event, info,);
      }
      : void 0,
  };
}
function rebindEventHandlersIfNeeded(linkProps, motionChild, isInternalNavigation,) {
  const shouldReplaceClickWithTap = Boolean(motionChild && isIOS(),);
  if (!shouldReplaceClickWithTap) return linkProps;
  const {
    onClick,
    ...restProps
  } = linkProps;
  if (!onClick) return linkProps;
  if (isInternalNavigation) {
    return {
      ...restProps,
      onTap: onClick,
      // When the link is an internal link, we're already doing SPA routing in onClick
      // prevent the default click behavior so that we don't trigger a native anchor link navigation again.
      onClick: preventClickOnNativeAnchorLink,
    };
  }
  return {
    ...restProps,
    onTap: onClick,
  };
}
function preventClickOnNativeAnchorLink(event,) {
  const anchorElement = findAnchorElement(event.target,);
  if (!anchorElement || anchorElement.getAttribute('target',) === '_blank') return;
  event.preventDefault();
}
function resolveLink(href, router, implicitPathVariables,) {
  return resolveLinkInternal(href, router, implicitPathVariables,);
}
function resolveLinkInternal(href, router, implicitPathVariables, onlyHash, resolveSlugs2,) {
  const pageLink = isLinkToWebPage(href,) ? href : linkFromFramerPageLink(href,);
  if (!isLinkToWebPage(pageLink,)) return isString(href,) ? propsForLink(href,).href : void 0;
  if (!router.getRoute || !router.currentRouteId) return void 0;
  const currentRoute = router.getRoute(router.currentRouteId,);
  const {
    webPageId,
    hash: hash2,
    pathVariables,
    hashVariables,
    unresolvedHashSlugs,
    unresolvedPathSlugs,
  } = pageLink;
  const route = router.getRoute(webPageId,);
  const resolvedSlugs = unresolvedPathSlugs || unresolvedHashSlugs
    ? resolveSlugs2 == null ? void 0 : resolveSlugs2(unresolvedPathSlugs, unresolvedHashSlugs,)
    : void 0;
  const combinedPathVariables = Object.assign(
    {},
    router.currentPathVariables,
    implicitPathVariables,
    pathVariables,
    resolvedSlugs == null ? void 0 : resolvedSlugs.path,
  );
  const combinedHashVariables = Object.assign(
    {},
    router.currentPathVariables,
    implicitPathVariables,
    hashVariables,
    resolvedSlugs == null ? void 0 : resolvedSlugs.hash,
  );
  return getPathForRoute(route, {
    currentRoutePath: currentRoute == null ? void 0 : currentRoute.path,
    currentPathVariables: router.currentPathVariables,
    hash: hash2,
    pathVariables: combinedPathVariables,
    hashVariables: combinedHashVariables,
    relative: false,
    preserveQueryParams: router.preserveQueryParams,
    onlyHash,
    siteCanonicalURL: router.siteCanonicalURL,
  },);
}
function resolvePageScope(pageLink, router,) {
  if (!router.getRoute || !router.currentRouteId) return void 0;
  const currentRoute = router.getRoute(router.currentRouteId,);
  const {
    webPageId,
  } = pageLink;
  const route = router.getRoute(webPageId,);
  return getPathForRoute(route, {
    currentRoutePath: currentRoute == null ? void 0 : currentRoute.path,
    currentPathVariables: router.currentPathVariables,
    relative: false,
    preserveQueryParams: false,
    siteCanonicalURL: void 0,
  },);
}
var IgnoreErrors = class extends Component2 {
  constructor() {
    super(...arguments,);
    __publicField(this, 'state', {
      error: void 0,
    },);
  }
  static getDerivedStateFromError(error,) {
    return {
      error,
    };
  }
  render() {
    if (this.state.error) return null;
    return this.props.children;
  }
};
var salt = 'framer';
var difficulty = 3;
var tokenLength = 30;
var maxTime = 1e4;
async function calculateProofOfWork() {
  const target = '0'.repeat(difficulty,);
  const startTime = Date.now();
  let processing = true;
  while (processing) {
    const timestamp = Date.now();
    if (timestamp - startTime > maxTime) {
      processing = false;
      return;
    }
    const nonce = randomCharacters(tokenLength,);
    const secret = `${timestamp}:${nonce}`;
    const hash2 = await sha256(salt + secret,);
    if (hash2.startsWith(target,)) {
      return {
        secret,
        hash: hash2,
      };
    }
  }
  return;
}
async function sha256(text,) {
  const buffer = new TextEncoder().encode(text,);
  const hashBuffer = await crypto.subtle.digest('SHA-256', buffer,);
  return Array.from(new Uint8Array(hashBuffer,),).map((b) => b.toString(16,).padStart(2, '0',)).join('',);
}
function randomCharacters(count,) {
  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let result = '';
  const charactersLength = characters.length;
  for (let i = 0; i < count; i++) {
    result += characters.charAt(Math.floor(Math.random() * charactersLength,),);
  }
  return result;
}
function getEncodedFormFieldsHeader(data2,) {
  return Array.from(data2.keys(),).map(encodeURIComponent,).join(',',);
}
function addUTMTagsToFormData(data2, document2,) {
  try {
    const matches = document2.cookie.match('(^|;) ?framerFormsUTMTags=([^;]*)(;|$)',);
    if (matches !== null && matches[2]) {
      const parsed = JSON.parse(decodeURIComponent(matches[2],),);
      if (!parsed || typeof parsed !== 'object') return;
      ['utm_source', 'utm_medium', 'utm_campaign', 'utm_term', 'utm_content', 'gclid',].forEach((key7) => {
        if (typeof parsed[key7] === 'string') data2.append(key7, parsed[key7],);
      },);
    }
  } catch (e) {}
}
function trackFormSubmit({
  router,
  nodeId,
  submitTrackingId,
},) {
  var _a;
  if (!((_a = router == null ? void 0 : router.pageviewEventData) == null ? void 0 : _a.current)) return;
  const pageviewEventData = router.pageviewEventData.current;
  const eventData = {
    ...pageviewEventData,
    nodeId: nodeId ?? null,
    trackingId: submitTrackingId ?? null,
  };
  return sendTrackingEvent('published_site_form_submit', eventData, 'eager',);
}
var pendingState = {
  state: 'pending',
};
var successState = {
  state: 'success',
};
var incompleteState = {
  state: 'incomplete',
};
var completeState = {
  state: 'complete',
};
var errorState = {
  state: 'error',
};
function formReducer({
  state,
}, {
  type,
},) {
  switch (type) {
    case 'complete':
      if (state === 'error') return errorState;
      return completeState;
    case 'incomplete':
      if (state === 'error') return errorState;
      return incompleteState;
    case 'submit':
      return pendingState;
    case 'success':
      return successState;
    case 'error':
      return errorState;
    default:
      assertNever(type,);
  }
}
function stateCanSubmitForm({
  state,
},) {
  return state === 'incomplete' || state === 'complete';
}
function preventDefault(e,) {
  e.preventDefault();
}
function openExternalLinkInCurrentTab(link, formRef,) {
  const href = isValidURL(link, false,) ? link : `https://${link}`;
  const linkElement = document.createElement('a',);
  linkElement.href = href;
  linkElement.target = '_self';
  linkElement.style.display = 'none';
  if (!('current' in formRef && formRef.current)) return;
  formRef.current.appendChild(linkElement,);
  linkElement.click();
  linkElement.remove();
}
var FormContext = React4.createContext(void 0,);
var FormContainer = /* @__PURE__ */ React4.forwardRef(function FormContainer2({
  action,
  children,
  redirectUrl,
  onSuccess,
  onError,
  onLoading,
  submitTrackingId,
  nodeId,
  ...props
}, forwardedRef,) {
  const fallbackRef = React4.useRef(null,);
  const ref = forwardedRef ?? fallbackRef;
  const router = useRouter();
  const currentRoute = useCurrentRoute();
  const implicitPathVariables = useImplicitPathVariables();
  const [state, dispatch,] = React4.useReducer(formReducer, incompleteState,);
  const {
    activeLocale,
  } = useLocaleInfo();
  const projectHash = useContext(FormContext,);
  const callbacks = React4.useRef({
    onSuccess,
    onError,
    onLoading,
  },);
  callbacks.current = {
    onSuccess,
    onError,
    onLoading,
  };
  async function redirectTo(link,) {
    var _a, _b;
    if (isString(link,)) {
      const matchingRoute2 = findMatchingRouteAttributesForResolvedPath(router, link, implicitPathVariables,);
      if (!matchingRoute2) {
        openExternalLinkInCurrentTab(link, ref,);
        return;
      }
      const {
        routeId: routeId2,
        elementId: elementId2,
        pathVariables: pathVariables2,
      } = matchingRoute2;
      (_a = router.navigate) == null ? void 0 : _a.call(router, routeId2, elementId2, pathVariables2,);
      return;
    }
    assert(isLinkToWebPage(link,), 'Expected link to be either a LinkToWebPage or a string', link,);
    const matchingRoute = await findMatchingRouteAttributesForWebPageLink(router, currentRoute, link, activeLocale, implicitPathVariables,);
    const {
      routeId,
      elementId,
      pathVariables,
    } = matchingRoute;
    (_b = router.navigate) == null ? void 0 : _b.call(router, routeId, elementId, pathVariables,);
  }
  const handleSubmit = async (event) => {
    var _a, _b, _c, _d, _e, _f;
    event.preventDefault();
    if (!action || !projectHash) return;
    dispatch({
      type: 'submit',
    },);
    const data2 = new FormData(event.currentTarget,);
    await yieldToMain({
      priority: 'user-blocking',
      continueAfter: 'paint',
    },);
    addUTMTagsToFormData(data2, safeWindow.document,);
    for (const [key7, value,] of data2) {
      if (value instanceof File) data2.delete(key7,);
    }
    try {
      (_b = (_a = callbacks.current).onLoading) == null ? void 0 : _b.call(_a,);
      trackFormSubmit({
        router,
        nodeId,
        submitTrackingId,
        activeLocale,
      },);
      await submitForm(action, data2, projectHash,);
      startTransition2(() =>
        dispatch({
          type: 'success',
        },)
      );
      (_d = (_c = callbacks.current).onSuccess) == null ? void 0 : _d.call(_c,);
      if (redirectUrl) {
        await redirectTo(redirectUrl,);
      }
    } catch (error) {
      startTransition2(() =>
        dispatch({
          type: 'error',
        },)
      );
      (_f = (_e = callbacks.current).onError) == null ? void 0 : _f.call(_e,);
      console.error(error,);
    }
  };
  const handleKeyDown = (event) => {
    const {
      target: input,
      currentTarget: form,
      key: key7,
    } = event;
    const isTextArea = input instanceof HTMLTextAreaElement;
    if (isTextArea) return;
    if (key7 === 'Enter' && form.checkValidity()) {
      event.preventDefault();
      void handleSubmit(event,);
    }
  };
  const checkValidity = async (e) => {
    const target = e.currentTarget;
    await yieldToMain({
      priority: 'background',
      continueAfter: 'paint',
    },);
    startTransition2(() =>
      dispatch({
        type: anyEmptyRequiredFields(target,) ? 'incomplete' : 'complete',
      },)
    );
  };
  return /* @__PURE__ */ jsx3(motion.form, {
    ...props,
    onSubmit: stateCanSubmitForm(state,) ? handleSubmit : preventDefault,
    onKeyDown: handleKeyDown,
    onChange: checkValidity,
    ref,
    children: children(state,),
  },);
},);
function anyEmptyRequiredFields(element,) {
  if (element.children.length === 0) return false;
  for (const child of element.children) {
    if (child instanceof HTMLInputElement || child instanceof HTMLTextAreaElement || child instanceof HTMLSelectElement) {
      if (child.required && child.value === '') return true;
    } else {
      const result = anyEmptyRequiredFields(child,);
      if (result) return true;
    }
  }
  return false;
}
async function submitForm(action, data2, projectHash,) {
  const proofOfWork = await calculateProofOfWork();
  if (!proofOfWork) {
    throw new Error('Failed to calculate proof of work',);
  }
  const response = await fetch(action, {
    body: data2,
    method: 'POST',
    headers: {
      'Framer-Site-Id': projectHash,
      'Framer-POW': proofOfWork.secret,
      'Framer-Form-Fields': getEncodedFormFieldsHeader(data2,),
    },
  },);
  if (response.ok) {
    return response;
  } else {
    const body = await response.json();
    const error = 'Failed to submit form';
    if (responseHasError(body,)) {
      throw new Error(`${error} - ${body.error.message}`,);
    }
    throw new Error(error,);
  }
}
function responseHasError(response,) {
  return typeof response === 'object' && response !== null && 'error' in response && isObject2(response.error,) &&
    'message' in response.error && typeof response.error.message === 'string';
}
function isSamePage(a, b,) {
  if (a.routeId !== b.routeId) return false;
  if (a.pathVariables === b.pathVariables) return true;
  const aPathVariables = a.pathVariables || {};
  const bPathVariables = b.pathVariables || {};
  return aPathVariables.length === bPathVariables.length &&
    Object.keys(aPathVariables,).every((key7) => aPathVariables[key7] === bPathVariables[key7]);
}
function getPageviewEventData({
  abTestId,
  framerSiteId,
  routeId,
  routePath,
  collectionItemId,
  localeCode,
},) {
  return {
    abTestId,
    framerSiteId,
    routePath: routePath || '/',
    collectionItemId,
    framerLocale: localeCode,
    webPageId: routeId,
  };
}
var useSendPageView = (currentRoute, currentRouteId, currentPathVariables, collectionUtils, activeLocale,) => {
  const framerSiteId = useContext(FormContext,);
  const pageviewEventData = useRef3();
  const skipFirstPageView = useRef3(true,);
  useEffect(() => {
    const getFullPageviewEventData = async () => {
      var _a;
      let collectionItemId = null;
      if ((currentRoute == null ? void 0 : currentRoute.collectionId) && collectionUtils && currentPathVariables) {
        const utils = await ((_a = collectionUtils[currentRoute.collectionId]) == null ? void 0 : _a.call(collectionUtils,));
        const [slug,] = Object.values(currentPathVariables,);
        if (utils && typeof slug === 'string') {
          collectionItemId = (await utils.getRecordIdBySlug(slug, activeLocale || void 0,)) ?? null;
        }
      }
      return getPageviewEventData({
        abTestId: currentRoute == null ? void 0 : currentRoute.abTestId,
        framerSiteId: framerSiteId ?? null,
        // If we are in a variant route, let's use the variant ID as the route ID instead, so that the analytics panel will be able to show the correct tracking data.
        routeId: (currentRoute == null ? void 0 : currentRoute.abTestingVariantId) ?? currentRouteId,
        routePath: currentRoute == null ? void 0 : currentRoute.path,
        collectionItemId,
        localeCode: (activeLocale == null ? void 0 : activeLocale.code) || null,
      },);
    };
    void (async () => {
      pageviewEventData.current = await getFullPageviewEventData();
      if (skipFirstPageView.current) {
        skipFirstPageView.current = false;
        return;
      }
      sendTrackingEvent('published_site_pageview', pageviewEventData.current, 'eager',);
    })();
    const listener = async (event) => {
      if (event.persisted) {
        pageviewEventData.current = await getFullPageviewEventData();
        sendTrackingEvent('published_site_pageview', pageviewEventData.current, 'eager',);
      }
    };
    window.addEventListener('pageshow', listener,);
    return () => {
      window.removeEventListener('pageshow', listener,);
    };
  }, [currentRoute, currentRouteId, currentPathVariables, collectionUtils, activeLocale, framerSiteId,],);
  return pageviewEventData;
};
var defaultLocaleId = 'default';
function useForceUpdate3() {
  const [_, setForcedRenderCount,] = React4.useState(0,);
  return [_, React4.useCallback(() => setForcedRenderCount((v) => v + 1), [],),];
}
function updateScrollPosition(hash2, smoothScroll, isHistoryTransition,) {
  const element = hash2 && document.getElementById(hash2,);
  if (element) {
    scrollElementIntoView(element, smoothScroll,);
    return;
  }
  if (isHistoryTransition) return;
  window.scrollTo(0, 0,);
}
function useScheduleRenderSideEffects(dep,) {
  const actions = useRef3([],);
  useLayoutEffect(() => {
    var _a;
    if (!((_a = actions.current) == null ? void 0 : _a.length)) return;
    actions.current.forEach((action) => action());
    actions.current = [];
  }, [dep,],);
  return useCallback((cb) => {
    actions.current.push(cb,);
  }, [],);
}
function executeBeforeUrlUpdateOnce(beforeUrlUpdate,) {
  if (!beforeUrlUpdate) return noop2;
  let beforeUrlUpdateExecuted = false;
  return () => {
    if (beforeUrlUpdateExecuted) return;
    beforeUrlUpdateExecuted = true;
    beforeUrlUpdate == null ? void 0 : beforeUrlUpdate();
  };
}
function useNavigationTransition() {
  const startNativeSpinner = useNativeLoadingSpinner();
  const navigationController = useRef3(void 0,);
  return useCallback(async (transitionFn, nextRender, updateURL, isAbortable = true,) => {
    var _a, _b;
    const hasUpdateURL = updateURL !== void 0;
    (_a = navigationController.current) == null ? void 0 : _a.abort();
    const controller = isAbortable ? new AbortController() : void 0;
    navigationController.current = controller;
    const signal = controller == null ? void 0 : controller.signal;
    const stopMonitoringINPRelatedInputs = monitorINPRelatedInputs(signal,);
    void nextRender.promise.finally(stopMonitoringINPRelatedInputs,);
    if (!hasUpdateURL) {
      navigationController.current = void 0;
      transitionFn(signal,);
      return nextRender.promise;
    }
    transitionFn(signal,);
    let resolveNavigationPromise;
    const navigationPromise = new Promise((resolve, reject,) => {
      resolveNavigationPromise = resolve;
      signal == null ? void 0 : signal.addEventListener('abort', reject,);
    },).catch(noop2,);
    startNativeSpinner(navigationPromise, updateURL, controller,);
    await nextRender.promise;
    if (signal == null ? void 0 : signal.aborted) return;
    const navigationTransition = (_b = window.navigation) == null ? void 0 : _b.transition;
    resolveNavigationPromise();
    try {
      await (navigationTransition == null ? void 0 : navigationTransition.finished);
    } catch (error) {
      console.error('Navigation transition failed', error,);
    }
    if (signal == null ? void 0 : signal.aborted) return;
    announceNavigation();
  }, [startNativeSpinner,],);
}
function Router({
  defaultPageStyle,
  disableHistory,
  initialPathVariables,
  initialRoute,
  notFoundPage,
  collectionUtils,
  routes,
  initialLocaleId,
  locales = EMPTY_ARRAY,
  preserveQueryParams = false,
  LayoutTemplate,
  editorBar,
  siteCanonicalURL,
},) {
  useMarkRouterEffects();
  useReplaceInitialState({
    disabled: disableHistory,
    routeId: initialRoute,
    initialPathVariables,
    initialLocaleId,
  },);
  const startViewTransition2 = useViewTransition();
  const [dep, forceUpdate,] = useForceUpdate3();
  const scheduleSideEffect = useScheduleRenderSideEffects(dep,);
  const startNavigation = useNavigationTransition();
  const monitorNextPaintAfterRender = useMonitorNextPaintAfterRender('framer-route-change',);
  const isInitialNavigationRef = useRef3(true,);
  const currentRouteRef = useRef3(initialRoute,);
  const currentPathVariablesRef = useRef3(initialPathVariables,);
  const currentLocaleIdRef = useRef3(initialLocaleId,);
  const currentLocaleId = currentLocaleIdRef.current;
  const activeLocale = useMemo2(() => {
    return locales.find(({
      id: id3,
    },) => {
      if (!currentLocaleId) return id3 === defaultLocaleId;
      return id3 === currentLocaleId;
    },) ?? null;
  }, [currentLocaleId, locales,],);
  const localeInfo = useMemo2(() => {
    return {
      activeLocale,
      locales,
      setLocale: async (localeOrLocaleId) => {
        const nextRender = monitorNextPaintAfterRender({
          localized: true,
        },);
        await yieldToMain({
          priority: 'user-blocking',
          continueAfter: 'paint',
        },);
        let localeId;
        if (isString(localeOrLocaleId,)) {
          localeId = localeOrLocaleId;
        } else if (isObject2(localeOrLocaleId,)) {
          localeId = localeOrLocaleId.id;
        }
        const defaultLocale = locales.find(({
          id: id3,
        },) => id3 === defaultLocaleId);
        const nextLocale = locales.find(({
          id: id3,
        },) => id3 === localeId);
        if (!nextLocale) return;
        const currentRouteId2 = currentRouteRef.current;
        const currentRoute2 = routes[currentRouteId2];
        if (!currentRoute2) return;
        try {
          const localeResult = await switchLocale({
            currentLocale: activeLocale,
            nextLocale,
            route: currentRoute2,
            routeId: currentRouteId2,
            defaultLocale,
            pathVariables: currentPathVariablesRef.current,
            collectionUtils,
            preserveQueryParams,
          },);
          if (!localeResult) return;
          const currentStatePaginationInfo = isHistoryState(window.history.state,) ? window.history.state.paginationInfo : void 0;
          const currentPath = localeResult.path;
          isInitialNavigationRef.current = false;
          currentPathVariablesRef.current = localeResult.pathVariables;
          currentLocaleIdRef.current = nextLocale.id;
          const updateURL = async (ignorePushStateWrapper = false,) => {
            if (!currentPath) return;
            return pushHistoryState(
              {
                routeId: currentRouteId2,
                pathVariables: localeResult.pathVariables,
                localeId: nextLocale.id,
                paginationInfo: currentStatePaginationInfo,
              },
              currentPath,
              ignorePushStateWrapper,
            );
          };
          void startNavigation(
            () => {
              void startViewTransition2(currentRouteId2, currentRouteId2, () => startTransition2(forceUpdate,),// no signal here, because we update the refs above immediately
              );
            },
            nextRender,
            updateURL,
            false,
          );
        } catch {}
      },
    };
  }, [
    activeLocale,
    collectionUtils,
    forceUpdate,
    locales,
    preserveQueryParams,
    routes,
    startNavigation,
    startViewTransition2,
    monitorNextPaintAfterRender,
  ],);
  const setCurrentRouteId = useCallback(
    (routeId, localeId, hash2, pathVariables, isHistoryTransition, nextRender, smoothScroll = false, updateURL,) => {
      isInitialNavigationRef.current = false;
      const currentRouteId2 = currentRouteRef.current;
      currentRouteRef.current = routeId;
      currentPathVariablesRef.current = pathVariables;
      currentLocaleIdRef.current = localeId;
      scheduleSideEffect(() => {
        updateScrollPosition(hash2, smoothScroll, isHistoryTransition,);
      },);
      if (isHistoryTransition) {
        startTransition2(forceUpdate,);
        return;
      }
      void startNavigation(
        (signal) => {
          void startViewTransition2(currentRouteId2, routeId, () => startTransition2(forceUpdate,), signal,);
        },
        nextRender,
        updateURL,
        true,
      );
    },
    [forceUpdate, scheduleSideEffect, startNavigation, startViewTransition2,],
  );
  usePopStateHandler(currentRouteRef, setCurrentRouteId,);
  const navigate = useCallback(async (routeId, hash2, pathVariables, smoothScroll, beforeUrlUpdate,) => {
    var _a, _b;
    const newRoute = routes[routeId];
    const routeStatus = isLazyComponentType(newRoute == null ? void 0 : newRoute.page,) ? newRoute.page.getStatus() : void 0;
    const hasRendered = routeStatus == null ? void 0 : routeStatus.hasRendered;
    const nextRender = monitorNextPaintAfterRender({
      cached: hasRendered,
      preloaded: hasRendered ? void 0 : routeStatus == null ? void 0 : routeStatus.hasLoaded,
    },);
    const executeBeforeUrlUpdate = executeBeforeUrlUpdateOnce(beforeUrlUpdate,);
    void yieldToMain({
      priority: 'background',
      ensureContinueBeforeUnload: true,
      continueAfter: 'paint',
    },).then(executeBeforeUrlUpdate,);
    await yieldToMain({
      priority: 'user-blocking',
      continueAfter: 'paint',
    },);
    if (pathVariables) {
      const inUse = /* @__PURE__ */ new Set();
      const path = (newRoute == null ? void 0 : newRoute.path) ?? '/';
      for (const match of path.matchAll(pathVariablesRegExp,)) {
        const usedVariable = match[1];
        if (usedVariable === void 0) {
          throw new Error('A matching path variable should not be undefined',);
        }
        inUse.add(usedVariable,);
      }
      pathVariables = Object.fromEntries(Object.entries(pathVariables,).filter(([key7,],) => inUse.has(key7,)),);
    }
    const routeElementId = getRouteElementId(newRoute, hash2,);
    const currentPathVariables2 = currentPathVariablesRef.current;
    const currentRouteLocaleId = currentLocaleIdRef.current;
    if (
      isSamePage({
        routeId: currentRouteRef.current,
        pathVariables: currentPathVariables2,
      }, {
        routeId,
        pathVariables,
      },)
    ) {
      (_a = nextRender.ignore) == null ? void 0 : _a.call(nextRender,);
      const route = routes[routeId];
      if (((_b = window.history.state) == null ? void 0 : _b.hash) !== hash2 && !disableHistory && route) {
        executeBeforeUrlUpdate();
        await pushRouteState(routeId, route, {
          currentRoutePath: route.path,
          currentPathVariables: currentPathVariables2,
          pathVariables,
          hash: hash2,
          localeId: currentRouteLocaleId,
          preserveQueryParams,
          siteCanonicalURL,
        },);
      }
      updateScrollPosition(routeElementId, smoothScroll, false,);
      return;
    }
    if (!newRoute) return;
    const currentRoute2 = routes[currentRouteRef.current];
    const updateURL = async (ignorePushStateWrapper = false,) => {
      executeBeforeUrlUpdate();
      return pushRouteState(routeId, newRoute, {
        currentRoutePath: currentRoute2 == null ? void 0 : currentRoute2.path,
        currentPathVariables: currentPathVariables2,
        hash: hash2,
        pathVariables,
        localeId: currentRouteLocaleId,
        preserveQueryParams,
        siteCanonicalURL,
      }, ignorePushStateWrapper,);
    };
    setCurrentRouteId(
      routeId,
      currentRouteLocaleId,
      routeElementId,
      pathVariables,
      false,
      nextRender,
      smoothScroll,
      disableHistory ? void 0 : updateURL,
    );
  }, [routes, setCurrentRouteId, disableHistory, preserveQueryParams, siteCanonicalURL, monitorNextPaintAfterRender,],);
  const getRoute = useGetRouteCallback(routes,);
  const currentRouteId = currentRouteRef.current;
  const currentPathVariables = currentPathVariablesRef.current;
  const currentRoute = routes[currentRouteId];
  const currentRoutePath = currentRoute == null ? void 0 : currentRoute.path;
  const pageviewEventData = useSendPageView(currentRoute, currentRouteId, currentPathVariables, collectionUtils, activeLocale,);
  const isInitialNavigation = isInitialNavigationRef.current;
  const api = useMemo2(() => ({
    navigate,
    getRoute,
    currentRouteId,
    currentPathVariables,
    routes,
    collectionUtils,
    preserveQueryParams,
    pageviewEventData,
    siteCanonicalURL,
    isInitialNavigation,
  }), [
    navigate,
    getRoute,
    currentRouteId,
    currentPathVariables,
    routes,
    collectionUtils,
    preserveQueryParams,
    siteCanonicalURL,
    pageviewEventData,
    isInitialNavigation,
  ],);
  if (!currentRoute) {
    throw new Error(`Router cannot find route for ${currentRouteId}`,);
  }
  const pageExistsInCurrentLocale = !activeLocale || !currentRoute.includedLocales ||
    currentRoute.includedLocales.includes(activeLocale.id,);
  const pathWithFilledVariables = currentRoutePath && currentPathVariables
    ? fillPathVariables(currentRoutePath, currentPathVariables,)
    : currentRoutePath;
  const remountKey = String(currentLocaleId,) + pathWithFilledVariables;
  const templatePageStyle = useConstant2(() => ({
    ...defaultPageStyle,
    display: 'contents',
  }));
  return /* @__PURE__ */ jsx3(RouterAPIProvider, {
    api,
    children: /* @__PURE__ */ jsx3(LocaleInfoContext.Provider, {
      value: localeInfo,
      children: /* @__PURE__ */ jsx3(SynchronousSuspenseErrorBoundary, {
        children: /* @__PURE__ */ jsxs(SuspenseThatPreservesDom, {
          children: [
            /* @__PURE__ */ jsxs(NotFoundErrorBoundary, {
              notFoundPage,
              defaultPageStyle,
              forceUpdateKey: dep,
              children: [
                /* @__PURE__ */ jsx3(MarkSuspenseEffects.Start, {},),
                /* @__PURE__ */ jsx3(WithLayoutTemplate, {
                  LayoutTemplate,
                  routeId: currentRouteId,
                  style: defaultPageStyle,
                  children: (inLayoutTemplate) => {
                    return /* @__PURE__ */ jsx3(Fragment, {
                      children: pageExistsInCurrentLocale
                        ? renderPage(currentRoute.page, inLayoutTemplate ? templatePageStyle : defaultPageStyle,)
                        : // LAYOUT_TEMPLATE @TODO: display: content for not found page?
                        notFoundPage && renderPage(notFoundPage, defaultPageStyle,),
                    }, remountKey,);
                  },
                },),
              ],
            },),
            editorBar,
            /* @__PURE__ */ jsx3(TurnOnReactEventHandling, {},),
            /* @__PURE__ */ jsx3(MarkSuspenseEffects.End, {},),
          ],
        },),
      },),
    },),
  },);
}
function WithLayoutTemplate({
  LayoutTemplate,
  routeId,
  style: style2,
  children,
},) {
  if (!LayoutTemplate) return children(false,);
  return /* @__PURE__ */ jsx3(LayoutTemplate, {
    routeId,
    style: style2,
    children,
  },);
}
function scrollElementIntoView(element, smoothScroll,) {
  const scrollIntoViewOptions = smoothScroll
    ? {
      behavior: 'smooth',
      block: 'start',
      inline: 'nearest',
    }
    : void 0;
  element.scrollIntoView(scrollIntoViewOptions,);
}
function preloadImage(url,) {
  return new Promise((resolve, reject,) => {
    try {
      new URL(url,);
      const image = new Image();
      image.onload = () => resolve();
      image.onerror = reject;
      image.src = url;
    } catch (error) {
      reject(error,);
    }
  },);
}
function isObjectOrArray(value,) {
  return typeof value === 'object' && value !== null;
}
function getPropertyByPath(input, keyPath,) {
  if (keyPath === '') {
    return input;
  }
  const keyParts = keyPath.split(/[.[\]]+/u,).filter((part) => part.length > 0);
  let current2 = input;
  for (const part of keyParts) {
    if (!isObjectOrArray(current2,)) {
      return void 0;
    }
    current2 = current2[part];
  }
  return current2;
}
function getRequestCacheKey(value,) {
  return `${value.credentials}:${value.url}`;
}
var loadingFetchResult = {
  status: 'loading',
  data: void 0,
};
function isNumberString(value,) {
  return isString(value,) && !Number.isNaN(Number(value,),);
}
function isValidFetchDataValueResult(type, value,) {
  switch (type) {
    case 'string':
      return isString(value,) || isNumber2(value,);
    case 'color':
      return isString(value,);
    case 'boolean':
      return isBoolean(value,);
    case 'number':
      return isNumber2(value,) || isNumberString(value,);
    case 'link':
    case 'image':
      return isString(value,) && isValidURL(value, false,);
    default: {
      const _ = type;
      return false;
    }
  }
}
function resolveFetchDataValue(result, request,) {
  if (result.status === 'loading') {
    return request.fallbackValue;
  }
  if (result.status === 'error') {
    throw result.error;
  }
  const resolvedValue = getPropertyByPath(result.data, request.resultKeyPath,);
  if (isUndefined(resolvedValue,)) {
    throw new Error(`Key '${request.resultKeyPath}' not found in response`,);
  }
  if (!isValidFetchDataValueResult(request.resultOutputType, resolvedValue,)) {
    throw new Error(`Resolved value '${resolvedValue}' is not valid for type '${request.resultOutputType}'`,);
  }
  return resolvedValue;
}
function isCacheExpired(insertionTimestamp, cacheDuration,) {
  if (RenderTarget.current() === RenderTarget.canvas) {
    return false;
  }
  const cacheDurationMs = cacheDuration === 0
    ? // When the cache is set to 0 seconds we set use a 500ms cache delay
    // to avoid triggering refetching when a variant switches from
    // preloading to rendering the component (and
    // resubscribing to the fetch client). When another component
    // relying on the same endpoint (eg another page) is mounted again
    // and the cache time is set to 0, the the data will be fetched
    // again.
    500
    : cacheDuration * 1e3;
  const currentTimestamp = Date.now();
  const expirationTimestamp = insertionTimestamp + cacheDurationMs;
  return currentTimestamp >= expirationTimestamp;
}
var noop4 = () => {};
var _subscribers;
var _preloadedRequests;
var _shortestCacheDurations;
var _cachedAt;
var _ongoingFetches;
var _staleQueriesInterval;
var _FetchClient = class _FetchClient2 {
  constructor() {
    __publicField(this, 'responseValues', /* @__PURE__ */ new Map(),);
    __privateAdd(this, _subscribers, /* @__PURE__ */ new Map(),);
    __privateAdd(this, _preloadedRequests, /* @__PURE__ */ new Set(),);
    __privateAdd(this, _shortestCacheDurations, /* @__PURE__ */ new Map(),);
    __privateAdd(this, _cachedAt, /* @__PURE__ */ new Map(),);
    __privateAdd(this, _ongoingFetches, /* @__PURE__ */ new Map(),);
    __privateAdd(this, _staleQueriesInterval, /* @__PURE__ */ new Map(),);
    __publicField(
      this,
      'persistCache',
      debounce(() => {
        const data2 = {};
        for (const [url, responseValue,] of this.responseValues) {
          if (!responseValue) continue;
          if (responseValue.status !== 'success') continue;
          const cacheConfig = __privateGet(this, _shortestCacheDurations,).get(url,);
          if (!cacheConfig || cacheConfig === 0) continue;
          const storedAt = __privateGet(this, _cachedAt,).get(url,);
          if (!storedAt) continue;
          if (storedAt && isCacheExpired(storedAt, cacheConfig,)) {
            continue;
          }
          data2[url] = [storedAt, cacheConfig, responseValue.data,];
        }
        try {
          localStorage.setItem(_FetchClient2.cacheKey, JSON.stringify(data2,),);
        } catch {}
      }, 500,),
    );
  }
  unmount() {
    for (const [key7, interval,] of __privateGet(this, _staleQueriesInterval,)) {
      clearInterval(interval,);
      __privateGet(this, _staleQueriesInterval,).delete(key7,);
    }
  }
  stopQueryRefetching(request,) {
    const cacheKey = getRequestCacheKey(request,);
    const interval = __privateGet(this, _staleQueriesInterval,).get(cacheKey,);
    if (interval) {
      clearInterval(interval,);
      __privateGet(this, _staleQueriesInterval,).delete(cacheKey,);
    }
  }
  /**
   * Start an interval for the given request to refresh the value
   * depending on the shortest configured cache duration for that request.
   */
  startQueryRefetching(request,) {
    const cacheKey = getRequestCacheKey(request,);
    const currentIntervalForRequest = __privateGet(this, _staleQueriesInterval,).get(cacheKey,);
    const shortestCacheDuration = __privateGet(this, _shortestCacheDurations,).get(cacheKey,);
    if (currentIntervalForRequest) return;
    if (!shortestCacheDuration) return;
    const interval = safeWindow.setInterval(() => {
      if (document.visibilityState === 'hidden') return;
      const cachedAt = __privateGet(this, _cachedAt,).get(cacheKey,);
      if (!shortestCacheDuration || !cachedAt) return;
      void this.fetchWithCache({
        ...request,
        cacheDuration: shortestCacheDuration,
      },);
    }, shortestCacheDuration,);
    __privateGet(this, _staleQueriesInterval,).set(cacheKey, interval,);
  }
  hydrateCache() {
    try {
      const rawData = localStorage.getItem(_FetchClient2.cacheKey,);
      if (!rawData) return;
      const data2 = JSON.parse(rawData,);
      if (typeof data2 !== 'object') throw new Error('Invalid cache data',);
      for (const cacheKey in data2) {
        const cached = data2[cacheKey];
        if (!Array.isArray(cached,) || cached.length !== 3) throw new Error('Invalid cache data',);
        const [storedAt, cacheDuration, cachedData,] = cached;
        if (isCacheExpired(storedAt, cacheDuration,)) continue;
        __privateGet(this, _cachedAt,).set(cacheKey, storedAt,);
        __privateGet(this, _shortestCacheDurations,).set(cacheKey, cacheDuration,);
        this.responseValues.set(cacheKey, {
          status: 'success',
          data: cachedData,
        },);
      }
    } catch (error) {
      try {
        localStorage.removeItem(_FetchClient2.cacheKey,);
      } catch {}
    }
  }
  setResponseValue(cacheKey, value,) {
    this.responseValues.set(cacheKey, value,);
    this.persistCache();
    const subscribers = __privateGet(this, _subscribers,).get(cacheKey,);
    if (!subscribers) return;
    for (const subscriber of subscribers) {
      subscriber();
    }
  }
  async prefetch(request,) {
    if (!isBrowser2()) return;
    if (!isValidURL(request.url, false,)) return;
    const cacheKey = getRequestCacheKey(request,);
    __privateGet(this, _preloadedRequests,).add(cacheKey,);
    await this.fetchWithCache(request,);
    const result = this.getValue(cacheKey,);
    if (!result || result.status === 'loading') {
      throw new Error('Unexpected result status for prefetch',);
    }
    const subscribers = __privateGet(this, _subscribers,).get(cacheKey,);
    for (const subscriber of subscribers ?? []) {
      subscriber();
    }
    const resolvedValue = resolveFetchDataValue(result, request,);
    if (request.resultOutputType === 'image' && isString(resolvedValue,)) {
      await preloadImage(resolvedValue,).catch(noop4,);
    }
    return resolvedValue;
  }
  async fetchWithCache(request,) {
    if (!isBrowser2()) return;
    const cacheKey = getRequestCacheKey(request,);
    const ongoingFetch = __privateGet(this, _ongoingFetches,).get(cacheKey,);
    if (ongoingFetch) return ongoingFetch;
    const cachedAt = __privateGet(this, _cachedAt,).get(cacheKey,);
    const hasExpiredCache = cachedAt && isCacheExpired(cachedAt, request.cacheDuration,);
    if (this.responseValues.has(cacheKey,) && !hasExpiredCache) {
      return;
    }
    const currentValue = this.responseValues.get(cacheKey,);
    if (!currentValue) {
      this.setResponseValue(cacheKey, loadingFetchResult,);
    }
    const doFetch = async () => {
      try {
        const response = await fetch(request.url, {
          method: 'GET',
          credentials: request.credentials,
        },);
        if (!response.ok) {
          this.setResponseValue(cacheKey, {
            status: 'error',
            error: new Error('Invalid Response Status',),
            data: void 0,
          },);
          return;
        }
        const value = await response.json();
        this.setResponseValue(cacheKey, {
          status: 'success',
          data: value,
        },);
        __privateGet(this, _cachedAt,).set(cacheKey, Date.now(),);
      } catch (error) {
        this.setResponseValue(cacheKey, {
          status: 'error',
          error,
          data: void 0,
        },);
      }
    };
    const promise = doFetch();
    __privateGet(this, _ongoingFetches,).set(cacheKey, promise,);
    void promise.finally(() => {
      __privateGet(this, _ongoingFetches,).delete(cacheKey,);
    },);
    return promise;
  }
  getValue(cacheKey, onlyIfPrefetched = false,) {
    if (onlyIfPrefetched && !__privateGet(this, _preloadedRequests,).has(cacheKey,)) return void 0;
    return this.responseValues.get(cacheKey,);
  }
  subscribe(request, callback, skipFetchRequest = false,) {
    const {
      url,
      cacheDuration,
    } = request;
    if (!isValidURL(url, false,)) return noop4;
    const cacheKey = getRequestCacheKey(request,);
    const cacheDurationForUrl = __privateGet(this, _shortestCacheDurations,).get(cacheKey,);
    if (!cacheDurationForUrl || cacheDuration < cacheDurationForUrl) {
      __privateGet(this, _shortestCacheDurations,).set(cacheKey, cacheDuration,);
    }
    if (!skipFetchRequest) {
      this.startQueryRefetching(request,);
      void this.fetchWithCache(request,);
    }
    const subscribers = __privateGet(this, _subscribers,).get(cacheKey,) ?? /* @__PURE__ */ new Set();
    subscribers.add(callback,);
    __privateGet(this, _subscribers,).set(cacheKey, subscribers,);
    return () => {
      const nextSubscribers = __privateGet(this, _subscribers,).get(cacheKey,);
      if (!nextSubscribers) return;
      nextSubscribers.delete(callback,);
      if (nextSubscribers.size === 0) {
        __privateGet(this, _subscribers,).delete(cacheKey,);
      }
      if (__privateGet(this, _subscribers,).size === 0) {
        this.stopQueryRefetching(request,);
      }
    };
  }
};
_subscribers = /* @__PURE__ */ new WeakMap();
_preloadedRequests = /* @__PURE__ */ new WeakMap();
_shortestCacheDurations = /* @__PURE__ */ new WeakMap();
_cachedAt = /* @__PURE__ */ new WeakMap();
_ongoingFetches = /* @__PURE__ */ new WeakMap();
_staleQueriesInterval = /* @__PURE__ */ new WeakMap();
__publicField(_FetchClient, 'cacheKey', 'framer-fetch-client-cache',);
var FetchClient = _FetchClient;
var FetchClientContext = /* @__PURE__ */ React2.createContext(void 0,);
var IsRestoringCacheContext = /* @__PURE__ */ React2.createContext(true,);
var FetchClientProvider = ({
  children,
  client: initialClient,
},) => {
  const [client,] = React2.useState(() => initialClient ?? new FetchClient());
  const [isRestoring, setIsRestoring,] = React2.useState(true,);
  React2.useEffect(() => {
    client.hydrateCache();
    React2.startTransition(() => {
      setIsRestoring(false,);
    },);
    return () => client.unmount();
  }, [client,],);
  return /* @__PURE__ */ jsx3(IsRestoringCacheContext.Provider, {
    value: isRestoring,
    children: /* @__PURE__ */ jsx3(FetchClientContext.Provider, {
      value: client,
      children,
    },),
  },);
};
var _subscriptions;
var _subscribers2;
var _results;
var _SSRResults;
var _onlyPrefetched;
var RequestsObserver = class {
  constructor(client, requests,) {
    this.client = client;
    this.requests = requests;
    __privateAdd(this, _subscriptions, /* @__PURE__ */ new Map(),);
    __privateAdd(this, _subscribers2, /* @__PURE__ */ new Set(),);
    __privateAdd(this, _results,);
    __privateAdd(this, _SSRResults,);
    __privateAdd(this, _onlyPrefetched, true,);
    __publicField(this, 'updateResults', () => {
      const data2 = [];
      const statuses = /* @__PURE__ */ new Set();
      const errors = [];
      for (const request of this.requests) {
        const cachekey = getRequestCacheKey(request,);
        const value = this.client.getValue(cachekey, __privateGet(this, _onlyPrefetched,),);
        if (!value) {
          statuses.add('loading',);
          data2.push(request.fallbackValue,);
          continue;
        }
        statuses.add(value.status,);
        try {
          const resolvedValue = resolveFetchDataValue(value, request,);
          data2.push(resolvedValue,);
        } catch (error) {
          data2.push(!isUndefined(request.errorFallbackValue,) ? request.errorFallbackValue : request.fallbackValue,);
          errors.push(error,);
        }
      }
      const status = statuses.has('error',) ? 'error' : statuses.has('loading',) ? 'loading' : 'success';
      const result = {
        status,
        data: data2,
      };
      if (!isEqual(result, __privateGet(this, _results,),)) {
        __privateSet(this, _results, result,);
        if (errors.length > 0 && !statuses.has('loading',) && __privateGet(this, _subscribers2,).size > 0) {
          console.error('Fetch failed: ' + errors.join('\n',),);
        }
      }
      for (const subscriber of __privateGet(this, _subscribers2,)) {
        subscriber();
      }
    },);
    __publicField(this, 'subscribe', (callback) => {
      __privateGet(this, _subscribers2,).add(callback,);
      this.updateResults();
      return () => {
        __privateGet(this, _subscribers2,).delete(callback,);
      };
    },);
    __publicField(this, 'getServerResults', () => {
      return __privateGet(this, _SSRResults,);
    },);
    __publicField(this, 'getResults', () => {
      return __privateGet(this, _results,);
    },);
    this.setRequests(requests, {
      onlyPrefetched: true,
    },);
    __privateSet(this, _SSRResults, {
      status: 'loading',
      data: requests.map((request) => request.fallbackValue),
    },);
    __privateSet(this, _results, __privateGet(this, _SSRResults,),);
  }
  setRequests(requests, {
    onlyPrefetched = false,
  },) {
    var _a;
    const lastRequests = this.requests;
    this.requests = requests;
    const requestsByCacheKey = new Map(requests.map((request) => [getRequestCacheKey(request,), request,]),);
    const nextSubscribedKeys = Array.from(requestsByCacheKey.keys(),);
    const hasOnlyPrefetchedChange = __privateGet(this, _onlyPrefetched,) !== onlyPrefetched;
    if (!onlyPrefetched) __privateSet(this, _onlyPrefetched, false,);
    const hasSubscriptionChange = nextSubscribedKeys.length !== __privateGet(this, _subscriptions,).size ||
      nextSubscribedKeys.some((url) => !__privateGet(this, _subscriptions,).has(url,));
    if (!hasSubscriptionChange && !hasOnlyPrefetchedChange) {
      if (!isEqual(lastRequests, requests,)) {
        this.updateResults();
      }
      return;
    }
    for (const url of __privateGet(this, _subscriptions,).keys()) {
      (_a = __privateGet(this, _subscriptions,).get(url,)) == null ? void 0 : _a();
      __privateGet(this, _subscriptions,).delete(url,);
    }
    for (const cacheKey of nextSubscribedKeys) {
      const requestConfig = requestsByCacheKey.get(cacheKey,);
      if (!requestConfig) continue;
      const unsubscribe = this.client.subscribe(requestConfig, this.updateResults, onlyPrefetched,);
      __privateGet(this, _subscriptions,).set(cacheKey, unsubscribe,);
    }
    if (__privateGet(this, _subscribers2,).size === 0) return;
    this.updateResults();
  }
  unmount() {
    for (const unsubscribe of __privateGet(this, _subscribers2,)) {
      unsubscribe();
    }
    for (const unsubscribe of __privateGet(this, _subscriptions,).values()) {
      unsubscribe();
    }
  }
};
_subscriptions = /* @__PURE__ */ new WeakMap();
_subscribers2 = /* @__PURE__ */ new WeakMap();
_results = /* @__PURE__ */ new WeakMap();
_SSRResults = /* @__PURE__ */ new WeakMap();
_onlyPrefetched = /* @__PURE__ */ new WeakMap();
function useFetchRequestsForChildren(requests, disabled, children,) {
  const fetchClient = React2.useContext(FetchClientContext,);
  if (!fetchClient) {
    throw new Error('useFetchRequest must be used within a FetchClientProvider',);
  }
  const isRestoringCache = React2.useContext(IsRestoringCacheContext,);
  const [observer2,] = React2.useState(() => new RequestsObserver(fetchClient, requests,));
  React2.useLayoutEffect(() => {
    if (disabled) return;
    observer2.setRequests(requests, {
      onlyPrefetched: false,
    },);
  }, [requests, observer2, disabled,],);
  React2.useEffect(() => {
    return () => observer2.unmount();
  }, [observer2,],);
  const subscribe = React2.useCallback((onChange) => {
    if (isRestoringCache || disabled) return noop4;
    return observer2.subscribe(onChange,);
  }, [disabled, observer2, isRestoringCache,],);
  const synchronousData = React2.useSyncExternalStore(subscribe, observer2.getResults, observer2.getServerResults,);
  const deferredData = React2.useDeferredValue(synchronousData,);
  return useMemoOne(() => children(deferredData.data, deferredData.status,), [deferredData, children,],);
}
function usePrefetch() {
  const fetchClient = React2.useContext(FetchClientContext,);
  if (!fetchClient) {
    throw new Error('useFetchRequest must be used within a FetchClientProvider',);
  }
  return React2.useCallback((request) => fetchClient.prefetch(request,), [fetchClient,],);
}
MotionGlobalConfig.WillChange = WillChangeMotionValue;
function PageRoot({
  RootComponent,
  isWebsite,
  routeId,
  framerSiteId,
  pathVariables,
  routes,
  collectionUtils,
  notFoundPage,
  isReducedMotion = false,
  includeDataObserver = false,
  localeId,
  locales,
  preserveQueryParams,
  EditorBar,
  defaultPageStyle,
  disableHistory,
  LayoutTemplate,
  siteCanonicalURL,
},) {
  React4.useEffect(() => {
    if (isWebsite) return;
    MainLoop.start();
  }, [],);
  if (isWebsite) {
    return /* @__PURE__ */ jsx3(MotionConfig, {
      reducedMotion: isReducedMotion ? 'user' : 'never',
      children: /* @__PURE__ */ jsx3(FetchClientProvider, {
        children: /* @__PURE__ */ jsx3(CustomCursorHost, {
          children: /* @__PURE__ */ jsx3(FormContext.Provider, {
            value: framerSiteId,
            children: /* @__PURE__ */ jsx3(Router, {
              initialRoute: routeId,
              initialPathVariables: pathVariables,
              initialLocaleId: localeId,
              routes,
              collectionUtils,
              notFoundPage,
              locales,
              defaultPageStyle: defaultPageStyle ?? {
                minHeight: '100vh',
                width: 'auto',
              },
              preserveQueryParams,
              editorBar: /* @__PURE__ */ jsx3(EditorBarLauncher, {
                EditorBar,
              },),
              disableHistory,
              LayoutTemplate,
              siteCanonicalURL,
            },),
          },),
        },),
      },),
    },);
  } else {
    const Wrapper = includeDataObserver ? DataObserver : React4.Fragment;
    return /* @__PURE__ */ jsx3(Wrapper, {
      children: /* @__PURE__ */ jsx3(RoutesProvider, {
        routes,
        children: /* @__PURE__ */ jsx3(NavigationWrapper, {
          children: React4.isValidElement(RootComponent,) ? RootComponent : React4.createElement(
            // @ts-expect-error to figure out how to type this properly, as tests are using different
            // $$typeof symbol and isValidElement fails
            RootComponent,
            {
              key: routeId,
            },
          ),
        },),
      },),
    },);
  }
}
function EditorBarLauncher({
  EditorBar,
},) {
  const libraryFeatures = useLibraryFeatures();
  const [mounted, setMounted,] = useState(false,);
  const framerSiteId = useContext(FormContext,);
  const editorBarFeatures = useMemo2(() => {
    const features = {};
    let key7;
    for (key7 in libraryFeatures) {
      if (libraryFeatures.hasOwnProperty(key7,) && key7.startsWith('editorBar',)) {
        features[key7] = libraryFeatures[key7];
      }
    }
    return features;
  }, [libraryFeatures,],);
  useEffect(() => {
    startTransition2(() => {
      setMounted(true,);
    },);
  }, [],);
  if (!EditorBar || !framerSiteId || !mounted) return null;
  return /* @__PURE__ */ jsx3(IgnoreErrors, {
    children: /* @__PURE__ */ jsx3(Suspense2, {
      children: /* @__PURE__ */ jsx3(EditorBar, {
        framerSiteId,
        features: editorBarFeatures,
      },),
    },),
  },);
}
var ResolveLinks = /* @__PURE__ */ withChildrenCanSuspend(/* @__PURE__ */ forwardRef(function ResolveLinksInner({
  links,
  children,
  ...rest
}, ref,) {
  const router = useRouter();
  const {
    activeLocale,
  } = useLocaleInfo();
  const cloneWithPropsAndRef = useCloneChildrenWithPropsAndRef(ref,);
  const promises = [];
  const resolvedLinks = links.map((link) => {
    if (!link) return void 0;
    if (isString(link,)) return resolveLinkInternal(link, router,);
    return resolveLinkInternal(link.href, router, link.implicitPathVariables, link.refKey, (unresolvedPathSlugs, unresolvedHashSlugs,) => {
      function handleSlugs(slugs,) {
        const result = {};
        for (const slugKey in slugs) {
          const unresolvedSlug = slugs[slugKey];
          assert(router.collectionUtils, 'collectionUtils should be defined',);
          assert(unresolvedSlug, 'unresolvedSlug be defined',);
          const lazyValue = resolveSlug(unresolvedSlug, router.collectionUtils, activeLocale,);
          const promise = lazyValue.preload();
          if (promise) {
            promises.push(promise,);
          } else {
            const resolvedValue = lazyValue.read();
            if (resolvedValue) {
              result[slugKey] = resolvedValue;
            }
          }
        }
        return result;
      }
      return {
        path: handleSlugs(unresolvedPathSlugs,),
        hash: handleSlugs(unresolvedHashSlugs,),
      };
    },);
  },);
  if (promises.length > 0) {
    throw Promise.allSettled(promises,);
  }
  const childrenWithLinks = children(resolvedLinks,);
  return cloneWithPropsAndRef(childrenWithLinks, rest,);
},),);
var Fetcher = /* @__PURE__ */ React2.forwardRef(function Fetcher2({
  requests,
  disabled,
  children,
  ...rest
}, ref,) {
  const cloneWithPropsAndRef = useCloneChildrenWithPropsAndRef(ref,);
  const childrenWithValues = useFetchRequestsForChildren(requests, disabled, children,);
  return cloneWithPropsAndRef(childrenWithValues, rest,);
},);
var callEach = (...fns) => fns.forEach((fn) => fn && fn());
function getLogger(name,) {
  return {
    trace(...args) {
      var _a;
      return (_a = runtime.getLogger(name,)) == null ? void 0 : _a.trace(...args,);
    },
    debug(...args) {
      var _a;
      return (_a = runtime.getLogger(name,)) == null ? void 0 : _a.debug(...args,);
    },
    info(...args) {
      var _a;
      return (_a = runtime.getLogger(name,)) == null ? void 0 : _a.info(...args,);
    },
    warn(...args) {
      var _a;
      return (_a = runtime.getLogger(name,)) == null ? void 0 : _a.warn(...args,);
    },
    error(...args) {
      var _a;
      return (_a = runtime.getLogger(name,)) == null ? void 0 : _a.error(...args,);
    },
  };
}
function isAnyCollection(value,) {
  return isAnyLegacyCollection(value,) || isAnyDatabaseCollection(value,);
}
function isLegacyCollection(value,) {
  return isArray(value,) && value.every(isObject2,);
}
function isLegacyLocalizedCollection(value,) {
  return isObject2(value,) && isFunction(value.read,) && isFunction(value.preload,);
}
function isAnyLegacyCollection(value,) {
  return isLegacyCollection(value,) || isLegacyLocalizedCollection(value,);
}
function isDatabaseCollection(value,) {
  return isObject2(value,) && isObject2(value.schema,);
}
function isLocalizedDatabaseCollection(value,) {
  return isObject2(value,) && isObject2(value.collectionByLocaleId,);
}
function isAnyDatabaseCollection(value,) {
  return isDatabaseCollection(value,) || isLocalizedDatabaseCollection(value,);
}
async function getCollectionItems(collection, locale,) {
  if (isLegacyLocalizedCollection(collection,)) {
    await collection.preload(locale,);
    return collection.read(locale,);
  }
  return collection;
}
var CompatibilityDatabaseCollection = class {
  constructor(collection, locale,) {
    this.collection = collection;
    this.locale = locale;
    __publicField(this, 'schema',);
    __publicField(this, 'indexes', [],);
    const propertyControls = getPropertyControls(collection,);
    assert(propertyControls, 'Collection does not have properties',);
    const schema = {
      id: {
        type: 'string',
        isNullable: false,
      },
    };
    const controlEntries = Object.entries(propertyControls,);
    for (const [key7, controlDescription,] of controlEntries) {
      if (!controlDescription) continue;
      const type = controlDescription.type;
      assert(type !== 'array', 'Array properties are not supported',);
      assert(type !== 'object', 'Object properties are not supported',);
      schema[key7] = {
        type,
        isNullable: true,
      };
    }
    this.schema = schema;
  }
  getDatabaseItem(item, pointer,) {
    const data2 = {};
    for (const key7 in this.schema) {
      const value = item[key7];
      if (isNullish2(value,)) continue;
      const definition = this.schema[key7];
      if (isUndefined(definition,)) continue;
      assert(definition.type !== 'unknown', 'Invalid definition type',);
      data2[key7] = {
        type: definition.type,
        // biome-ignore lint/suspicious/noExplicitAny: Existing.
        value,
      };
    }
    return {
      pointer,
      data: data2,
    };
  }
  async resolveRichText(pointer,) {
    if (LazyValue.is(pointer,)) {
      const promise = pointer.preload();
      if (promise) await promise;
      return pointer.read();
    }
    return pointer;
  }
  async scanItems() {
    const items = await getCollectionItems(this.collection, this.locale,);
    return items.map((item, index,) => {
      const pointer = String(index,);
      return this.getDatabaseItem(item, pointer,);
    },);
  }
  async resolveItems(pointers,) {
    const items = await getCollectionItems(this.collection, this.locale,);
    return pointers.map((pointer) => {
      const index = Number(pointer,);
      const item = items[index];
      assert(item, 'Can\'t find collection item',);
      return this.getDatabaseItem(item, pointer,);
    },);
  }
  compareItems(left, right,) {
    return Number(left.pointer,) - Number(right.pointer,);
  }
};
function compareArray(left, right, collation11,) {
  const leftLength = left.value.length;
  const rightLength = right.value.length;
  if (leftLength < rightLength) return -1;
  if (leftLength > rightLength) return 1;
  for (let i = 0; i < leftLength; i++) {
    const leftItem = left.value[i];
    const rightItem = right.value[i];
    const result = compare(leftItem, rightItem, collation11,);
    if (result !== 0) return result;
  }
  return 0;
}
function castArray(value, definition,) {
  switch (value == null ? void 0 : value.type) {
    case 'array': {
      const result = value.value.map((item) => {
        return DatabaseValue.cast(item, definition.definition,);
      },);
      return {
        type: 'array',
        value: result,
      };
    }
  }
  return null;
}
function compareBoolean(left, right,) {
  if (left.value < right.value) return -1;
  if (left.value > right.value) return 1;
  return 0;
}
function castBoolean(value,) {
  switch (value == null ? void 0 : value.type) {
    case 'boolean': {
      return value;
    }
    case 'number':
    case 'string': {
      return {
        type: 'boolean',
        value: Boolean(value.value,),
      };
    }
  }
  return null;
}
function valueToBoolean(value,) {
  const cast = castBoolean(value,);
  return (cast == null ? void 0 : cast.value) ?? false;
}
function compareColor(left, right,) {
  if (left.value < right.value) return -1;
  if (left.value > right.value) return 1;
  return 0;
}
function castColor(value,) {
  switch (value == null ? void 0 : value.type) {
    case 'color': {
      return value;
    }
  }
  return null;
}
function compareDate(left, right,) {
  const leftDate = new Date(left.value,);
  const rightDate = new Date(right.value,);
  if (leftDate < rightDate) return -1;
  if (leftDate > rightDate) return 1;
  return 0;
}
function castDate(value,) {
  switch (value == null ? void 0 : value.type) {
    case 'date': {
      return value;
    }
    case 'number':
    case 'string': {
      const date = new Date(value.value,);
      if (isValidDate(date,)) {
        return {
          type: 'date',
          value: date.toISOString(),
        };
      }
      return null;
    }
  }
  return null;
}
function compareEnum(left, right,) {
  if (left.value < right.value) return -1;
  if (left.value > right.value) return 1;
  return 0;
}
function castEnum(value,) {
  switch (value == null ? void 0 : value.type) {
    case 'enum': {
      return value;
    }
    case 'string': {
      return {
        type: 'enum',
        value: value.value,
      };
    }
  }
  return null;
}
function compareFile(left, right,) {
  if (left.value < right.value) return -1;
  if (left.value > right.value) return 1;
  return 0;
}
function castFile(value,) {
  switch (value == null ? void 0 : value.type) {
    case 'file': {
      return value;
    }
  }
  return null;
}
function compareLink(left, right,) {
  const leftEncoded = JSON.stringify(left.value,);
  const rightEncoded = JSON.stringify(right.value,);
  if (leftEncoded < rightEncoded) return -1;
  if (leftEncoded > rightEncoded) return 1;
  return 0;
}
function castLink(value,) {
  switch (value == null ? void 0 : value.type) {
    case 'link': {
      return value;
    }
    case 'string': {
      try {
        const {
          protocol,
        } = new URL(value.value,);
        if (protocol === 'http:' || protocol === 'https:') {
          return {
            type: 'link',
            value: value.value,
          };
        }
        return null;
      } catch {
        return null;
      }
    }
  }
  return null;
}
function compareNumber(left, right,) {
  if (left.value < right.value) return -1;
  if (left.value > right.value) return 1;
  return 0;
}
function castNumber(value,) {
  switch (value == null ? void 0 : value.type) {
    case 'number':
    case 'string': {
      const number2 = Number(value.value,);
      if (Number.isFinite(number2,)) {
        return {
          type: 'number',
          value: number2,
        };
      }
      return null;
    }
  }
  return null;
}
function valueToNumber(value,) {
  const cast = castNumber(value,);
  return (cast == null ? void 0 : cast.value) ?? null;
}
function compareObject(left, right, collation11,) {
  const leftKeys = Object.keys(left.value,).sort();
  const rightKeys = Object.keys(right.value,).sort();
  if (leftKeys.length < rightKeys.length) return -1;
  if (leftKeys.length > rightKeys.length) return 1;
  for (let i = 0; i < leftKeys.length; i++) {
    const leftKey = leftKeys[i];
    const rightKey = rightKeys[i];
    if (leftKey < rightKey) return -1;
    if (leftKey > rightKey) return 1;
    const leftValue = left.value[leftKey] ?? null;
    const rightValue = right.value[rightKey] ?? null;
    const result = compare(leftValue, rightValue, collation11,);
    if (result !== 0) return result;
  }
  return 0;
}
function castObject(value, definition,) {
  switch (value == null ? void 0 : value.type) {
    case 'object': {
      const result = {};
      const definitionEntries = Object.entries(definition.definitions,);
      for (const [key7, itemDefinition,] of definitionEntries) {
        const item = value.value[key7] ?? null;
        result[key7] = DatabaseValue.cast(item, itemDefinition,);
      }
      return {
        type: 'object',
        value: result,
      };
    }
  }
  return null;
}
function compareResponsiveImage(left, right,) {
  const leftEncoded = JSON.stringify(left.value,);
  const rightEncoded = JSON.stringify(right.value,);
  if (leftEncoded < rightEncoded) return -1;
  if (leftEncoded > rightEncoded) return 1;
  return 0;
}
function castResponsiveImage(value,) {
  switch (value == null ? void 0 : value.type) {
    case 'responsiveimage': {
      return value;
    }
  }
  return null;
}
function compareRichText(left, right,) {
  const leftValue = left.value;
  const rightValue = right.value;
  if (leftValue < rightValue) return -1;
  if (leftValue > rightValue) return 1;
  return 0;
}
function castRichText(value,) {
  switch (value == null ? void 0 : value.type) {
    case 'richtext': {
      return value;
    }
  }
  return null;
}
function compareVectorSetItem(left, right,) {
  const leftValue = left.value;
  const rightValue = right.value;
  if (leftValue < rightValue) return -1;
  if (leftValue > rightValue) return 1;
  return 0;
}
function castVectorSetItem(value,) {
  switch (value == null ? void 0 : value.type) {
    case 'vectorsetitem': {
      return value;
    }
  }
  return null;
}
function compareString(left, right, collation11,) {
  let leftValue = left.value;
  let rightValue = right.value;
  if (collation11.type === 0) {
    leftValue = left.value.toLowerCase();
    rightValue = right.value.toLowerCase();
  }
  if (leftValue < rightValue) return -1;
  if (leftValue > rightValue) return 1;
  return 0;
}
function castString(value,) {
  switch (value == null ? void 0 : value.type) {
    case 'string': {
      return value;
    }
    case 'number': {
      return {
        type: 'string',
        value: String(value.value,),
      };
    }
  }
  return null;
}
function valueToString(value,) {
  const cast = castString(value,);
  return (cast == null ? void 0 : cast.value) ?? null;
}
var DatabaseValue = {
  /**
   * Casts a value to a different type.
   */
  cast(value, definition,) {
    switch (definition.type) {
      case 'array':
        return castArray(value, definition,);
      case 'boolean':
        return castBoolean(value,);
      case 'color':
        return castColor(value,);
      case 'date':
        return castDate(value,);
      case 'enum':
        return castEnum(value,);
      case 'file':
        return castFile(value,);
      case 'link':
        return castLink(value,);
      case 'number':
        return castNumber(value,);
      case 'object':
        return castObject(value, definition,);
      case 'responsiveimage':
        return castResponsiveImage(value,);
      case 'richtext':
        return castRichText(value,);
      case 'string':
        return castString(value,);
      case 'vectorsetitem':
        return castVectorSetItem(value,);
      case 'unknown':
        return value;
      default:
        assertNever(definition, 'Unsupported cast',);
    }
  },
  /**
   * Parses a JavaScript variable into a DatabaseValue.
   */
  parse(value,) {
    if (isBoolean(value,)) {
      return {
        type: 'boolean',
        value,
      };
    }
    if (isValidDate(value,)) {
      return {
        type: 'date',
        value: value.toISOString(),
      };
    }
    if (isNumber2(value,)) {
      return {
        type: 'number',
        value,
      };
    }
    if (isString(value,)) {
      return {
        type: 'string',
        value,
      };
    }
    if (isArray(value,)) {
      return {
        type: 'array',
        value: value.map(DatabaseValue.parse,),
      };
    }
    return null;
  },
  /**
   * Checks if the left value is equal to the right value. Returns false if
   * the values are not of the same type.
   */
  equal(left, right, collation11,) {
    if ((left == null ? void 0 : left.type) !== (right == null ? void 0 : right.type)) {
      return false;
    }
    return compare(left, right, collation11,) === 0;
  },
  /**
   * Checks if the left value is less than the right value. Returns false if
   * the values are not of the same type.
   */
  lessThan(left, right, collation11,) {
    if ((left == null ? void 0 : left.type) !== (right == null ? void 0 : right.type)) {
      return false;
    }
    return compare(left, right, collation11,) < 0;
  },
  /**
   * Checks if the left value is less than or equal to the right value.
   * Returns false if the values are not of the same type.
   */
  lessThanOrEqual(left, right, collation11,) {
    if ((left == null ? void 0 : left.type) !== (right == null ? void 0 : right.type)) {
      return false;
    }
    return compare(left, right, collation11,) <= 0;
  },
  /**
   * Checks if the left value is greater than the right value. Returns false
   * if the values are not of the same type.
   */
  greaterThan(left, right, collation11,) {
    if ((left == null ? void 0 : left.type) !== (right == null ? void 0 : right.type)) {
      return false;
    }
    return compare(left, right, collation11,) > 0;
  },
  /**
   * Checks if the left value is greater than or equal to the right value.
   * Returns false if the values are not of the same type.
   */
  greaterThanOrEqual(left, right, collation11,) {
    if ((left == null ? void 0 : left.type) !== (right == null ? void 0 : right.type)) {
      return false;
    }
    return compare(left, right, collation11,) >= 0;
  },
  /**
   * Checks if the left value is in the right value. Returns false if the
   * right value is not an array.
   */
  in(left, right, collation11,) {
    if ((right == null ? void 0 : right.type) !== 'array') return false;
    return right.value.some((item) => {
      return DatabaseValue.equal(item, left, collation11,);
    },);
  },
  /**
   * Get the index of the first occurrence of `target` in `source`.
   *
   * If source has duplicates, the index of the first occurrence is always returned.
   */
  indexOf(source, target, collation11,) {
    if ((source == null ? void 0 : source.type) !== 'array') return -1;
    return source.value.findIndex((item) => {
      return DatabaseValue.equal(item, target, collation11,);
    },);
  },
  contains(source, target, collation11,) {
    let sourceValue = valueToString(source,);
    let targetValue = valueToString(target,);
    if (isNull(sourceValue,)) return false;
    if (isNull(targetValue,)) return false;
    if (collation11.type === 0) {
      sourceValue = sourceValue.toLowerCase();
      targetValue = targetValue.toLowerCase();
    }
    return sourceValue.includes(targetValue,);
  },
  startsWith(source, target, collation11,) {
    let sourceValue = valueToString(source,);
    let targetValue = valueToString(target,);
    if (isNull(sourceValue,)) return false;
    if (isNull(targetValue,)) return false;
    if (collation11.type === 0) {
      sourceValue = sourceValue.toLowerCase();
      targetValue = targetValue.toLowerCase();
    }
    return sourceValue.startsWith(targetValue,);
  },
  endsWith(source, target, collation11,) {
    let sourceValue = valueToString(source,);
    let targetValue = valueToString(target,);
    if (isNull(sourceValue,)) return false;
    if (isNull(targetValue,)) return false;
    if (collation11.type === 0) {
      sourceValue = sourceValue.toLowerCase();
      targetValue = targetValue.toLowerCase();
    }
    return sourceValue.endsWith(targetValue,);
  },
  length(value,) {
    switch (value == null ? void 0 : value.type) {
      case 'array':
        return value.value.length;
    }
    return 0;
  },
  stringify(value,) {
    if (value === null) {
      return 'null';
    }
    switch (value.type) {
      case 'array':
        return `[${value.value.map(DatabaseValue.stringify,).join(', ',)}]`;
      case 'boolean':
      case 'number':
        return String(value.value,);
      case 'string':
        return `'${value.value}'`;
      case 'enum':
        return `'${value.value}' /* Enum */`;
      case 'color':
        return `'${value.value}' /* Color */`;
      case 'date':
        return `'${value.value}' /* Date */`;
      case 'richtext':
        return 'RichText';
      case 'vectorsetitem':
        return 'VectorSetItem';
      case 'responsiveimage':
        return 'ResponsiveImage';
      case 'file':
        return 'File';
      case 'link':
        return isString(value.value,) ? `'${value.value}' /* Link */` : 'Link';
      case 'object':
        return 'Object';
      default:
        assertNever(value,);
    }
  },
};
function compare(left, right, collation11,) {
  if (isNull(left,) || isNull(right,)) {
    assert(left === right,);
    return 0;
  }
  switch (left.type) {
    case 'array': {
      assert(left.type === right.type,);
      return compareArray(left, right, collation11,);
    }
    case 'boolean': {
      assert(left.type === right.type,);
      return compareBoolean(left, right,);
    }
    case 'color': {
      assert(left.type === right.type,);
      return compareColor(left, right,);
    }
    case 'date': {
      assert(left.type === right.type,);
      return compareDate(left, right,);
    }
    case 'enum': {
      assert(left.type === right.type,);
      return compareEnum(left, right,);
    }
    case 'file': {
      assert(left.type === right.type,);
      return compareFile(left, right,);
    }
    case 'link': {
      assert(left.type === right.type,);
      return compareLink(left, right,);
    }
    case 'number': {
      assert(left.type === right.type,);
      return compareNumber(left, right,);
    }
    case 'object': {
      assert(left.type === right.type,);
      return compareObject(left, right, collation11,);
    }
    case 'responsiveimage': {
      assert(left.type === right.type,);
      return compareResponsiveImage(left, right,);
    }
    case 'richtext': {
      assert(left.type === right.type,);
      return compareRichText(left, right,);
    }
    case 'vectorsetitem': {
      assert(left.type === right.type,);
      return compareVectorSetItem(left, right,);
    }
    case 'string': {
      assert(left.type === right.type,);
      return compareString(left, right, collation11,);
    }
    default: {
      assertNever(left,);
    }
  }
}
var unknownDefinition = {
  type: 'unknown',
  isNullable: true,
};
function getNetworkLatency() {
  return 25;
}
function getNetworkSpeed() {
  return 100 * 125;
}
var KB = 1e3;
var Cost = class _Cost {
  constructor(network,) {
    this.network = network;
  }
  static estimate(totalRequests, transferredBytes,) {
    const latency = getNetworkLatency();
    const speed = getNetworkSpeed();
    const network = totalRequests * latency + transferredBytes / speed;
    return new _Cost(network,);
  }
  static max(left, right,) {
    const network = Math.max(left.network, right.network,);
    return new _Cost(network,);
  }
  static compare(left, right,) {
    if (left.network < right.network) return -1;
    if (left.network > right.network) return 1;
    return 0;
  }
  add(cost,) {
    this.network += cost.network;
    return this;
  }
  toString() {
    return `${this.network}ms`;
  }
};
function GroupId(id3,) {
  return id3;
}
var Group = class {
  constructor(id3, relational,) {
    this.id = id3;
    this.relational = relational;
    __publicField(this, 'nodes', [],);
    __publicField(this, 'winners', /* @__PURE__ */ new Map(),);
  }
  /**
   * Adds a node to the group. Throws an error if the node is already in a
   * group.
   */
  addNode(node,) {
    this.nodes.push(node,);
    node.setGroup(this,);
  }
  /**
   * Returns the winner for the given required physical props. The winner
   * stores the best node and its cost. This is used to find the best node in
   * the group.
   */
  getWinner(required,) {
    const hash2 = required.getHash();
    const existing = this.winners.get(hash2,);
    if (existing) return existing;
    const winner = new Winner();
    this.winners.set(hash2, winner,);
    return winner;
  }
  /**
   * Returns the optimized version of the node. The optimized version is the
   * node with the lowest cost with all children replaced with their optimized
   * versions. This is used to create the final optimized query plan.
   */
  getOptimized(required,) {
    const winner = this.getWinner(required,);
    assert(winner.node, 'Group not optimized',);
    const optimizer = winner.node.getOptimized(required,);
    optimizer.setGroup(this,);
    return optimizer;
  }
};
var Winner = class {
  constructor() {
    __publicField(this, 'node',);
    __publicField(this, 'cost', new Cost(Infinity,),);
    __publicField(this, 'nodes', [],);
  }
  update(node, cost,) {
    this.nodes.push(node,);
    if (Cost.compare(cost, this.cost,) < 0) {
      this.node = node;
      this.cost = cost;
    }
  }
};
function evaluateSync(generator,) {
  const state = generator.next();
  assert(state.done, 'Generator must not yield',);
  return state.value;
}
async function evaluateAsync(generator, state = generator.next(),) {
  while (!state.done) {
    const value = await state.value;
    state = generator.next(value,);
  }
  return state.value;
}
function* evaluateObject(values,) {
  const result = {};
  const keys3 = Object.keys(values,);
  const promises = [];
  for (const key7 of keys3) {
    const generator = values[key7];
    if (isGenerator2(generator,)) {
      const state = generator.next();
      if (state.done) {
        result[key7] = state.value;
      } else {
        promises.push(
          evaluateAsync(generator, state,).then((value) => {
            result[key7] = value;
          },),
        );
      }
    } else {
      result[key7] = generator;
    }
  }
  if (promises.length > 0) {
    yield Promise.all(promises,);
  }
  return result;
}
function* evaluateArray(values,) {
  const result = [];
  const keys3 = values.keys();
  const promises = [];
  for (const key7 of keys3) {
    const generator = values[key7];
    if (isGenerator2(generator,)) {
      const state = generator.next();
      if (state.done) {
        result[key7] = state.value;
      } else {
        promises.push(
          evaluateAsync(generator, state,).then((value) => {
            result[key7] = value;
          },),
        );
      }
    } else {
      result[key7] = generator;
    }
  }
  if (promises.length > 0) {
    yield Promise.all(promises,);
  }
  return result;
}
var AbstractNode = class {
  constructor(isSynchronous,) {
    this.isSynchronous = isSynchronous;
  }
};
var RelationalNode = class extends AbstractNode {
  constructor() {
    super(...arguments,);
    __publicField(this, 'group',);
  }
  /**
   * Returns the group that the node belongs to. Throws an error if the node
   * is not in a group. This should only happen in the constructor because
   * every node is added to a group right after creation.
   */
  getGroup() {
    assert(this.group, 'Node must be in a group',);
    return this.group;
  }
  /**
   * Adds the node to the given group. Throws an error if the node is already
   * in a group.
   */
  setGroup(group,) {
    assert(!this.group, 'Node is already in a group',);
    this.group = group;
  }
  /**
   * Evaluates the node and all children synchronously. Throws an error if the
   * node is not synchronous.
   */
  evaluateSync() {
    const generator = this.evaluate(void 0,);
    return evaluateSync(generator,);
  }
  /**
   * Evaluates the node and all children asynchronously.
   */
  evaluateAsync() {
    const generator = this.evaluate(void 0,);
    return evaluateAsync(generator,);
  }
};
function Hash(value,) {
  return value;
}
function isHashable(value,) {
  return isObject2(value,) && isFunction(value.getHash,);
}
function calculateHash(name, ...values) {
  const hashes = values.map((value) => {
    const isCollectionMetadata = value instanceof CollectionMetadata;
    assert(!isCollectionMetadata, 'Pass CollectionMetadata.id instead',);
    const isFieldMetadata = value instanceof FieldMetadata;
    assert(!isFieldMetadata, 'Pass FieldMetadata.id instead',);
    const isIndexMetadata = value instanceof IndexMetadata;
    assert(!isIndexMetadata, 'Pass IndexMetadata.id instead',);
    const isRelationalNode = value instanceof RelationalNode;
    assert(!isRelationalNode, 'Pass RelationalNode.group.id instead',);
    const isGroup = value instanceof Group;
    assert(!isGroup, 'Pass Group.id instead',);
    if (isHashable(value,)) {
      return value.getHash();
    }
    return JSON.stringify(value,);
  },);
  return Hash(`${name}(${hashes.join(', ',)})`,);
}
var RichTextResolver = class {
  constructor(data2, pointer,) {
    this.data = data2;
    this.pointer = pointer;
    __publicField(this, 'cached',);
  }
  resolve() {
    this.cached ??= this.data.resolveRichText(this.pointer,);
    return this.cached;
  }
};
var VectorSetItemResolver = class {
  constructor(data2, pointer,) {
    this.data = data2;
    this.pointer = pointer;
    __publicField(this, 'cached',);
  }
  resolve() {
    assert(this.data.resolveVectorSetItem, 'Can\'t resolve vector set item.',);
    this.cached ??= this.data.resolveVectorSetItem(this.pointer,);
    return this.cached;
  }
};
var VIRTUAL_INDEX_FIELD = 'index';
var Metadata = class extends Set {
  merge(other,) {
    for (const item of other) {
      this.add(item,);
    }
  }
  equals(other,) {
    if (this === other) return true;
    if (this.size !== other.size) return false;
    for (const item of this) {
      if (!other.has(item,)) return false;
    }
    return true;
  }
  subsetOf(other,) {
    if (this === other) return true;
    if (this.size > other.size) return false;
    for (const item of this) {
      if (!other.has(item,)) return false;
    }
    return true;
  }
  getHash() {
    const ids = [];
    for (const item of this) {
      ids.push(item.id,);
    }
    ids.sort((a, b,) => a - b);
    return calculateHash(this.name, ...ids,);
  }
};
function CollectionId(id3,) {
  return id3;
}
var CollectionMetadata = class {
  constructor(id3, name, data2,) {
    this.id = id3;
    this.name = name;
    this.data = data2;
    __publicField(this, 'indexes', new Indexes(),);
    __publicField(this, 'fields', new Fields(),);
  }
};
function IndexId(id3,) {
  return id3;
}
var IndexMetadata = class {
  constructor(id3, data2, collection, lookupNodes, constraint, ordering,) {
    this.id = id3;
    this.data = data2;
    this.collection = collection;
    this.lookupNodes = lookupNodes;
    this.constraint = constraint;
    this.ordering = ordering;
    __publicField(this, 'resolvedFields', new Fields(),);
    for (const fieldName in data2.schema) {
      for (const field of collection.fields) {
        if (field.name === fieldName) {
          this.resolvedFields.add(field,);
        }
      }
    }
  }
};
var Indexes = class extends Metadata {
  constructor() {
    super(...arguments,);
    __publicField(this, 'name', 'Indexes',);
  }
};
function FieldId(id3,) {
  return id3;
}
var FieldMetadata = class {
  constructor(id3, name, definition, collection,) {
    this.id = id3;
    this.name = name;
    this.definition = definition;
    this.collection = collection;
  }
  getValue(item,) {
    assert(this.name, 'Can only get value of field with a name',);
    const value = item.data[this.name];
    if ((value == null ? void 0 : value.type) === 'richtext') {
      assert(this.collection, 'Rich text field must have a collection',);
      return {
        type: 'richtext',
        value: new RichTextResolver(this.collection.data, value.value,),
      };
    }
    if ((value == null ? void 0 : value.type) === 'vectorsetitem') {
      assert(this.collection, 'Vector set item field must have a collection',);
      return {
        type: 'vectorsetitem',
        value: new VectorSetItemResolver(this.collection.data, value.value,),
      };
    }
    return value ?? null;
  }
};
var Fields = class extends Metadata {
  constructor() {
    super(...arguments,);
    __publicField(this, 'name', 'Fields',);
  }
};
var OrderingField = class {
  constructor(field, direction = 'asc',) {
    this.field = field;
    this.direction = direction;
  }
  getHash() {
    return calculateHash('OrderingField', this.field.id, this.direction,);
  }
};
var Ordering = class {
  constructor(ordering,) {
    __publicField(this, 'fields', [],);
    if (ordering) {
      this.merge(ordering,);
    }
  }
  get length() {
    return this.fields.length;
  }
  getHash() {
    return calculateHash('Ordering', ...this.fields,);
  }
  push(field,) {
    this.fields.push(field,);
  }
  merge(ordering,) {
    this.fields.push(...ordering.fields,);
  }
  equals(other,) {
    if (this === other) return true;
    if (this.length !== other.length) return false;
    return this.getHash() === other.getHash();
  }
  providedByFields(fields,) {
    for (
      const {
        field,
      } of this.fields
    ) {
      if (fields.has(field,)) continue;
      if (field.name === VIRTUAL_INDEX_FIELD) continue;
      return false;
    }
    return true;
  }
};
var RequiredProps = class {
  constructor(ordering, resolvedFields,) {
    this.ordering = ordering;
    this.resolvedFields = resolvedFields;
  }
  getHash() {
    return calculateHash('RequiredProps', this.ordering, this.resolvedFields,);
  }
  /**
   * Required props with no ordering and no resolved fields are considered
   * minimal. Every node can provide them.
   */
  get isMinimal() {
    return this.ordering.length === 0 && this.resolvedFields.size === 0;
  }
  /**
   * Checks if the node can provide the required props. If it can't, we need
   * to add enforcers that provides them.
   *
   * Some nodes don't provide the required props directly, but can pass them
   * through to their children. E.g. a `RelationalFilter` returns the relation
   * in the same order and with the same resolved fields as its input. These
   * nodes should return `true` and pass the required props to their children.
   */
  canProvide(node,) {
    return this.canProvideOrdering(node,) && this.canProvideResolvedFields(node,);
  }
  /**
   * Checks if the given node can provide the required ordering. If it can't,
   * we need to add an `EnforcerSort` node that provides it.
   */
  canProvideOrdering(node,) {
    if (this.ordering.length === 0) return true;
    return node.canProvideOrdering(this.ordering,);
  }
  /**
   * Checks if the given node can provide the required resolved fields. If it
   * can't, we need to add an `EnforcerResolve` node that provides it.
   */
  canProvideResolvedFields(node,) {
    if (this.resolvedFields.size === 0) return true;
    return node.canProvideResolvedFields(this.resolvedFields,);
  }
};
var Scope = class _Scope {
  constructor(parent,) {
    this.parent = parent;
    __publicField(this, 'node',);
    __publicField(this, 'ordering',);
    __publicField(this, 'fields', [],);
  }
  /**
   * Returns the last node built in the scope and removes it from the scope.
   * Throws an error if no node was built in the scope yet.
   */
  takeNode() {
    const node = this.node;
    assert(node, 'Node is missing',);
    this.node = void 0;
    return node;
  }
  /**
   * Sets the last node built in the scope. Throws an error if there is
   * already a node in the scope.
   */
  setNode(node,) {
    assert(!this.node, 'Node already set',);
    this.node = node;
  }
  setOrdering(ordering,) {
    this.ordering = ordering;
  }
  /**
   * Create a new scope with the this scope as its parent.
   */
  push() {
    return new _Scope(this,);
  }
  /**
   * Creates a new scope with the parent of the this scope as its parent.
   */
  replace() {
    return new _Scope(this.parent,);
  }
  /**
   * Adds a field to this scope. Any fields that are added will be available
   * in the this scope and all of its children.
   */
  addField(scopeField,) {
    this.fields.push(scopeField,);
  }
  /**
   * Merges all fields from the given scope into the this scope.
   */
  addFieldsFromScope(scope,) {
    for (const scopeField of scope.fields) {
      this.addField(scopeField,);
    }
  }
  /**
   * Resolves a field from this scope. If the field is not found, the parent
   * scope is checked. If the name of a field is ambiguous, an error is
   * thrown.
   */
  resolveField(name, collection,) {
    var _a;
    const candidates = [];
    for (const field of this.fields) {
      if (field.name !== name) continue;
      if (collection && field.collectionName !== collection) continue;
      candidates.push(field,);
    }
    if (candidates.length === 1) {
      return candidates[0];
    }
    if (candidates.length > 1) {
      throw new Error('Ambiguous fields',);
    }
    return (_a = this.parent) == null ? void 0 : _a.resolveField(name, collection,);
  }
  /**
   * Checks if the scope or any parent scope has the given scope field.
   */
  has(scopeField,) {
    var _a;
    if (this.fields.includes(scopeField,)) {
      return true;
    }
    return ((_a = this.parent) == null ? void 0 : _a.has(scopeField,)) ?? false;
  }
  /**
   * Returns the required ordering for the scope.
   */
  getRequiredOrdering() {
    return this.ordering ?? new Ordering();
  }
  /**
   * Returns the required resolved fields for the scope.
   */
  getRequiredResolvedFields() {
    const resolvedFields = new Fields();
    for (
      const {
        field,
      } of this.fields
    ) {
      if (field.collection) {
        resolvedFields.add(field,);
      }
    }
    return resolvedFields;
  }
  /**
   * Returns the set of required physical props for this scope. This is used
   * to create the required props for the root node in the optimizer.
   */
  getRequiredProps() {
    const ordering = this.getRequiredOrdering();
    const resolvedFields = this.getRequiredResolvedFields();
    return new RequiredProps(ordering, resolvedFields,);
  }
  /**
   * Returns a map of the fields in this scope, with their scope names as
   * keys. This is used to create the final `QueryResult` with the correct
   * field names.
   */
  getNamedFields() {
    const namedFields = {};
    for (
      const {
        name,
        field,
      } of this.fields
    ) {
      namedFields[name] = field;
    }
    return namedFields;
  }
  /**
   * Returns the single field from this scope if it only contains one field.
   * Throws an error if there are more than one fields.
   */
  getSingleField() {
    assert(this.fields.length === 1, 'Scope must contain exactly one field',);
    const scopeField = this.fields[0];
    assert(scopeField, 'Field must exist',);
    return scopeField.field;
  }
};
var Tuple = class {
  constructor() {
    __publicField(this, 'pointers', /* @__PURE__ */ new Map(),);
    __publicField(this, 'values', /* @__PURE__ */ new Map(),);
  }
  getKey() {
    const result = [];
    for (const [collection, pointer,] of this.pointers) {
      result.push(`${collection.id}-${pointer}`,);
    }
    return result.sort().join('-',);
  }
  addValue(field, value,) {
    this.values.set(field, value,);
  }
  getValue(field,) {
    return this.values.get(field,) ?? null;
  }
  mergeValues(tuple,) {
    for (const [field, value,] of tuple.values) {
      this.addValue(field, value,);
    }
  }
  addPointer(collection, pointer,) {
    this.pointers.set(collection, pointer,);
  }
  getPointer(collection,) {
    return this.pointers.get(collection,);
  }
  mergePointers(tuple,) {
    for (const [collection, pointer,] of tuple.pointers) {
      this.addPointer(collection, pointer,);
    }
  }
  merge(tuple,) {
    this.mergeValues(tuple,);
    this.mergePointers(tuple,);
  }
};
var Relation = class _Relation {
  constructor(fields, tuples = [],) {
    this.fields = fields;
    this.tuples = tuples;
  }
  push(tuple,) {
    this.tuples.push(tuple,);
  }
  filter(predicate,) {
    const tuples = this.tuples.filter(predicate,);
    return new _Relation(this.fields, tuples,);
  }
  map(fields, callback,) {
    const tuples = this.tuples.map(callback,);
    return new _Relation(fields, tuples,);
  }
  sort(callback,) {
    const tuples = Array.from(this.tuples,).sort(callback,);
    return new _Relation(this.fields, tuples,);
  }
  slice(start2, end,) {
    const tuples = this.tuples.slice(start2, end,);
    return new _Relation(this.fields, tuples,);
  }
  union(other,) {
    const fields = new Fields();
    for (const field of this.fields) {
      if (other.fields.has(field,)) {
        fields.add(field,);
      }
    }
    const keys3 = /* @__PURE__ */ new Set();
    const result = new _Relation(fields,);
    for (const tuple of this.tuples) {
      const key7 = tuple.getKey();
      keys3.add(key7,);
      result.push(tuple,);
    }
    for (const tuple of other.tuples) {
      const key7 = tuple.getKey();
      if (keys3.has(key7,)) continue;
      result.push(tuple,);
    }
    return result;
  }
  intersection(other,) {
    const fields = new Fields();
    for (const field of this.fields) {
      if (other.fields.has(field,)) {
        fields.add(field,);
      }
    }
    const keys3 = /* @__PURE__ */ new Set();
    const result = new _Relation(fields,);
    for (const tuple of this.tuples) {
      const key7 = tuple.getKey();
      keys3.add(key7,);
    }
    for (const tuple of other.tuples) {
      const key7 = tuple.getKey();
      if (!keys3.has(key7,)) continue;
      result.push(tuple,);
    }
    return result;
  }
};
var ProjectionField = class {
  constructor(input, field,) {
    this.input = input;
    this.field = field;
  }
  getHash() {
    return calculateHash('ProjectionField', this.input, this.field.id,);
  }
};
var RelationalProject = class _RelationalProject extends RelationalNode {
  constructor(input, projections, passthrough,) {
    let isSynchronous = input.isSynchronous;
    for (const projection of projections) {
      isSynchronous &&= projection.input.isSynchronous;
    }
    super(isSynchronous,);
    this.input = input;
    this.projections = projections;
    this.passthrough = passthrough;
    __publicField(this, 'inputGroup',);
    this.inputGroup = input.getGroup();
  }
  getHash() {
    return calculateHash('RelationalProject', this.inputGroup.id, ...this.projections, this.passthrough,);
  }
  getOutputFields() {
    const fields = new Fields();
    fields.merge(this.passthrough,);
    for (const projection of this.projections) {
      fields.add(projection.field,);
    }
    return fields;
  }
  canProvideOrdering(ordering,) {
    const projectionFields = new Fields();
    for (const projection of this.projections) {
      projectionFields.add(projection.field,);
    }
    for (
      const {
        field,
      } of ordering.fields
    ) {
      if (projectionFields.has(field,)) {
        return false;
      }
    }
    return true;
  }
  canProvideResolvedFields() {
    return true;
  }
  getInputRequiredProps(required,) {
    const resolvedFields = new Fields(required.resolvedFields,);
    for (const projection of this.projections) {
      resolvedFields.merge(projection.input.referencedFields,);
      resolvedFields.delete(projection.field,);
    }
    return new RequiredProps(required.ordering, resolvedFields,);
  }
  optimize(optimizer, required,) {
    const inputRequired = this.getInputRequiredProps(required,);
    const inputCost = optimizer.optimizeGroup(this.inputGroup, inputRequired,);
    let projectionsCost = new Cost(0,);
    for (const projection of this.projections) {
      const projectionCost = projection.input.optimize(optimizer,);
      projectionsCost = Cost.max(projectionsCost, projectionCost,);
    }
    return new Cost(0,).add(Cost.max(inputCost, projectionsCost,),);
  }
  getOptimized(required,) {
    const inputRequired = this.getInputRequiredProps(required,);
    const input = this.inputGroup.getOptimized(inputRequired,);
    const projections = this.projections.map((projection) => {
      const projectionInput = projection.input.getOptimized();
      return new ProjectionField(projectionInput, projection.field,);
    },);
    return new _RelationalProject(input, projections, this.passthrough,);
  }
  *evaluate(context,) {
    const outputFields = this.getOutputFields();
    const input = yield* this.input.evaluate(context,);
    const projectedValues = yield* evaluateArray(
      input.tuples.map((tuple) =>
        evaluateArray(this.projections.map((projection) =>
          evaluateObject({
            field: projection.field,
            value: projection.input.evaluate(context, tuple,),
          },)
        ),)
      ),
    );
    return input.map(outputFields, (tuple, index,) => {
      const result = new Tuple();
      result.mergePointers(tuple,);
      for (const field of this.passthrough) {
        const value = tuple.getValue(field,);
        result.addValue(field, value,);
      }
      const projections = projectedValues[index];
      assert(projections, 'Projections must exist',);
      for (
        const {
          field,
          value,
        } of projections
      ) {
        result.addValue(field, value,);
      }
      return result;
    },);
  }
};
var collation = {
  type: 0,
  /* CaseInsensitive */
};
var ScalarNode = class extends AbstractNode {
  constructor(referencedFields, referencedOuterFields, isSynchronous,) {
    super(isSynchronous,);
    this.referencedFields = referencedFields;
    this.referencedOuterFields = referencedOuterFields;
    this.isSynchronous = isSynchronous;
  }
  /**
   * Evaluates the node and all children synchronously. Throws an error if the
   * node is not synchronous.
   */
  evaluateSync() {
    const generator = this.evaluate(void 0, void 0,);
    return evaluateSync(generator,);
  }
  /**
   * Evaluates the node and all children asynchronously.
   */
  evaluateAsync() {
    const generator = this.evaluate(void 0, void 0,);
    return evaluateAsync(generator,);
  }
};
var collation2 = {
  type: 0,
  /* CaseInsensitive */
};
var CaseCondition = class {
  constructor(when, then,) {
    this.when = when;
    this.then = then;
  }
  getHash() {
    return calculateHash('CaseCondition', this.when, this.then,);
  }
};
var ScalarCase = class _ScalarCase extends ScalarNode {
  constructor(input, conditions, otherwise,) {
    const referencedFields = new Fields();
    const referencedOuterFields = new Fields();
    let isSynchronous = true;
    if (input) {
      referencedFields.merge(input.referencedFields,);
      referencedOuterFields.merge(input.referencedOuterFields,);
      isSynchronous &&= input.isSynchronous;
    }
    for (
      const {
        when,
        then,
      } of conditions
    ) {
      referencedFields.merge(when.referencedFields,);
      referencedOuterFields.merge(when.referencedOuterFields,);
      isSynchronous &&= when.isSynchronous;
      referencedFields.merge(then.referencedFields,);
      referencedOuterFields.merge(then.referencedOuterFields,);
      isSynchronous &&= then.isSynchronous;
    }
    if (otherwise) {
      referencedFields.merge(otherwise.referencedFields,);
      referencedOuterFields.merge(otherwise.referencedOuterFields,);
      isSynchronous &&= otherwise.isSynchronous;
    }
    super(referencedFields, referencedOuterFields, isSynchronous,);
    this.input = input;
    this.conditions = conditions;
    this.otherwise = otherwise;
    __publicField(this, 'definition', {
      type: 'unknown',
      isNullable: true,
    },);
  }
  getHash() {
    return calculateHash('ScalarCase', this.input, ...this.conditions, this.otherwise,);
  }
  optimize(optimizer,) {
    var _a, _b;
    (_a = this.input) == null ? void 0 : _a.optimize(optimizer,);
    for (const condition of this.conditions) {
      condition.when.optimize(optimizer,);
      condition.then.optimize(optimizer,);
    }
    (_b = this.otherwise) == null ? void 0 : _b.optimize(optimizer,);
    return new Cost(0,);
  }
  getOptimized() {
    var _a, _b;
    const input = (_a = this.input) == null ? void 0 : _a.getOptimized();
    const conditions = this.conditions.map((condition) => {
      const when = condition.when.getOptimized();
      const then = condition.then.getOptimized();
      return new CaseCondition(when, then,);
    },);
    const otherwise = (_b = this.otherwise) == null ? void 0 : _b.getOptimized();
    return new _ScalarCase(input, conditions, otherwise,);
  }
  *evaluate(context, tuple,) {
    var _a, _b;
    const {
      input,
      conditions,
      otherwise,
    } = yield* evaluateObject({
      input: ((_a = this.input) == null ? void 0 : _a.evaluate(context, tuple,)) ?? null,
      conditions: evaluateArray(this.conditions.map((condition) =>
        evaluateObject({
          when: condition.when.evaluate(context, tuple,),
          // biome-ignore lint/suspicious/noThenProperty: Existing name.
          then: condition.then.evaluate(context, tuple,),
        },)
      ),),
      otherwise: ((_b = this.otherwise) == null ? void 0 : _b.evaluate(context, tuple,)) ?? null,
    },);
    if (this.input) {
      for (
        const {
          when,
          then,
        } of conditions
      ) {
        if (DatabaseValue.equal(input, when, collation2,)) {
          return then;
        }
      }
    } else {
      for (
        const {
          when,
          then,
        } of conditions
      ) {
        if (valueToBoolean(when,)) {
          return then;
        }
      }
    }
    return otherwise;
  }
};
var Builder = class {
  constructor(normalizer, query, locale,) {
    this.normalizer = normalizer;
    this.query = query;
    this.locale = locale;
    __publicField(this, 'collectionId', 0,);
    __publicField(this, 'indexId', 0,);
    __publicField(this, 'fieldId', 0,);
    __publicField(this, 'subqueries', [],);
  }
  build() {
    const inScope = new Scope();
    return this.buildQuery(inScope, this.query,);
  }
  buildQuery(inScope, query,) {
    const select = {
      type: 'Select',
      ...query,
    };
    return this.buildSelect(inScope, select,);
  }
  buildSelect(inScope, select,) {
    const fromScope = this.buildFrom(inScope, select.from,);
    const defaultOrdering = fromScope.getRequiredOrdering();
    if (select.where) {
      const input = fromScope.takeNode();
      const predicate = this.buildExpression(fromScope, select.where,);
      const node = this.normalizer.newRelationalFilter(input, predicate,);
      fromScope.setNode(node,);
    }
    const orderProjections = [];
    const orderFields = new Fields();
    let ordering;
    if (select.orderBy) {
      ordering = new Ordering();
      for (const order of select.orderBy) {
        if (order.type === 'Identifier') {
          const scopeField = fromScope.resolveField(order.name, order.collection,);
          if (isUndefined(scopeField,)) continue;
          orderFields.add(scopeField.field,);
          const orderingField = new OrderingField(scopeField.field, order.direction,);
          ordering.push(orderingField,);
        } else {
          const expression = this.buildExpression(fromScope, order,);
          const fieldId = FieldId(this.fieldId++,);
          const field = new FieldMetadata(fieldId, void 0, expression.definition, void 0,);
          const projection = new ProjectionField(expression, field,);
          orderProjections.push(projection,);
          const orderingField = new OrderingField(field, order.direction,);
          ordering.push(orderingField,);
        }
      }
      ordering.merge(defaultOrdering,);
    } else {
      ordering = defaultOrdering;
    }
    const projectionScope = this.buildSelectList(fromScope, select.select, orderFields, orderProjections,);
    projectionScope.setOrdering(ordering,);
    if (select.offset) {
      const input = projectionScope.takeNode();
      const offset = this.buildExpression(inScope, select.offset,);
      const node = this.normalizer.newRelationalOffset(input, offset, ordering,);
      projectionScope.setNode(node,);
    }
    if (select.limit) {
      const input = projectionScope.takeNode();
      const limit = this.buildExpression(inScope, select.limit,);
      const node = this.normalizer.newRelationalLimit(input, limit, ordering,);
      projectionScope.setNode(node,);
    }
    return projectionScope;
  }
  buildSelectList(inScope, selects, orderFields, orderProjections,) {
    const outScope = inScope.push();
    const passthrough = new Fields(orderFields,);
    const projections = [...orderProjections,];
    for (const select of selects) {
      if (select.type === 'Identifier') {
        const scopeField = inScope.resolveField(select.name, select.collection,);
        if (isUndefined(scopeField,)) continue;
        passthrough.add(scopeField.field,);
        outScope.addField({
          ...scopeField,
          name: select.alias ?? scopeField.name,
        },);
      } else {
        const expression = this.buildExpression(inScope, select,);
        assert(select.alias, 'Subqueries should have an alias',);
        const fieldId = FieldId(this.fieldId++,);
        const fieldName = select.alias;
        const field = new FieldMetadata(fieldId, fieldName, expression.definition, void 0,);
        const projection = new ProjectionField(expression, field,);
        projections.push(projection,);
        outScope.addField({
          field,
          name: fieldName,
        },);
      }
    }
    const input = inScope.takeNode();
    const node = this.normalizer.newRelationalProject(input, projections, passthrough,);
    outScope.setNode(node,);
    return outScope;
  }
  buildFrom(inScope, from,) {
    switch (from.type) {
      case 'Collection':
        return this.buildCollection(inScope, from,);
      case 'LeftJoin':
        return this.buildJoin(inScope, from,);
      default:
        assertNever(from, 'Unsupported from type',);
    }
  }
  buildCollection(inScope, from,) {
    const outScope = inScope.push();
    const collectionData = getCollection(from.data, this.locale,);
    const collectionName = from.alias;
    const collectionId = CollectionId(this.collectionId++,);
    const collection = new CollectionMetadata(collectionId, collectionName, collectionData,);
    for (const [fieldName, definition,] of Object.entries(collectionData.schema,)) {
      const fieldId = FieldId(this.fieldId++,);
      const field = new FieldMetadata(fieldId, fieldName, definition, collection,);
      outScope.addField({
        field,
        name: fieldName,
        collectionName,
      },);
      collection.fields.add(field,);
    }
    {
      const definition = {
        type: 'number',
        isNullable: false,
      };
      const fieldId = FieldId(this.fieldId++,);
      const field = new FieldMetadata(fieldId, VIRTUAL_INDEX_FIELD, definition, collection,);
      outScope.addField({
        field,
        name: VIRTUAL_INDEX_FIELD,
        collectionName,
      },);
      const ordering = new Ordering();
      const orderingField = new OrderingField(field,);
      ordering.push(orderingField,);
      outScope.setOrdering(ordering,);
    }
    for (const indexData of collectionData.indexes) {
      const lookupNodes = [];
      for (const expression of indexData.fields) {
        const node2 = this.buildExpression(outScope, expression,);
        lookupNodes.push(node2,);
      }
      let constraint;
      if (indexData.where) {
        constraint = this.buildExpression(outScope, indexData.where,);
      }
      const ordering = new Ordering();
      const indexId = IndexId(this.indexId++,);
      const index = new IndexMetadata(indexId, indexData, collection, lookupNodes, constraint, ordering,);
      collection.indexes.add(index,);
    }
    const node = this.normalizer.newRelationalScan(collection,);
    outScope.setNode(node,);
    return outScope;
  }
  buildJoin(inScope, from,) {
    const leftScope = this.buildFrom(inScope, from.left,);
    const rightScope = this.buildFrom(inScope, from.right,);
    const ordering = new Ordering();
    const leftOrdering = leftScope.getRequiredOrdering();
    ordering.merge(leftOrdering,);
    const rightOrdering = rightScope.getRequiredOrdering();
    ordering.merge(rightOrdering,);
    const outScope = inScope.push();
    outScope.addFieldsFromScope(leftScope,);
    outScope.addFieldsFromScope(rightScope,);
    outScope.setOrdering(ordering,);
    const constraint = this.buildExpression(outScope, from.constraint,);
    const left = leftScope.takeNode();
    const right = rightScope.takeNode();
    let node;
    switch (from.type) {
      case 'LeftJoin':
        node = this.normalizer.newRelationalLeftJoin(left, right, constraint,);
        break;
      default:
        assertNever(from.type, 'Unsupported join type',);
    }
    outScope.setNode(node,);
    return outScope;
  }
  buildExpression(inScope, expression,) {
    switch (expression.type) {
      case 'Identifier':
        return this.buildIdentifier(inScope, expression,);
      case 'LiteralValue':
        return this.buildLiteralValue(expression,);
      case 'FunctionCall':
        return this.buildFunctionCall(inScope, expression,);
      case 'Case':
        return this.buildCase(inScope, expression,);
      case 'UnaryOperation':
        return this.buildUnaryOperation(inScope, expression,);
      case 'BinaryOperation':
        return this.buildBinaryOperation(inScope, expression,);
      case 'TypeCast':
        return this.buildTypeCast(inScope, expression,);
      case 'Select':
        throw new Error('Subqueries are only supported inside subquery function calls',);
      default:
        assertNever(expression, 'Unsupported expression',);
    }
  }
  buildIdentifier(inScope, expression,) {
    const scopeField = inScope.resolveField(expression.name, expression.collection,);
    if (scopeField) {
      let isOuterField = false;
      for (const subquery of this.subqueries) {
        if (isOuterField) {
          subquery.referencedOuterFields.add(scopeField.field,);
        } else {
          isOuterField = subquery.inScope.has(scopeField,);
          if (isOuterField) {
            subquery.referencedFields.add(scopeField.field,);
          }
        }
      }
      return this.normalizer.newScalarVariable(scopeField.field, isOuterField,);
    }
    return this.normalizer.newScalarConstant(unknownDefinition, null,);
  }
  buildLiteralValue(expression,) {
    const value = DatabaseValue.parse(expression.value,);
    return this.normalizer.newScalarConstant(unknownDefinition, value,);
  }
  buildFunctionCall(inScope, expression,) {
    const getArgument = (index) => {
      const argument = expression.arguments[index];
      assert(argument, 'Missing argument',);
      return this.buildExpression(inScope, argument,);
    };
    switch (expression.functionName) {
      case 'CONTAINS': {
        const source = getArgument(0,);
        const target = getArgument(1,);
        return this.normalizer.newScalarContains(source, target,);
      }
      case 'STARTS_WITH': {
        const source = getArgument(0,);
        const target = getArgument(1,);
        return this.normalizer.newScalarStartsWith(source, target,);
      }
      case 'ENDS_WITH': {
        const source = getArgument(0,);
        const target = getArgument(1,);
        return this.normalizer.newScalarEndsWith(source, target,);
      }
      case 'LENGTH': {
        const array = getArgument(0,);
        return this.normalizer.newScalarLength(array,);
      }
      case 'INDEX_OF': {
        const source = getArgument(0,);
        const target = getArgument(1,);
        return this.normalizer.newScalarIndexOf(source, target,);
      }
      case 'ARRAY': {
        const subquery = expression.arguments[0];
        assert(subquery, 'Missing argument',);
        assert(subquery.type === 'Select', 'Subqueries require a select expression',);
        return this.buildSubqueryArray(inScope, subquery,);
      }
      case 'FLAT_ARRAY': {
        const subquery = expression.arguments[0];
        assert(subquery, 'Missing argument',);
        assert(subquery.type === 'Select', 'Subqueries require a select expression',);
        return this.buildSubqueryFlatArray(inScope, subquery,);
      }
      default:
        throw new Error('Unsupported function name',);
    }
  }
  buildSubqueryArray(inScope, expression,) {
    try {
      const subquery = new Subquery(inScope,);
      this.subqueries.push(subquery,);
      const outScope = this.buildSelect(inScope, expression,);
      const input = outScope.takeNode();
      const namedFields = outScope.getNamedFields();
      const ordering = outScope.getRequiredOrdering();
      const referencedFields = subquery.referencedFields;
      const referencedOuterFields = subquery.referencedOuterFields;
      return this.normalizer.newScalarArray(input, namedFields, ordering, referencedFields, referencedOuterFields,);
    } finally {
      this.subqueries.pop();
    }
  }
  buildSubqueryFlatArray(inScope, expression,) {
    try {
      const subquery = new Subquery(inScope,);
      this.subqueries.push(subquery,);
      const outScope = this.buildSelect(inScope, expression,);
      const input = outScope.takeNode();
      const field = outScope.getSingleField();
      const ordering = outScope.getRequiredOrdering();
      const referencedFields = subquery.referencedFields;
      const referencedOuterFields = subquery.referencedOuterFields;
      return this.normalizer.newScalarFlatArray(input, field, ordering, referencedFields, referencedOuterFields,);
    } finally {
      this.subqueries.pop();
    }
  }
  buildCase(inScope, expression,) {
    let input;
    if (expression.value) {
      input = this.buildExpression(inScope, expression.value,);
    }
    const conditions = expression.conditions.map((condition) => {
      const when = this.buildExpression(inScope, condition.when,);
      const then = this.buildExpression(inScope, condition.then,);
      return new CaseCondition(when, then,);
    },);
    let otherwise;
    if (expression.else) {
      otherwise = this.buildExpression(inScope, expression.else,);
    }
    return this.normalizer.newScalarCase(input, conditions, otherwise,);
  }
  buildUnaryOperation(inScope, expression,) {
    const input = this.buildExpression(inScope, expression.value,);
    switch (expression.operator) {
      case 'not':
        return this.normalizer.newScalarNot(input,);
      default:
        assertNever(expression.operator, 'Unsupported unary operator',);
    }
  }
  buildBinaryOperation(inScope, expression,) {
    const left = this.buildExpression(inScope, expression.left,);
    const right = this.buildExpression(inScope, expression.right,);
    switch (expression.operator) {
      case 'and':
        return this.normalizer.newScalarAnd(left, right,);
      case 'or':
        return this.normalizer.newScalarOr(left, right,);
      case '==':
        return this.normalizer.newScalarEquals(left, right,);
      case '!=':
        return this.normalizer.newScalarNotEquals(left, right,);
      case '<':
        return this.normalizer.newScalarLessThan(left, right,);
      case '<=':
        return this.normalizer.newScalarLessThanOrEqual(left, right,);
      case '>':
        return this.normalizer.newScalarGreaterThan(left, right,);
      case '>=':
        return this.normalizer.newScalarGreaterThanOrEqual(left, right,);
      case 'in':
        return this.normalizer.newScalarIn(left, right,);
      default:
        assertNever(expression.operator, 'Unsupported binary operator',);
    }
  }
  buildTypeCast(inScope, expression,) {
    const input = this.buildExpression(inScope, expression.value,);
    switch (expression.dataType) {
      case 'BOOLEAN': {
        const definition = {
          type: 'boolean',
          isNullable: true,
        };
        return this.normalizer.newScalarCast(input, definition,);
      }
      case 'DATE': {
        const definition = {
          type: 'date',
          isNullable: true,
        };
        return this.normalizer.newScalarCast(input, definition,);
      }
      case 'NUMBER': {
        const definition = {
          type: 'number',
          isNullable: true,
        };
        return this.normalizer.newScalarCast(input, definition,);
      }
      case 'STRING': {
        const definition = {
          type: 'string',
          isNullable: true,
        };
        return this.normalizer.newScalarCast(input, definition,);
      }
      default:
        throw new Error('Unsupported data type',);
    }
  }
};
function getCollection(data2, locale,) {
  if (isAnyLegacyCollection(data2,)) {
    return new CompatibilityDatabaseCollection(data2, locale,);
  }
  if (isDatabaseCollection(data2,)) {
    return data2;
  }
  if (isLocalizedDatabaseCollection(data2,)) {
    while (locale) {
      const collection = data2.collectionByLocaleId[locale.id];
      if (collection) return collection;
      locale = locale.fallback;
    }
    return data2.collectionByLocaleId.default;
  }
  assertNever(data2, 'Unsupported collection type',);
}
var Subquery = class {
  constructor(inScope,) {
    this.inScope = inScope;
    __publicField(this, 'referencedFields', new Fields(),);
    __publicField(this, 'referencedOuterFields', new Fields(),);
  }
};
var RelationalFilter = class _RelationalFilter extends RelationalNode {
  constructor(input, predicate,) {
    super(input.isSynchronous && predicate.isSynchronous,);
    this.input = input;
    this.predicate = predicate;
    __publicField(this, 'inputGroup',);
    this.inputGroup = input.getGroup();
  }
  getHash() {
    return calculateHash('RelationalFilter', this.inputGroup.id, this.predicate,);
  }
  getOutputFields() {
    return this.inputGroup.relational.outputFields;
  }
  canProvideOrdering() {
    return true;
  }
  canProvideResolvedFields() {
    return true;
  }
  getInputRequiredProps(required,) {
    const resolvedFields = new Fields(required.resolvedFields,);
    resolvedFields.merge(this.predicate.referencedFields,);
    return new RequiredProps(required.ordering, resolvedFields,);
  }
  optimize(optimizer, required,) {
    const inputRequired = this.getInputRequiredProps(required,);
    const inputCost = optimizer.optimizeGroup(this.inputGroup, inputRequired,);
    const predicateCost = this.predicate.optimize(optimizer,);
    return new Cost(0,).add(Cost.max(inputCost, predicateCost,),);
  }
  getOptimized(required,) {
    const inputRequired = this.getInputRequiredProps(required,);
    const input = this.inputGroup.getOptimized(inputRequired,);
    const predicate = this.predicate.getOptimized();
    return new _RelationalFilter(input, predicate,);
  }
  *evaluate(context,) {
    const input = yield* this.input.evaluate(context,);
    const predicates = yield* evaluateArray(input.tuples.map((tuple) => {
      return this.predicate.evaluate(context, tuple,);
    },),);
    return input.filter((_, index,) => {
      const predicate = predicates[index] ?? null;
      return valueToBoolean(predicate,);
    },);
  }
};
var RelationalIndexLookup = class _RelationalIndexLookup extends RelationalNode {
  constructor(index, query,) {
    super(false,);
    this.index = index;
    this.query = query;
  }
  getHash() {
    return calculateHash('RelationalIndexLookup', this.index.id, ...this.query,);
  }
  getOutputFields() {
    return this.index.collection.fields;
  }
  canProvideOrdering(ordering,) {
    return ordering.equals(this.index.ordering,);
  }
  canProvideResolvedFields(resolvedFields,) {
    return resolvedFields.subsetOf(this.index.resolvedFields,);
  }
  optimize() {
    const isFullScan = this.query.every((lookup) => lookup.type === 'All'/* All */
    );
    return Cost.estimate(1, isFullScan ? 100 * KB : 50 * KB,);
  }
  getOptimized() {
    return new _RelationalIndexLookup(this.index, this.query,);
  }
  *evaluate() {
    const index = this.index;
    const collection = index.collection;
    const outputFields = this.getOutputFields();
    const items = yield index.data.lookupItems(this.query,);
    const tuples = items.map((item) => {
      const tuple = new Tuple();
      for (const field of index.resolvedFields) {
        const value = field.getValue(item,);
        tuple.addPointer(collection, item.pointer,);
        tuple.addValue(field, value,);
      }
      return tuple;
    },);
    return new Relation(outputFields, tuples,);
  }
};
var RelationalIntersection = class _RelationalIntersection extends RelationalNode {
  constructor(left, right,) {
    super(left.isSynchronous && right.isSynchronous,);
    this.left = left;
    this.right = right;
    __publicField(this, 'leftGroup',);
    __publicField(this, 'rightGroup',);
    this.leftGroup = left.getGroup();
    this.rightGroup = right.getGroup();
  }
  getHash() {
    return calculateHash('RelationalIntersection', this.leftGroup.id, this.rightGroup.id,);
  }
  getOutputFields() {
    const outputFields = new Fields();
    const leftOutputFields = this.leftGroup.relational.outputFields;
    const rightOutputFields = this.rightGroup.relational.outputFields;
    for (const field of leftOutputFields) {
      if (rightOutputFields.has(field,)) {
        outputFields.add(field,);
      }
    }
    return outputFields;
  }
  canProvideOrdering() {
    return false;
  }
  canProvideResolvedFields() {
    return true;
  }
  getChildRequiredProps(required,) {
    const ordering = new Ordering();
    return new RequiredProps(ordering, required.resolvedFields,);
  }
  optimize(optimizer, required,) {
    const leftRequired = this.getChildRequiredProps(required,);
    const leftCost = optimizer.optimizeGroup(this.leftGroup, leftRequired,);
    const rightRequired = this.getChildRequiredProps(required,);
    const rightCost = optimizer.optimizeGroup(this.rightGroup, rightRequired,);
    return Cost.max(leftCost, rightCost,);
  }
  getOptimized(required,) {
    const leftRequired = this.getChildRequiredProps(required,);
    const left = this.leftGroup.getOptimized(leftRequired,);
    const rightRequired = this.getChildRequiredProps(required,);
    const right = this.rightGroup.getOptimized(rightRequired,);
    return new _RelationalIntersection(left, right,);
  }
  *evaluate(context,) {
    const {
      left,
      right,
    } = yield* evaluateObject({
      left: this.left.evaluate(context,),
      right: this.right.evaluate(context,),
    },);
    return left.intersection(right,);
  }
};
var ScalarEquals = class _ScalarEquals extends ScalarNode {
  constructor(left, right,) {
    const referencedFields = new Fields();
    referencedFields.merge(left.referencedFields,);
    referencedFields.merge(right.referencedFields,);
    const referencedOuterFields = new Fields();
    referencedOuterFields.merge(left.referencedOuterFields,);
    referencedOuterFields.merge(right.referencedOuterFields,);
    const isSynchronous = left.isSynchronous && right.isSynchronous;
    super(referencedFields, referencedOuterFields, isSynchronous,);
    this.left = left;
    this.right = right;
    __publicField(this, 'definition', {
      type: 'boolean',
      isNullable: false,
    },);
  }
  getHash() {
    return calculateHash('ScalarEquals', this.left, this.right,);
  }
  optimize(optimizer,) {
    const leftCost = this.left.optimize(optimizer,);
    const rightCost = this.right.optimize(optimizer,);
    return Cost.max(leftCost, rightCost,);
  }
  getOptimized() {
    const left = this.left.getOptimized();
    const right = this.right.getOptimized();
    return new _ScalarEquals(left, right,);
  }
  *evaluate(context, tuple,) {
    const {
      left,
      right,
    } = yield* evaluateObject({
      left: this.left.evaluate(context, tuple,),
      right: this.right.evaluate(context, tuple,),
    },);
    return {
      type: 'boolean',
      value: DatabaseValue.equal(left, right, collation,),
    };
  }
};
var RelationalLeftJoin = class _RelationalLeftJoin extends RelationalNode {
  constructor(left, right, constraint,) {
    super(left.isSynchronous && right.isSynchronous && constraint.isSynchronous,);
    this.left = left;
    this.right = right;
    this.constraint = constraint;
    __publicField(this, 'leftGroup',);
    __publicField(this, 'rightGroup',);
    this.leftGroup = left.getGroup();
    this.rightGroup = right.getGroup();
  }
  getHash() {
    return calculateHash('RelationalLeftJoin', this.leftGroup.id, this.rightGroup.id, this.constraint,);
  }
  getOutputFields() {
    const outputFields = new Fields();
    outputFields.merge(this.leftGroup.relational.outputFields,);
    outputFields.merge(this.rightGroup.relational.outputFields,);
    return outputFields;
  }
  canProvideOrdering() {
    return false;
  }
  canProvideResolvedFields() {
    return true;
  }
  getChildRequiredProps(group, required,) {
    const resolvedFields = new Fields();
    const outputFields = group.relational.outputFields;
    for (const field of required.resolvedFields) {
      if (outputFields.has(field,)) {
        resolvedFields.add(field,);
      }
    }
    for (const field of this.constraint.referencedFields) {
      if (outputFields.has(field,)) {
        resolvedFields.add(field,);
      }
    }
    const ordering = new Ordering();
    return new RequiredProps(ordering, resolvedFields,);
  }
  optimize(optimizer, required,) {
    const leftRequired = this.getChildRequiredProps(this.leftGroup, required,);
    const leftCost = optimizer.optimizeGroup(this.leftGroup, leftRequired,);
    const rightRequired = this.getChildRequiredProps(this.rightGroup, required,);
    const rightCost = optimizer.optimizeGroup(this.rightGroup, rightRequired,);
    const constraintCost = this.constraint.optimize(optimizer,);
    return Cost.max(Cost.max(leftCost, rightCost,), constraintCost,);
  }
  getOptimized(required,) {
    const leftRequired = this.getChildRequiredProps(this.leftGroup, required,);
    const left = this.leftGroup.getOptimized(leftRequired,);
    const rightRequired = this.getChildRequiredProps(this.rightGroup, required,);
    const right = this.rightGroup.getOptimized(rightRequired,);
    const constraint = this.constraint.getOptimized();
    return new _RelationalLeftJoin(left, right, constraint,);
  }
  /** Optimized path for equality constraints that runs in O(n + m) time. */
  *evaluateScalarEquals(left, right, leftConstraint, rightConstraint, context,) {
    const joinKeyMap = /* @__PURE__ */ new Map();
    for (const rightTuple of right.tuples) {
      const rightValue = yield* rightConstraint.evaluate(context, rightTuple,);
      const key7 = JSON.stringify((rightValue == null ? void 0 : rightValue.value) ?? null,);
      const tuplesForKey = joinKeyMap.get(key7,) ?? [];
      tuplesForKey.push(rightTuple,);
      joinKeyMap.set(key7, tuplesForKey,);
    }
    const outputFields = this.getOutputFields();
    const result = new Relation(outputFields,);
    for (const leftTuple of left.tuples) {
      const leftValue = yield* leftConstraint.evaluate(context, leftTuple,);
      const key7 = JSON.stringify((leftValue == null ? void 0 : leftValue.value) ?? null,);
      const matches = joinKeyMap.get(key7,) ?? [];
      if (matches.length === 0) {
        result.push(leftTuple,);
      } else {
        for (const rightTuple of matches) {
          const joinedTuple = new Tuple();
          joinedTuple.merge(leftTuple,);
          joinedTuple.merge(rightTuple,);
          result.push(joinedTuple,);
        }
      }
    }
    return result;
  }
  *evaluate(context,) {
    const {
      left,
      right,
    } = yield* evaluateObject({
      left: this.left.evaluate(context,),
      right: this.right.evaluate(context,),
    },);
    if (this.constraint instanceof ScalarEquals) {
      if (
        this.constraint.left.referencedFields.subsetOf(this.leftGroup.relational.outputFields,) &&
        this.constraint.right.referencedFields.subsetOf(this.rightGroup.relational.outputFields,)
      ) {
        return yield* this.evaluateScalarEquals(left, right, this.constraint.left, this.constraint.right, context,);
      }
      if (
        this.constraint.right.referencedFields.subsetOf(this.leftGroup.relational.outputFields,) &&
        this.constraint.left.referencedFields.subsetOf(this.rightGroup.relational.outputFields,)
      ) {
        return yield* this.evaluateScalarEquals(left, right, this.constraint.right, this.constraint.left, context,);
      }
    }
    const outputFields = this.getOutputFields();
    const result = new Relation(outputFields,);
    for (const leftTuple of left.tuples) {
      let hasMatch = false;
      for (const rightTuple of right.tuples) {
        const tuple = new Tuple();
        tuple.merge(leftTuple,);
        tuple.merge(rightTuple,);
        const value = yield* this.constraint.evaluate(context, tuple,);
        if (valueToBoolean(value,)) {
          result.push(tuple,);
          hasMatch = true;
        }
      }
      if (!hasMatch) {
        result.push(leftTuple,);
      }
    }
    return result;
  }
};
var RelationalRightJoin = class _RelationalRightJoin extends RelationalNode {
  constructor(left, right, constraint,) {
    super(left.isSynchronous && right.isSynchronous && constraint.isSynchronous,);
    this.left = left;
    this.right = right;
    this.constraint = constraint;
    __publicField(this, 'leftGroup',);
    __publicField(this, 'rightGroup',);
    this.leftGroup = left.getGroup();
    this.rightGroup = right.getGroup();
  }
  getHash() {
    return calculateHash('RelationalRightJoin', this.leftGroup.id, this.rightGroup.id, this.constraint,);
  }
  getOutputFields() {
    const outputFields = new Fields();
    outputFields.merge(this.leftGroup.relational.outputFields,);
    outputFields.merge(this.rightGroup.relational.outputFields,);
    return outputFields;
  }
  canProvideOrdering() {
    return false;
  }
  canProvideResolvedFields() {
    return true;
  }
  getChildRequiredProps(group, required,) {
    const resolvedFields = new Fields();
    const outputFields = group.relational.outputFields;
    for (const field of required.resolvedFields) {
      if (outputFields.has(field,)) {
        resolvedFields.add(field,);
      }
    }
    for (const field of this.constraint.referencedFields) {
      if (outputFields.has(field,)) {
        resolvedFields.add(field,);
      }
    }
    const ordering = new Ordering();
    return new RequiredProps(ordering, resolvedFields,);
  }
  optimize(optimizer, required,) {
    const leftRequired = this.getChildRequiredProps(this.leftGroup, required,);
    const leftCost = optimizer.optimizeGroup(this.leftGroup, leftRequired,);
    const rightRequired = this.getChildRequiredProps(this.rightGroup, required,);
    const rightCost = optimizer.optimizeGroup(this.rightGroup, rightRequired,);
    const constraintCost = this.constraint.optimize(optimizer,);
    return Cost.max(Cost.max(leftCost, rightCost,), constraintCost,);
  }
  getOptimized(required,) {
    const leftRequired = this.getChildRequiredProps(this.leftGroup, required,);
    const left = this.leftGroup.getOptimized(leftRequired,);
    const rightRequired = this.getChildRequiredProps(this.rightGroup, required,);
    const right = this.rightGroup.getOptimized(rightRequired,);
    const constraint = this.constraint.getOptimized();
    return new _RelationalRightJoin(left, right, constraint,);
  }
  /** Optimized path for equality constraints that runs in O(n + m) time. */
  *evaluateScalarEquals(left, right, leftConstraint, rightConstraint, context,) {
    const joinKeyMap = /* @__PURE__ */ new Map();
    for (const leftTuple of left.tuples) {
      const leftValue = yield* leftConstraint.evaluate(context, leftTuple,);
      const key7 = JSON.stringify((leftValue == null ? void 0 : leftValue.value) ?? null,);
      const tuplesForKey = joinKeyMap.get(key7,) ?? [];
      tuplesForKey.push(leftTuple,);
      joinKeyMap.set(key7, tuplesForKey,);
    }
    const outputFields = this.getOutputFields();
    const result = new Relation(outputFields,);
    for (const rightTuple of right.tuples) {
      const rightValue = yield* rightConstraint.evaluate(context, rightTuple,);
      const key7 = JSON.stringify((rightValue == null ? void 0 : rightValue.value) ?? null,);
      const matches = joinKeyMap.get(key7,) ?? [];
      if (matches.length === 0) {
        result.push(rightTuple,);
      } else {
        for (const leftTuple of matches) {
          const joinedTuple = new Tuple();
          joinedTuple.merge(rightTuple,);
          joinedTuple.merge(leftTuple,);
          result.push(joinedTuple,);
        }
      }
    }
    return result;
  }
  *evaluate(context,) {
    const {
      left,
      right,
    } = yield* evaluateObject({
      left: this.left.evaluate(context,),
      right: this.right.evaluate(context,),
    },);
    if (this.constraint instanceof ScalarEquals) {
      if (
        this.constraint.left.referencedFields.subsetOf(this.leftGroup.relational.outputFields,) &&
        this.constraint.right.referencedFields.subsetOf(this.rightGroup.relational.outputFields,)
      ) {
        return yield* this.evaluateScalarEquals(left, right, this.constraint.left, this.constraint.right, context,);
      }
      if (
        this.constraint.right.referencedFields.subsetOf(this.leftGroup.relational.outputFields,) &&
        this.constraint.left.referencedFields.subsetOf(this.rightGroup.relational.outputFields,)
      ) {
        return yield* this.evaluateScalarEquals(left, right, this.constraint.right, this.constraint.left, context,);
      }
    }
    const outputFields = this.getOutputFields();
    const result = new Relation(outputFields,);
    for (const rightTuple of right.tuples) {
      let hasMatch = false;
      for (const leftTuple of left.tuples) {
        const tuple = new Tuple();
        tuple.merge(rightTuple,);
        tuple.merge(leftTuple,);
        const value = yield* this.constraint.evaluate(context, tuple,);
        if (valueToBoolean(value,)) {
          result.push(tuple,);
          hasMatch = true;
        }
      }
      if (!hasMatch) {
        result.push(rightTuple,);
      }
    }
    return result;
  }
};
var RelationalScan = class _RelationalScan extends RelationalNode {
  constructor(collection,) {
    super(false,);
    this.collection = collection;
  }
  getHash() {
    return calculateHash('RelationalScan', this.collection.id,);
  }
  getOutputFields() {
    return this.collection.fields;
  }
  canProvideOrdering() {
    return false;
  }
  canProvideResolvedFields(resolvedFields,) {
    return resolvedFields.subsetOf(this.collection.fields,);
  }
  optimize() {
    return Cost.estimate(1, 200 * KB,);
  }
  getOptimized() {
    return new _RelationalScan(this.collection,);
  }
  *evaluate() {
    const collection = this.collection;
    const outputFields = this.getOutputFields();
    const items = yield collection.data.scanItems();
    const tuples = items.map((item) => {
      const tuple = new Tuple();
      for (const field of outputFields) {
        const value = field.getValue(item,);
        tuple.addPointer(collection, item.pointer,);
        tuple.addValue(field, value,);
      }
      return tuple;
    },);
    return new Relation(outputFields, tuples,);
  }
};
var RelationalUnion = class _RelationalUnion extends RelationalNode {
  constructor(left, right,) {
    super(left.isSynchronous && right.isSynchronous,);
    this.left = left;
    this.right = right;
    __publicField(this, 'leftGroup',);
    __publicField(this, 'rightGroup',);
    this.leftGroup = left.getGroup();
    this.rightGroup = right.getGroup();
  }
  getHash() {
    return calculateHash('RelationalUnion', this.leftGroup.id, this.rightGroup.id,);
  }
  getOutputFields() {
    const outputFields = new Fields();
    const leftOutputFields = this.leftGroup.relational.outputFields;
    const rightOutputFields = this.rightGroup.relational.outputFields;
    for (const field of leftOutputFields) {
      if (rightOutputFields.has(field,)) {
        outputFields.add(field,);
      }
    }
    return outputFields;
  }
  canProvideOrdering() {
    return false;
  }
  canProvideResolvedFields() {
    return true;
  }
  getChildRequiredProps(required,) {
    const ordering = new Ordering();
    return new RequiredProps(ordering, required.resolvedFields,);
  }
  optimize(optimizer, required,) {
    const leftRequired = this.getChildRequiredProps(required,);
    const leftCost = optimizer.optimizeGroup(this.leftGroup, leftRequired,);
    const rightRequired = this.getChildRequiredProps(required,);
    const rightCost = optimizer.optimizeGroup(this.rightGroup, rightRequired,);
    return Cost.max(leftCost, rightCost,);
  }
  getOptimized(required,) {
    const leftRequired = this.getChildRequiredProps(required,);
    const left = this.leftGroup.getOptimized(leftRequired,);
    const rightRequired = this.getChildRequiredProps(required,);
    const right = this.rightGroup.getOptimized(rightRequired,);
    return new _RelationalUnion(left, right,);
  }
  *evaluate(context,) {
    const {
      left,
      right,
    } = yield* evaluateObject({
      left: this.left.evaluate(context,),
      right: this.right.evaluate(context,),
    },);
    return left.union(right,);
  }
};
var ScalarAnd = class _ScalarAnd extends ScalarNode {
  constructor(left, right,) {
    const referencedFields = new Fields();
    referencedFields.merge(left.referencedFields,);
    referencedFields.merge(right.referencedFields,);
    const referencedOuterFields = new Fields();
    referencedOuterFields.merge(left.referencedOuterFields,);
    referencedOuterFields.merge(right.referencedOuterFields,);
    const isSynchronous = left.isSynchronous && right.isSynchronous;
    super(referencedFields, referencedOuterFields, isSynchronous,);
    this.left = left;
    this.right = right;
    __publicField(this, 'definition', {
      type: 'boolean',
      isNullable: false,
    },);
  }
  getHash() {
    return calculateHash('ScalarAnd', this.left, this.right,);
  }
  optimize(optimizer,) {
    const leftCost = this.left.optimize(optimizer,);
    const rightCost = this.right.optimize(optimizer,);
    return Cost.max(leftCost, rightCost,);
  }
  getOptimized() {
    const left = this.left.getOptimized();
    const right = this.right.getOptimized();
    return new _ScalarAnd(left, right,);
  }
  *evaluate(context, tuple,) {
    const {
      left,
      right,
    } = yield* evaluateObject({
      left: this.left.evaluate(context, tuple,),
      right: this.right.evaluate(context, tuple,),
    },);
    return {
      type: 'boolean',
      value: valueToBoolean(left,) && valueToBoolean(right,),
    };
  }
};
var ScalarConstant = class extends ScalarNode {
  constructor(definition, value,) {
    const referencedFields = new Fields();
    const referencedOuterFields = new Fields();
    super(referencedFields, referencedOuterFields, true,);
    this.definition = definition;
    this.value = value;
  }
  getHash() {
    return calculateHash('ScalarConstant', this.definition, this.value,);
  }
  optimize() {
    return new Cost(0,);
  }
  getOptimized() {
    return this;
  }
  // biome-ignore lint/correctness/useYield: Required by the super class.
  *evaluate() {
    return this.value;
  }
};
var collation3 = {
  type: 0,
  /* CaseInsensitive */
};
var ScalarContains = class _ScalarContains extends ScalarNode {
  constructor(source, target,) {
    const referencedFields = new Fields();
    referencedFields.merge(source.referencedFields,);
    referencedFields.merge(target.referencedFields,);
    const referencedOuterFields = new Fields();
    referencedOuterFields.merge(source.referencedOuterFields,);
    referencedOuterFields.merge(target.referencedOuterFields,);
    const isSynchronous = source.isSynchronous && target.isSynchronous;
    super(referencedFields, referencedOuterFields, isSynchronous,);
    this.source = source;
    this.target = target;
    __publicField(this, 'definition', {
      type: 'boolean',
      isNullable: false,
    },);
  }
  getHash() {
    return calculateHash('ScalarContains', this.source, this.target,);
  }
  optimize(optimizer,) {
    const sourceCost = this.source.optimize(optimizer,);
    const targetCost = this.target.optimize(optimizer,);
    return Cost.max(sourceCost, targetCost,);
  }
  getOptimized() {
    const source = this.source.getOptimized();
    const target = this.target.getOptimized();
    return new _ScalarContains(source, target,);
  }
  *evaluate(context, tuple,) {
    const {
      source,
      target,
    } = yield* evaluateObject({
      source: this.source.evaluate(context, tuple,),
      target: this.target.evaluate(context, tuple,),
    },);
    return {
      type: 'boolean',
      value: DatabaseValue.contains(source, target, collation3,),
    };
  }
};
var collation4 = {
  type: 0,
  /* CaseInsensitive */
};
var ScalarEndsWith = class _ScalarEndsWith extends ScalarNode {
  constructor(source, target,) {
    const referencedFields = new Fields();
    referencedFields.merge(source.referencedFields,);
    referencedFields.merge(target.referencedFields,);
    const referencedOuterFields = new Fields();
    referencedOuterFields.merge(source.referencedOuterFields,);
    referencedOuterFields.merge(target.referencedOuterFields,);
    const isSynchronous = source.isSynchronous && target.isSynchronous;
    super(referencedFields, referencedOuterFields, isSynchronous,);
    this.source = source;
    this.target = target;
    __publicField(this, 'definition', {
      type: 'boolean',
      isNullable: false,
    },);
  }
  getHash() {
    return calculateHash('ScalarEndsWith', this.source, this.target,);
  }
  optimize(optimizer,) {
    const sourceCost = this.source.optimize(optimizer,);
    const targetCost = this.target.optimize(optimizer,);
    return Cost.max(sourceCost, targetCost,);
  }
  getOptimized() {
    const source = this.source.getOptimized();
    const target = this.target.getOptimized();
    return new _ScalarEndsWith(source, target,);
  }
  *evaluate(context, tuple,) {
    const {
      source,
      target,
    } = yield* evaluateObject({
      source: this.source.evaluate(context, tuple,),
      target: this.target.evaluate(context, tuple,),
    },);
    return {
      type: 'boolean',
      value: DatabaseValue.endsWith(source, target, collation4,),
    };
  }
};
var ScalarGreaterThan = class _ScalarGreaterThan extends ScalarNode {
  constructor(left, right,) {
    const referencedFields = new Fields();
    referencedFields.merge(left.referencedFields,);
    referencedFields.merge(right.referencedFields,);
    const referencedOuterFields = new Fields();
    referencedOuterFields.merge(left.referencedOuterFields,);
    referencedOuterFields.merge(right.referencedOuterFields,);
    const isSynchronous = left.isSynchronous && right.isSynchronous;
    super(referencedFields, referencedOuterFields, isSynchronous,);
    this.left = left;
    this.right = right;
    __publicField(this, 'definition', {
      type: 'boolean',
      isNullable: false,
    },);
  }
  getHash() {
    return calculateHash('ScalarGreaterThan', this.left, this.right,);
  }
  optimize(optimizer,) {
    const leftCost = this.left.optimize(optimizer,);
    const rightCost = this.right.optimize(optimizer,);
    return Cost.max(leftCost, rightCost,);
  }
  getOptimized() {
    const left = this.left.getOptimized();
    const right = this.right.getOptimized();
    return new _ScalarGreaterThan(left, right,);
  }
  *evaluate(context, tuple,) {
    const {
      left,
      right,
    } = yield* evaluateObject({
      left: this.left.evaluate(context, tuple,),
      right: this.right.evaluate(context, tuple,),
    },);
    return {
      type: 'boolean',
      value: DatabaseValue.greaterThan(left, right, collation,),
    };
  }
};
var ScalarGreaterThanOrEqual = class _ScalarGreaterThanOrEqual extends ScalarNode {
  constructor(left, right,) {
    const referencedFields = new Fields();
    referencedFields.merge(left.referencedFields,);
    referencedFields.merge(right.referencedFields,);
    const referencedOuterFields = new Fields();
    referencedOuterFields.merge(left.referencedOuterFields,);
    referencedOuterFields.merge(right.referencedOuterFields,);
    const isSynchronous = left.isSynchronous && right.isSynchronous;
    super(referencedFields, referencedOuterFields, isSynchronous,);
    this.left = left;
    this.right = right;
    __publicField(this, 'definition', {
      type: 'boolean',
      isNullable: false,
    },);
  }
  getHash() {
    return calculateHash('ScalarGreaterThanOrEqual', this.left, this.right,);
  }
  optimize(optimizer,) {
    const leftCost = this.left.optimize(optimizer,);
    const rightCost = this.right.optimize(optimizer,);
    return Cost.max(leftCost, rightCost,);
  }
  getOptimized() {
    const left = this.left.getOptimized();
    const right = this.right.getOptimized();
    return new _ScalarGreaterThanOrEqual(left, right,);
  }
  *evaluate(context, tuple,) {
    const {
      left,
      right,
    } = yield* evaluateObject({
      left: this.left.evaluate(context, tuple,),
      right: this.right.evaluate(context, tuple,),
    },);
    return {
      type: 'boolean',
      value: DatabaseValue.greaterThanOrEqual(left, right, collation,),
    };
  }
};
var ScalarLessThan = class _ScalarLessThan extends ScalarNode {
  constructor(left, right,) {
    const referencedFields = new Fields();
    referencedFields.merge(left.referencedFields,);
    referencedFields.merge(right.referencedFields,);
    const referencedOuterFields = new Fields();
    referencedOuterFields.merge(left.referencedOuterFields,);
    referencedOuterFields.merge(right.referencedOuterFields,);
    const isSynchronous = left.isSynchronous && right.isSynchronous;
    super(referencedFields, referencedOuterFields, isSynchronous,);
    this.left = left;
    this.right = right;
    __publicField(this, 'definition', {
      type: 'boolean',
      isNullable: false,
    },);
  }
  getHash() {
    return calculateHash('ScalarLessThan', this.left, this.right,);
  }
  optimize(optimizer,) {
    const leftCost = this.left.optimize(optimizer,);
    const rightCost = this.right.optimize(optimizer,);
    return Cost.max(leftCost, rightCost,);
  }
  getOptimized() {
    const left = this.left.getOptimized();
    const right = this.right.getOptimized();
    return new _ScalarLessThan(left, right,);
  }
  *evaluate(context, tuple,) {
    const {
      left,
      right,
    } = yield* evaluateObject({
      left: this.left.evaluate(context, tuple,),
      right: this.right.evaluate(context, tuple,),
    },);
    return {
      type: 'boolean',
      value: DatabaseValue.lessThan(left, right, collation,),
    };
  }
};
var ScalarLessThanOrEqual = class _ScalarLessThanOrEqual extends ScalarNode {
  constructor(left, right,) {
    const referencedFields = new Fields();
    referencedFields.merge(left.referencedFields,);
    referencedFields.merge(right.referencedFields,);
    const referencedOuterFields = new Fields();
    referencedOuterFields.merge(left.referencedOuterFields,);
    referencedOuterFields.merge(right.referencedOuterFields,);
    const isSynchronous = left.isSynchronous && right.isSynchronous;
    super(referencedFields, referencedOuterFields, isSynchronous,);
    this.left = left;
    this.right = right;
    __publicField(this, 'definition', {
      type: 'boolean',
      isNullable: false,
    },);
  }
  getHash() {
    return calculateHash('ScalarLessThanOrEqual', this.left, this.right,);
  }
  optimize(optimizer,) {
    const leftCost = this.left.optimize(optimizer,);
    const rightCost = this.right.optimize(optimizer,);
    return Cost.max(leftCost, rightCost,);
  }
  getOptimized() {
    const left = this.left.getOptimized();
    const right = this.right.getOptimized();
    return new _ScalarLessThanOrEqual(left, right,);
  }
  *evaluate(context, tuple,) {
    const {
      left,
      right,
    } = yield* evaluateObject({
      left: this.left.evaluate(context, tuple,),
      right: this.right.evaluate(context, tuple,),
    },);
    return {
      type: 'boolean',
      value: DatabaseValue.lessThanOrEqual(left, right, collation,),
    };
  }
};
var ScalarNotEquals = class _ScalarNotEquals extends ScalarNode {
  constructor(left, right,) {
    const referencedFields = new Fields();
    referencedFields.merge(left.referencedFields,);
    referencedFields.merge(right.referencedFields,);
    const referencedOuterFields = new Fields();
    referencedOuterFields.merge(left.referencedOuterFields,);
    referencedOuterFields.merge(right.referencedOuterFields,);
    const isSynchronous = left.isSynchronous && right.isSynchronous;
    super(referencedFields, referencedOuterFields, isSynchronous,);
    this.left = left;
    this.right = right;
    __publicField(this, 'definition', {
      type: 'boolean',
      isNullable: false,
    },);
  }
  getHash() {
    return calculateHash('ScalarNotEquals', this.left, this.right,);
  }
  optimize(optimizer,) {
    const leftCost = this.left.optimize(optimizer,);
    const rightCost = this.right.optimize(optimizer,);
    return Cost.max(leftCost, rightCost,);
  }
  getOptimized() {
    const left = this.left.getOptimized();
    const right = this.right.getOptimized();
    return new _ScalarNotEquals(left, right,);
  }
  *evaluate(context, tuple,) {
    const {
      left,
      right,
    } = yield* evaluateObject({
      left: this.left.evaluate(context, tuple,),
      right: this.right.evaluate(context, tuple,),
    },);
    return {
      type: 'boolean',
      value: !DatabaseValue.equal(left, right, collation,),
    };
  }
};
var ScalarOr = class _ScalarOr extends ScalarNode {
  constructor(left, right,) {
    const referencedFields = new Fields();
    referencedFields.merge(left.referencedFields,);
    referencedFields.merge(right.referencedFields,);
    const referencedOuterFields = new Fields();
    referencedOuterFields.merge(left.referencedOuterFields,);
    referencedOuterFields.merge(right.referencedOuterFields,);
    const isSynchronous = left.isSynchronous && right.isSynchronous;
    super(referencedFields, referencedOuterFields, isSynchronous,);
    this.left = left;
    this.right = right;
    __publicField(this, 'definition', {
      type: 'boolean',
      isNullable: false,
    },);
  }
  getHash() {
    return calculateHash('ScalarOr', this.left, this.right,);
  }
  optimize(optimizer,) {
    const leftCost = this.left.optimize(optimizer,);
    const rightCost = this.right.optimize(optimizer,);
    return Cost.max(leftCost, rightCost,);
  }
  getOptimized() {
    const left = this.left.getOptimized();
    const right = this.right.getOptimized();
    return new _ScalarOr(left, right,);
  }
  *evaluate(context, tuple,) {
    const {
      left,
      right,
    } = yield* evaluateObject({
      left: this.left.evaluate(context, tuple,),
      right: this.right.evaluate(context, tuple,),
    },);
    return {
      type: 'boolean',
      value: valueToBoolean(left,) || valueToBoolean(right,),
    };
  }
};
var collation5 = {
  type: 0,
  /* CaseInsensitive */
};
var ScalarStartsWith = class _ScalarStartsWith extends ScalarNode {
  constructor(source, target,) {
    const referencedFields = new Fields();
    referencedFields.merge(source.referencedFields,);
    referencedFields.merge(target.referencedFields,);
    const referencedOuterFields = new Fields();
    referencedOuterFields.merge(source.referencedOuterFields,);
    referencedOuterFields.merge(target.referencedOuterFields,);
    const isSynchronous = source.isSynchronous && target.isSynchronous;
    super(referencedFields, referencedOuterFields, isSynchronous,);
    this.source = source;
    this.target = target;
    __publicField(this, 'definition', {
      type: 'boolean',
      isNullable: false,
    },);
  }
  getHash() {
    return calculateHash('ScalarStartsWith', this.source, this.target,);
  }
  optimize(optimizer,) {
    const sourceCost = this.source.optimize(optimizer,);
    const targetCost = this.target.optimize(optimizer,);
    return Cost.max(sourceCost, targetCost,);
  }
  getOptimized() {
    const source = this.source.getOptimized();
    const target = this.target.getOptimized();
    return new _ScalarStartsWith(source, target,);
  }
  *evaluate(context, tuple,) {
    const {
      source,
      target,
    } = yield* evaluateObject({
      source: this.source.evaluate(context, tuple,),
      target: this.target.evaluate(context, tuple,),
    },);
    return {
      type: 'boolean',
      value: DatabaseValue.startsWith(source, target, collation5,),
    };
  }
};
var Explorer = class {
  constructor(normalizer,) {
    this.normalizer = normalizer;
    __publicField(this, 'memo',);
    this.memo = normalizer.memo;
  }
  explore(before,) {
    const group = before.getGroup();
    if (before instanceof RelationalLeftJoin) {
      const after = new RelationalRightJoin(before.right, before.left, before.constraint,);
      this.memo.addRelational(after, group,);
    }
    if (before instanceof RelationalFilter) {
      if (before.predicate instanceof ScalarAnd) {
        const left = this.normalizer.newRelationalFilter(before.input, before.predicate.left,);
        const right = this.normalizer.newRelationalFilter(before.input, before.predicate.right,);
        const after = new RelationalIntersection(left, right,);
        this.memo.addRelational(after, group,);
      }
      if (before.predicate instanceof ScalarOr) {
        const left = this.normalizer.newRelationalFilter(before.input, before.predicate.left,);
        const right = this.normalizer.newRelationalFilter(before.input, before.predicate.right,);
        const after = new RelationalUnion(left, right,);
        this.memo.addRelational(after, group,);
      }
    }
    if (before instanceof RelationalScan) {
      for (const index of before.collection.indexes) {
        if (index.constraint) continue;
        const query = createIndexQueryAll(index.lookupNodes.length,);
        const after = new RelationalIndexLookup(index, query,);
        this.memo.addRelational(after, group,);
      }
    }
    if (before instanceof RelationalFilter) {
      for (const input of before.inputGroup.nodes) {
        if (input instanceof RelationalScan) {
          for (const index of input.collection.indexes) {
            if (
              before.predicate instanceof ScalarEquals && before.predicate.left === index.lookupNodes[0] &&
              before.predicate.right instanceof ScalarConstant && index.data.supportedLookupTypes.includes('Equals',/* Equals */
              )
            ) {
              const query = createIndexQueryAll(index.lookupNodes.length,);
              query[0] = {
                type: 'Equals',
                value: before.predicate.right.value,
              };
              const after = new RelationalIndexLookup(index, query,);
              this.memo.addRelational(after, group,);
            }
            if (
              before.predicate instanceof ScalarNotEquals && before.predicate.left === index.lookupNodes[0] &&
              before.predicate.right instanceof ScalarConstant && index.data.supportedLookupTypes.includes('NotEquals',/* NotEquals */
              )
            ) {
              const query = createIndexQueryAll(index.lookupNodes.length,);
              query[0] = {
                type: 'NotEquals',
                value: before.predicate.right.value,
              };
              const after = new RelationalIndexLookup(index, query,);
              this.memo.addRelational(after, group,);
            }
            if (
              before.predicate instanceof ScalarLessThan && before.predicate.left === index.lookupNodes[0] &&
              before.predicate.right instanceof ScalarConstant && index.data.supportedLookupTypes.includes('LessThan',/* LessThan */
              )
            ) {
              const query = createIndexQueryAll(index.lookupNodes.length,);
              query[0] = {
                type: 'LessThan',
                value: before.predicate.right.value,
                inclusive: false,
              };
              const after = new RelationalIndexLookup(index, query,);
              this.memo.addRelational(after, group,);
            }
            if (
              before.predicate instanceof ScalarLessThanOrEqual && before.predicate.left === index.lookupNodes[0] &&
              before.predicate.right instanceof ScalarConstant && index.data.supportedLookupTypes.includes('LessThan',/* LessThan */
              )
            ) {
              const query = createIndexQueryAll(index.lookupNodes.length,);
              query[0] = {
                type: 'LessThan',
                value: before.predicate.right.value,
                inclusive: true,
              };
              const after = new RelationalIndexLookup(index, query,);
              this.memo.addRelational(after, group,);
            }
            if (
              before.predicate instanceof ScalarGreaterThan && before.predicate.left === index.lookupNodes[0] &&
              before.predicate.right instanceof ScalarConstant && index.data.supportedLookupTypes.includes('GreaterThan',/* GreaterThan */
              )
            ) {
              const query = createIndexQueryAll(index.lookupNodes.length,);
              query[0] = {
                type: 'GreaterThan',
                value: before.predicate.right.value,
                inclusive: false,
              };
              const after = new RelationalIndexLookup(index, query,);
              this.memo.addRelational(after, group,);
            }
            if (
              before.predicate instanceof ScalarGreaterThanOrEqual && before.predicate.left === index.lookupNodes[0] &&
              before.predicate.right instanceof ScalarConstant && index.data.supportedLookupTypes.includes('GreaterThan',/* GreaterThan */
              )
            ) {
              const query = createIndexQueryAll(index.lookupNodes.length,);
              query[0] = {
                type: 'GreaterThan',
                value: before.predicate.right.value,
                inclusive: true,
              };
              const after = new RelationalIndexLookup(index, query,);
              this.memo.addRelational(after, group,);
            }
            if (
              before.predicate instanceof ScalarContains && before.predicate.source === index.lookupNodes[0] &&
              before.predicate.target instanceof ScalarConstant && index.data.supportedLookupTypes.includes('Contains',/* Contains */
              )
            ) {
              const query = createIndexQueryAll(index.lookupNodes.length,);
              query[0] = {
                type: 'Contains',
                value: before.predicate.target.value,
              };
              const after = new RelationalIndexLookup(index, query,);
              this.memo.addRelational(after, group,);
            }
            if (
              before.predicate instanceof ScalarStartsWith && before.predicate.source === index.lookupNodes[0] &&
              before.predicate.target instanceof ScalarConstant && index.data.supportedLookupTypes.includes('StartsWith',/* StartsWith */
              )
            ) {
              const query = createIndexQueryAll(index.lookupNodes.length,);
              query[0] = {
                type: 'StartsWith',
                value: before.predicate.target.value,
              };
              const after = new RelationalIndexLookup(index, query,);
              this.memo.addRelational(after, group,);
            }
            if (
              before.predicate instanceof ScalarEndsWith && before.predicate.source === index.lookupNodes[0] &&
              before.predicate.target instanceof ScalarConstant && index.data.supportedLookupTypes.includes('EndsWith',/* EndsWith */
              )
            ) {
              const query = createIndexQueryAll(index.lookupNodes.length,);
              query[0] = {
                type: 'EndsWith',
                value: before.predicate.target.value,
              };
              const after = new RelationalIndexLookup(index, query,);
              this.memo.addRelational(after, group,);
            }
          }
        }
      }
    }
  }
};
function createIndexQueryAll(length,) {
  const lookup = {
    type: 'All',
    /* All */
  };
  return new Array(length,).fill(lookup,);
}
var RelationalProps = class {
  constructor(outputFields,) {
    this.outputFields = outputFields;
  }
  /**
   * Checks if the given relational properties are compatible with this.
   */
  isCompatible(other,) {
    return this.outputFields.equals(other.outputFields,);
  }
};
var Memo = class {
  constructor() {
    __publicField(this, 'nodes', /* @__PURE__ */ new Map(),);
    __publicField(this, 'groups', [],);
  }
  /**
   * Adds a new group with the given relational props to the memo. All nodes
   * in the group must have the same props. It's expected that the normalized
   * node is immediately added to the group after creating it.
   */
  addGroup(relationalProps,) {
    const id3 = GroupId(this.groups.length,);
    const group = new Group(id3, relationalProps,);
    this.groups.push(group,);
    return group;
  }
  /**
   * Adds a relational node to the memo and the group. If the node is already
   * in the memo, it returns the existing node. If no group is given, it
   * creates a new group with the given relational props of the node.
   */
  addRelational(node, group,) {
    const hash2 = node.getHash();
    const existing = this.nodes.get(hash2,);
    if (existing) return existing;
    this.nodes.set(hash2, node,);
    const outputFields = node.getOutputFields();
    const relational = new RelationalProps(outputFields,);
    group ??= this.addGroup(relational,);
    group.addNode(node,);
    assert(relational.isCompatible(group.relational,), 'Group has inconsistent relational props',);
    return node;
  }
  /**
   * Adds a scalar node to the memo. If the node is already in the memo, it
   * returns the existing node.
   */
  addScalar(node,) {
    const hash2 = node.getHash();
    const existing = this.nodes.get(hash2,);
    if (existing) return existing;
    this.nodes.set(hash2, node,);
    return node;
  }
};
var RelationalLimit = class _RelationalLimit extends RelationalNode {
  constructor(input, limit, ordering,) {
    super(input.isSynchronous && limit.isSynchronous,);
    this.input = input;
    this.limit = limit;
    this.ordering = ordering;
    __publicField(this, 'inputGroup',);
    this.inputGroup = input.getGroup();
  }
  getHash() {
    return calculateHash('RelationalLimit', this.inputGroup.id, this.limit,);
  }
  getOutputFields() {
    return this.inputGroup.relational.outputFields;
  }
  canProvideOrdering(ordering,) {
    return ordering.equals(this.ordering,);
  }
  canProvideResolvedFields() {
    return true;
  }
  getInputRequiredProps(required,) {
    const resolvedFields = new Fields(required.resolvedFields,);
    resolvedFields.merge(this.limit.referencedFields,);
    return new RequiredProps(this.ordering, resolvedFields,);
  }
  optimize(optimizer, required,) {
    const inputRequired = this.getInputRequiredProps(required,);
    const inputCost = optimizer.optimizeGroup(this.inputGroup, inputRequired,);
    const limitCost = this.limit.optimize(optimizer,);
    return new Cost(0,).add(Cost.max(inputCost, limitCost,),);
  }
  getOptimized(required,) {
    const inputRequired = this.getInputRequiredProps(required,);
    const input = this.inputGroup.getOptimized(inputRequired,);
    const limit = this.limit.getOptimized();
    return new _RelationalLimit(input, limit, this.ordering,);
  }
  *evaluate(context,) {
    const {
      input,
      limit,
    } = yield* evaluateObject({
      input: this.input.evaluate(context,),
      limit: this.limit.evaluate(context, void 0,),
    },);
    const value = valueToNumber(limit,) ?? Infinity;
    if (value === Infinity) return input;
    return input.slice(0, value,);
  }
};
var RelationalOffset = class _RelationalOffset extends RelationalNode {
  constructor(input, offset, ordering,) {
    super(input.isSynchronous && offset.isSynchronous,);
    this.input = input;
    this.offset = offset;
    this.ordering = ordering;
    __publicField(this, 'inputGroup',);
    this.inputGroup = input.getGroup();
  }
  getHash() {
    return calculateHash('RelationalOffset', this.inputGroup.id, this.offset,);
  }
  getOutputFields() {
    return this.inputGroup.relational.outputFields;
  }
  canProvideOrdering(ordering,) {
    return ordering.equals(this.ordering,);
  }
  canProvideResolvedFields() {
    return true;
  }
  getInputRequiredProps(required,) {
    const resolvedFields = new Fields(required.resolvedFields,);
    resolvedFields.merge(this.offset.referencedFields,);
    return new RequiredProps(this.ordering, resolvedFields,);
  }
  optimize(optimizer, required,) {
    const inputRequired = this.getInputRequiredProps(required,);
    const inputCost = optimizer.optimizeGroup(this.inputGroup, inputRequired,);
    const offsetCost = this.offset.optimize(optimizer,);
    return new Cost(0,).add(Cost.max(inputCost, offsetCost,),);
  }
  getOptimized(required,) {
    const inputRequired = this.getInputRequiredProps(required,);
    const input = this.inputGroup.getOptimized(inputRequired,);
    const offset = this.offset.getOptimized();
    return new _RelationalOffset(input, offset, this.ordering,);
  }
  *evaluate(context,) {
    const {
      input,
      offset,
    } = yield* evaluateObject({
      input: this.input.evaluate(context,),
      offset: this.offset.evaluate(context, void 0,),
    },);
    const value = valueToNumber(offset,) ?? 0;
    if (value === 0) return input;
    return input.slice(value,);
  }
};
var ScalarArray = class _ScalarArray extends ScalarNode {
  constructor(input, namedFields, ordering, referencedFields, referencedOuterFields,) {
    super(referencedFields, referencedOuterFields, input.isSynchronous,);
    this.input = input;
    this.namedFields = namedFields;
    this.ordering = ordering;
    this.referencedFields = referencedFields;
    this.referencedOuterFields = referencedOuterFields;
    __publicField(this, 'inputGroup',);
    __publicField(this, 'definition',);
    this.inputGroup = input.getGroup();
    const itemDefinitions = {};
    const namedFieldEntries = Object.entries(namedFields,);
    for (const [name, field,] of namedFieldEntries) {
      itemDefinitions[name] = field.definition;
    }
    this.definition = {
      type: 'array',
      isNullable: false,
      definition: {
        type: 'object',
        isNullable: false,
        definitions: itemDefinitions,
      },
    };
  }
  getHash() {
    const namedFieldIds = {};
    const namedFieldEntries = Object.entries(this.namedFields,);
    for (const [name, field,] of namedFieldEntries) {
      namedFieldIds[name] = field.id;
    }
    return calculateHash(
      'ScalarArray',
      this.inputGroup.id,
      namedFieldIds,
      this.ordering,
      this.referencedFields,
      this.referencedOuterFields,
    );
  }
  getInputRequiredProps() {
    const resolvedFields = new Fields();
    const fields = Object.values(this.namedFields,);
    for (const field of fields) {
      if (isUndefined(field.collection,)) continue;
      resolvedFields.add(field,);
    }
    return new RequiredProps(this.ordering, resolvedFields,);
  }
  optimize(optimizer,) {
    const inputRequired = this.getInputRequiredProps();
    const inputCost = optimizer.optimizeGroup(this.inputGroup, inputRequired,);
    return new Cost(0,).add(inputCost,);
  }
  getOptimized() {
    const inputRequired = this.getInputRequiredProps();
    const input = this.inputGroup.getOptimized(inputRequired,);
    return new _ScalarArray(input, this.namedFields, this.ordering, this.referencedFields, this.referencedOuterFields,);
  }
  *evaluate(context, tuple,) {
    const inputContext = new Tuple();
    if (context) inputContext.merge(context,);
    if (tuple) inputContext.merge(tuple,);
    const relation = yield* this.input.evaluate(inputContext,);
    const namedFieldEntries = Object.entries(this.namedFields,);
    return {
      type: 'array',
      value: relation.tuples.map((relationTuple) => {
        const value = {};
        for (const [name, field,] of namedFieldEntries) {
          value[name] = relationTuple.getValue(field,);
        }
        return {
          type: 'object',
          value,
        };
      },),
    };
  }
};
var ScalarCast = class _ScalarCast extends ScalarNode {
  constructor(input, definition,) {
    super(input.referencedFields, input.referencedOuterFields, input.isSynchronous,);
    this.input = input;
    this.definition = definition;
    assert(definition.isNullable, 'Unsupported non-nullable cast',);
  }
  getHash() {
    return calculateHash('ScalarCast', this.input, this.definition,);
  }
  optimize(optimizer,) {
    return this.input.optimize(optimizer,);
  }
  getOptimized() {
    const input = this.input.getOptimized();
    return new _ScalarCast(input, this.definition,);
  }
  *evaluate(context, tuple,) {
    const input = yield* this.input.evaluate(context, tuple,);
    return DatabaseValue.cast(input, this.definition,);
  }
};
var ScalarFlatArray = class _ScalarFlatArray extends ScalarNode {
  constructor(input, field, ordering, referencedFields, referencedOuterFields,) {
    super(referencedFields, referencedOuterFields, input.isSynchronous,);
    this.input = input;
    this.field = field;
    this.ordering = ordering;
    this.referencedFields = referencedFields;
    this.referencedOuterFields = referencedOuterFields;
    __publicField(this, 'inputGroup',);
    __publicField(this, 'definition',);
    this.inputGroup = input.getGroup();
    this.definition = {
      type: 'array',
      isNullable: false,
      definition: field.definition,
    };
  }
  getHash() {
    return calculateHash(
      'ScalarFlatArray',
      this.inputGroup.id,
      this.field.id,
      this.ordering,
      this.referencedFields,
      this.referencedOuterFields,
    );
  }
  getInputRequiredProps() {
    const resolvedFields = new Fields();
    if (!isUndefined(this.field.collection,)) {
      resolvedFields.add(this.field,);
    }
    return new RequiredProps(this.ordering, resolvedFields,);
  }
  optimize(optimizer,) {
    const inputRequired = this.getInputRequiredProps();
    const inputCost = optimizer.optimizeGroup(this.inputGroup, inputRequired,);
    return new Cost(0,).add(inputCost,);
  }
  getOptimized() {
    const inputRequired = this.getInputRequiredProps();
    const input = this.inputGroup.getOptimized(inputRequired,);
    return new _ScalarFlatArray(input, this.field, this.ordering, this.referencedFields, this.referencedOuterFields,);
  }
  *evaluate(context, tuple,) {
    const inputContext = new Tuple();
    if (context) inputContext.merge(context,);
    if (tuple) inputContext.merge(tuple,);
    const relation = yield* this.input.evaluate(inputContext,);
    return {
      type: 'array',
      value: relation.tuples.map((relationTuple) => {
        return relationTuple.getValue(this.field,);
      },),
    };
  }
};
var collation6 = {
  type: 0,
  /* CaseInsensitive */
};
var ScalarIn = class _ScalarIn extends ScalarNode {
  constructor(left, right,) {
    const referencedFields = new Fields();
    referencedFields.merge(left.referencedFields,);
    referencedFields.merge(right.referencedFields,);
    const referencedOuterFields = new Fields();
    referencedOuterFields.merge(left.referencedOuterFields,);
    referencedOuterFields.merge(right.referencedOuterFields,);
    const isSynchronous = left.isSynchronous && right.isSynchronous;
    super(referencedFields, referencedOuterFields, isSynchronous,);
    this.left = left;
    this.right = right;
    __publicField(this, 'definition', {
      type: 'boolean',
      isNullable: false,
    },);
  }
  getHash() {
    return calculateHash('ScalarIn', this.left, this.right,);
  }
  optimize(optimizer,) {
    const leftCost = this.left.optimize(optimizer,);
    const rightCost = this.right.optimize(optimizer,);
    return Cost.max(leftCost, rightCost,);
  }
  getOptimized() {
    const left = this.left.getOptimized();
    const right = this.right.getOptimized();
    return new _ScalarIn(left, right,);
  }
  *evaluate(context, tuple,) {
    const {
      left,
      right,
    } = yield* evaluateObject({
      left: this.left.evaluate(context, tuple,),
      right: this.right.evaluate(context, tuple,),
    },);
    return {
      type: 'boolean',
      value: DatabaseValue.in(left, right, collation6,),
    };
  }
};
var collation7 = {
  type: 1,
  /* CaseSensitive */
};
var ScalarIndexOf = class _ScalarIndexOf extends ScalarNode {
  constructor(source, target,) {
    const referencedFields = new Fields();
    referencedFields.merge(source.referencedFields,);
    referencedFields.merge(target.referencedFields,);
    const referencedOuterFields = new Fields();
    referencedOuterFields.merge(source.referencedOuterFields,);
    referencedOuterFields.merge(target.referencedOuterFields,);
    const isSynchronous = source.isSynchronous && target.isSynchronous;
    super(referencedFields, referencedOuterFields, isSynchronous,);
    this.source = source;
    this.target = target;
    __publicField(this, 'definition', {
      type: 'number',
      isNullable: false,
    },);
  }
  getHash() {
    return calculateHash('ScalarIndexOf', this.source, this.target,);
  }
  optimize(optimizer,) {
    const sourceCost = this.source.optimize(optimizer,);
    const targetCost = this.target.optimize(optimizer,);
    return Cost.max(sourceCost, targetCost,);
  }
  getOptimized() {
    const source = this.source.getOptimized();
    const target = this.target.getOptimized();
    return new _ScalarIndexOf(source, target,);
  }
  *evaluate(context, tuple,) {
    const {
      source,
      target,
    } = yield* evaluateObject({
      source: this.source.evaluate(context, tuple,),
      target: this.target.evaluate(context, tuple,),
    },);
    return {
      type: 'number',
      value: DatabaseValue.indexOf(source, target, collation7,),
    };
  }
};
var ScalarLength = class _ScalarLength extends ScalarNode {
  constructor(input,) {
    super(input.referencedFields, input.referencedOuterFields, input.isSynchronous,);
    this.input = input;
    __publicField(this, 'definition', {
      type: 'number',
      isNullable: false,
    },);
  }
  getHash() {
    return calculateHash('ScalarLength', this.input,);
  }
  optimize(optimizer,) {
    return this.input.optimize(optimizer,);
  }
  getOptimized() {
    const input = this.input.getOptimized();
    return new _ScalarLength(input,);
  }
  *evaluate(context, tuple,) {
    const input = yield* this.input.evaluate(context, tuple,);
    return {
      type: 'number',
      value: DatabaseValue.length(input,),
    };
  }
};
var ScalarNot = class _ScalarNot extends ScalarNode {
  constructor(input,) {
    super(input.referencedFields, input.referencedOuterFields, input.isSynchronous,);
    this.input = input;
    __publicField(this, 'definition', {
      type: 'boolean',
      isNullable: false,
    },);
  }
  getHash() {
    return calculateHash('ScalarNot', this.input,);
  }
  optimize(optimizer,) {
    return this.input.optimize(optimizer,);
  }
  getOptimized() {
    const input = this.input.getOptimized();
    return new _ScalarNot(input,);
  }
  *evaluate(context, tuple,) {
    const input = yield* this.input.evaluate(context, tuple,);
    return {
      type: 'boolean',
      value: !valueToBoolean(input,),
    };
  }
};
var collation8 = {
  type: 0,
  /* CaseInsensitive */
};
var ScalarNotIn = class _ScalarNotIn extends ScalarNode {
  constructor(left, right,) {
    const referencedFields = new Fields();
    referencedFields.merge(left.referencedFields,);
    referencedFields.merge(right.referencedFields,);
    const referencedOuterFields = new Fields();
    referencedOuterFields.merge(left.referencedOuterFields,);
    referencedOuterFields.merge(right.referencedOuterFields,);
    const isSynchronous = left.isSynchronous && right.isSynchronous;
    super(referencedFields, referencedOuterFields, isSynchronous,);
    this.left = left;
    this.right = right;
    __publicField(this, 'definition', {
      type: 'boolean',
      isNullable: false,
    },);
  }
  getHash() {
    return calculateHash('ScalarNotIn', this.left, this.right,);
  }
  optimize(optimizer,) {
    const leftCost = this.left.optimize(optimizer,);
    const rightCost = this.right.optimize(optimizer,);
    return Cost.max(leftCost, rightCost,);
  }
  getOptimized() {
    const left = this.left.getOptimized();
    const right = this.right.getOptimized();
    return new _ScalarNotIn(left, right,);
  }
  *evaluate(context, tuple,) {
    const {
      left,
      right,
    } = yield* evaluateObject({
      left: this.left.evaluate(context, tuple,),
      right: this.right.evaluate(context, tuple,),
    },);
    return {
      type: 'boolean',
      value: !DatabaseValue.in(left, right, collation8,),
    };
  }
};
var ScalarVariable = class extends ScalarNode {
  constructor(field, isOuterField,) {
    assert(field.name !== VIRTUAL_INDEX_FIELD, 'Invalid field name',);
    const referencedFields = new Fields();
    const referencedOuterFields = new Fields();
    if (isOuterField) {
      referencedOuterFields.add(field,);
    } else {
      referencedFields.add(field,);
    }
    super(referencedFields, referencedOuterFields, true,);
    this.field = field;
    this.isOuterField = isOuterField;
    __publicField(this, 'definition',);
    this.definition = field.definition;
  }
  getHash() {
    return calculateHash('ScalarVariable', this.field.id, this.isOuterField,);
  }
  optimize() {
    return new Cost(0,);
  }
  getOptimized() {
    return this;
  }
  // biome-ignore lint/correctness/useYield: Required by the super class.
  *evaluate(context, tuple,) {
    if (this.isOuterField) {
      assert(context, 'Context must exist',);
      return context.getValue(this.field,);
    }
    assert(tuple, 'Tuple must exist',);
    return tuple.getValue(this.field,);
  }
};
var Normalizer = class {
  constructor(memo3,) {
    this.memo = memo3;
  }
  finishRelational(node,) {
    return this.memo.addRelational(node,);
  }
  newRelationalScan(collection,) {
    const node = new RelationalScan(collection,);
    return this.finishRelational(node,);
  }
  newRelationalIndexLookup(index, query,) {
    const node = new RelationalIndexLookup(index, query,);
    return this.finishRelational(node,);
  }
  newRelationalLeftJoin(left, right, constraint,) {
    const node = new RelationalLeftJoin(left, right, constraint,);
    return this.finishRelational(node,);
  }
  newRelationalRightJoin(left, right, constraint,) {
    return this.newRelationalLeftJoin(right, left, constraint,);
  }
  newRelationalFilter(input, predicate,) {
    if (
      input instanceof RelationalLeftJoin &&
      // Check that the predicate doesn't depend on any joined field.
      predicate.referencedFields.subsetOf(input.leftGroup.relational.outputFields,)
    ) {
      const pushedFilter = this.newRelationalFilter(input.left, predicate,);
      return this.newRelationalLeftJoin(pushedFilter, input.right, input.constraint,);
    }
    if (
      input instanceof RelationalRightJoin &&
      // Check that the predicate doesn't depend on any joined field.
      predicate.referencedFields.subsetOf(input.rightGroup.relational.outputFields,)
    ) {
      const pushedFilter = this.newRelationalFilter(input.right, predicate,);
      return this.newRelationalLeftJoin(input.left, pushedFilter, input.constraint,);
    }
    const node = new RelationalFilter(input, predicate,);
    return this.finishRelational(node,);
  }
  newRelationalProject(input, projections, passthrough,) {
    const node = new RelationalProject(input, projections, passthrough,);
    return this.finishRelational(node,);
  }
  newRelationalLimit(input, limit, ordering,) {
    if (
      input instanceof RelationalProject &&
      // Check that the limit doesn't depend on any projected field.
      limit.referencedFields.subsetOf(input.inputGroup.relational.outputFields,) &&
      // Check that the ordering doesn't depend on any projected field.
      ordering.providedByFields(input.inputGroup.relational.outputFields,)
    ) {
      const pushedLimit = this.newRelationalLimit(input.input, limit, ordering,);
      return this.newRelationalProject(pushedLimit, input.projections, input.passthrough,);
    }
    const node = new RelationalLimit(input, limit, ordering,);
    return this.finishRelational(node,);
  }
  newRelationalOffset(input, offset, ordering,) {
    const node = new RelationalOffset(input, offset, ordering,);
    return this.finishRelational(node,);
  }
  finishScalar(node,) {
    const isConstant = node instanceof ScalarConstant;
    if (!isConstant && node.isSynchronous && node.referencedFields.size === 0 && node.referencedOuterFields.size === 0) {
      const value = node.evaluateSync();
      return this.newScalarConstant(node.definition, value,);
    }
    return this.memo.addScalar(node,);
  }
  /**
   * When we create `ScalarConstant` nodes, we always give them an unknown
   * type definition. Before we compare them to other nodes, we need to cast
   * them to a specific type.
   *
   * For example, in the following query:
   * ```
   * SELECT id FROM cars WHERE type = "coupe"
   * ```
   *
   * If the `type` field is an enum, and we parse the `"coupe"` constant as a
   * string, the where clause will always be false because an enum can't be
   * equal to a string. But if we cast the string to an enum type first, the
   * where clause will work as expected.
   */
  removeUnknown(node, definition,) {
    if (node.definition.type !== 'unknown') return node;
    if (definition.type === 'unknown') return node;
    const nullableDefinition = {
      ...definition,
      isNullable: true,
    };
    return this.newScalarCast(node, nullableDefinition,);
  }
  newScalarVariable(field, isOuterField,) {
    const node = new ScalarVariable(field, isOuterField,);
    return this.finishScalar(node,);
  }
  newScalarConstant(definition, value,) {
    const node = new ScalarConstant(definition, value,);
    return this.finishScalar(node,);
  }
  newScalarNot(input,) {
    if (input instanceof ScalarNot) {
      if (input.input.definition.type === 'boolean') {
        return input.input;
      }
      const definition = {
        type: 'boolean',
        isNullable: true,
      };
      return this.newScalarCast(input.input, definition,);
    }
    if (input instanceof ScalarEquals) {
      return this.newScalarNotEquals(input.left, input.right,);
    }
    if (input instanceof ScalarNotEquals) {
      return this.newScalarEquals(input.left, input.right,);
    }
    if (input instanceof ScalarLessThan) {
      return this.newScalarGreaterThanOrEqual(input.left, input.right,);
    }
    if (input instanceof ScalarLessThanOrEqual) {
      return this.newScalarGreaterThan(input.left, input.right,);
    }
    if (input instanceof ScalarGreaterThan) {
      return this.newScalarLessThanOrEqual(input.left, input.right,);
    }
    if (input instanceof ScalarGreaterThanOrEqual) {
      return this.newScalarLessThan(input.left, input.right,);
    }
    if (input instanceof ScalarAnd) {
      const left = this.newScalarNot(input.left,);
      const right = this.newScalarNot(input.right,);
      return this.newScalarOr(left, right,);
    }
    if (input instanceof ScalarOr) {
      const left = this.newScalarNot(input.left,);
      const right = this.newScalarNot(input.right,);
      return this.newScalarAnd(left, right,);
    }
    const node = new ScalarNot(input,);
    return this.finishScalar(node,);
  }
  // TODO: Normalize `$1 AND true` to `$1`
  // TODO: Normalize `true AND $1` to `$1`
  // TODO: Normalize `$1 AND false` to `false`
  // TODO: Normalize `false AND $1` to `false`
  // TODO: Normalize `$1 AND ($2 AND $c)` to `($1 AND $2) AND $c`
  newScalarAnd(left, right,) {
    const node = new ScalarAnd(left, right,);
    return this.finishScalar(node,);
  }
  // TODO: Normalize `$1 OR true` to `$1`
  // TODO: Normalize `true OR $1` to `$1`
  // TODO: Normalize `$1 OR false` to `$1`
  // TODO: Normalize `false OR $1` to `false`
  // TODO: Normalize `$1 OR ($2 OR $c)` to `($1 OR $2) OR $c`
  newScalarOr(left, right,) {
    const node = new ScalarOr(left, right,);
    return this.finishScalar(node,);
  }
  newScalarEquals(left, right,) {
    const isLeftVariable = left instanceof ScalarVariable;
    const isRightVariable = right instanceof ScalarVariable;
    if (isRightVariable && !isLeftVariable) {
      return this.newScalarEquals(right, left,);
    }
    left = this.removeUnknown(left, right.definition,);
    right = this.removeUnknown(right, left.definition,);
    const node = new ScalarEquals(left, right,);
    return this.finishScalar(node,);
  }
  newScalarNotEquals(left, right,) {
    const isLeftVariable = left instanceof ScalarVariable;
    const isRightVariable = right instanceof ScalarVariable;
    if (isRightVariable && !isLeftVariable) {
      return this.newScalarNotEquals(right, left,);
    }
    left = this.removeUnknown(left, right.definition,);
    right = this.removeUnknown(right, left.definition,);
    const node = new ScalarNotEquals(left, right,);
    return this.finishScalar(node,);
  }
  newScalarLessThan(left, right,) {
    const isLeftVariable = left instanceof ScalarVariable;
    const isRightVariable = right instanceof ScalarVariable;
    if (isRightVariable && !isLeftVariable) {
      return this.newScalarGreaterThan(right, left,);
    }
    left = this.removeUnknown(left, right.definition,);
    right = this.removeUnknown(right, left.definition,);
    const node = new ScalarLessThan(left, right,);
    return this.finishScalar(node,);
  }
  newScalarLessThanOrEqual(left, right,) {
    const isLeftVariable = left instanceof ScalarVariable;
    const isRightVariable = right instanceof ScalarVariable;
    if (isRightVariable && !isLeftVariable) {
      return this.newScalarGreaterThanOrEqual(right, left,);
    }
    left = this.removeUnknown(left, right.definition,);
    right = this.removeUnknown(right, left.definition,);
    const node = new ScalarLessThanOrEqual(left, right,);
    return this.finishScalar(node,);
  }
  newScalarGreaterThan(left, right,) {
    const isLeftVariable = left instanceof ScalarVariable;
    const isRightVariable = right instanceof ScalarVariable;
    if (isRightVariable && !isLeftVariable) {
      return this.newScalarLessThan(right, left,);
    }
    left = this.removeUnknown(left, right.definition,);
    right = this.removeUnknown(right, left.definition,);
    const node = new ScalarGreaterThan(left, right,);
    return this.finishScalar(node,);
  }
  newScalarGreaterThanOrEqual(left, right,) {
    const isLeftVariable = left instanceof ScalarVariable;
    const isRightVariable = right instanceof ScalarVariable;
    if (isRightVariable && !isLeftVariable) {
      return this.newScalarLessThanOrEqual(right, left,);
    }
    left = this.removeUnknown(left, right.definition,);
    right = this.removeUnknown(right, left.definition,);
    const node = new ScalarGreaterThanOrEqual(left, right,);
    return this.finishScalar(node,);
  }
  newScalarIn(left, right,) {
    if (right.definition.type === 'array') {
      left = this.removeUnknown(left, right.definition.definition,);
    }
    const arrayDefinition = {
      type: 'array',
      isNullable: true,
      definition: left.definition,
    };
    right = this.removeUnknown(right, arrayDefinition,);
    const node = new ScalarIn(left, right,);
    return this.finishScalar(node,);
  }
  newScalarNotIn(left, right,) {
    if (right.definition.type === 'array') {
      left = this.removeUnknown(left, right.definition.definition,);
    }
    const arrayDefinition = {
      type: 'array',
      isNullable: true,
      definition: left.definition,
    };
    right = this.removeUnknown(right, arrayDefinition,);
    const node = new ScalarNotIn(left, right,);
    return this.finishScalar(node,);
  }
  newScalarCase(input, conditions, otherwise,) {
    if (input) {
      const castConditions = [];
      for (
        const {
          when,
          then,
        } of conditions
      ) {
        const castWhen = this.removeUnknown(when, input.definition,);
        const castCondition = new CaseCondition(castWhen, then,);
        castConditions.push(castCondition,);
      }
      conditions = castConditions;
    }
    const node = new ScalarCase(input, conditions, otherwise,);
    return this.finishScalar(node,);
  }
  newScalarContains(source, target,) {
    const node = new ScalarContains(source, target,);
    return this.finishScalar(node,);
  }
  newScalarStartsWith(source, target,) {
    const node = new ScalarStartsWith(source, target,);
    return this.finishScalar(node,);
  }
  newScalarEndsWith(source, target,) {
    const node = new ScalarEndsWith(source, target,);
    return this.finishScalar(node,);
  }
  newScalarLength(array,) {
    const node = new ScalarLength(array,);
    return this.finishScalar(node,);
  }
  newScalarIndexOf(source, target,) {
    const node = new ScalarIndexOf(source, target,);
    return this.finishScalar(node,);
  }
  newScalarArray(input, namedFields, ordering, referencedFields, referencedOuterFields,) {
    const node = new ScalarArray(input, namedFields, ordering, referencedFields, referencedOuterFields,);
    return this.finishScalar(node,);
  }
  newScalarFlatArray(input, field, ordering, referencedFields, referencedOuterFields,) {
    const node = new ScalarFlatArray(input, field, ordering, referencedFields, referencedOuterFields,);
    return this.finishScalar(node,);
  }
  newScalarCast(input, definition,) {
    if (input.definition.type === definition.type) {
      return input;
    }
    const node = new ScalarCast(input, definition,);
    return this.finishScalar(node,);
  }
};
var EnforcerNode = class extends RelationalNode {};
var EnforcerResolve = class _EnforcerResolve extends EnforcerNode {
  constructor(input, fields,) {
    super(false,);
    this.input = input;
    this.fields = fields;
    __publicField(this, 'inputGroup',);
    this.inputGroup = input.getGroup();
  }
  getHash() {
    return calculateHash('EnforcerResolve', this.inputGroup.id, this.fields,);
  }
  getOutputFields() {
    return this.inputGroup.relational.outputFields;
  }
  canProvideOrdering() {
    return true;
  }
  canProvideResolvedFields(resolvedFields,) {
    return resolvedFields.subsetOf(this.fields,);
  }
  getInputRequiredProps(required,) {
    const resolvedFields = new Fields();
    return new RequiredProps(required.ordering, resolvedFields,);
  }
  optimize(optimizer, required,) {
    const inputRequired = this.getInputRequiredProps(required,);
    const inputCost = optimizer.optimizeGroup(this.inputGroup, inputRequired,);
    return Cost.estimate(0, 100 * KB,).add(inputCost,);
  }
  getOptimized(required,) {
    const inputRequired = this.getInputRequiredProps(required,);
    const input = this.inputGroup.getOptimized(inputRequired,);
    return new _EnforcerResolve(input, this.fields,);
  }
  *evaluate(context,) {
    const input = yield* this.input.evaluate(context,);
    assert(this.fields.subsetOf(input.fields,), 'Fields can\'t be resolved',);
    const collections = /* @__PURE__ */ new Set();
    for (const field of this.fields) {
      assert(field.collection, 'Collection required to resolve field',);
      collections.add(field.collection,);
    }
    for (const tuple of input.tuples) {
      for (const field of this.fields) {
        const value = tuple.getValue(field,);
        if ((value == null ? void 0 : value.type) === 'richtext') {
          assert(value.value instanceof RichTextResolver, 'Pointer must be wrapped',);
          void value.value.resolve();
        } else if ((value == null ? void 0 : value.type) === 'vectorsetitem') {
          assert(value.value instanceof VectorSetItemResolver, 'Pointer must be wrapped',);
          void value.value.resolve();
        }
      }
    }
    const collectionItems = yield Promise.all(
      Array.from(collections,).map(async (collection) => {
        const pointers = [];
        for (const tuple of input.tuples) {
          const pointer = tuple.getPointer(collection,);
          if (pointer) pointers.push(pointer,);
        }
        const items = await collection.data.resolveItems(pointers,);
        assert(items.length === pointers.length, 'Invalid number of items',);
        return [collection, items,];
      },),
    );
    return input.map(input.fields, (tuple) => {
      const result = new Tuple();
      result.merge(tuple,);
      for (const [collection, items,] of collectionItems) {
        const pointer = tuple.getPointer(collection,);
        if (!pointer) continue;
        const item = items.shift();
        assert(item, 'Item not found',);
        assert(item.pointer === pointer, 'Pointer mismatch',);
        for (const field of collection.fields) {
          const value = field.getValue(item,);
          result.addValue(field, value,);
        }
      }
      return result;
    },);
  }
};
var collation9 = {
  type: 0,
  /* CaseInsensitive */
};
var EnforcerSort = class _EnforcerSort extends EnforcerNode {
  constructor(input, ordering,) {
    super(input.isSynchronous,);
    this.input = input;
    this.ordering = ordering;
    __publicField(this, 'inputGroup',);
    this.inputGroup = input.getGroup();
  }
  getHash() {
    return calculateHash('EnforcerSort', this.inputGroup.id, this.ordering,);
  }
  getOutputFields() {
    return this.inputGroup.relational.outputFields;
  }
  canProvideOrdering(ordering,) {
    return ordering.equals(this.ordering,);
  }
  canProvideResolvedFields() {
    return true;
  }
  getInputRequiredProps(required,) {
    const resolvedFields = new Fields(required.resolvedFields,);
    for (
      const {
        field,
      } of this.ordering.fields
    ) {
      if (field.name === VIRTUAL_INDEX_FIELD) continue;
      if (isUndefined(field.collection,)) continue;
      resolvedFields.add(field,);
    }
    const ordering = new Ordering();
    return new RequiredProps(ordering, resolvedFields,);
  }
  optimize(optimizer, required,) {
    const inputRequired = this.getInputRequiredProps(required,);
    const inputCost = optimizer.optimizeGroup(this.inputGroup, inputRequired,);
    return new Cost(0,).add(inputCost,);
  }
  getOptimized(required,) {
    const inputRequired = this.getInputRequiredProps(required,);
    const input = this.inputGroup.getOptimized(inputRequired,);
    return new _EnforcerSort(input, this.ordering,);
  }
  *evaluate(context,) {
    const input = yield* this.input.evaluate(context,);
    return input.sort((leftTuple, rightTuple,) => {
      for (
        const {
          field,
          direction,
        } of this.ordering.fields
      ) {
        const isAscending = direction === 'asc';
        if (field.name === VIRTUAL_INDEX_FIELD) {
          const collection = field.collection;
          assert(collection, 'Collection required for sorting',);
          const leftPointer = leftTuple.getPointer(collection,);
          assert(leftPointer, 'Pointer required for sorting',);
          const leftItem = {
            pointer: leftPointer,
            data: {},
          };
          const rightPointer = rightTuple.getPointer(collection,);
          assert(rightPointer, 'Pointer required for sorting',);
          const rightItem = {
            pointer: rightPointer,
            data: {},
          };
          const order = collection.data.compareItems(leftItem, rightItem,);
          return isAscending ? order : -order;
        }
        const leftValue = leftTuple.getValue(field,);
        const rightValue = rightTuple.getValue(field,);
        if (DatabaseValue.equal(leftValue, rightValue, collation9,)) {
          continue;
        }
        if (isNull(leftValue,) || DatabaseValue.lessThan(leftValue, rightValue, collation9,)) {
          return isAscending ? -1 : 1;
        }
        if (isNull(rightValue,) || DatabaseValue.greaterThan(leftValue, rightValue, collation9,)) {
          return isAscending ? 1 : -1;
        }
        throw new Error('Invalid comparison',);
      }
      return 0;
    },);
  }
};
var Optimizer = class {
  constructor(query, locale,) {
    this.query = query;
    this.locale = locale;
    __publicField(this, 'memo', new Memo(),);
    __publicField(this, 'normalizer', new Normalizer(this.memo,),);
    __publicField(this, 'explorer', new Explorer(this.normalizer,),);
  }
  optimize() {
    const builder = new Builder(this.normalizer, this.query, this.locale,);
    const outScope = builder.build();
    const root = outScope.takeNode();
    const group = root.getGroup();
    const required = outScope.getRequiredProps();
    this.optimizeGroup(group, required,);
    const optimized = group.getOptimized(required,);
    const namedFields = outScope.getNamedFields();
    return [optimized, namedFields,];
  }
  optimizeGroup(group, required,) {
    const winner = group.getWinner(required,);
    if (winner.node) return winner.cost;
    const normalized = group.nodes[0];
    assert(normalized, 'Normalized node not found',);
    this.createEnforcer(winner, normalized, required,);
    for (const node of group.nodes) {
      if (required.canProvide(node,)) {
        const cost = node.optimize(this, required,);
        winner.update(node, cost,);
      }
      if (required.isMinimal) {
        this.explorer.explore(node,);
      }
    }
    if (false) {
      assert(winner.node, 'Group not optimized',);
      const cache2 = /* @__PURE__ */ new Map();
      winner.node = new RelationalAssert(winner.node, required, cache2,);
    }
    return winner.cost;
  }
  createEnforcer(winner, node, required,) {
    if (required.resolvedFields.size > 0) {
      const enforcer = new EnforcerResolve(node, required.resolvedFields,);
      const cost = enforcer.optimize(this, required,);
      winner.update(enforcer, cost,);
    }
    if (required.ordering.length > 0) {
      const enforcer = new EnforcerSort(node, required.ordering,);
      const cost = enforcer.optimize(this, required,);
      winner.update(enforcer, cost,);
    }
  }
};
function stringifyIdentifier(expression,) {
  if (expression.collection) {
    return `"${expression.collection}"."${expression.name}"`;
  }
  return `"${expression.name}"`;
}
function stringifyLiteralValue(expression,) {
  if (typeof expression.value === 'string') {
    return `'${expression.value}'`;
  }
  return expression.value;
}
function stringifyFunctionCall(expression,) {
  return `${expression.functionName}(${expression.arguments.map((argument) => stringifyExpression(argument,)).join(', ',)})`;
}
function stringifyCaseExpression(expression,) {
  let caseString = 'CASE';
  if (expression.value) {
    caseString += ` ${stringifyExpression(expression.value,)}`;
  }
  for (const condition of expression.conditions) {
    caseString += ` WHEN ${stringifyExpression(condition.when,)} THEN ${stringifyExpression(condition.then,)}`;
  }
  if (expression.else) {
    caseString += ` ELSE ${stringifyExpression(expression.else,)}`;
  }
  caseString += ' END';
  return caseString;
}
function stringifyUnaryOperation(expression,) {
  const value = stringifyExpression(expression.value,);
  const operator = expression.operator.toUpperCase();
  return `${operator} ${value}`;
}
function stringifyBinaryOperation(expression,) {
  const left = stringifyExpression(expression.left,);
  const right = stringifyExpression(expression.right,);
  const operator = expression.operator.toUpperCase();
  return `${left} ${operator} ${right}`;
}
function stringifyTypeCast(expression,) {
  return `CAST(${stringifyExpression(expression.value,)} as ${expression.dataType})`;
}
function stringifyExpression(expression,) {
  switch (expression.type) {
    case 'Identifier':
      return stringifyIdentifier(expression,);
    case 'LiteralValue':
      return stringifyLiteralValue(expression,);
    case 'FunctionCall':
      return stringifyFunctionCall(expression,);
    case 'Case':
      return stringifyCaseExpression(expression,);
    case 'UnaryOperation':
      return stringifyUnaryOperation(expression,);
    case 'BinaryOperation':
      return stringifyBinaryOperation(expression,);
    case 'TypeCast':
      return stringifyTypeCast(expression,);
    case 'Select':
      return `${stringifyQuery(expression,)}`;
    default: {
      assertNever(expression,);
    }
  }
}
function stringifyCollection(collection,) {
  if (isDatabaseCollection(collection.data,)) {
    return 'Collection';
  }
  if (collection.alias) {
    return `"${collection.data.displayName}" AS "${collection.alias}"`;
  }
  return `"${collection.data.displayName}"`;
}
function stringifyJoin(join,) {
  let result = `${stringifyFrom(join.left,)} LEFT JOIN ${stringifyFrom(join.right,)}`;
  if (join.constraint) {
    result += ` ON ${stringifyExpression(join.constraint,)}`;
  }
  return result;
}
function stringifyFrom(from,) {
  switch (from.type) {
    case 'Collection':
      return stringifyCollection(from,);
    case 'LeftJoin':
      return stringifyJoin(from,);
    default:
      assertNever(from,);
  }
}
function autoIndentSql(sql,) {
  let formattedSql = '';
  const tokens = sql.split(/\s+/u,);
  tokens.forEach((token) => {
    if (token === '') return;
    if (['SELECT', 'FROM', 'WHERE', 'ORDER', 'LIMIT', 'OFFSET',].includes(token,)) {
      formattedSql += `
${token}`;
    } else if (['AND', 'OR',].includes(token,)) {
      formattedSql += `
	${token}`;
    } else {
      formattedSql += ` ${token}`;
    }
  },);
  return formattedSql.trim();
}
function stringifyQuery(query,) {
  let queryString = '';
  queryString += `SELECT ${
    query.select.map((selectExpression) => {
      const expressionString = stringifyExpression(selectExpression,);
      if (selectExpression.alias) {
        return `${expressionString} AS "${selectExpression.alias}"`;
      }
      return expressionString;
    },).join(', ',)
  }`;
  queryString += ` FROM ${stringifyFrom(query.from,)}`;
  if (query.where) {
    queryString += ` WHERE ${stringifyExpression(query.where,)}`;
  }
  if (query.orderBy) {
    queryString += ` ORDER BY ${
      query.orderBy.map((orderExpression) => {
        return `${stringifyExpression(orderExpression,)} ${orderExpression.direction ?? 'asc'}`;
      },).join(', ',)
    }`;
  }
  if (query.limit) {
    queryString += ` LIMIT ${stringifyExpression(query.limit,)}`;
  }
  if (query.offset) {
    queryString += ` OFFSET ${stringifyExpression(query.offset,)}`;
  }
  return autoIndentSql(queryString,);
}
var log = /* @__PURE__ */ getLogger('query-engine',);
var QueryEngine = class {
  async query(query, locale,) {
    log.debug(`Query:
${stringifyQuery(query,)}`,);
    const optimizer = new Optimizer(query, locale,);
    const [root, namedFields,] = optimizer.optimize();
    const relation = await root.evaluateAsync();
    const namedFieldEntries = Object.entries(namedFields,);
    const result = await Promise.all(relation.tuples.map(async (tuple) => {
      const resolvedFields = await Promise.all(namedFieldEntries.map(async ([name, field,],) => {
        const value = tuple.getValue(field,);
        const resolved = await this.resolveValue(value,);
        return [name, resolved,];
      },),);
      return Object.fromEntries(resolvedFields,);
    },),);
    return result;
  }
  async resolveValue(value,) {
    if ((value == null ? void 0 : value.type) === 'richtext') {
      assert(value.value instanceof RichTextResolver, 'Pointer must be wrapped',);
      return value.value.resolve();
    }
    if ((value == null ? void 0 : value.type) === 'vectorsetitem') {
      assert(value.value instanceof VectorSetItemResolver, 'Pointer must be wrapped',);
      return value.value.resolve();
    }
    if ((value == null ? void 0 : value.type) === 'array') {
      return Promise.all(value.value.map(async (item) => {
        return this.resolveValue(item,);
      },),);
    }
    if ((value == null ? void 0 : value.type) === 'object') {
      const entries = Object.entries(value.value,);
      const resolvedEntries = await Promise.all(entries.map(async ([key7, item,],) => {
        const resolved = await this.resolveValue(item,);
        return [key7, resolved,];
      },),);
      return Object.fromEntries(resolvedEntries,);
    }
    return (value == null ? void 0 : value.value) ?? null;
  }
};
var QueryCache = class {
  constructor(queryEngine2,) {
    this.queryEngine = queryEngine2;
    __publicField(this, 'cache', /* @__PURE__ */ new Map(),);
  }
  get(query, locale,) {
    const key7 = getCacheKey(query, locale,);
    const existing = this.cache.get(key7,);
    if (existing) return existing;
    const resolver = () => this.queryEngine.query(query, locale,);
    const value = new LazyValue(resolver,);
    this.cache.set(key7, value,);
    return value;
  }
};
var collectionIds = /* @__PURE__ */ new WeakMap();
function getCollectionId(collection,) {
  const existing = collectionIds.get(collection,);
  if (existing) return existing;
  const id3 = Math.random().toString(16,).slice(2,);
  collectionIds.set(collection, id3,);
  return id3;
}
function replaceCollection(_, value,) {
  if (isObject2(value,) && value.type === 'Collection' && isAnyCollection(value.data,)) {
    return getCollectionId(value.data,);
  }
  return value;
}
function getCacheKey(query, locale,) {
  const localeId = (locale == null ? void 0 : locale.id) ?? 'default';
  return JSON.stringify(query, replaceCollection,) + localeId;
}
function rejectPending(pendingTimers, pendingPromises,) {
  pendingTimers.forEach((t) => clearTimeout(t,));
  pendingTimers.clear();
  pendingPromises.forEach((reject) => reject == null ? void 0 : reject('Callback cancelled by variant change',));
  pendingPromises.clear();
}
function createSet() {
  return /* @__PURE__ */ new Set();
}
function useActiveVariantCallback(baseVariant,) {
  const pendingPromises = useConstant2(createSet,);
  const pendingTimers = useConstant2(createSet,);
  useOnCurrentTargetChange(() => {
    return () => rejectPending(pendingTimers, pendingPromises,);
  },);
  useEffect(() => {
    return () => rejectPending(pendingTimers, pendingPromises,);
  }, [],);
  useEffect(() => {
    rejectPending(pendingTimers, pendingPromises,);
  }, [baseVariant,],);
  return useRef3({
    /**
     * Create a callback that can be cancelled if the base variant changes.
     */
    activeVariantCallback: (callback) => async (...args) => {
      return new Promise((resolve, reject,) => {
        pendingPromises.add(reject,);
        void callback(...args,).then(resolve,);
      },).catch(() => {},);
    },
    /**
     * Execute a callback after a defined period of time. The callback will not
     * be called if pending events are cancelled because the timeout will be
     * cancelled.
     */
    delay: async (callback, msDelay,) => {
      await new Promise((resolve) => {
        pendingTimers.add(globalThis.setTimeout(() => resolve(true,), msDelay,),);
      },);
      callback();
    },
  },).current;
}
function useActiveTargetCallback() {
  const value = useActiveVariantCallback(void 0,);
  return useRef3({
    activeTargetCallback: value.activeVariantCallback,
    delay: value.delay,
  },).current;
}
function useAddVariantProps(baseVariant, gestureVariant, variantProps2,) {
  return React4.useCallback((id3) => {
    var _a, _b, _c;
    if (!variantProps2) return {};
    if (!baseVariant) return {};
    if (gestureVariant) {
      return Object.assign(
        {},
        (_a = variantProps2[baseVariant]) == null ? void 0 : _a[id3],
        (_b = variantProps2[gestureVariant]) == null ? void 0 : _b[id3],
      );
    }
    return ((_c = variantProps2[baseVariant]) == null ? void 0 : _c[id3]) || {};
  }, [baseVariant, gestureVariant, variantProps2,],);
}
function createMediaQueriesFromBreakpoints(breakpoints,) {
  const mediaQueries = {};
  for (const [variant, query,] of Object.entries(breakpoints,)) {
    const {
      min = 0,
      max,
    } = query;
    const mediaQuery = [];
    if (min) mediaQuery.push(`(min-width: ${min}px)`,);
    if (max) mediaQuery.push(`(max-width: ${max}px)`,);
    if (mediaQuery.length) mediaQueries[variant] = mediaQuery.join(' and ',);
  }
  return mediaQueries;
}
function activeMediaQueryFromWindow(mediaQueries,) {
  for (const [variant, query,] of Object.entries(mediaQueries,)) {
    const mql = safeWindow.matchMedia(query,);
    if (mql.matches) return variant;
  }
}
function activeBreakpointHashesFromWindow(breakpoints,) {
  var _a;
  const matches = [];
  for (
    const {
      hash: hash2,
      mediaQuery,
    } of breakpoints
  ) {
    if (!mediaQuery) continue;
    const mql = safeWindow.matchMedia(mediaQuery,);
    if (mql.matches) matches.push(hash2,);
  }
  if (matches.length > 0) return matches;
  const defaultHash = (_a = breakpoints[0]) == null ? void 0 : _a.hash;
  if (!defaultHash) return void 0;
  return [defaultHash,];
}
function useHydratedBreakpointVariants(initial, mediaQueries, hydratedWithInitial = true,) {
  const isInitialNavigation = useContext(IsInitialNavigationContext,);
  const isStaticRenderer2 = useIsStaticRenderer();
  const usesMediaQueries = !isStaticRenderer2 && isBrowser2();
  const baseVariant = useRef3(usesMediaQueries ? activeMediaQueryFromWindow(mediaQueries,) ?? initial : initial,);
  const basePropsVariant = useRef3(hydratedWithInitial && isInitialNavigation ? initial : baseVariant.current,);
  const forceUpdate = useForceUpdate2();
  const instantTransition = useInstantTransition();
  const setActiveVariantInstant = useCallback((variant) => {
    if (variant !== baseVariant.current || variant !== basePropsVariant.current) {
      let updateStateAndRerender2 = function () {
        baseVariant.current = basePropsVariant.current = variant;
        startTransition2(() => {
          forceUpdate();
        },);
      };
      var updateStateAndRerender = updateStateAndRerender2;
      if (isStaticRenderer2) {
        updateStateAndRerender2();
      } else {
        instantTransition(() => {
          updateStateAndRerender2();
        },);
      }
    }
  }, [instantTransition, forceUpdate, isStaticRenderer2,],);
  useIsomorphicLayoutEffect2(() => {
    if (!isStaticRenderer2) return;
    setActiveVariantInstant(initial,);
  }, [initial, isStaticRenderer2, setActiveVariantInstant,],);
  useIsomorphicLayoutEffect2(() => {
    if (!hydratedWithInitial || isInitialNavigation !== true) return;
    setActiveVariantInstant(baseVariant.current,);
  }, [],);
  useEffect(() => {
    const callbacks = [];
    for (const [variant, query,] of Object.entries(mediaQueries,)) {
      const mql = safeWindow.matchMedia(query,);
      const callback = (event) => {
        if (event.matches) setActiveVariantInstant(variant,);
      };
      addMQLCallback(mql, callback,);
      callbacks.push([mql, callback,],);
    }
    return () => callbacks.forEach(([mql, callback,],) => removeMQLCallback(mql, callback,));
  }, [mediaQueries, setActiveVariantInstant,],);
  return [baseVariant.current, basePropsVariant.current,];
}
function addMQLCallback(mql, callback,) {
  if (mql.addEventListener) {
    mql.addEventListener('change', callback,);
  } else {
    mql.addListener(callback,);
  }
}
function removeMQLCallback(mql, callback,) {
  if (mql.removeEventListener) {
    mql.removeEventListener('change', callback,);
  } else {
    mql.removeListener(callback,);
  }
}
function useBreakpointVariants(initial, _width, breakpoints,) {
  const mediaQueries = useConstant2(() => createMediaQueriesFromBreakpoints(breakpoints,));
  const [initialVariant,] = useHydratedBreakpointVariants(initial, mediaQueries, true,);
  return initialVariant;
}
function removeHiddenBreakpointLayers(_initial, _mediaQueries, _variantClassNames,) {}
var framerBreakpointCSSSelector = 'style[data-framer-breakpoint-css]';
function requestIdleCallbackFallback(callback,) {
  setTimeout(callback, 1,);
}
function removeHiddenBreakpointLayersV2(breakpoints,) {
  var _a, _b, _c, _d;
  const suspenseBoundaries = /* @__PURE__ */ new Set();
  const activeBreakpointHashes = activeBreakpointHashesFromWindow(breakpoints,);
  if (activeBreakpointHashes) {
    for (const hash2 of activeBreakpointHashes) {
      for (const hiddenLayer of document.querySelectorAll('.hidden-' + hash2,)) {
        if (isSuspenseBoundaryStart(hiddenLayer.previousSibling,)) {
          suspenseBoundaries.add(hiddenLayer.previousSibling,);
        }
        (_a = hiddenLayer.parentNode) == null ? void 0 : _a.removeChild(hiddenLayer,);
      }
    }
  }
  const requestIdleCallback2 = supportsRequestIdleCallback ? safeWindow.requestIdleCallback : requestIdleCallbackFallback;
  requestIdleCallback2(() => {
    var _a2;
    (_a2 = document.querySelector(framerBreakpointCSSSelector,)) == null ? void 0 : _a2.remove();
  },);
  for (const ssrVariant of document.querySelectorAll('.ssr-variant:empty',)) {
    if (isSuspenseBoundaryStart(ssrVariant.previousSibling,)) {
      suspenseBoundaries.add(ssrVariant.previousSibling,);
    }
    (_b = ssrVariant.parentNode) == null ? void 0 : _b.removeChild(ssrVariant,);
  }
  for (const suspenseBoundary of suspenseBoundaries) {
    if (isSuspenseBoundaryEnd(suspenseBoundary.nextSibling,)) {
      (_c = suspenseBoundary.parentNode) == null ? void 0 : _c.removeChild(suspenseBoundary.nextSibling,);
      (_d = suspenseBoundary.parentNode) == null ? void 0 : _d.removeChild(suspenseBoundary,);
    }
  }
}
function isSuspenseBoundaryStart(node,) {
  return (node == null ? void 0 : node.nodeType) === Node.COMMENT_NODE && node.textContent === '$';
}
function isSuspenseBoundaryEnd(node,) {
  return (node == null ? void 0 : node.nodeType) === Node.COMMENT_NODE && node.textContent === '/$';
}
function useDataRecord(collection, variables,) {
  return useMemo2(() => {
    if (!Array.isArray(collection,)) {
      return null;
    }
    if (!variables) {
      return null;
    }
    const pageRecord = collection.find((record2) => {
      return Object.entries(variables,).every(([key7, value,],) => {
        const recordValue = record2[key7];
        if (value === void 0 || recordValue === void 0 || isObject2(value,) || isObject2(recordValue,)) {
          return false;
        }
        return String(value,) === String(recordValue,);
      },);
    },);
    return pageRecord ?? null;
  }, [collection, variables,],);
}
function useDynamicRefs() {
  const map2 = useConstant2(() => /* @__PURE__ */ new Map());
  return React4.useCallback((key7) => {
    const existing = map2.get(key7,);
    if (existing) return existing;
    const ref = createRef();
    map2.set(key7, ref,);
    return ref;
  }, [],);
}
var map = /* @__PURE__ */ new Map();
function useSiteRefs() {
  const route = useCurrentRoute();
  const path = useMemo2(() => {
    return getPathForRoute(route, {
      currentRoutePath: route == null ? void 0 : route.path,
      currentPathVariables: route == null ? void 0 : route.pathVariables,
      preserveQueryParams: false,
      relative: false,
      siteCanonicalURL: void 0,
    },);
  }, [route,],);
  return React4.useCallback((key7) => {
    if (!key7) return;
    const computedKey = `${path}-${key7}`;
    const existing = map.get(computedKey,);
    if (existing) return existing;
    const ref = createRef();
    map.set(computedKey, ref,);
    return ref;
  }, [path,],);
}
function isFramerGamepadKeydownData(value,) {
  return isObject2(value,) && value.mapping !== void 0;
}
function gamepadInputsHaveChanged(previous, current2,) {
  if (previous.length !== current2.length) return true;
  if (!previous.every((item, i,) => current2[i] === item)) return true;
  return false;
}
function createGamepadPoller() {
  const handlers = /* @__PURE__ */ new Set();
  let isConnected = false;
  let isPolling = null;
  let lastKeys = [];
  const startPolling = () => {
    const input = getGamepadInputs();
    if (!input) return;
    const {
      gamepad,
      inputs,
    } = input;
    const {
      mapping,
      id: id3,
    } = gamepad;
    if (gamepadInputsHaveChanged(lastKeys, inputs,)) {
      handlers.forEach((handler) =>
        handler({
          inputs,
          mapping,
          id: id3,
        },)
      );
    }
    lastKeys = inputs;
    isPolling = safeWindow.requestAnimationFrame(startPolling,);
  };
  const handleConnection = () => {
    if (isConnected || isPolling) return;
    startPolling();
    isConnected = true;
  };
  const stopPolling = () => {
    if (!isPolling) return;
    safeWindow.cancelAnimationFrame(isPolling,);
    isPolling = null;
  };
  const handleDisconnection = () => {
    if (!isConnected) return;
    stopPolling();
    isConnected = false;
  };
  const setupAndStartPolling = () => {
    if (isPolling) return;
    const gamepad = getGamepadInputs();
    if (!gamepad) {
      safeWindow.addEventListener('gamepadconnected', handleConnection,);
      return;
    }
    safeWindow.addEventListener('gamepaddisconnected', handleDisconnection,);
    isConnected = true;
    startPolling();
  };
  const cleanupAndStopPolling = () => {
    if (!isPolling) return;
    safeWindow.removeEventListener('gamepadconnected', handleConnection,);
    safeWindow.removeEventListener('gamepaddisconnected', handleDisconnection,);
    stopPolling();
  };
  return {
    register(callback,) {
      if (handlers.size === 0) setupAndStartPolling();
      handlers.add(callback,);
    },
    unregister(callback,) {
      handlers.delete(callback,);
      if (handlers.size === 0) cleanupAndStopPolling();
    },
  };
}
var gamepadPoller = /* @__PURE__ */ createGamepadPoller();
var GamepadContext = /* @__PURE__ */ React4.createContext(gamepadPoller,);
function getGamepadInputs() {
  let firstConnectedGamepad = null;
  const gamepads = __unframerNavigator2.getGamepads();
  for (const gamepad of gamepads) {
    if (!gamepad) continue;
    if (!firstConnectedGamepad) firstConnectedGamepad = gamepad;
    const inputs = [...scanPressedAxis(gamepad,), ...scanPressedButtons(gamepad,),];
    if (inputs.length > 0) {
      return {
        gamepad,
        inputs,
      };
    }
  }
  if (firstConnectedGamepad) {
    return {
      gamepad: firstConnectedGamepad,
      inputs: [],
    };
  }
  return null;
}
function scanPressedAxis(gamepad,) {
  const axes = [];
  for (const [idx, axis,] of gamepad.axes.entries()) {
    if (idx > 3) continue;
    if (axis <= -0.5) axes.push(`Axis ${idx}-`,);
    if (axis > 0.5) axes.push(`Axis ${idx}+`,);
  }
  return axes;
}
function scanPressedButtons(gamepad,) {
  const buttons = [];
  for (const [idx, button,] of gamepad.buttons.entries()) {
    if (isButtonPressed(button,)) buttons.push(`Button ${idx}`,);
  }
  return buttons;
}
function isButtonPressed(button,) {
  return button.pressed === true || button.value > 0;
}
function useGamepad(input, callback, {
  mapping,
  on,
} = {},) {
  const context = React4.useContext(GamepadContext,);
  const settings = useConstant2(() => ({
    mapping: mapping ?? 'standard',
    on: on ?? 'keydown',
  }));
  const stateRef = React4.useRef({
    pressed: false,
    handler: callback,
  },);
  const cb = React4.useCallback((gamepad) => {
    const {
      pressed,
      handler,
    } = stateRef.current;
    if (gamepad.inputs.includes(input,) && settings.mapping === gamepad.mapping) {
      settings.on === 'keydown' && handler();
      stateRef.current.pressed = true;
    } else if (pressed) {
      settings.on === 'keyup' && handler();
      stateRef.current.pressed = false;
    }
  }, [input, settings,],);
  useOnCurrentTargetChange((isInTarget, isOverlayed,) => {
    const isActive = isInTarget && !isOverlayed;
    if (isActive) {
      context.register(cb,);
    } else {
      context.unregister(cb,);
    }
    return () => context.unregister(cb,);
  }, [],);
  React4.useEffect(() => {
    return () => context.unregister(cb,);
  }, [cb, context,],);
  React4.useEffect(() => {
    stateRef.current.handler = callback;
  }, [callback,],);
}
var modifierDefaults = {
  altKey: false,
  ctrlKey: false,
  metaKey: false,
  shiftKey: false,
};
function createShortcutDefinition(shortcut,) {
  const keys3 = shortcut.split('+',);
  const key7 = keys3.pop();
  if (!key7) return void 0;
  const modifiers = {};
  for (const modifier of keys3) {
    modifiers[`${modifier}Key`] = true;
  }
  return {
    ...modifierDefaults,
    ...modifiers,
    key: key7,
  };
}
function useHotkey(shortcut, callback,) {
  const inTarget = React4.useRef(true,);
  const shortcutDefinition = useConstant2(() => createShortcutDefinition(shortcut,));
  useOnCurrentTargetChange((isCurrentTarget, isOverlayed,) => {
    inTarget.current = isCurrentTarget && !isOverlayed;
    return () => inTarget.current = false;
  },);
  const eventHandler = React4.useCallback((event) => {
    if (!shortcutDefinition) return;
    if (!inTarget.current) return;
    if (!Object.keys(shortcutDefinition,).every((key7) => shortcutDefinition[key7] === asRecord(event,)[key7])) return;
    event.preventDefault();
    callback();
  }, [shortcutDefinition, callback,],);
  React4.useEffect(() => {
    document.addEventListener('keydown', eventHandler,);
    return () => document.removeEventListener('keydown', eventHandler,);
  }, [eventHandler,],);
}
function useNavigate() {
  const {
    navigate,
  } = useRouter();
  const onCanvas = useIsOnFramerCanvas();
  if (!navigate) return () => {};
  return (target) => {
    if (onCanvas) return;
    navigate(target,);
    return false;
  };
}
function callbackForVariant(map2, variant,) {
  if (map2[variant]) return map2[variant];
  if (variant in map2) return void 0;
  return map2.default;
}
function useOnVariantChange(variant, callbackMap,) {
  const isRenderingStaticContent = isStaticRenderer();
  if (isRenderingStaticContent) return;
  const isActiveScreenRef = React4.useRef(true,);
  const callbackMapRef = React4.useRef(callbackMap,);
  useOnCurrentTargetChange((isCurrent, isOverlayed,) => {
    const isActiveScreen = isCurrent && !isOverlayed;
    if (!isActiveScreenRef.current && isActiveScreen) {
      const callback = callbackForVariant(callbackMapRef.current, variant,);
      if (callback) callback();
    }
    isActiveScreenRef.current = isActiveScreen;
  }, [],);
  React4.useEffect(() => {
    if (isActiveScreenRef.current) {
      const callback = callbackForVariant(callbackMapRef.current, variant,);
      if (callback) callback();
    }
  }, [variant,],);
}
function useOnAppear(callback,) {
  useOnVariantChange('default', {
    default: callback,
  },);
}
function setOverflow(blockDocumentScrolling, show,) {
  if (blockDocumentScrolling === false) return;
  frame.render(() => {
    const htmlStyle = document.documentElement.style;
    if (show) {
      htmlStyle.setProperty('overflow', 'hidden',);
    } else {
      htmlStyle.removeProperty('overflow',);
    }
  },);
}
function useOverlayState({
  blockDocumentScrolling = true,
} = {},) {
  const [showOverlay, setShowOverlay,] = React4.useState(false,);
  const callback = React4.useCallback(async (show) => {
    await yieldToMain({
      priority: 'user-blocking',
      continueAfter: 'paint',
    },);
    startTransition2(() => setShowOverlay(show,));
    setOverflow(blockDocumentScrolling, show,);
  }, [blockDocumentScrolling,],);
  React4.useEffect(() => () => {
    void yieldToMain({
      priority: 'user-blocking',
      continueAfter: 'paint',
    },).then(() => {
      setOverflow(blockDocumentScrolling, false,);
    },);
  }, [blockDocumentScrolling,],);
  return [showOverlay, callback,];
}
var key4 = 'page';
function isRoute(route,) {
  return isObject2(route,) && key4 in route && route.page !== void 0;
}
async function componentForRoute(route,) {
  if (!isRoute(route,)) return;
  const {
    page: routeComponent,
  } = route;
  if (!routeComponent) return;
  if (React4.isValidElement(routeComponent,)) return routeComponent;
  if (withPreload(routeComponent,)) await routeComponent.preload();
  return React4.createElement(routeComponent, {
    key: route.path,
  },);
}
var preloadKey2 = 'preload';
function withPreload(component,) {
  return !!component && isObject2(component,) && preloadKey2 in component;
}
function usePrototypeNavigate({
  preload,
} = {},) {
  const navigation = useNavigation();
  const {
    getRoute,
  } = useRouter();
  const onCanvas = useIsOnFramerCanvas();
  React4.useEffect(() => {
    if (!navigation || onCanvas) return;
    preload == null ? void 0 : preload.forEach((componentOrRoute) => {
      let component;
      if (isString(componentOrRoute,)) {
        const route = getRoute == null ? void 0 : getRoute(componentOrRoute,);
        if (isRoute(route,)) {
          component = route.page;
        }
      } else {
        component = componentOrRoute;
      }
      if (component && withPreload(component,)) void component.preload();
    },);
  }, [],);
  if (!navigation) return () => {};
  return async (target, options = {},) => {
    if (onCanvas) return;
    if (target === 'previous') {
      navigation.goBack();
      return false;
    }
    const Component17 = typeof target === 'string'
      ? await componentForRoute(getRoute == null ? void 0 : getRoute(target,),).catch(() => {},)
      : React4.isValidElement(target,)
      ? target
      : null;
    if (!Component17) return;
    const {
      appearsFrom,
      backdropColor,
      animation,
    } = options;
    const transitionType = options.transition || 'instant';
    switch (transitionType) {
      case 'instant':
        navigation.instant(Component17,);
        break;
      case 'fade':
        navigation.fade(Component17, {
          animation,
        },);
        break;
      case 'push':
        navigation.push(Component17, {
          appearsFrom,
          animation,
        },);
        break;
      case 'flip':
        navigation.flip(Component17, {
          appearsFrom,
          animation,
        },);
        break;
      case 'magicMotion':
        navigation.magicMotion(Component17, {
          animation,
        },);
        break;
      // Overlay stack navigation doesn't support updating the browser's
      // path.
      case 'modal':
        navigation.modal(Component17, {
          backdropColor,
          animation,
        },);
        break;
      case 'overlay':
        navigation.overlay(Component17, {
          appearsFrom,
          backdropColor,
          animation,
        },);
        break;
    }
    return false;
  };
}
function use(promise,) {
  throw promise;
}
var queryEngine = /* @__PURE__ */ new QueryEngine();
var queryCache = /* @__PURE__ */ new QueryCache(queryEngine,);
function useQueryData(query,) {
  const {
    activeLocale,
  } = useLocaleInfo();
  const cached = queryCache.get(query, activeLocale,);
  const promise = cached.preload();
  if (promise) use(promise,);
  return cached.read();
}
function useQueryCount(query,) {
  const countQuery = {
    ...query,
    select: [],
  };
  const collection = useQueryData(countQuery,);
  return collection.length;
}
function usePreloadQuery() {
  const {
    activeLocale,
  } = useLocaleInfo();
  return useCallback(async (query) => {
    return queryCache.get(query, activeLocale,).readAsync();
  }, [activeLocale,],);
}
function getWhereExpressionFromPathVariables(pathVariables, collection,) {
  const entries = Object.entries(pathVariables ?? {},).filter(([, value,],) => {
    if (isUndefined(value,)) return false;
    if (isObject2(value,)) return false;
    return true;
  },);
  const expressions = entries.map(([name, value,],) => ({
    type: 'BinaryOperation',
    operator: '==',
    left: {
      type: 'TypeCast',
      value: {
        type: 'Identifier',
        name,
        collection,
      },
      dataType: 'STRING',
      /* String */
    },
    right: {
      type: 'LiteralValue',
      value: String(value,),
    },
  }));
  if (expressions.length === 0) {
    return {
      type: 'LiteralValue',
      value: false,
    };
  }
  return expressions.reduce((result, expression,) => ({
    type: 'BinaryOperation',
    operator: 'and',
    left: result,
    right: expression,
  }));
}
function useLoadMorePagination(totalSize, pageSize, hash2, paginateWithSuspendedLoadingState = false,) {
  var _a, _b, _c, _d;
  const [isPending, startLoadingTransition,] = useTransition();
  const totalPages = Math.ceil(totalSize / pageSize,);
  const [currentPage, setCurrentPage,] = useState(
    ((_d = (_c = (_b = (_a = globalThis == null ? void 0 : globalThis.history) == null ? void 0 : _a.state) == null
          ? void 0
          : _b.paginationInfo) == null
        ? void 0
        : _c[hash2]) == null
      ? void 0
      : _d.currentPage) ?? 1,
  );
  const paginationInfo = useMemo2(() => {
    return {
      currentPage,
      totalPages,
      isLoading: isPending,
    };
  }, [currentPage, totalPages, isPending,],);
  useEffect(() => {
    pushLoadMoreHistory(hash2, paginationInfo,);
  }, [hash2, paginationInfo,],);
  const onCanvas = useIsOnFramerCanvas();
  const loadMore = useCallback(async () => {
    if (onCanvas) return;
    if (currentPage >= totalPages) return;
    await yieldToMain({
      priority: 'user-blocking',
      continueAfter: 'paint',
    },);
    const renderNextPage = (startTransition14) => {
      startTransition14(() => {
        setCurrentPage((_currentPage) => Math.min(_currentPage + 1, totalPages,));
      },);
    };
    if (!paginateWithSuspendedLoadingState) return renderNextPage(startTransition2,);
    return renderNextPage(startLoadingTransition,);
  }, [currentPage, totalPages, paginateWithSuspendedLoadingState,],);
  return {
    paginationInfo,
    loadMore,
  };
}
function useLoadMorePaginatedQuery(query, pageSize, hash2,) {
  const count = useQueryCount(query,);
  const {
    paginationInfo,
    loadMore,
  } = useLoadMorePagination(count, pageSize, hash2, true,);
  const paginatedQuery = useMemo2(() => {
    let limit = pageSize * paginationInfo.currentPage;
    if (query.limit) {
      if (query.limit.type !== 'LiteralValue' || typeof query.limit.value !== 'number') {
        throw new Error('Unexpected type for query limit',);
      }
      limit = Math.min(limit, query.limit.value,);
    }
    return {
      ...query,
      limit: {
        type: 'LiteralValue',
        value: limit,
      },
    };
  }, [query, pageSize, paginationInfo,],);
  return {
    paginatedQuery,
    paginationInfo,
    loadMore,
  };
}
function createGestureVariant(variant, type,) {
  return `${variant}-${type}`;
}
function nextVariant(allVariants, currentVariant,) {
  const index = allVariants.indexOf(currentVariant,);
  let nextIndex = index + 1;
  if (nextIndex >= allVariants.length) {
    nextIndex = 0;
  }
  const nextVariant2 = allVariants[nextIndex];
  assert(nextVariant2 !== void 0, 'nextVariant should be defined',);
  return nextVariant2;
}
function activeTransition(transitions, variant,) {
  if (!transitions) return void 0;
  if (variant) {
    const variantTransition = transitions[variant];
    if (variantTransition) return variantTransition;
  }
  return transitions.default;
}
var VariantSelector = /* @__PURE__ */ ((VariantSelector2) => {
  VariantSelector2['Variant'] = 'v';
  return VariantSelector2;
})(VariantSelector || {},);
function getGesture(enabledGestures, isHovered, isPressed, isLoading, isError,) {
  const {
    hover: hover2,
    pressed,
    loading,
    error,
  } = enabledGestures || {};
  if (error && isError) return 'error';
  if (loading && isLoading) return 'loading';
  if (pressed && isPressed) return 'pressed';
  if (hover2 && isHovered) return 'hover';
}
function createVariantClassName(baseVariant, variantClassNames,) {
  const mappedClassName = variantClassNames[baseVariant];
  if (mappedClassName) return mappedClassName;
  return `framer-${'v'}-${baseVariant}`;
}
function safeBaseVariant(targetVariant, fallbackVariant, validBaseVariants,) {
  if (!targetVariant) return fallbackVariant;
  if (validBaseVariants.has(targetVariant,)) return targetVariant;
  return fallbackVariant;
}
var CycleVariantState = /* @__PURE__ */ Symbol('cycle',);
function useRunCallbackIfPageIsVisible() {
  const listenerRef = useRef3();
  const callbackRef = useRef3();
  const clean = useCallback(() => {
    if (!listenerRef.current) return;
    document.removeEventListener('visibilitychange', listenerRef.current,);
    listenerRef.current = void 0;
    callbackRef.current = void 0;
  }, [],);
  useEffect(() => {
    return () => {
      clean();
    };
  }, [clean,],);
  return useCallback((callback) => {
    if (!document.hidden) {
      callback();
      clean();
      return;
    }
    callbackRef.current = callback;
    if (listenerRef.current) return;
    const listenerFn = () => {
      var _a;
      if (document.hidden) return;
      (_a = callbackRef.current) == null ? void 0 : _a.call(callbackRef,);
      clean();
    };
    listenerRef.current = listenerFn;
    document.addEventListener('visibilitychange', listenerFn,);
  }, [clean,],);
}
function useRunCallbackIfElementIsInView() {
  const observerRefCleanup = useRef3();
  const isInViewRef = useRef3(false,);
  const callbackRef = useRef3();
  const observers2 = useContext(SharedIntersectionObserverContext,);
  useEffect(() => {
    return () => {
      var _a;
      (_a = observerRefCleanup.current) == null ? void 0 : _a.call(observerRefCleanup,);
      callbackRef.current = void 0;
      observerRefCleanup.current = void 0;
    };
  }, [],);
  return useCallback((callback, ref,) => {
    if (!(ref == null ? void 0 : ref.current) || isInViewRef.current) {
      callback();
      return;
    }
    callbackRef.current = callback;
    if (observerRefCleanup.current) return;
    let queuedMicrotask = false;
    const observerCallback = (entry) => {
      isInViewRef.current = entry.isIntersecting;
      if (queuedMicrotask) return;
      queuedMicrotask = true;
      queueMicrotask(() => {
        var _a;
        queuedMicrotask = false;
        if (!isInViewRef.current) return;
        (_a = callbackRef.current) == null ? void 0 : _a.call(callbackRef,);
      },);
    };
    observerRefCleanup.current = observeElement(observers2, 'undefined', ref.current, null, observerCallback,);
  }, [observers2,],);
}
function useUpdateIfVisible(ref,) {
  const runUpdateIfPageIsVisible = useRunCallbackIfPageIsVisible();
  const runUpdateIfElementIsInView = useRunCallbackIfElementIsInView();
  return useCallback((callback, checkViewport = false,) => {
    if (isBot) {
      callback();
      return;
    }
    const runUpdate = checkViewport && ref ? () => runUpdateIfElementIsInView(callback, ref,) : callback;
    runUpdateIfPageIsVisible(runUpdate,);
  }, [runUpdateIfPageIsVisible, runUpdateIfElementIsInView, ref,],);
}
var globalWaitingForClickPromise;
var globalWaitingForClickResolve;
async function getPromiseWithFallback() {
  return new Promise((resolve) => {
    let resolveFn = resolve;
    setTimeout(() => {
      if (!resolveFn) return;
      performance.mark('wait-for-click-fallback',);
      resolveFn();
    }, 150,);
    globalWaitingForClickResolve = () => {
      resolve();
      resolveFn = void 0;
    };
  },);
}
function globalWaitForClickListener(event,) {
  if (event.button === 0) {
    performance.mark('pointerdown-listener',);
    globalWaitingForClickPromise = getPromiseWithFallback();
  }
}
function globalClickReceivedListener() {
  performance.mark('click-received-listener',);
  globalWaitingForClickPromise = void 0;
  globalWaitingForClickResolve == null ? void 0 : globalWaitingForClickResolve();
  globalWaitingForClickResolve = void 0;
}
function useWaitForGlobalClick(enabled = false,) {
  useEffect(() => {
    if (!enabled) return;
    document.addEventListener('pointerup', globalWaitForClickListener, true,);
    document.__proto__.addEventListener.call(document, 'click', globalClickReceivedListener, true,);
  }, [enabled,],);
}
function useVariantState({
  variant,
  defaultVariant: externalDefaultVariant,
  transitions: externalTransitions,
  enabledGestures: externalEnabledGestures,
  cycleOrder: externalCycleOrder = [],
  variantProps: variantProps2 = {},
  variantClassNames = {},
  ref,
},) {
  const forceUpdate = useForceUpdate2();
  const isCanvas = useIsOnFramerCanvas();
  const validBaseVariants = useConstant2(() => new Set(externalCycleOrder,));
  const {
    pauseOffscreen: pauseOffscreenFeatureOn,
    yieldOnTap: yieldOnTapFeatureOn,
  } = useLibraryFeatures();
  useWaitForGlobalClick(yieldOnTapFeatureOn,);
  const runUpdateIfVisible = useUpdateIfVisible(ref,);
  const internalState = useRef3({
    isHovered: false,
    isHoveredHasUpdated: false,
    isPressed: false,
    isPressedHasUpdated: false,
    isError: false,
    hasPressedVariants: true,
    baseVariant: safeBaseVariant(variant, externalDefaultVariant, validBaseVariants,),
    lastVariant: variant,
    gestureVariant: void 0,
    loadedBaseVariant: {},
    // When used in generated components, these are static values defined
    // outside of the component function that also need to not result in
    // memorized values being recalculated, so we dump them into the ref.
    defaultVariant: externalDefaultVariant,
    enabledGestures: externalEnabledGestures,
    cycleOrder: externalCycleOrder,
    transitions: externalTransitions,
  },);
  const resolveNextVariant = useCallback((targetBaseVariant) => {
    const {
      isHovered: isHovered2,
      isPressed: isPressed2,
      isError: isError2,
      enabledGestures: enabledGestures2,
      defaultVariant: defaultVariant2,
    } = internalState.current;
    const nextBaseVariant = safeBaseVariant(targetBaseVariant, defaultVariant2, validBaseVariants,);
    const gesture = getGesture(
      enabledGestures2 == null ? void 0 : enabledGestures2[nextBaseVariant],
      isHovered2,
      isPressed2,
      false,
      isError2,
    );
    const nextGestureVariant = gesture ? createGestureVariant(nextBaseVariant, gesture,) : void 0;
    return [nextBaseVariant, nextGestureVariant,];
  }, [],);
  const updateIfNeeded = useCallback(
    async (baseVariant2, gestureVariant2, defaultVariant2, nextBaseVariant, checkViewport = false, clearError = false,) => {
      const [nextBase, nextGesture,] = resolveNextVariant(nextBaseVariant,);
      if (nextBase === baseVariant2 && nextGesture === gestureVariant2) return;
      if (clearError) internalState.current.isError = false;
      internalState.current.baseVariant = nextBase || defaultVariant2;
      internalState.current.gestureVariant = nextGesture;
      const yieldOnTap = yieldOnTapFeatureOn && internalState.current.isPressedHasUpdated;
      if (yieldOnTap && globalWaitingForClickPromise) {
        performance.mark('wait-for-tap-start',);
        await globalWaitingForClickPromise;
        performance.measure('wait-for-tap', 'wait-for-tap-start',);
      }
      if (yieldOnTap) {
        performance.mark('yield-on-tap-start',);
        await yieldToMain({
          priority: 'user-blocking',
          continueAfter: 'paint',
        },);
        performance.measure('yield-on-tap', 'yield-on-tap-start',);
      }
      const {
        isHovered: isHovered2,
        isPressed: isPressed2,
        isHoveredHasUpdated,
        isPressedHasUpdated,
      } = internalState.current;
      if (isHovered2 || isHoveredHasUpdated || isPressed2 || isPressedHasUpdated) {
        startTransition2(forceUpdate,);
        return;
      }
      runUpdateIfVisible(() => startTransition2(forceUpdate,), pauseOffscreenFeatureOn && checkViewport,);
    },
    [resolveNextVariant, forceUpdate, runUpdateIfVisible, pauseOffscreenFeatureOn, yieldOnTapFeatureOn,],
  );
  const setGestureState = useCallback(({
    isHovered: isHovered2,
    isPressed: isPressed2,
    isError: isError2,
  },) => {
    const isPressedHasUpdated = isPressed2 !== internalState.current.isPressed;
    const isHoveredHasUpdated = isHovered2 !== internalState.current.isHovered;
    if (isHovered2 !== void 0) internalState.current.isHovered = isHovered2;
    if (isPressed2 !== void 0) internalState.current.isPressed = isPressed2;
    if (isError2 !== void 0) internalState.current.isError = isError2;
    const {
      baseVariant: baseVariant2,
      gestureVariant: gestureVariant2,
      defaultVariant: defaultVariant2,
    } = internalState.current;
    internalState.current.isPressedHasUpdated = isPressedHasUpdated;
    internalState.current.isHoveredHasUpdated = isHoveredHasUpdated;
    void updateIfNeeded(baseVariant2, gestureVariant2, defaultVariant2, baseVariant2, false,);
  }, [updateIfNeeded,],);
  const setVariant = useCallback((proposedVariant, pauseOffscreen = false,) => {
    const {
      defaultVariant: defaultVariant2,
      cycleOrder,
      baseVariant: baseVariant2,
      gestureVariant: gestureVariant2,
    } = internalState.current;
    const nextBaseVariant = proposedVariant === CycleVariantState
      ? nextVariant(cycleOrder || [], baseVariant2 || defaultVariant2,)
      : proposedVariant;
    void updateIfNeeded(baseVariant2, gestureVariant2, defaultVariant2, nextBaseVariant, pauseOffscreen, true,);
  }, [updateIfNeeded,],);
  const clearLoadingGesture = useCallback(() => {
    const {
      baseVariant: baseVariant2,
    } = internalState.current;
    internalState.current.loadedBaseVariant[baseVariant2] = true;
    runUpdateIfVisible(() => startTransition2(forceUpdate,), true,);
  }, [forceUpdate, runUpdateIfVisible,],);
  if (variant !== internalState.current.lastVariant) {
    const [nextBase, nextGesture,] = resolveNextVariant(variant,);
    internalState.current.lastVariant = nextBase;
    if (nextBase !== internalState.current.baseVariant || nextGesture !== internalState.current.gestureVariant) {
      internalState.current.baseVariant = nextBase;
      internalState.current.gestureVariant = nextGesture;
    }
  }
  const {
    baseVariant,
    gestureVariant,
    defaultVariant,
    enabledGestures,
    isHovered,
    isPressed,
    isError,
    loadedBaseVariant,
  } = internalState.current;
  const addVariantProps = useAddVariantProps(internalState.current.baseVariant, internalState.current.gestureVariant, variantProps2,);
  return useMemo2(() => {
    var _a;
    const variants = [];
    if (baseVariant !== defaultVariant) variants.push(baseVariant,);
    const hasLoadingVariant = (_a = enabledGestures == null ? void 0 : enabledGestures[baseVariant]) == null ? void 0 : _a.loading;
    const isLoading = !isError && !isCanvas && !!hasLoadingVariant && !loadedBaseVariant[baseVariant];
    const gesture = isLoading ? createGestureVariant(baseVariant, 'loading',) : gestureVariant;
    if (gesture) variants.push(gesture,);
    const gestures = enabledGestures == null ? void 0 : enabledGestures[baseVariant];
    const gestureHandlers = {
      onMouseEnter: () =>
        setGestureState({
          isHovered: true,
        },),
      onMouseLeave: () =>
        setGestureState({
          isHovered: false,
        },),
    };
    if (gestures == null ? void 0 : gestures.pressed) {
      Object.assign(gestureHandlers, {
        onTapStart: () =>
          setGestureState({
            isPressed: true,
          },),
        onTapCancel: () =>
          setGestureState({
            isPressed: false,
          },),
        onTap: () =>
          setGestureState({
            isPressed: false,
          },),
      },);
    }
    return {
      variants,
      baseVariant,
      gestureVariant: gesture,
      isLoading,
      transition: activeTransition(internalState.current.transitions, baseVariant,),
      setVariant,
      setGestureState,
      clearLoadingGesture,
      addVariantProps,
      gestureHandlers,
      classNames: cx(
        createVariantClassName(baseVariant, variantClassNames,),
        getGesture(gestures, isHovered, isPressed, isLoading, isError,),
      ),
    };
  }, [
    baseVariant,
    gestureVariant,
    isHovered,
    isPressed,
    loadedBaseVariant,
    addVariantProps,
    setVariant,
    defaultVariant,
    enabledGestures,
    setGestureState,
    clearLoadingGesture,
    variantClassNames,
  ],);
}
var reUnsafeCharacters = /[}{<>&;]/u;
function safeCSSValue(value,) {
  if (!isString(value,)) return 'none';
  if (reUnsafeCharacters.test(value,)) return 'none';
  return value;
}
function withCodeBoundaryForOverrides(Component17, {
  scopeId,
  nodeId,
  override,
  inComponentSlot,
},) {
  if (!shouldEnableCodeBoundaries()) {
    return override(Component17,);
  }
  const appliedOverride = tryToApplyOverride(Component17, override,);
  let hasErrorBeenLogged = false;
  function CodeBoundaryForOverrides(props, ref,) {
    const nearestExternalComponent = useNearestExternalComponent();
    const shouldWrapWithBoundary = shouldWrapOverrideWithBoundary(
      scopeId,
      nearestExternalComponent == null ? void 0 : nearestExternalComponent.scopeId,
      nearestExternalComponent == null ? void 0 : nearestExternalComponent.level,
      inComponentSlot ?? false,
    );
    if (shouldWrapWithBoundary) {
      if (appliedOverride.status === 'success') {
        return /* @__PURE__ */ jsx3(CodeComponentBoundary, {
          getErrorMessage: getErrorMessageForOverride.bind(null, scopeId, nodeId,),
          fallback: /* @__PURE__ */ jsx3(Component17, {
            ...props,
            ref,
          },),
          children: /* @__PURE__ */ jsx3(appliedOverride.Component, {
            ...props,
            ref,
          },),
        },);
      } else {
        if (!hasErrorBeenLogged) {
          logError(appliedOverride.error,);
          logError(getErrorMessageForOverride(scopeId, nodeId,),);
          collectErrorToAnalytics(appliedOverride.error,);
          hasErrorBeenLogged = true;
        }
        return /* @__PURE__ */ jsx3(Component17, {
          ...props,
          ref,
        },);
      }
    } else {
      if (appliedOverride.status === 'success') {
        return /* @__PURE__ */ jsx3(appliedOverride.Component, {
          ...props,
          ref,
        },);
      } else {
        throw appliedOverride.error;
      }
    }
  }
  return React4.forwardRef(CodeBoundaryForOverrides,);
}
function tryToApplyOverride(Component17, override,) {
  try {
    const ComponentWithOverrides = override(Component17,);
    return {
      status: 'success',
      Component: ComponentWithOverrides,
    };
  } catch (error) {
    return {
      status: 'error',
      error,
    };
  }
}
function valueWithMirroring(value, mirror,) {
  return mirror ? wrap(0, 2, value,) : value;
}
function singleFrame() {
  return new Promise((resolve) => {
    frame.postRender(() => resolve());
  },);
}
var withV1StrokeFX = (Component17) =>
  forwardRef((props, forwardedRef,) => {
    const {
      strokeEffectLength,
      strokeEffectGap,
      strokeEffectOffset,
      strokeEffectLoop,
      strokeEffectTotalLength,
      strokeEffectLoopType,
      pathLengthTransition,
      ...restProps
    } = props;
    const isCanvas = isStaticRenderer();
    const offset = useMotionValue(0,);
    const {
      length,
      gap,
    } = useConstant2(() => ({
      length: strokeEffectTotalLength * strokeEffectLength,
      gap: strokeEffectTotalLength * strokeEffectGap,
    }));
    useEffect(() => {
      if (isCanvas) return;
      const signal = new AbortController();
      async function loop() {
        let index = 0;
        while (true) {
          if (signal.signal.aborted) break;
          const mirror = strokeEffectLoop && strokeEffectLoopType === 'mirror';
          const from = valueWithMirroring(index, mirror,);
          const to = valueWithMirroring(index + 1, mirror,);
          await Promise.all([animate(offset, [from, to,], pathLengthTransition,), singleFrame(),],);
          if (!strokeEffectLoop) break;
          if (strokeEffectLoop && strokeEffectLoopType === 'repeat') continue;
          index++;
        }
      }
      void loop();
      return () => {
        signal.abort();
      };
    }, [],);
    const value = useTransform(offset, (v) => {
      return strokeEffectOffset * strokeEffectTotalLength + (strokeEffectTotalLength - Math.max(v, 1e-3,) * strokeEffectTotalLength);
    },);
    const effect = !isCanvas
      ? {
        // These are static values, but they are set via js so that they are ignored
        // unless in the preview/published site.
        strokeDasharray: `${length} ${gap}`,
        strokeDashoffset: value,
      }
      : void 0;
    return /* @__PURE__ */ jsx3(Component17, {
      ...restProps,
      ...effect,
      ref: forwardedRef,
    },);
  },);
function extractMappingFromInfo(info,) {
  var _a;
  const json = (_a = info.__FramerMetadata__.exports.default.annotations) == null ? void 0 : _a.framerVariables;
  if (!json) return void 0;
  try {
    return JSON.parse(json,);
  } catch {
    return void 0;
  }
}
function withMappedReactProps(Component17, info,) {
  return (rawProps) => {
    const props = {};
    const mapping = extractMappingFromInfo(info,);
    for (const key7 in rawProps) {
      asRecord(props,)[(mapping == null ? void 0 : mapping[key7]) ?? key7] = rawProps[key7];
    }
    return /* @__PURE__ */ jsx3(Component17, {
      ...props,
    },);
  };
}
var keys2 = /* @__PURE__ */ new Set([
  'visibleVariantId',
  'obscuredVariantId',
  'threshold',
  'animateOnce',
  'variantAppearEffectEnabled',
  'targets',
  'exitTarget',
  'scrollDirection',
],);
var defaultRanges3 = {
  inputRange: [],
  outputRange: [],
};
function createInputOutputRanges2(transformTargets, threshold, exitTarget,) {
  const outputRange = [];
  const inputRange = createTransformInputRange(transformTargets, threshold, (index) => outputRange.unshift(index, index,),);
  if (exitTarget) {
    const lastInputRange = inputRange[inputRange.length - 1];
    if (!isNumber2(lastInputRange,)) return defaultRanges3;
    inputRange.push(lastInputRange + 1,);
    outputRange.push(-1,);
  }
  const firstItem = inputRange[0];
  if (!isNumber2(firstItem,)) return defaultRanges3;
  if (firstItem <= 1) {
    return {
      inputRange,
      outputRange,
    };
  }
  return {
    inputRange: [0, Math.max(firstItem - 1, 0,), ...inputRange,],
    outputRange: [-1, -1, ...outputRange,],
  };
}
var withVariantAppearEffect = (Component17) =>
  React4.forwardRef((props, forwardedRef,) => {
    if (RenderTarget.current() === RenderTarget.canvas) {
      return /* @__PURE__ */ jsx3(Component17, {
        ...props,
        ref: forwardedRef,
      },);
    }
    const [options, rest,] = extractPrefixedProps(props, keys2,);
    const {
      visibleVariantId,
      obscuredVariantId,
      animateOnce,
      threshold,
      variantAppearEffectEnabled,
      targets,
      exitTarget,
      scrollDirection,
    } = options;
    const [activeVariant, setVariant,] = React4.useState(obscuredVariantId,);
    const animateState = React4.useRef(false,);
    const observerRef = useObserverRef(forwardedRef,);
    useAppearEffect(observerRef, (appears) => {
      if (options.targets) return;
      if (options.scrollDirection) return;
      if (animateOnce && animateState.current === true) return;
      if (animateState.current === appears) return;
      animateState.current = appears;
      React4.startTransition(() => {
        setVariant(appears ? visibleVariantId : obscuredVariantId,);
      },);
    }, {
      enabled: variantAppearEffectEnabled,
      animateOnce,
      threshold: {
        y: threshold,
      },
    },);
    React4.useEffect(() => {
      if (scrollDirection) return;
      if (!targets) return;
      const playedState = {};
      let currentVariant = void 0;
      return scrollInfo(({
        y: scrollY,
      },) => {
        var _a;
        if (!targets[0] || targets[0].ref && !targets[0].ref.current) return;
        const {
          inputRange,
          outputRange,
        } = createInputOutputRanges2(targets, (threshold ?? 0) * scrollY.containerLength, exitTarget,);
        if (inputRange.length === 0 || inputRange.length !== outputRange.length) return;
        const index = Math.floor(transform(scrollY.current, inputRange, outputRange,),);
        if (animateOnce && playedState[index]) return;
        playedState[index] = true;
        const variant = ((_a = targets[index]) == null ? void 0 : _a.target) ?? void 0;
        if (variant === currentVariant) return;
        currentVariant = variant;
        React4.startTransition(() => {
          setVariant(variant,);
        },);
      },);
    }, [animateOnce, threshold, targets, props.variant, scrollDirection, exitTarget,],);
    useScrollDirectionChange(scrollDirection, (variant) => React4.startTransition(() => setVariant(variant,)), {
      enabled: variantAppearEffectEnabled,
      repeat: !animateOnce,
    },);
    useOnRouteChange(() => {
      if (!variantAppearEffectEnabled) return;
      const useObscuredVariant = !options.targets && !options.scrollDirection;
      const target = useObscuredVariant ? options.obscuredVariantId : void 0;
      startTransition2(() => setVariant(target,));
    },);
    if (!('variantAppearEffectEnabled' in options) || variantAppearEffectEnabled === true) {
      return /* @__PURE__ */ jsx3(Component17, {
        ...rest,
        variant: activeVariant ?? props.variant,
        ref: observerRef,
      },);
    } else {
      return /* @__PURE__ */ jsx3(Component17, {
        ...rest,
      },);
    }
  },);
var withVariantFX = (Component17) =>
  React4.forwardRef(({
    initial,
    animate: animate3,
    exit,
    ...props
  }, forwardedRef,) => {
    const observerRef = useObserverRef(forwardedRef,);
    const effect = usePresenceAnimation(
      {
        initial,
        animate: animate3,
        exit,
      },
      observerRef,
      true,
    );
    return /* @__PURE__ */ jsx3(Component17, {
      ...props,
      style: {
        ...(props == null ? void 0 : props.style),
        ...effect.values,
      },
      ref: observerRef,
    },);
  },);
var WindowContext = /* @__PURE__ */ React4.createContext(void 0,);
var useProvidedWindow = () => React4.useContext(WindowContext,);
function isDesignDefinition(d,) {
  return d.type === 'master';
}
function isOverride(d,) {
  return d.type === 'override';
}
function isReactDefinition(d,) {
  return d.type !== 'master';
}
var localPackageFallbackIdentifier = '|local|';
var safeFonts = {
  Arial: {
    Regular: {
      selector: 'Arial',
      weight: void 0,
    },
    Black: {
      selector: 'Arial-Black',
      weight: void 0,
    },
    Narrow: {
      selector: 'Arial Narrow',
      weight: void 0,
    },
    'Rounded Bold': {
      selector: 'Arial Rounded MT Bold',
      weight: void 0,
    },
  },
  Avenir: {
    Book: {
      selector: 'Avenir',
      weight: void 0,
    },
    Light: {
      selector: 'Avenir-Light',
      weight: void 0,
    },
    Medium: {
      selector: 'Avenir-Medium',
      weight: void 0,
    },
    Heavy: {
      selector: 'Avenir-Heavy',
      weight: void 0,
    },
    Black: {
      selector: 'Avenir-Black',
      weight: void 0,
    },
  },
  'Avenir Next': {
    Regular: {
      selector: 'Avenir Next',
      weight: void 0,
    },
    'Ultra Light': {
      selector: 'AvenirNext-UltraLight',
      weight: void 0,
    },
    Medium: {
      selector: 'AvenirNext-Medium',
      weight: void 0,
    },
    'Demi Bold': {
      selector: 'AvenirNext-DemiBold',
      weight: void 0,
    },
    Heavy: {
      selector: 'AvenirNext-Heavy',
      weight: void 0,
    },
  },
  'Avenir Next Condensed': {
    Regular: {
      selector: 'Avenir Next Condensed',
      weight: void 0,
    },
    'Ultra Light': {
      selector: 'AvenirNextCondensed-UltraLight',
      weight: void 0,
    },
    Medium: {
      selector: 'AvenirNextCondensed-Medium',
      weight: void 0,
    },
    'Demi Bold': {
      selector: 'AvenirNextCondensed-DemiBold',
      weight: void 0,
    },
    Heavy: {
      selector: 'AvenirNextCondensed-Heavy',
      weight: void 0,
    },
  },
  Baskerville: {
    Regular: {
      selector: 'Baskerville',
      weight: void 0,
    },
    'Semi Bold': {
      selector: 'Baskerville-SemiBold',
      weight: void 0,
    },
  },
  'Bodoni 72': {
    Book: {
      selector: 'Bodoni 72',
      weight: void 0,
    },
    Oldstyle: {
      selector: 'Bodoni 72 Oldstyle',
      weight: void 0,
    },
    Smallcaps: {
      selector: 'Bodoni 72 Smallcaps',
      weight: void 0,
    },
  },
  Courier: {
    Regular: {
      selector: 'Courier',
      weight: void 0,
    },
  },
  'Courier New': {
    Regular: {
      selector: 'Courier New',
      weight: void 0,
    },
  },
  Futura: {
    Medium: {
      selector: 'Futura',
      weight: void 0,
    },
    Condensed: {
      selector: 'Futura-CondensedMedium',
      weight: void 0,
    },
    'Condensed ExtraBold': {
      selector: 'Futura-CondensedExtraBold',
      weight: void 0,
    },
  },
  Georgia: {
    Regular: {
      selector: 'Georgia',
      weight: void 0,
    },
  },
  'Gill Sans': {
    Regular: {
      selector: 'Gill Sans',
      weight: void 0,
    },
    Light: {
      selector: 'GillSans-Light',
      weight: void 0,
    },
    SemiBold: {
      selector: 'GillSans-SemiBold',
      weight: void 0,
    },
    UltraBold: {
      selector: 'GillSans-UltraBold',
      weight: void 0,
    },
  },
  Helvetica: {
    Regular: {
      selector: 'Helvetica',
      weight: void 0,
    },
    Light: {
      selector: 'Helvetica-Light',
      weight: void 0,
    },
    Bold: {
      selector: 'Helvetica-Bold',
      weight: void 0,
    },
    Oblique: {
      selector: 'Helvetica-Oblique',
      weight: void 0,
    },
    'Light Oblique': {
      selector: 'Helvetica-LightOblique',
      weight: void 0,
    },
    'Bold Oblique': {
      selector: 'Helvetica-BoldOblique',
      weight: void 0,
    },
  },
  'Helvetica Neue': {
    Regular: {
      selector: 'Helvetica Neue',
      weight: void 0,
    },
    UltraLight: {
      selector: 'HelveticaNeue-UltraLight',
      weight: void 0,
    },
    Thin: {
      selector: 'HelveticaNeue-Thin',
      weight: void 0,
    },
    Light: {
      selector: 'HelveticaNeue-Light',
      weight: void 0,
    },
    Medium: {
      selector: 'HelveticaNeue-Medium',
      weight: void 0,
    },
    Bold: {
      selector: 'HelveticaNeue-Bold',
      weight: void 0,
    },
    Italic: {
      selector: 'HelveticaNeue-Italic',
      weight: void 0,
    },
    'UltraLight Italic': {
      selector: 'HelveticaNeue-UltraLightItalic',
      weight: void 0,
    },
    'Thin Italic': {
      selector: 'HelveticaNeue-ThinItalic',
      weight: void 0,
    },
    'Light Italic': {
      selector: 'HelveticaNeue-LightItalic',
      weight: void 0,
    },
    'Medium Italic': {
      selector: 'HelveticaNeue-MediumItalic',
      weight: void 0,
    },
    'Bold Italic': {
      selector: 'HelveticaNeue-BoldItalic',
      weight: void 0,
    },
    'Condensed Bold': {
      selector: 'HelveticaNeue-CondensedBold',
      weight: void 0,
    },
    'Condensed Black': {
      selector: 'HelveticaNeue-CondensedBlack',
      weight: void 0,
    },
  },
  'Hoefler Text': {
    Regular: {
      selector: 'Hoefler Text',
      weight: void 0,
    },
  },
  Impact: {
    Regular: {
      selector: 'Impact',
      weight: void 0,
    },
  },
  'Lucida Grande': {
    Regular: {
      selector: 'Lucida Grande',
      weight: void 0,
    },
  },
  Menlo: {
    Regular: {
      selector: 'Menlo',
      weight: void 0,
    },
  },
  Monaco: {
    Regular: {
      selector: 'Monaco',
      weight: void 0,
    },
  },
  Optima: {
    Regular: {
      selector: 'Optima',
      weight: void 0,
    },
    ExtraBlack: {
      selector: 'Optima-ExtraBlack',
      weight: void 0,
    },
  },
  Palatino: {
    Regular: {
      selector: 'Palatino',
      weight: void 0,
    },
  },
  'SF Pro Display': {
    Regular: {
      selector: '__SF-UI-Display-Regular__',
      weight: 400,
    },
    Ultralight: {
      selector: '__SF-UI-Display-Ultralight__',
      weight: 100,
    },
    Thin: {
      selector: '__SF-UI-Display-Thin__',
      weight: 200,
    },
    Light: {
      selector: '__SF-UI-Display-Light__',
      weight: 300,
    },
    Medium: {
      selector: '__SF-UI-Display-Medium__',
      weight: 500,
    },
    Semibold: {
      selector: '__SF-UI-Display-Semibold__',
      weight: 600,
    },
    Bold: {
      selector: '__SF-UI-Display-Bold__',
      weight: 700,
    },
    Heavy: {
      selector: '__SF-UI-Display-Heavy__',
      weight: 800,
    },
    Black: {
      selector: '__SF-UI-Display-Black__',
      weight: 900,
    },
    Italic: {
      selector: '__SF-UI-Display-Italic__',
      weight: 400,
    },
    'Ultralight Italic': {
      selector: '__SF-UI-Display-Ultralight-Italic__',
      weight: 100,
    },
    'Thin Italic': {
      selector: '__SF-UI-Display-Thin-Italic__',
      weight: 200,
    },
    'Light Italic': {
      selector: '__SF-UI-Display-Light-Italic__',
      weight: 300,
    },
    'Medium Italic': {
      selector: '__SF-UI-Display-Medium-Italic__',
      weight: 500,
    },
    'Semibold Italic': {
      selector: '__SF-UI-Display-Semibold-Italic__',
      weight: 600,
    },
    'Bold Italic': {
      selector: '__SF-UI-Display-Bold-Italic__',
      weight: 700,
    },
    'Heavy Italic': {
      selector: '__SF-UI-Display-Heavy-Italic__',
      weight: 800,
    },
    'Black Italic': {
      selector: '__SF-UI-Display-Black-Italic__',
      weight: 900,
    },
  },
  'SF Pro Display Condensed': {
    Regular: {
      selector: '__SF-UI-Display-Condensed-Regular__',
      weight: 400,
    },
    Ultralight: {
      selector: '__SF-UI-Display-Condensed-Ultralight__',
      weight: 100,
    },
    Thin: {
      selector: '__SF-UI-Display-Condensed-Thin__',
      weight: 200,
    },
    Light: {
      selector: '__SF-UI-Display-Condensed-Light__',
      weight: 300,
    },
    Medium: {
      selector: '__SF-UI-Display-Condensed-Medium__',
      weight: 500,
    },
    Semibold: {
      selector: '__SF-UI-Display-Condensed-Semibold__',
      weight: 600,
    },
    Bold: {
      selector: '__SF-UI-Display-Condensed-Bold__',
      weight: 700,
    },
    Heavy: {
      selector: '__SF-UI-Display-Condensed-Heavy__',
      weight: 800,
    },
    Black: {
      selector: '__SF-UI-Display-Condensed-Black__',
      weight: 900,
    },
  },
  'SF Pro Text': {
    Regular: {
      selector: '__SF-UI-Text-Regular__',
      weight: 400,
    },
    Light: {
      selector: '__SF-UI-Text-Light__',
      weight: 200,
    },
    Medium: {
      selector: '__SF-UI-Text-Medium__',
      weight: 500,
    },
    Semibold: {
      selector: '__SF-UI-Text-Semibold__',
      weight: 600,
    },
    Bold: {
      selector: '__SF-UI-Text-Bold__',
      weight: 700,
    },
    Heavy: {
      selector: '__SF-UI-Text-Heavy__',
      weight: 800,
    },
    Italic: {
      selector: '__SF-UI-Text-Italic__',
      weight: 400,
    },
    'Light Italic': {
      selector: '__SF-UI-Text-Light-Italic__',
      weight: 200,
    },
    'Medium Italic': {
      selector: '__SF-UI-Text-Medium-Italic__',
      weight: 500,
    },
    'Semibold Italic': {
      selector: '__SF-UI-Text-Semibold-Italic__',
      weight: 600,
    },
    'Bold Italic': {
      selector: '__SF-UI-Text-Bold-Italic__',
      weight: 700,
    },
    'Heavy Italic': {
      selector: '__SF-UI-Text-Heavy-Italic__',
      weight: 800,
    },
  },
  'SF Pro Text Condensed': {
    Regular: {
      selector: '__SF-UI-Text-Condensed-Regular__',
      weight: 400,
    },
    Light: {
      selector: '__SF-UI-Text-Condensed-Light__',
      weight: 200,
    },
    Medium: {
      selector: '__SF-UI-Text-Condensed-Medium__',
      weight: 500,
    },
    Semibold: {
      selector: '__SF-UI-Text-Condensed-Semibold__',
      weight: 600,
    },
    Bold: {
      selector: '__SF-UI-Text-Condensed-Bold__',
      weight: 700,
    },
    Heavy: {
      selector: '__SF-UI-Text-Condensed-Heavy__',
      weight: 800,
    },
  },
  Tahoma: {
    Regular: {
      selector: 'Tahoma',
      weight: void 0,
    },
  },
  Times: {
    Regular: {
      selector: 'Times',
      weight: void 0,
    },
  },
  'Times New Roman': {
    Regular: {
      selector: 'Times New Roman',
      weight: void 0,
    },
  },
  Trebuchet: {
    Regular: {
      selector: 'Trebuchet MS',
      weight: void 0,
    },
  },
  Verdana: {
    Regular: {
      selector: 'Verdana',
      weight: void 0,
    },
  },
};
var fontAliases = {
  '__SF-Compact-Display-Regular__': 'SFCompactDisplay-Regular|.SFCompactDisplay-Regular',
  '__SF-Compact-Display-Ultralight__': 'SFCompactDisplay-Ultralight|.SFCompactDisplay-Ultralight',
  '__SF-Compact-Display-Thin__': 'SFCompactDisplay-Thin|.SFCompactDisplay-Thin',
  '__SF-Compact-Display-Light__': 'SFCompactDisplay-Light|.SFCompactDisplay-Light',
  '__SF-Compact-Display-Medium__': 'SFCompactDisplay-Medium|.SFCompactDisplay-Medium',
  '__SF-Compact-Display-Semibold__': 'SFCompactDisplay-Semibold|.SFCompactDisplay-Semibold',
  '__SF-Compact-Display-Heavy__': 'SFCompactDisplay-Heavy|.SFCompactDisplay-Heavy',
  '__SF-Compact-Display-Black__': 'SFCompactDisplay-Black|.SFCompactDisplay-Black',
  '__SF-Compact-Display-Bold__': 'SFCompactDisplay-Bold|.SFCompactDisplay-Bold',
  '__SF-UI-Text-Regular__': '.SFNSText|SFProText-Regular|SFUIText-Regular|.SFUIText',
  '__SF-UI-Text-Light__': '.SFNSText-Light|SFProText-Light|SFUIText-Light|.SFUIText-Light',
  '__SF-UI-Text-Medium__': '.SFNSText-Medium|SFProText-Medium|SFUIText-Medium|.SFUIText-Medium',
  '__SF-UI-Text-Semibold__': '.SFNSText-Semibold|SFProText-Semibold|SFUIText-Semibold|.SFUIText-Semibold',
  '__SF-UI-Text-Bold__': '.SFNSText-Bold|SFProText-Bold|SFUIText-Bold|.SFUIText-Bold',
  '__SF-UI-Text-Heavy__': '.SFNSText-Heavy|SFProText-Heavy|.SFUIText-Heavy',
  '__SF-UI-Text-Italic__': '.SFNSText-Italic|SFProText-Italic|SFUIText-Italic|.SFUIText-Italic',
  '__SF-UI-Text-Light-Italic__': '.SFNSText-LightItalic|SFProText-LightItalic|SFUIText-LightItalic|.SFUIText-LightItalic',
  '__SF-UI-Text-Medium-Italic__': '.SFNSText-MediumItalic|SFProText-MediumItalic|SFUIText-MediumItalic|.SFUIText-MediumItalic',
  '__SF-UI-Text-Semibold-Italic__': '.SFNSText-SemiboldItalic|SFProText-SemiboldItalic|SFUIText-SemiboldItalic|.SFUIText-SemiboldItalic',
  '__SF-UI-Text-Bold-Italic__': '.SFNSText-BoldItalic|SFProText-BoldItalic|SFUIText-BoldItalic|.SFUIText-BoldItalic',
  '__SF-UI-Text-Heavy-Italic__': '.SFNSText-HeavyItalic|SFProText-HeavyItalic|.SFUIText-HeavyItalic',
  '__SF-Compact-Text-Regular__': 'SFCompactText-Regular|.SFCompactText-Regular',
  '__SF-Compact-Text-Light__': 'SFCompactText-Light|.SFCompactText-Light',
  '__SF-Compact-Text-Medium__': 'SFCompactText-Medium|.SFCompactText-Medium',
  '__SF-Compact-Text-Semibold__': 'SFCompactText-Semibold|.SFCompactText-Semibold',
  '__SF-Compact-Text-Bold__': 'SFCompactText-Bold|.SFCompactText-Bold',
  '__SF-Compact-Text-Heavy__': 'SFCompactText-Heavy|.SFCompactText-Heavy',
  '__SF-Compact-Text-Italic__': 'SFCompactText-Italic|.SFCompactText-Italic',
  '__SF-Compact-Text-Light-Italic__': 'SFCompactText-LightItalic|.SFCompactText-LightItalic',
  '__SF-Compact-Text-Medium-Italic__': 'SFCompactText-MediumItalic|.SFCompactText-MediumItalic',
  '__SF-Compact-Text-Semibold-Italic__': 'SFCompactText-SemiboldItalic|.SFCompactText-SemiboldItalic',
  '__SF-Compact-Text-Bold-Italic__': 'SFCompactText-BoldItalic|.SFCompactText-BoldItalic',
  '__SF-Compact-Text-Heavy-Italic__': 'SFCompactText-HeavyItalic|.SFCompactText-HeavyItalic',
  '__SF-UI-Display-Condensed-Regular__': '.SFNSDisplayCondensed-Regular|SFUIDisplayCondensed-Regular|.SFUIDisplayCondensed-Regular',
  '__SF-UI-Display-Condensed-Ultralight__':
    '.SFNSDisplayCondensed-Ultralight|SFUIDisplayCondensed-Ultralight|.SFUIDisplayCondensed-Ultralight',
  '__SF-UI-Display-Condensed-Thin__': '.SFNSDisplayCondensed-Thin|SFUIDisplayCondensed-Thin|.SFUIDisplayCondensed-Thin',
  '__SF-UI-Display-Condensed-Light__': '.SFNSDisplayCondensed-Light|SFUIDisplayCondensed-Light|.SFUIDisplayCondensed-Light',
  '__SF-UI-Display-Condensed-Medium__': '.SFNSDisplayCondensed-Medium|SFUIDisplayCondensed-Medium|.SFUIDisplayCondensed-Medium',
  '__SF-UI-Display-Condensed-Semibold__': '.SFNSDisplayCondensed-Semibold|SFUIDisplayCondensed-Semibold|.SFUIDisplayCondensed-Semibold',
  '__SF-UI-Display-Condensed-Bold__': '.SFNSDisplayCondensed-Bold|SFUIDisplayCondensed-Bold|.SFUIDisplayCondensed-Bold',
  '__SF-UI-Display-Condensed-Heavy__': '.SFNSDisplayCondensed-Heavy|SFUIDisplayCondensed-Heavy|.SFUIDisplayCondensed-Heavy',
  '__SF-UI-Display-Condensed-Black__': '.SFNSDisplayCondensed-Black|.SFUIDisplayCondensed-Black',
  '__SF-UI-Display-Regular__': '.SFNSDisplay|SFProDisplay-Regular|SFUIDisplay-Regular|.SFUIDisplay',
  '__SF-UI-Display-Ultralight__': '.SFNSDisplay-Ultralight|SFProDisplay-Ultralight|SFUIDisplay-Ultralight|.SFUIDisplay-Ultralight',
  '__SF-UI-Display-Thin__': '.SFNSDisplay-Thin|SFProDisplay-Thin|SFUIDisplay-Thin|.SFUIDisplay-Thin',
  '__SF-UI-Display-Light__': '.SFNSDisplay-Light|SFProDisplay-Light|SFUIDisplay-Light|.SFUIDisplay-Light',
  '__SF-UI-Display-Medium__': '.SFNSDisplay-Medium|SFProDisplay-Medium|SFUIDisplay-Medium|.SFUIDisplay-Medium',
  '__SF-UI-Display-Semibold__': '.SFNSDisplay-Semibold|SFProDisplay-Semibold|SFUIDisplay-Semibold|.SFUIDisplay-Semibold',
  '__SF-UI-Display-Bold__': '.SFNSDisplay-Bold|SFProDisplay-Bold|SFUIDisplay-Bold|.SFUIDisplay-Bold',
  '__SF-UI-Display-Heavy__': '.SFNSDisplay-Heavy|SFProDisplay-Heavy|SFUIDisplay-Heavy|.SFUIDisplay-Heavy',
  '__SF-UI-Display-Black__': '.SFNSDisplay-Black|SFProDisplay-Black|.SFUIDisplay-Black',
  '__SF-UI-Display-Italic__': '.SFNSDisplay-Italic|SFProDisplay-Italic|SFUIDisplay-Italic',
  '__SF-UI-Display-Ultralight-Italic__':
    '.SFNSDisplay-UltralightItalic|SFProDisplay-UltralightItalic|SFUIDisplay-UltralightItalic|.SFUIDisplay-UltralightItalic',
  '__SF-UI-Display-Thin-Italic__': '.SFNSDisplay-ThinItalic|SFProDisplay-ThinItalic|SFUIDisplay-ThinItalic|.SFUIDisplay-ThinItalic',
  '__SF-UI-Display-Light-Italic__': '.SFNSDisplay-LightItalic|SFProDisplay-LightItalic|SFUIDisplay-LightItalic|.SFUIDisplay-LightItalic',
  '__SF-UI-Display-Medium-Italic__':
    '.SFNSDisplay-MediumItalic|SFProDisplay-MediumItalic|SFUIDisplay-MediumItalic|.SFUIDisplay-MediumItalic',
  '__SF-UI-Display-Semibold-Italic__':
    '.SFNSDisplay-SemiboldItalic|SFProDisplay-SemiboldItalic|SFUIDisplay-SemiboldItalic|.SFUIDisplay-SemiboldItalic',
  '__SF-UI-Display-Bold-Italic__': '.SFNSDisplay-BoldItalic|SFProDisplay-BoldItalic|SFUIDisplay-BoldItalic|.SFUIDisplay-BoldItalic',
  '__SF-UI-Display-Heavy-Italic__': '.SFNSDisplay-HeavyItalic|SFProDisplay-HeavyItalic|SFUIDisplay-HeavyItalic|.SFUIDisplay-HeavyItalic',
  '__SF-UI-Display-Black-Italic__': '.SFNSDisplay-BlackItalic|SFProDisplay-BlackItalic|.SFUIDisplay-BlackItalic',
  '__SF-UI-Text-Condensed-Regular__': '.SFNSTextCondensed-Regular|SFUITextCondensed-Regular|.SFUITextCondensed-Regular',
  '__SF-UI-Text-Condensed-Light__': '.SFNSTextCondensed-Light|SFUITextCondensed-Light|.SFUITextCondensed-Light',
  '__SF-UI-Text-Condensed-Medium__': '.SFNSTextCondensed-Medium|SFUITextCondensed-Medium|.SFUITextCondensed-Medium',
  '__SF-UI-Text-Condensed-Semibold__': '.SFNSTextCondensed-Semibold|SFUITextCondensed-Semibold|.SFUITextCondensed-Semibold',
  '__SF-UI-Text-Condensed-Bold__': '.SFNSTextCondensed-Bold|SFUITextCondensed-Bold|.SFUITextCondensed-Bold',
  '__SF-UI-Text-Condensed-Heavy__': '.SFNSTextCondensed-Heavy|.SFUITextCondensed-Heavy',
  '__SF-Compact-Rounded-Regular__': 'SFCompactRounded-Regular|.SFCompactRounded-Regular',
  '__SF-Compact-Rounded-Ultralight__': 'SFCompactRounded-Ultralight|.SFCompactRounded-Ultralight',
  '__SF-Compact-Rounded-Thin__': 'SFCompactRounded-Thin|.SFCompactRounded-Thin',
  '__SF-Compact-Rounded-Light__': 'SFCompactRounded-Light|.SFCompactRounded-Light',
  '__SF-Compact-Rounded-Medium__': 'SFCompactRounded-Medium|.SFCompactRounded-Medium',
  '__SF-Compact-Rounded-Semibold__': 'SFCompactRounded-Semibold|.SFCompactRounded-Semibold',
  '__SF-Compact-Rounded-Bold__': 'SFCompactRounded-Bold|.SFCompactRounded-Bold',
  '__SF-Compact-Rounded-Heavy__': 'SFCompactRounded-Heavy|.SFCompactRounded-Heavy',
  '__SF-Compact-Rounded-Black__': 'SFCompactRounded-Black|.SFCompactRounded-Black',
};
var fontFamilies = safeFonts;
var FontSourceNames = /* @__PURE__ */ ((FontSourceNames2) => {
  FontSourceNames2['Google'] = 'google';
  FontSourceNames2['Fontshare'] = 'fontshare';
  FontSourceNames2['Framer'] = 'framer';
  FontSourceNames2['Local'] = 'local';
  FontSourceNames2['Custom'] = 'custom';
  FontSourceNames2['BuiltIn'] = 'builtIn';
  return FontSourceNames2;
})(FontSourceNames || {},);
function isSuccessfullyParsedFontVariant(variant,) {
  return variant.weight !== void 0 && variant.style !== void 0;
}
var systemFontFamilyName = 'System Default';
var LocalFontSource = class {
  constructor() {
    __publicField(this, 'name', 'local',/* Local */
    );
    __publicField(this, 'fontFamilies', [],);
    __publicField(this, 'byFamilyName', /* @__PURE__ */ new Map(),);
    __publicField(this, 'fontAliasBySelector', /* @__PURE__ */ new Map(),);
    __publicField(this, 'fontAliases', /* @__PURE__ */ new Map(),);
  }
  getFontFamilyByName(family,) {
    return this.byFamilyName.get(family,) ?? null;
  }
  // TODO: these are duplicated across implementations of FontSource
  // When adding a third source, we should abstract them
  createFontFamily(family,) {
    const fontFamily = {
      name: family,
      fonts: [],
      source: this.name,
    };
    this.addFontFamily(fontFamily,);
    return fontFamily;
  }
  addFontFamily(fontFamily,) {
    this.fontFamilies.push(fontFamily,);
    this.byFamilyName.set(fontFamily.name, fontFamily,);
  }
  // end of duplication
  importFonts() {
    const fonts = [];
    for (const family of Object.keys(fontFamilies,)) {
      const members = fontFamilies[family];
      if (!members) continue;
      const fontFamily = this.createFontFamily(family,);
      for (const variant of Object.keys(members,)) {
        const member = members[variant];
        if (!member) continue;
        const {
          selector,
          weight,
        } = member;
        const font = {
          variant,
          selector,
          weight,
          family: fontFamily,
        };
        fontFamily.fonts.push(font,);
      }
      fonts.push(...fontFamily.fonts,);
    }
    for (const [key7, value,] of Object.entries(fontAliases,)) {
      this.addFontAlias(key7, value,);
    }
    const {
      fontFamily: systemFontFamily,
      aliases,
    } = this.getSystemFontFamily();
    this.addFontFamily(systemFontFamily,);
    for (const [key7, value,] of aliases) {
      this.addFontAlias(key7, value,);
    }
    fonts.push(...systemFontFamily.fonts,);
    return fonts;
  }
  addFontAlias(key7, value,) {
    this.fontAliases.set(key7, value,);
    this.fontAliasBySelector.set(value, key7,);
  }
  getSystemFontFamily() {
    const fontFamilies2 =
      // System fonts - Taken from https://furbo.org/stuff/systemfonts-new.html - "All Platforms" section
      'system-ui|-apple-system|BlinkMacSystemFont|Segoe UI|Roboto|Oxygen|Ubuntu|Cantarell|Fira Sans|Droid Sans|Helvetica Neue|sans-serif';
    const fontFamily = {
      name: systemFontFamilyName,
      fonts: [],
      source: this.name,
    };
    const aliases = /* @__PURE__ */ new Map();
    const weights = [400, 100, 200, 300, 500, 600, 700, 800, 900,];
    const styles4 = ['normal', 'italic',];
    for (const style2 of styles4) {
      for (const weight of weights) {
        const variant = createVariantName(weight, style2,);
        const alias = `__SystemDefault-${weight}-${style2}__`;
        const font = {
          variant,
          selector: alias,
          style: style2,
          weight,
          family: fontFamily,
        };
        fontFamily.fonts.push(font,);
        aliases.set(alias, fontFamilies2,);
      }
    }
    return {
      fontFamily,
      aliases,
    };
  }
  getFontAliasBySelector(selector,) {
    return this.fontAliasBySelector.get(selector,) || null;
  }
  getFontSelectorByAlias(alias,) {
    return this.fontAliases.get(alias,) || null;
  }
  /** Font family aliases are in the format of `__Alias-Name__` */
  isFontFamilyAlias(value,) {
    if (value && /^__.*__$/u.exec(value,)) return true;
    return false;
  }
};
var fontWeightNames = {
  '100': 'Thin',
  '200': 'Extra Light',
  '300': 'Light',
  '400': 'Normal',
  '500': 'Medium',
  '600': 'Semi Bold',
  '700': 'Bold',
  '800': 'Extra Bold',
  '900': 'Black',
};
function createVariantName(weight, style2,) {
  const friendlyStyle = style2 === 'normal' ? 'Regular' : 'Italic';
  if (weight === 400) {
    return friendlyStyle;
  }
  if (style2 !== 'normal') {
    return `${fontWeightNames[weight]} ${friendlyStyle}`;
  }
  return `${fontWeightNames[weight]}`;
}
function isVariableFont(font,) {
  return Boolean(font.variationAxes,);
}
function createFontFamilyName(font,) {
  if (isVariableFont(font,) && font.family.source !== 'custom') {
    return createVariableFontFamilyName(font.family.name,);
  }
  return font.family.name;
}
function createVariableFontFamilyName(familyName,) {
  return `${familyName} Variable`;
}
function supportsOpenType(openTypeData,) {
  return Boolean(openTypeData && Array.isArray(openTypeData,),);
}
function validateVariationAxes(variationAxesData,) {
  if (!variationAxesData) return;
  if (!Array.isArray(variationAxesData,)) return;
  const variationAxes = [];
  for (const axis of variationAxesData) {
    if (!isVariationAxis(axis,)) continue;
    variationAxes.push({
      tag: axis.tag,
      name: axis.name,
      minValue: axis.minValue,
      maxValue: axis.maxValue,
      defaultValue: axis.defaultValue,
    },);
  }
  return variationAxes;
}
function isOpenTypeFeature(feature,) {
  if (typeof feature !== 'object' || feature === null) return false;
  if (!('tag' in feature) || typeof feature.tag !== 'string') return false;
  if ('coverage' in feature && typeof feature.coverage !== 'undefined' && !Array.isArray(feature.coverage,)) {
    return false;
  }
  return true;
}
function isVariationAxis(axis,) {
  if (typeof axis !== 'object' || axis === null) return false;
  if (!('tag' in axis) || typeof axis.tag !== 'string') return false;
  if ('name' in axis && typeof axis.name !== 'string') return false;
  if (!('minValue' in axis) || typeof axis.minValue !== 'number') return false;
  if (!('maxValue' in axis) || typeof axis.maxValue !== 'number') return false;
  if (!('defaultValue' in axis) || typeof axis.defaultValue !== 'number') {
    return false;
  }
  return true;
}
var builtInFontSelectorPrefix = 'BI;';
var BuiltInFontSource = class {
  constructor() {
    __publicField(this, 'name', 'builtIn',/* BuiltIn */
    );
    __publicField(this, 'fontFamilies', [],);
    __publicField(this, 'byFamilyName', /* @__PURE__ */ new Map(),);
    __publicField(this, 'assetsByFamily', /* @__PURE__ */ new Map(),);
  }
  importFonts(assets,) {
    this.fontFamilies.length = 0;
    this.byFamilyName.clear();
    this.assetsByFamily.clear();
    const fonts = [];
    for (const asset of assets) {
      if (!this.isValidBuiltInFont(asset,)) continue;
      const {
        properties,
      } = asset;
      const fontName = properties.font.preferredFamily || properties.font.fontFamily;
      const fontFamily = this.createFontFamily(fontName, properties.font.foundryName, properties.font.fontVersion,);
      const openTypeData = properties.font.openTypeData;
      const variationAxesData = properties.font.variationAxes;
      const isVariableFont2 = Array.isArray(variationAxesData,);
      const variant = isVariableFont2 ? 'variable' : properties.font.preferredSubFamily || properties.font.fontSubFamily || 'regular';
      const font = {
        family: fontFamily,
        selector: this.createSelector(fontName, variant, properties.font.fontVersion,),
        variant,
        file: asset.url,
        hasOpenTypeFeatures: supportsOpenType(openTypeData,),
        variationAxes: validateVariationAxes(variationAxesData,),
        category: properties.font.fontCategory,
        weight: variantNameToWeight(variant,),
        style: getFontStyle(variant,),
      };
      fontFamily.fonts.push(font,);
      this.assetsByFamily.set(fontName, asset,);
      fonts.push(font,);
    }
    for (const fontFamily of this.fontFamilies) {
      fontFamily.fonts.sort((a, b,) => {
        const weightA = variantNameToWeight(a.variant,);
        const weightB = variantNameToWeight(b.variant,);
        if (!weightA || !weightB) return 1;
        return weightA - weightB;
      },);
    }
    return fonts;
  }
  static parseVariant(variant,) {
    const kebabCaseVariant = variantToKebabCase(variant,);
    const weight = variantsNameToWeight[kebabCaseVariant];
    const style2 = getFontStyle(variant,);
    return {
      weight,
      style: style2,
    };
  }
  getFontBySelector(selector, createFont = true,) {
    const locator = this.parseSelector(selector,);
    if (!locator) return;
    if (!createFont && !this.byFamilyName.get(locator.name,)) return;
    const fontFamily = this.getFontFamilyByName(locator.name,);
    if (!fontFamily) return;
    return fontFamily.fonts.find((f) => f.selector === selector);
  }
  getFontFamilyByName(family,) {
    return this.byFamilyName.get(family,) ?? null;
  }
  createFontFamily(family, foundryName, version2,) {
    const existingFontFamily = this.byFamilyName.get(family,);
    if (existingFontFamily && existingFontFamily.version === version2) return existingFontFamily;
    const fontFamily = {
      source: this.name,
      name: family,
      fonts: [],
      foundryName,
      version: version2,
    };
    this.addFontFamily(fontFamily,);
    return fontFamily;
  }
  getOpenTypeFeatures(family,) {
    var _a, _b;
    const assets = this.assetsByFamily.get(family,);
    const openTypeData = (_b = (_a = assets == null ? void 0 : assets.properties) == null ? void 0 : _a.font) == null
      ? void 0
      : _b.openTypeData;
    if (!supportsOpenType(openTypeData,)) return [];
    return openTypeData == null ? void 0 : openTypeData.map((feature) => {
      if (!isOpenTypeFeature(feature,)) return;
      return {
        tag: feature.tag,
        coverage: feature.coverage,
      };
    },);
  }
  isValidBuiltInFont(asset,) {
    var _a;
    if (!asset.mimeType.startsWith('font/',)) return false;
    if (((_a = asset.properties) == null ? void 0 : _a.kind) !== 'font') return false;
    if (!asset.properties.font) return false;
    if (!asset.properties.font.fontVersion) return false;
    if (!asset.properties.font.fontFamily) return false;
    return 'fontFamily' in asset.properties.font;
  }
  createSelector(family, variant, version2,) {
    return `${builtInFontSelectorPrefix}${family}/${variant}/${version2}`;
  }
  parseSelector(selector,) {
    if (!selector.startsWith(builtInFontSelectorPrefix,)) return null;
    const [_, selectorWithoutPrefix,] = selector.split(builtInFontSelectorPrefix,);
    if (selectorWithoutPrefix === void 0) return null;
    const [name, variant, version2,] = selectorWithoutPrefix.split('/',);
    if (!name || !variant || !version2) return null;
    return {
      name,
      variant,
      source: this.name,
      isVariable: variant.toLowerCase().includes('variable',),
    };
  }
  addFontFamily(fontFamily,) {
    this.fontFamilies.push(fontFamily,);
    this.byFamilyName.set(fontFamily.name, fontFamily,);
  }
};
var variantsNameToWeight = {
  ultralight: 100,
  'ultralight-italic': 100,
  thin: 200,
  'thin-italic': 200,
  demi: 200,
  light: 300,
  'light-italic': 300,
  normal: 350,
  base: 400,
  regular: 400,
  classic: 400,
  'regular-slanted': 400,
  italic: 400,
  oblique: 400,
  dense: 400,
  brukt: 300,
  book: 400,
  'book-italic': 400,
  text: 400,
  'text-italic': 400,
  medium: 500,
  solid: 500,
  'medium-oblique': 500,
  'medium-italic': 500,
  mittel: 500,
  semibold: 600,
  'semibold-italic': 600,
  bold: 700,
  'bold-italic': 700,
  'bold-oblique': 700,
  fett: 700,
  ultrabold: 800,
  'ultrabold-italic': 800,
  extrabold: 800,
  'extrabold-italic': 800,
  black: 900,
  extralight: 100,
  'extralight-italic': 100,
  'black-italic': 900,
  'extra-italic': 900,
  'extra-italic-bold': 900,
  satt: 900,
  heavy: 900,
  'heavy-italic': 900,
  // The following variants are only used in the FT88 font. These are not really weights, but more font styles (gothique, cursive, etc.).
  // We assign them different (fake) weights to ensure that the changes are picked up when switching between variants.
  serif: 100,
  school: 200,
  expanded: 300,
  gothique: 500,
  // The following variants are only used in the ARK_ES font.
  // We assign them different (fake) weights to ensure that the changes are picked up when switching between variants.
  // The order is important because we want to group all the light together and solid together.
  'dense-light': 200,
  'dense-regular': 300,
  'dense-medium': 400,
  'dense-bold': 500,
  'solid-light': 600,
  'solid-regular': 700,
  'solid-medium': 800,
  'solid-bold': 900,
  // The following variants are only used in the Tecnica font.
  // We assign them different (fake) weights to ensure that the changes are picked up when switching between variants.
  '53': 400,
  '55': 600,
  // we want to put variable fonts last
  variable: 1e3,
  'variable-italic': 1e3,
};
function variantNameToWeight(variant,) {
  const kebabCaseVariant = variantToKebabCase(variant,);
  return variantsNameToWeight[kebabCaseVariant];
}
function variantToKebabCase(variant,) {
  return variant.toLowerCase().replace(/\s+/gu, '-',);
}
function getFontStyle(variant,) {
  variant = variant.toLowerCase();
  if (variant.includes('italic',) || variant.includes('oblique',) || variant.includes('slanted',)) return 'italic';
  return 'normal';
}
var customFontSelectorPrefix = 'CUSTOM;';
function getCustomFontName(fileName, properties,) {
  if (!properties) return fileName.substring(0, fileName.lastIndexOf('.',),);
  const {
    font,
  } = properties;
  const fontFamily = font.preferredFamily || font.fontFamily;
  const isAssetVariableFont = Array.isArray(font.variationAxes,);
  if (isAssetVariableFont && fontFamily.toLowerCase().includes('variable',)) return fontFamily;
  const variant = isAssetVariableFont ? 'Variable' : (font.preferredSubFamily || font.fontSubFamily).trim();
  if (variant === '') return fontFamily;
  return `${fontFamily} ${variant}`;
}
var CustomFontSource = class {
  constructor() {
    __publicField(this, 'name', 'custom',/* Custom */
    );
    __publicField(this, 'fontFamilies', [],);
    __publicField(this, 'byFamilyName', /* @__PURE__ */ new Map(),);
    __publicField(this, 'assetsByFamily', /* @__PURE__ */ new Map(),);
  }
  importFonts(assets,) {
    var _a, _b, _c;
    this.fontFamilies.length = 0;
    this.byFamilyName.clear();
    this.assetsByFamily.clear();
    const fonts = [];
    for (const asset of assets) {
      if (!this.isValidCustomFontAsset(asset,)) {
        continue;
      }
      const variationAxesData = (_a = asset.properties) == null ? void 0 : _a.font.variationAxes;
      const isVariableFont2 = Array.isArray(variationAxesData,);
      const fontName = getCustomFontName(asset.name, asset.properties,);
      const fontFamily = this.createFontFamily(fontName,);
      const openTypeData = (_b = asset.properties) == null ? void 0 : _b.font.openTypeData;
      const variant = isVariableFont2 ? 'variable' : this.inferVariantName(fontName,);
      const font = {
        family: fontFamily,
        selector: `${customFontSelectorPrefix}${fontName}`,
        variant,
        postscriptName: (_c = asset.properties) == null ? void 0 : _c.font.postscriptName,
        file: asset.url,
        hasOpenTypeFeatures: supportsOpenType(openTypeData,),
        variationAxes: validateVariationAxes(variationAxesData,),
      };
      fontFamily.fonts.push(font,);
      fontFamily.owner = asset.ownerType === 'team' ? 'team' : 'project';
      this.assetsByFamily.set(fontName, asset,);
      fonts.push(...fontFamily.fonts,);
    }
    return fonts;
  }
  isValidCustomFontAsset(asset,) {
    var _a;
    if (!asset.mimeType.startsWith('font/',)) return false;
    if (((_a = asset.properties) == null ? void 0 : _a.kind) !== 'font') return false;
    if (!asset.properties.font) return false;
    return 'fontFamily' in asset.properties.font;
  }
  getOpenTypeFeatures(family,) {
    var _a, _b;
    const assets = this.assetsByFamily.get(family,);
    const openTypeData = (_b = (_a = assets == null ? void 0 : assets.properties) == null ? void 0 : _a.font) == null
      ? void 0
      : _b.openTypeData;
    if (!supportsOpenType(openTypeData,)) return [];
    return openTypeData == null ? void 0 : openTypeData.map((feature) => {
      if (!isOpenTypeFeature(feature,)) return;
      return {
        tag: feature.tag,
        coverage: feature.coverage,
      };
    },);
  }
  inferVariantName(family,) {
    const possibleValues = ['thin', 'ultra light', 'extra light', 'light', 'normal', 'medium', 'semi bold', 'bold', 'extra bold', 'black',];
    const possibleValuesWithItalics = [...possibleValues.map((value) => `${value} italic`), ...possibleValues,];
    const lowerCaseFamily = family.toLowerCase();
    const tokens = [...lowerCaseFamily.split(' ',), ...lowerCaseFamily.split('-',), ...lowerCaseFamily.split('_',),];
    const foundToken = possibleValuesWithItalics.find((value) => tokens.includes(value,) || tokens.includes(value.replace(/\s+/gu, '',),));
    if (foundToken) return foundToken.replace(/^\w|\s\w/gu, (char) => char.toUpperCase(),);
    return 'Regular';
  }
  createFontFamily(family,) {
    const existingFontFamily = this.byFamilyName.get(family,);
    if (existingFontFamily) return existingFontFamily;
    const fontFamily = {
      source: this.name,
      name: family,
      fonts: [],
    };
    this.addFontFamily(fontFamily,);
    return fontFamily;
  }
  addFontFamily(fontFamily,) {
    this.fontFamilies.push(fontFamily,);
    this.byFamilyName.set(fontFamily.name, fontFamily,);
  }
  parseSelector(selector,) {
    if (!selector.startsWith(customFontSelectorPrefix,)) return null;
    const tokens = selector.split(customFontSelectorPrefix,);
    if (tokens[1] === void 0) return null;
    const locator = {
      source: 'custom',
      name: tokens[1],
    };
    return locator;
  }
  getFontBySelector(selector, createFont = true,) {
    const locator = this.parseSelector(selector,);
    if (!locator) return;
    if (!createFont && !this.byFamilyName.get(locator.name,)) return;
    const fonts = this.getFontFamilyByName(locator.name,).fonts;
    const woff2Font = fonts.find((font) => {
      var _a;
      return (_a = font.file) == null ? void 0 : _a.endsWith('.woff2',);
    },);
    return woff2Font || fonts[0];
  }
  getFontFamilyByName(family,) {
    const foundFontFamily = this.byFamilyName.get(family,);
    if (foundFontFamily) return foundFontFamily;
    const fontFamily = {
      source: 'custom',
      name: family,
      fonts: [],
    };
    fontFamily.fonts.push({
      selector: `${customFontSelectorPrefix}${family}`,
      variant: this.inferVariantName(family,),
      family: fontFamily,
    },);
    return fontFamily;
  }
};
function getRelatedFontVariants(currentVariant, availableVariants,) {
  return {
    ...pickBoldItalicVariants(currentVariant, availableVariants,),
    ...pickVariableVariants(currentVariant, availableVariants,),
  };
}
function pickBoldItalicVariants(currentVariant, availableVariants,) {
  if (availableVariants.length === 0) {
    return {
      variantBold: void 0,
      variantBoldItalic: void 0,
      variantItalic: void 0,
    };
  }
  const {
    weight: currentWeight,
    style: currentStyle,
  } = currentVariant;
  const variantByWeightAndStyle = /* @__PURE__ */ new Map();
  const boldVariantByStyle = /* @__PURE__ */ new Map();
  for (const variant of availableVariants) {
    if (variant.isVariable !== currentVariant.isVariable) continue;
    variantByWeightAndStyle.set(`${variant.weight}-${variant.style}`, variant,);
    if (variant.weight <= currentWeight) continue;
    if (!boldVariantByStyle.has(variant.style,)) {
      boldVariantByStyle.set(variant.style, variant,);
    }
  }
  let variantBold = boldVariantByStyle.get(currentStyle,);
  let variantBoldItalic = boldVariantByStyle.get('italic',);
  const currentVariantWeight = currentVariant.weight;
  if (currentVariantWeight <= 300) {
    variantBold = variantByWeightAndStyle.get(`400-${currentStyle}`,) ?? variantBold;
    variantBoldItalic = variantByWeightAndStyle.get('400-italic',) ?? variantBoldItalic;
  } else if (currentVariantWeight <= 500) {
    variantBold = variantByWeightAndStyle.get(`700-${currentStyle}`,) ?? variantBold;
    variantBoldItalic = variantByWeightAndStyle.get('700-italic',) ?? variantBoldItalic;
  } else {
    variantBold = variantByWeightAndStyle.get(`900-${currentStyle}`,) ?? variantBold;
    variantBoldItalic = variantByWeightAndStyle.get('900-italic',) ?? variantBoldItalic;
  }
  const variantItalic = variantByWeightAndStyle.get(`${currentWeight}-italic`,);
  return {
    variantBold,
    variantItalic,
    variantBoldItalic,
  };
}
function pickVariableVariants(currentVariant, availableVariants,) {
  if (availableVariants.length === 0) {
    return {
      variantVariable: void 0,
      variantVariableItalic: void 0,
    };
  }
  const variantByWeightAndStyle = /* @__PURE__ */ new Map();
  for (const variant of availableVariants) {
    if (!variant.isVariable) continue;
    variantByWeightAndStyle.set(`${variant.weight}-${variant.style}`, variant,);
  }
  return {
    variantVariable: variantByWeightAndStyle.get(`${currentVariant.weight}-normal`,) ?? variantByWeightAndStyle.get(`400-normal`,) ??
      void 0,
    variantVariableItalic: variantByWeightAndStyle.get(`${currentVariant.weight}-italic`,) ?? variantByWeightAndStyle.get(`400-italic`,) ??
      void 0,
  };
}
async function loadFontsWithOpenType(source,) {
  switch (source) {
    case 'google': {
      const supportedFonts = await import('./framer-chunks/google-LHIHIYDX-FZZ6UXE7.js');
      return supportedFonts == null ? void 0 : supportedFonts.default;
    }
    case 'fontshare': {
      const supportedFonts = await import('./framer-chunks/fontshare-GSJIWLGZ-7BHTUG6K.js');
      return supportedFonts == null ? void 0 : supportedFonts.default;
    }
    default:
      throw new Error(`Unknown font source: ${source}`,);
  }
}
async function loadFontToOpenTypeFeatures(source,) {
  switch (source) {
    case 'google': {
      const features = await import('./framer-chunks/google-3GQMHAEU-KEOTHDV6.js');
      return features == null ? void 0 : features.default;
    }
    case 'fontshare': {
      const features = await import('./framer-chunks/fontshare-SSHBFVID-ZX5Y6FJ4.js');
      return features == null ? void 0 : features.default;
    }
    case 'framer': {
      const features = await import('./framer-chunks/framer-font-TNC5DMGA-XVG7BST3.js');
      return features == null ? void 0 : features.default;
    }
    default:
      throw new Error(`Unknown font source: ${source}`,);
  }
}
var knownFontshareCategories = ['display', 'sans', 'serif', 'slab', 'handwritten', 'script',];
function parseFontshareCategories(categoriesField,) {
  return categoriesField.split(',',).map((category) => category.trim().toLowerCase()).filter(isKnownFontshareCategory,);
}
function isKnownFontshareCategory(category,) {
  return knownFontshareCategories.includes(category,);
}
var fontsharePrefix = 'FS;';
var weightNameToNumber = {
  thin: 100,
  hairline: 100,
  // Alternative name for "thin".
  extralight: 200,
  light: 300,
  regular: 400,
  medium: 500,
  semibold: 600,
  bold: 700,
  extrabold: 800,
  ultra: 800,
  // Alternative name for "extrabold".
  black: 900,
  heavy: 900,
  // Alternative name for "black".
};
var weightNames = /* @__PURE__ */ Object.keys(weightNameToNumber,);
var allowedVariantsRegex = /* @__PURE__ */ (() => new RegExp(`^(?:${[...weightNames, 'italic', 'variable',].join('|',)})`, 'u',))();
var FontshareSource = class _FontshareSource {
  constructor() {
    __publicField(this, 'name', 'fontshare',/* Fontshare */
    );
    __publicField(this, 'fontFamilies', [],);
    __publicField(this, 'byFamilyName', /* @__PURE__ */ new Map(),);
  }
  getFontFamilyByName(family,) {
    return this.byFamilyName.get(family,) ?? null;
  }
  /**
   * Parses variant a string into a weight number and style, defaulting to a
   * weight of `400` and/or a style of `"normal"` depending on what isn't
   * present in the variant string.
   *
   * E.g:
   *   - `"Bold"` becomes `{ weight: 700, style: "normal" }`
   *   - `"Bold Italic"` becomes `{ weight: 700, style: "italic" }`
   *   - `"Italic"` becomes `{ weight: 400, style: "italic" }`
   *   - `"Variable Italic"` becomes `{ weight: 400, style: "italic" }`
   */
  static parseVariant(variant,) {
    const variantSplit = variant.toLowerCase().split(' ',);
    const weightName = weightNames.find((weightName2) => {
      return variantSplit.includes(weightName2,);
    },);
    const styleName = variant.toLowerCase().includes('italic',) ? 'italic' : 'normal';
    const weight = weightName && weightNameToNumber[weightName] || 400;
    const style2 = styleName === 'italic' ? styleName : 'normal';
    return {
      weight,
      style: style2,
    };
  }
  parseSelector(selector,) {
    if (!selector.startsWith(fontsharePrefix,)) return null;
    const tokens = selector.split('-',);
    if (tokens.length !== 2) return null;
    const [family, variant,] = tokens;
    if (!family || !variant) return null;
    return {
      name: family.replace(fontsharePrefix, '',),
      variant,
      source: this.name,
      isVariable: variant.toLowerCase().includes('variable',),
    };
  }
  static createSelector(family, variant,) {
    return `${fontsharePrefix}${family}-${variant.toLowerCase()}`;
  }
  /**
   * We are using this selector to get Open Type features and variable fonts variation axes.
   * CAUTION: This method has to be exactly the same as the one in font-metadata-extractor tool.
   * https://github.com/framer/FramerStudio/blob/master/tools/font-metadata-extractor/src/utils/fontShare.ts
   */
  static createMetadataSelector(family,) {
    return `${fontsharePrefix}${family}`;
  }
  addFontFamily(fontFamily,) {
    this.fontFamilies.push(fontFamily,);
    this.byFamilyName.set(fontFamily.name, fontFamily,);
  }
  async importFonts(fontshareFonts, variationAxesData,) {
    this.fontFamilies.length = 0;
    this.byFamilyName.clear();
    const fontsWithOpenType = await loadFontsWithOpenType('fontshare',/* Fontshare */
    );
    const fonts = [];
    for (const fontshareFont of fontshareFonts) {
      const fontStyles = fontshareFont.font_styles.filter((fontStyle) => {
        const variant = fontStyle.name.toLowerCase();
        const allowedVariantMatch = allowedVariantsRegex.exec(variant,);
        if (!allowedVariantMatch || variant.split(' ',).includes('wide',)) {
          return false;
        }
        return true;
      },);
      const fontVariants = fontStyles.map((fontStyle) => {
        const variantInfo = _FontshareSource.parseVariant(fontStyle.name,);
        return {
          ...variantInfo,
          selector: _FontshareSource.createSelector(fontshareFont.name, fontStyle.name,),
          isVariable: fontStyle.is_variable,
          fontshareVariantName: fontStyle.name,
          file: fontStyle.file,
        };
      },);
      const key7 = _FontshareSource.createMetadataSelector(fontshareFont.name,);
      const variationAxes = variationAxesData == null ? void 0 : variationAxesData[key7];
      const familyName = fontshareFont.name;
      let fontFamily = this.getFontFamilyByName(familyName,);
      if (!fontFamily) {
        fontFamily = {
          name: familyName,
          fonts: [],
          source: this.name,
        };
        this.addFontFamily(fontFamily,);
      }
      const fontMetadataSelector = _FontshareSource.createMetadataSelector(fontshareFont.name,);
      const hasOpenTypeFeatures = fontsWithOpenType[fontMetadataSelector];
      for (const fontVariant of fontVariants) {
        const {
          variantBold,
          variantBoldItalic,
          variantItalic,
          variantVariable,
          variantVariableItalic,
        } = getRelatedFontVariants(fontVariant, fontVariants,);
        const font = {
          family: fontFamily,
          variant: fontVariant.fontshareVariantName.toLowerCase(),
          selector: fontVariant.selector,
          selectorBold: variantBold == null ? void 0 : variantBold.selector,
          selectorBoldItalic: variantBoldItalic == null ? void 0 : variantBoldItalic.selector,
          selectorItalic: variantItalic == null ? void 0 : variantItalic.selector,
          selectorVariable: variantVariable == null ? void 0 : variantVariable.selector,
          selectorVariableItalic: variantVariableItalic == null ? void 0 : variantVariableItalic.selector,
          weight: fontVariant.weight,
          style: fontVariant.style,
          file: fontVariant.file,
          category: mapToKnownCategory(fontshareFont.category,),
          hasOpenTypeFeatures,
          variationAxes: fontVariant.isVariable ? variationAxes : void 0,
        };
        fontFamily.fonts.push(font,);
        fonts.push(font,);
      }
    }
    return fonts;
  }
  async getOpenTypeFeatures(family,) {
    const fontToOpenTypeFeatures = await loadFontToOpenTypeFeatures('fontshare',/* Fontshare */
    );
    const selector = _FontshareSource.createMetadataSelector(family,);
    return fontToOpenTypeFeatures[selector];
  }
};
function mapToKnownCategory(categoryString,) {
  const categoryMapping = {
    serif: 'serif',
    sans: 'sans-serif',
    slab: 'slab',
    display: 'display',
    // As of Nov 2023, these two look similar enough – so we can map them into the same category.
    handwritten: 'handwriting',
    script: 'handwriting',
  };
  const category = parseFontshareCategories(categoryString,)[0];
  return category && categoryMapping[category];
}
var framerInterFontPrefix = 'Inter';
var framerFontPrefix = 'FR;';
var weightNameToNumber2 = {
  Thin: 100,
  ExtraLight: 200,
  Light: 300,
  '': 400,
  // Regular weights have a selector like "Inter" or "Inter-Italic", with no mention of weight.
  Medium: 500,
  SemiBold: 600,
  Bold: 700,
  ExtraBold: 800,
  Black: 900,
};
var FramerFontSource = class _FramerFontSource {
  constructor() {
    __publicField(this, 'name', 'framer',/* Framer */
    );
    __publicField(this, 'fontFamilies', [],);
    __publicField(this, 'byFamilyName', /* @__PURE__ */ new Map(),);
  }
  getFontFamilyByName(family,) {
    return this.byFamilyName.get(family,) ?? null;
  }
  addFontFamily(familyName,) {
    const fontFamily = {
      name: familyName,
      fonts: [],
      source: this.name,
    };
    this.fontFamilies.push(fontFamily,);
    this.byFamilyName.set(fontFamily.name, fontFamily,);
    return fontFamily;
  }
  static getDraftFontPropertiesBySelector(selector,) {
    if (!selector.startsWith(framerFontPrefix,) && !selector.startsWith(framerInterFontPrefix,)) return null;
    const tokens = selector.split('-',);
    const [family, weightAndStyleInfo = '',] = tokens;
    if (!family) return null;
    const style2 = weightAndStyleInfo.includes('Italic',) ? 'italic' : 'normal';
    const weightName = weightAndStyleInfo.replace('Italic', '',);
    const weight = weightName && weightNameToNumber2[weightName] || 400;
    return {
      family,
      style: style2,
      weight,
      source: 'framer',
      variant: void 0,
      category: 'sans-serif',
    };
  }
  static createMetadataSelector(family,) {
    return `${framerFontPrefix}${family}`;
  }
  importFonts(framerFonts, variationAxesData,) {
    this.fontFamilies.length = 0;
    this.byFamilyName.clear();
    const fonts = [];
    framerFonts.forEach((framerFont) => {
      const {
        familyName,
        ...rest
      } = framerFont;
      const key7 = _FramerFontSource.createMetadataSelector(framerFont.familyName,);
      const variationAxes = variationAxesData == null ? void 0 : variationAxesData[key7];
      let fontFamily = this.getFontFamilyByName(familyName,);
      if (!fontFamily) {
        fontFamily = this.addFontFamily(familyName,);
      }
      const isVariable = framerFont.selector === framerFont.selectorVariable || framerFont.selector === framerFont.selectorVariableItalic;
      const font = {
        ...rest,
        family: fontFamily,
        variationAxes: isVariable ? variationAxes : void 0,
      };
      fontFamily.fonts.push(font,);
      fonts.push(font,);
    },);
    return fonts;
  }
  async getOpenTypeFeatures(family,) {
    const fontToOpenTypeFeatures = await loadFontToOpenTypeFeatures('framer',/* Framer */
    );
    const selector = _FramerFontSource.createMetadataSelector(family,);
    return fontToOpenTypeFeatures[selector];
  }
};
var googleFontSelectorPrefix = 'GF;';
var GoogleFontSource = class _GoogleFontSource {
  constructor() {
    __publicField(this, 'name', 'google',/* Google */
    );
    __publicField(this, 'fontFamilies', [],);
    __publicField(this, 'byFamilyName', /* @__PURE__ */ new Map(),);
  }
  getFontFamilyByName(family,) {
    return this.byFamilyName.get(family,) ?? null;
  }
  static parseVariant(variant,) {
    if (variant === 'regular') {
      return {
        style: 'normal',
        weight: 400,
      };
    }
    const match = /(\d*)(normal|italic)?/u.exec(variant,);
    if (!match) return {};
    const weight = parseInt(match[1] || '400',);
    const style2 = match[2] === 'italic' ? 'italic' : 'normal';
    return {
      weight,
      style: style2,
    };
  }
  parseSelector(selector,) {
    if (!selector.startsWith(googleFontSelectorPrefix,)) return null;
    const isVariable = selector.includes('-variable-',);
    const tokens = isVariable ? selector.split('-variable-',) : selector.split('-',);
    if (tokens.length !== 2) return null;
    const [family, variant,] = tokens;
    if (!family || !variant) return null;
    return {
      name: family.replace(googleFontSelectorPrefix, '',),
      variant,
      source: this.name,
      isVariable,
    };
  }
  static createSelector(family, variant, isVariableFont2,) {
    return `${googleFontSelectorPrefix}${family}-${isVariableFont2 ? 'variable-' : ''}${variant}`;
  }
  /**
   * We are using this selector to get Open Type features and variable fonts variation axes.
   * CAUTION: This method has to be exactly the same as the one in font-metadata-extractor tool.
   * https://github.com/framer/FramerStudio/blob/master/tools/font-metadata-extractor/src/utils/googleFonts.ts
   */
  static createMetadataSelector(family,) {
    return `${googleFontSelectorPrefix}${family}`;
  }
  addFontFamily(family,) {
    const fontFamily = {
      name: family,
      fonts: [],
      source: this.name,
    };
    this.fontFamilies.push(fontFamily,);
    this.byFamilyName.set(fontFamily.name, fontFamily,);
    return fontFamily;
  }
  async importFonts(webFonts, webFontsWithAxes, fontsToVariationAxes,) {
    var _a;
    this.fontFamilies.length = 0;
    this.byFamilyName.clear();
    const fontsWithOpenType = await loadFontsWithOpenType('google',/* Google */
    );
    const fonts = [];
    const webFontsMap = mapBy(webFonts, (webFont) => webFont.family,);
    const webFontsWithAxesMap = mapBy(webFontsWithAxes, (webFont) => webFont.family,);
    for (const webFontName in webFontsMap) {
      const webFont = webFontsMap[webFontName];
      if (!webFont) continue;
      let fontFamily = this.getFontFamilyByName(webFont.family,);
      if (!fontFamily) {
        fontFamily = this.addFontFamily(webFont.family,);
      }
      const rawStaticVariants = webFont.variants;
      const staticVariants = rawStaticVariants.map((variantName) => {
        const parsedVariant = _GoogleFontSource.parseVariant(variantName,);
        return {
          ...parsedVariant,
          googleFontsVariantName: variantName,
          selector: _GoogleFontSource.createSelector(webFontName, variantName, false,),
          isVariable: false,
          file: webFont.files[variantName],
        };
      },);
      const variableFont = webFontsWithAxesMap[webFontName];
      const variableVariants = (variableFont == null ? void 0 : variableFont.axes)
        ? variableFont.variants.map((variantName) => {
          const parsedVariant = _GoogleFontSource.parseVariant(variantName,);
          return {
            ...parsedVariant,
            googleFontsVariantName: variantName,
            selector: _GoogleFontSource.createSelector(webFontName, variantName, true,),
            isVariable: true,
            file: variableFont.files[variantName],
          };
        },)
        : [];
      const key7 = _GoogleFontSource.createMetadataSelector(webFont.family,);
      const variationAxes = fontsToVariationAxes == null ? void 0 : fontsToVariationAxes[key7];
      const allVariants = [...staticVariants, ...variableVariants,];
      const allSuccessfullyParsedVariants = allVariants.filter(isSuccessfullyParsedFontVariant,);
      const fontMetadataSelector = _GoogleFontSource.createMetadataSelector(webFontName,);
      const hasOpenTypeFeatures = fontsWithOpenType[fontMetadataSelector];
      for (const variant of allVariants) {
        const {
          weight,
          style: style2,
          selector,
          googleFontsVariantName,
        } = variant;
        const linkedVariants = isSuccessfullyParsedFontVariant(variant,)
          ? getRelatedFontVariants(variant, allSuccessfullyParsedVariants,)
          : void 0;
        const {
          variantBold,
          variantItalic,
          variantBoldItalic,
          variantVariable,
          variantVariableItalic,
        } = linkedVariants ?? {};
        const font = {
          family: fontFamily,
          variant: googleFontsVariantName,
          selector,
          selectorBold: variantBold == null ? void 0 : variantBold.selector,
          selectorBoldItalic: variantBoldItalic == null ? void 0 : variantBoldItalic.selector,
          selectorItalic: variantItalic == null ? void 0 : variantItalic.selector,
          selectorVariable: variantVariable == null ? void 0 : variantVariable.selector,
          selectorVariableItalic: variantVariableItalic == null ? void 0 : variantVariableItalic.selector,
          weight,
          style: style2,
          category: mapToKnownCategory2(webFont.category,),
          file: (_a = variant.file) == null ? void 0 : _a.replace('http://', 'https://',),
          variationAxes: variant.isVariable ? variationAxes : void 0,
          hasOpenTypeFeatures,
        };
        fontFamily.fonts.push(font,);
        fonts.push(font,);
      }
    }
    return fonts;
  }
  async getOpenTypeFeatures(family,) {
    const fontToOpenTypeFeatures = await loadFontToOpenTypeFeatures('google',/* Google */
    );
    const selector = _GoogleFontSource.createMetadataSelector(family,);
    return fontToOpenTypeFeatures[selector];
  }
};
function mapToKnownCategory2(category,) {
  const categoryMapping = {
    serif: 'serif',
    'sans-serif': 'sans-serif',
    display: 'display',
    handwriting: 'handwriting',
    monospace: 'monospace',
  };
  if (!category) return void 0;
  return categoryMapping[category];
}
function mapBy(array, keyFn,) {
  return array.reduce((acc, item,) => {
    acc[keyFn(item,)] = item;
    return acc;
  }, {},);
}
var import_fontfaceobserver = __toESM(require_fontfaceobserver_standalone(), 1,);
var FONT_LOADING_TIMEOUT = 5e3;
var MAX_RETRIES = 3;
var FontLoadingError = class extends Error {
  constructor(message,) {
    super(message,);
    this.name = 'FontLoadingError';
  }
};
var fontRequests = /* @__PURE__ */ new Map();
var fontReadyPromises = /* @__PURE__ */ new Map();
var loadFont = (data2, doc,) => loadFontWithRetries(data2, doc,);
async function loadFontWithRetries(data2, doc, attempt = 0,) {
  const {
    family,
    url,
    stretch,
    unicodeRange,
    isVariableFont: isVariableFont2,
  } = data2;
  const weight = isVariableFont2 ? data2.weight : data2.weight || 500;
  const style2 = data2.style || 'normal';
  const requestId = `${family}-${style2}-${weight}-${url}`;
  if (!fontRequests.has(requestId,) || attempt > 0) {
    const fontFace = new FontFace(family, `url(${url})`, {
      weight: isString(weight,) ? weight : weight == null ? void 0 : weight.toString(),
      style: style2,
      stretch,
      unicodeRange,
    },);
    const readyPromise = fontFace.load().then(() => {
      doc.fonts.add(fontFace,);
      return isFontReady(family, style2, weight,);
    },).catch((e) => {
      if (e.name !== 'NetworkError') {
        throw e;
      }
      if (attempt < MAX_RETRIES) {
        return loadFontWithRetries(data2, doc, attempt + 1,);
      }
      throw new FontLoadingError(`Font loading failed after ${attempt} retries due to network error: ${
        JSON.stringify({
          family,
          style: style2,
          weight,
          url,
          stretch,
          unicodeRange,
        },)
      }`,);
    },);
    fontRequests.set(requestId, readyPromise,);
  }
  await fontRequests.get(requestId,);
}
async function isFontReady(family, style2, weight,) {
  const readyPromiseId = `${family}-${style2}-${weight}`;
  if (!fontReadyPromises.has(readyPromiseId,)) {
    const observer2 = new import_fontfaceobserver.default(family, {
      style: style2,
      weight,
    },);
    const readyPromise = observer2.load(null, FONT_LOADING_TIMEOUT,);
    fontReadyPromises.set(readyPromiseId, readyPromise,);
  }
  try {
    await fontReadyPromises.get(readyPromiseId,);
  } catch (e) {
    throw new FontLoadingError(`Failed to check if font is ready (${FONT_LOADING_TIMEOUT}ms timeout exceeded): ${
      JSON.stringify({
        family,
        style: style2,
        weight,
      },)
    }`,);
  }
}
var framer_default = {
  'FR;Inter': [{
    tag: 'opsz',
    minValue: 14,
    maxValue: 32,
    defaultValue: 14,
    name: 'Optical size',
  }, {
    tag: 'wght',
    minValue: 100,
    maxValue: 900,
    defaultValue: 400,
    name: 'Weight',
  },],
};
function loadVariationAxes(source,) {
  try {
    if (source === 'framer') {
      if (!isValidVariationAxesData(framer_default,)) return void 0;
      return framer_default;
    } else {
      const axes = (async () => {
        switch (source) {
          case 'google': {
            return (await import('./framer-chunks/google-42BCYVR5-PDCHFNPY.js')).default;
          }
          case 'fontshare': {
            return (await import('./framer-chunks/fontshare-X6MCIXW5-FUMOBUA2.js')).default;
          }
          default:
            assertNever(source,);
        }
      })();
      if (!isValidVariationAxesData(axes,)) return void 0;
      return axes;
    }
  } catch (error) {
    console.error(error,);
    return void 0;
  }
}
function isValidVariationAxesData(data2,) {
  return isObject2(data2,) && Object.values(data2,).every(isValidVariationAxes,);
}
function isVariationAxis2(data2,) {
  return isObject2(data2,) && isString(data2.tag,);
}
function isValidVariationAxes(data2,) {
  return Array.isArray(data2,) && data2.every(isVariationAxis2,);
}
var FontStore = class {
  constructor() {
    __publicField(this, 'enabled', false,);
    __publicField(this, 'bySelector', /* @__PURE__ */ new Map(),);
    __publicField(this, 'loadedSelectors', /* @__PURE__ */ new Set(),);
    __publicField(this, 'getGoogleFontsListPromise',);
    __publicField(this, 'getFontshareFontsListPromise',);
    __publicField(this, 'getBuiltInFontsListPromise',);
    __publicField(
      this,
      'customFontsImportPromise',
      new Promise((resolve) => {
        this.resolveCustomFontsImportPromise = resolve;
      },),
    );
    __publicField(this, 'local',);
    __publicField(this, 'google',);
    __publicField(this, 'fontshare',);
    __publicField(this, 'builtIn',);
    __publicField(this, 'framer',);
    __publicField(this, 'custom',);
    this.local = new LocalFontSource();
    this.google = new GoogleFontSource();
    this.fontshare = new FontshareSource();
    this.framer = new FramerFontSource();
    this.custom = new CustomFontSource();
    this.builtIn = new BuiltInFontSource();
    this.bySelector = /* @__PURE__ */ new Map();
    this.importLocalFonts();
  }
  addFont(font,) {
    this.bySelector.set(font.selector, font,);
  }
  getAvailableFonts() {
    return Array.from(this.bySelector.values(),);
  }
  importLocalFonts() {
    for (const font of this.local.importFonts()) {
      this.addFont(font,);
      this.loadFont(font,);
    }
  }
  async importGoogleFonts() {
    if (!this.getGoogleFontsListPromise) {
      this.getGoogleFontsListPromise = Promise.resolve().then(async () => {
        const {
          staticFonts,
          variableFonts,
        } = await runtime.fetchGoogleFontsList();
        const axesData = await loadVariationAxes('google',/* Google */
        );
        for (const font of await this.google.importFonts(staticFonts, variableFonts, axesData,)) {
          this.addFont(font,);
        }
        return {
          staticFonts,
          variableFonts,
        };
      },);
    }
    return this.getGoogleFontsListPromise;
  }
  async importFontshareFonts() {
    if (!this.getFontshareFontsListPromise) {
      this.getFontshareFontsListPromise = runtime.fetchFontshareFontsList();
      const fontshareFonts = await this.getFontshareFontsListPromise;
      const axesData = await loadVariationAxes('fontshare',/* Fontshare */
      );
      for (const font of await this.fontshare.importFonts(fontshareFonts, axesData,)) {
        this.addFont(font,);
      }
    }
    return this.getFontshareFontsListPromise;
  }
  async importBuiltInFonts() {
    if (!this.getBuiltInFontsListPromise) {
      this.getBuiltInFontsListPromise = runtime.fetchBuiltInFontsList();
      const builtInFonts = await this.getBuiltInFontsListPromise;
      for (const font of await this.builtIn.importFonts(builtInFonts,)) {
        this.addFont(font,);
      }
    }
    return this.getBuiltInFontsListPromise;
  }
  importFramerFonts(fonts,) {
    const axesData = loadVariationAxes('framer',/* Framer */
    );
    this.framer.importFonts(fonts, axesData,).forEach((font) => {
      this.addFont(font,);
    },);
  }
  importCustomFonts(assets,) {
    this.bySelector.forEach((_, key7,) => {
      if (key7.startsWith(customFontSelectorPrefix,)) {
        this.bySelector.delete(key7,);
      }
    },);
    const importedFonts = this.custom.importFonts(assets,);
    for (const font of importedFonts) {
      this.addFont(font,);
    }
    if (importedFonts.length > 0) {
      this.resolveCustomFontsImportPromise();
    }
  }
  getFontFamily(info,) {
    const fontFamily = this[info.source].getFontFamilyByName(info.name,);
    return fontFamily;
  }
  getFontBySelector(selector, createFont = true,) {
    if (!selector) return void 0;
    if (selector.startsWith(customFontSelectorPrefix,)) {
      return this.custom.getFontBySelector(selector, createFont,);
    }
    return this.bySelector.get(selector,);
  }
  // Function called by draft to get font properties for a selector, before the (google) font is available in the store
  // It replaces a previous function that created Font instances and added them to the store
  // on the fly while rendering drafts, which caused issues (overriding real google font info with fake instances with partial data).
  // Ideally this should not happen, but that's a fix for another day
  getDraftPropertiesBySelector(selector,) {
    const font = this.getFontBySelector(selector,);
    if (font) {
      return {
        style: font.style,
        weight: font.weight,
        variant: font.variant,
        family: createFontFamilyName(font,),
        source: font.family.source,
        category: font.category,
      };
    }
    const googleLocator = this.google.parseSelector(selector,);
    if (googleLocator) {
      const fontVariant = GoogleFontSource.parseVariant(googleLocator.variant,);
      if (isSuccessfullyParsedFontVariant(fontVariant,)) {
        const family = googleLocator.isVariable ? createVariableFontFamilyName(googleLocator.name,) : googleLocator.name;
        return {
          style: fontVariant.style,
          weight: fontVariant.weight,
          variant: googleLocator.variant,
          family,
          source: 'google',
          category: void 0,
        };
      }
    }
    const fontshareLocator = this.fontshare.parseSelector(selector,);
    if (fontshareLocator) {
      const fontVariant = FontshareSource.parseVariant(fontshareLocator.variant,);
      if (isSuccessfullyParsedFontVariant(fontVariant,)) {
        const family = fontshareLocator.isVariable ? createVariableFontFamilyName(fontshareLocator.name,) : fontshareLocator.name;
        return {
          style: fontVariant.style,
          weight: fontVariant.weight,
          variant: fontshareLocator.variant,
          family,
          source: 'fontshare',
          category: void 0,
        };
      }
    }
    const builtInFontLocator = this.builtIn.parseSelector(selector,);
    if (builtInFontLocator) {
      const fontVariant = BuiltInFontSource.parseVariant(builtInFontLocator.variant,);
      if (isSuccessfullyParsedFontVariant(fontVariant,)) {
        const family = builtInFontLocator.isVariable ? createVariableFontFamilyName(builtInFontLocator.name,) : builtInFontLocator.name;
        return {
          style: fontVariant.style,
          weight: fontVariant.weight,
          variant: builtInFontLocator.variant,
          family,
          source: 'builtIn',
          category: void 0,
        };
      }
    }
    const framerFontDraftProperties = FramerFontSource.getDraftFontPropertiesBySelector(selector,);
    if (framerFontDraftProperties) {
      return framerFontDraftProperties;
    }
    return null;
  }
  isSelectorLoaded(selector,) {
    return this.loadedSelectors.has(selector,);
  }
  /**
   * Load a single font
   */
  async loadFont(font,) {
    if (this.isSelectorLoaded(font.selector,)) {
      return 0;
    }
    const source = font.family.source;
    const fontIsVariable = isVariableFont(font,);
    switch (source) {
      case 'local':
        this.loadedSelectors.add(font.selector,);
        return 1;
      case 'framer':
        if (!isTest()) {
          await isFontReady(font.family.name, font.style, font.weight,);
        }
        if (fontIsVariable) {
          if (!font.file) {
            return Promise.reject(`Unable to load font: ${font.selector}`,);
          }
          await loadFont({
            family: createFontFamilyName(font,),
            url: font.file,
            weight: font.weight,
            style: font.style,
            isVariableFont: fontIsVariable,
          }, document,);
        }
        this.loadedSelectors.add(font.selector,);
        return 1;
      case 'google':
      case 'fontshare':
      case 'builtIn':
      case 'custom':
        if (!font.file) {
          return Promise.reject(`Unable to load font: ${font.selector}`,);
        }
        await loadFont({
          family: createFontFamilyName(font,),
          url: font.file,
          weight: font.weight,
          style: font.style,
          isVariableFont: fontIsVariable,
        }, document,);
        this.loadedSelectors.add(font.selector,);
        return 1;
      default:
        assertNever(source,);
    }
  }
  async loadFontsFromSelectors(selectors,) {
    if (!this.enabled) return [];
    const importPromises = [];
    const shouldImportFontshareFonts = selectors.some((selector) => selector.startsWith(fontsharePrefix,));
    if (shouldImportFontshareFonts) {
      importPromises.push(
        this.importFontshareFonts().catch((error) => {
          warnOnce2('Failed to load Fontshare fonts:', error,);
        },),
      );
    }
    const shouldImportGoogleFonts = selectors.some((selector) => selector.startsWith(googleFontSelectorPrefix,));
    if (shouldImportGoogleFonts) {
      importPromises.push(
        this.importGoogleFonts().catch((error) => {
          warnOnce2('Failed to load Google fonts:', error,);
        },),
      );
    }
    const shouldImportBuiltInFonts = selectors.some((selector) => selector.startsWith(builtInFontSelectorPrefix,));
    if (shouldImportBuiltInFonts) {
      importPromises.push(
        this.importBuiltInFonts().catch((error) => {
          warnOnce2('Failed to load built-in fonts:', error,);
        },),
      );
    }
    const shouldImportCustomFonts = selectors.some((selector) => selector.startsWith(customFontSelectorPrefix,));
    if (shouldImportCustomFonts) {
      importPromises.push(this.customFontsImportPromise.catch((error) => {
        warnOnce2('Failed to load custom fonts:', error,);
      },),);
    }
    if (importPromises.length > 0) {
      await Promise.all(importPromises,);
    }
    const fonts = selectors.map((s) => this.bySelector.get(s,)).filter((f) => !!f);
    return Promise.allSettled(fonts.map((f) => this.loadFont(f,)),);
  }
  async loadFonts(fontSelectors,) {
    const results = await this.loadFontsFromSelectors(fontSelectors,);
    const newlyLoadedFontCount = results.filter((result) => result.status === 'fulfilled' && result.value === 1/* Loaded */
    ).length;
    return {
      newlyLoadedFontCount,
    };
  }
  // Deprecated methods that are kept for backwards compatibility with any compiled code that might still be using them
  /**
   * @deprecated This method’s API is confusing as 1) it works for all fonts,
   * not just missing ones, 2) it supports both async/await and a callback,
   * but the callback is called only if *all* fonts have been loaded. Use
   * `loadFonts` instead.
   */
  async loadMissingFonts(fontSelectors, fontsLoadedCallback,) {
    const selectors = fontSelectors.filter((selector) => {
      return !fontStore.isSelectorLoaded(selector,);
    },);
    if (selectors.length === 0) return;
    await fontStore.loadWebFontsFromSelectors(selectors,);
    const isEachFontLoaded = selectors.every((selector) => {
      return fontStore.isSelectorLoaded(selector,);
    },);
    if (isEachFontLoaded && fontsLoadedCallback) fontsLoadedCallback();
  }
  /**
   * @deprecated This method is misleading as it works with all fonts, not
   * just web fonts. Use `loadFonts` instead. (In Framer, “web fonts” has a
   * specific meaning: it refers to Google/Fontshare fonts and exludes custom
   * and local fonts. See e.g. `WebFontStore` and the “Web”/“Custom” toggle in
   * the font picker in the UI. More context: https://github.com/framer/FramerStudio/pull/15778#discussion_r1395120760)
   */
  async loadWebFontsFromSelectors(selectors,) {
    return this.loadFontsFromSelectors(selectors,);
  }
  // defaultFont doesn’t seem to be used anywhere in our code (except tests),
  // but keeping it for backwards compatibility with any compiled code.
  /** @deprecated This will be removed in the future. Don’t use it. */
  get defaultFont() {
    const defaultFont = this.getFontBySelector('Inter',);
    assert(defaultFont, 'Can\u2019t find Inter font',);
    return defaultFont;
  }
};
var fontStore = /* @__PURE__ */ new FontStore();
function CustomProperties({
  children,
  customProperties,
},) {
  return /* @__PURE__ */ jsx3('div', {
    style: customProperties,
    children,
  },);
}
var DeprecatedComponentContainer = /* @__PURE__ */ (() => {
  var _a;
  return _a = class extends Layer {
    constructor() {
      super(...arguments,);
      __publicField(this, 'state', {},);
      __publicField(this, 'setElement', (element) => {
        if (this.props.innerRef) {
          this.props.innerRef.current = element;
        }
        this.setLayerElement(element,);
      },);
    }
    componentDidCatch(error, info,) {
      var _a2;
      let stack = (_a2 = info.componentStack) == null ? void 0 : _a2.split('\n',).filter((line) => line.length !== 0);
      let currentIndex = 0;
      if (stack) {
        for (const line of stack) {
          if (line.startsWith(`    in ${this.constructor.name}`,)) {
            break;
          }
          currentIndex++;
        }
        stack = stack.slice(0, currentIndex,);
      }
      this.setState({
        lastError: {
          children: this.props.children,
          name: error.name,
          message: error.message,
          componentStack: stack,
        },
      },);
    }
    renderErrorPlaceholder(error,) {
      const {
        RenderPlaceholder,
      } = runtime;
      return /* @__PURE__ */ jsx3(FrameWithMotion, {
        ...this.props,
        background: null,
        children: /* @__PURE__ */ jsx3(RenderPlaceholder, {
          error,
        },),
      },);
    }
    render() {
      var _a2, _b;
      countNodeRender();
      let {
        children,
      } = this.props;
      const {
        componentIdentifier,
      } = this.props;
      const {
        lastError: error,
      } = this.state;
      const noChildren = !children || Array.isArray(children,) && children.filter((c) => c).length === 0;
      if (noChildren) {
        const errorComponent = runtime.componentLoader.errorForIdentifier(componentIdentifier,);
        if (errorComponent) {
          const title = `Error in ${errorComponent.file}`;
          const message = errorComponent.error;
          return this.renderErrorPlaceholder({
            title,
            message,
          },);
        }
      }
      if (error && error.children === children) {
        const component = runtime.componentLoader.componentForIdentifier(componentIdentifier,);
        const file = component ? component.file : '???';
        const title = `Error in ${file}`;
        const message = error.message;
        return this.renderErrorPlaceholder({
          title,
          message,
        },);
      }

      (_b = (_a2 = asRecord(safeWindow,))['__checkComponentBudget__']) == null ? void 0 : _b.call(_a2,);
      let frameProps = this.props;
      if (RenderTarget.current() !== RenderTarget.canvas) {
        const {
          left,
          right,
          top,
          bottom,
          center,
          centerX,
          centerY,
          aspectRatio: aspectRatio2,
          parentSize,
          width,
          height,
          rotation,
          opacity: _opacity,
          visible,
          _constraints,
          _initialStyle,
          name,
          positionSticky,
          positionStickyTop,
          positionStickyRight,
          positionStickyBottom,
          positionStickyLeft,
          // Remove the children and the componentIdentifier from the props passed into the component
          componentIdentifier: originalComponentIdentifier,
          children: originalChildren,
          style: style2,
          duplicatedFrom,
          widthType,
          heightType,
          ...childProps
        } = frameProps;
        children = React4.Children.map(originalChildren, (child) => {
          if (!isReactChild(child,) || !isReactElement(child,)) {
            return child;
          }
          if (!isPageOrScroll(originalComponentIdentifier,)) {
            return /* @__PURE__ */ jsx3(LayoutGroup, {
              inherit: false,
              id: this.props.__layoutId,
              children: /* @__PURE__ */ jsx3(AutomaticLayoutIds, {
                enabled: false,
                children: React4.cloneElement(child, childProps,),
              },),
            },);
          }
          return React4.cloneElement(child, childProps,);
        },);
        frameProps = {
          style: style2,
          _constraints,
          _initialStyle,
          left,
          right,
          top,
          bottom,
          center,
          centerX,
          centerY,
          aspectRatio: aspectRatio2,
          parentSize,
          width,
          height,
          rotation,
          visible,
          name,
          duplicatedFrom,
          id: frameProps.id,
          layoutId: this.props.__layoutId,
          widthType,
          heightType,
          positionSticky,
          positionStickyTop,
          positionStickyRight,
          positionStickyBottom,
          positionStickyLeft,
        };
      }
      return (
        /* The background should come before the frameProps. It looks like there never should be a background in frameProps,
         * but published design components can contain an old version of the presentation tree that expects the background
         * that is passed to be rendered here
         * See the stackBackgroundTest.tsx integration test for an example of such a case
         */
        /* @__PURE__ */
        jsx3(ComponentContainerContext.Provider, {
          value: true,
          children: /* @__PURE__ */ jsx3(FrameWithMotion, {
            'data-framer-component-container': true,
            background: null,
            overflow: 'visible',
            ref: this.setElement,
            ...frameProps,
            children,
          },),
        },)
      );
    }
  },
    __publicField(_a, 'supportsConstraints', true,),
    __publicField(_a, 'defaultComponentContainerProps', {
      style: {},
      visible: true,
      componentIdentifier: '',
    },),
    __publicField(_a, 'defaultProps', {
      ...Layer.defaultProps,
      ..._a.defaultComponentContainerProps,
    },),
    __publicField(_a, 'contextType', ComponentContainerContext,),
    _a;
})();
function isPageOrScroll(identifier,) {
  if (!identifier) return false;
  if (identifier === 'framer/Page') return true;
  if (identifier === 'framer/Scroll') return true;
  return false;
}
var passwordManagerIgnoreDataProps = {
  // 1Password
  'data-1p-ignore': true,
  // LastPass
  'data-lpignore': true,
  // Dashlane
  // https://support.dashlane.com/hc/en-us/articles/4420122792594-Optimize-your-web-forms-for-Dashlane-Autofill
  'data-form-type': 'other',
  // autocomplete="off" is a generic property that disables autofilling. It
  // is not always respected by some browsers or password managers.
  autocomplete: 'off',
};
var PlainTextInput = /* @__PURE__ */ forwardRef(function FormPlainTextInput(props, ref,) {
  const {
    autoFocus,
    className: className2,
    inputName,
    max,
    min,
    placeholder,
    required,
    step: step2,
    style: style2,
    type,
    maxLength,
    // We use a defaultValue instead of a value so that the input remains
    // uncontrolled by React. This is important because we want the user
    // to be able to provide an initial value in the property panel, and for
    // the value to be editable by the user in the preview.
    defaultValue,
    autofillEnabled,
    onChange,
    onBlur,
    onInvalid,
    onFocus,
    onValid,
    ...rest
  } = props;
  const [hasValue, setHasValue,] = useState(!!defaultValue,);
  const [prevDefaultValue, setPrevDefaultValue,] = useState();
  if (defaultValue !== prevDefaultValue) {
    setHasValue(!!defaultValue,);
    setPrevDefaultValue(defaultValue,);
  }
  const handleChange = useCallback(async (e) => {
    await yieldToMain({
      continueAfter: 'paint',
    },);
    const newValue = e.target.value;
    onChange == null ? void 0 : onChange(e,);
    startTransition2(() => setHasValue(!!newValue,));
  }, [onChange,],);
  const eventHandlers = useCustomValidity(onValid, onInvalid, handleChange, onBlur, onFocus,);
  if (type === 'hidden') {
    return /* @__PURE__ */ jsx3(motion.input, {
      type: 'hidden',
      name: inputName,
      defaultValue,
    },);
  }
  const dataProps = autofillEnabled === false ? passwordManagerIgnoreDataProps : void 0;
  return /* @__PURE__ */ jsx3(motion.div, {
    ref,
    style: style2,
    className: cx(textInputWrapperClassName, inputWrapperClassName, className2,),
    ...rest,
    children: type === 'textarea'
      ? /* @__PURE__ */ jsx3(motion.textarea, {
        ...dataProps,
        ...eventHandlers,
        required,
        autoFocus,
        name: inputName,
        placeholder,
        className: inputClassName,
        defaultValue,
        maxLength,
      }, defaultValue,)
      : /* @__PURE__ */ jsx3(motion.input, {
        ...dataProps,
        ...eventHandlers,
        type,
        required,
        autoFocus,
        name: inputName,
        placeholder,
        className: cx(inputClassName, !hasValue && emptyValueClassName,),
        defaultValue,
        min,
        max,
        step: step2,
        maxLength,
      }, defaultValue,),
  },);
},);
var iconSize2 = 16;
var textInputWrapperClassName = 'framer-form-text-input';
var defaultTextareaResizerIcon =
  `<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14"><path d="m1.5 8 7-7M9 5.5l-3 3" stroke="%23999" stroke-width="1.5" stroke-linecap="round"></path></svg>`;
var defaultDateIconMaskImage =
  '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"><path fill="rgb(153, 153, 153)" d="M3 5a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v2H3Z" opacity=".3"/><path fill="transparent" stroke="rgb(153, 153, 153)" stroke-width="1.5" d="M3.25 5.25a2 2 0 0 1 2-2h5.5a2 2 0 0 1 2 2v5.5a2 2 0 0 1-2 2h-5.5a2 2 0 0 1-2-2ZM3 6.75h9.5"/></svg>';
var defaultTimeIconMaskImage =
  '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"><path fill="transparent" stroke="rgb(153, 153, 153)" stroke-width="1.5" d="M2.5 8a5.5 5.5 0 1 1 11 0 5.5 5.5 0 1 1-11 0Z"/><path fill="transparent" stroke="rgb(153, 153, 153)" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M7.75 8.25v-3m0 3h2"/></svg>';
var styles = /* @__PURE__ */ (() => [
  ...sharedInputCSS,
  ...inputBorderCSS,
  ...inputWrapperCSS,
  css2(`.${inputWrapperClassName}`, {
    boxShadow: css2.variable('--framer-input-box-shadow',/* BoxShadow */
    ),
    borderTopLeftRadius: css2.variable('--framer-input-border-radius-top-left',/* BorderRadiusTopLeft */
    ),
    borderTopRightRadius: css2.variable('--framer-input-border-radius-top-right',/* BorderRadiusTopRight */
    ),
    borderBottomRightRadius: css2.variable('--framer-input-border-radius-bottom-right',/* BorderRadiusBottomRight */
    ),
    borderBottomLeftRadius: css2.variable('--framer-input-border-radius-bottom-left',/* BorderRadiusBottomLeft */
    ),
    background: css2.variable('--framer-input-background',/* Background */
    ),
    transition: css2.variable('--framer-input-focused-transition',/* FocusedTransition */
    ),
    transitionProperty: 'background, box-shadow',
  },),
  css2(`.${textInputWrapperClassName} .${inputClassName}::placeholder`, {
    color: css2.variable('--framer-input-placeholder-color',/* PlaceholderColor */
    ),
  },),
  css2(`.${textInputWrapperClassName} .${inputClassName}[type="date"], .${textInputWrapperClassName} .${inputClassName}[type="time"]`, {
    '-webkit-appearance': 'none',
    appearance: 'none',
  },),
  // iOS only fix for centered date & time inputs: https://github.com/tailwindlabs/tailwindcss-forms/pull/144
  css2(`.${textInputWrapperClassName} .${inputClassName}::-webkit-date-and-time-value`, {
    textAlign: 'start',
  },),
  css2(`.${textInputWrapperClassName} textarea`, {
    display: 'flex',
    resize: css2.variable('--framer-textarea-resize',/* Resize */
    ),
    overflowY: 'auto',
    minHeight: 'inherit',
    maxHeight: 'inherit',
    whiteSpace: 'break-spaces',
  },),
  // This targets the resize handle in WebKit browsers. Unfortunately, it is not
  // possible in CSS to target the resize handle in Firefox, so FF will always
  // show the native resize handle.
  css2(`.${textInputWrapperClassName} textarea::-webkit-resizer`, {
    background: `no-repeat ${encodeSVGForCSS(defaultTextareaResizerIcon,)}`,
  },),
  css2(`.${textInputWrapperClassName} textarea::-webkit-scrollbar`, {
    cursor: 'pointer',
    background: 'transparent',
  },),
  css2(`.${textInputWrapperClassName} textarea::-webkit-scrollbar-thumb:window-inactive`, {
    opacity: 0,
  },),
  css2(`.${textInputWrapperClassName} textarea::-webkit-scrollbar-corner`, {
    background: 'none',
    backgroundColor: 'transparent',
    outline: 'none',
  },),
  css2(`.${textInputWrapperClassName} .${inputClassName}::-webkit-datetime-edit`, {
    // Prevent browsers from improvising the date/time placeholder height.
    height: css2.variable('--framer-input-font-line-height',/* FontLineHeight */
    ),
  },),
  css2(`.${textInputWrapperClassName} .${inputClassName}.${emptyValueClassName}::-webkit-datetime-edit`, {
    color: css2.variable('--framer-input-placeholder-color',/* PlaceholderColor */
    ),
    // This tells safari to use the color for the shadow dom elements.
    '-webkit-text-fill-color': css2.variable('--framer-input-placeholder-color',/* PlaceholderColor */
    ),
    overflow: 'visible',
  },),
  css2(
    `.${textInputWrapperClassName} .${inputClassName}[type="date"]::before, .${textInputWrapperClassName} .${inputClassName}[type="time"]::before`,
    {
      ...inputIconCSSDeclaration,
      paddingLeft: `${iconSpacing}px`,
      maskPosition: `${iconSpacing}px center`,
      backgroundPosition: `${iconSpacing}px center`,
    },
  ),
  css2(`.${textInputWrapperClassName} .${inputClassName}[type="date"]::before`, {
    maskImage: css2.variable('--framer-input-icon-mask-image', encodeSVGForCSS(defaultDateIconMaskImage,),),
    backgroundImage: css2.variable('--framer-input-icon-image',/* IconBackgroundImage */
    ),
  },),
  css2(`.${textInputWrapperClassName} .${inputClassName}[type="time"]::before`, {
    maskImage: css2.variable('--framer-input-icon-mask-image', encodeSVGForCSS(defaultTimeIconMaskImage,),),
    backgroundImage: css2.variable('--framer-input-icon-image',/* IconBackgroundImage */
    ),
  },),
  // Hide the native date picker icon, but still align it with the custom icon, allowing user to click it to show the
  // date/time picker.
  css2(`.${textInputWrapperClassName} .${inputClassName}::-webkit-calendar-picker-indicator`, {
    opacity: 0,
    position: 'absolute',
    right: 0,
    top: 0,
    bottom: 0,
    padding: css2.variable('--framer-input-padding',/* Padding */
    ),
    paddingTop: 0,
    paddingBottom: 0,
    width: `${iconSize2}px`,
    // Makes sure the icon hit target covers the entire height of the input.
    height: '100%',
  },),
  css2(`.${textInputWrapperClassName}:focus-within, .${textInputWrapperClassName}.${forcedFocusClassName}`, {
    boxShadow: css2.variable('--framer-input-focused-box-shadow', '--framer-input-box-shadow',/* BoxShadow */
    ),
    background: css2.variable('--framer-input-focused-background', '--framer-input-background',/* Background */
    ),
  },),
  css2(`.${textInputWrapperClassName}:focus-within::after, .${textInputWrapperClassName}.${forcedFocusClassName}::after`, {
    borderColor: css2.variable('--framer-input-focused-border-color', '--framer-input-border-color',/* BorderColor */
    ),
    borderStyle: css2.variable('--framer-input-focused-border-style', '--framer-input-border-style',/* BorderStyle */
    ),
    borderWidth: css2.variable('--framer-input-focused-border-width', inputBorderAllSides,),
  },),
])();
var FormPlainTextInput2 = /* @__PURE__ */ withCSS(PlainTextInput, styles, 'framer-lib-form-plain-text-input',);
var className = 'framer-form-boolean-input';
var BooleanInput = /* @__PURE__ */ React4.forwardRef(function FormPlainTextInput3(props, ref,) {
  const {
    inputName,
    type = 'checkbox',
    defaultChecked,
    onValid,
    ...rest
  } = props;
  const isCanvas = useIsOnFramerCanvas();
  const attributes = isCanvas
    ? {
      checked: defaultChecked,
    }
    : {
      defaultChecked,
    };
  const eventHandlers = useCustomValidity(onValid, props.onInvalid, props.onChange, props.onBlur, props.onFocus,);
  return /* @__PURE__ */ jsx3(motion.input, {
    ...rest,
    ...attributes,
    ...eventHandlers,
    readOnly: isCanvas,
    ref,
    type,
    name: inputName,
    className: cx(className, props.className,),
  },);
},);
var defaultCheckedIcon =
  'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"><path d="M 4 8 L 6.5 10.5 L 11.5 5.5" fill="transparent" stroke-width="2" stroke="rgb(255, 255, 255)" stroke-linecap="round" stroke-linejoin="round"></path></svg>';
var borderRadius =
  `var(${'--framer-input-border-radius-top-left'}) var(${'--framer-input-border-radius-top-right'}) var(${'--framer-input-border-radius-bottom-right'}) var(${'--framer-input-border-radius-bottom-left'})`;
var styles2 = /* @__PURE__ */ (() => [
  css2(`.${className}`, {
    '-webkit-appearance': 'none',
    // background-color: #fff; fixes a bug on iOS where the checkbox shows
    // through the appearance: none;
    alignItems: 'center',
    appearance: 'none',
    backgroundColor: '#fff',
    background: '--framer-input-background',
    borderRadius,
    boxShadow: '--framer-input-box-shadow',
    display: 'flex',
    justifyContent: 'center',
    margin: 0,
    overflow: 'hidden',
    position: 'relative',
    transition: '--framer-input-boolean-checked-transition',
    transitionProperty: 'box-shadow, background',
  },),
  // The after element styles the border of the checkbox to conform to
  // framer's inset border model.
  css2(`.${className}::after`, {
    background: 'transparent',
    borderColor: css2.variable('--framer-input-border-color', 'transparent',),
    borderRadius,
    borderStyle: '--framer-input-border-style',
    borderWidth: inputBorderAllSides,
    boxSizing: 'border-box',
    content: '',
    display: 'block',
    inset: 0,
    position: 'absolute',
    transition: '--framer-input-boolean-checked-transition',
    transitionProperty: 'border-color, border-width, border-style',
  },),
  // The before element is used to display the check mark icon. It is
  // faded in when the input is checked.
  css2(`.${className}::before`, {
    ...inputIconCSSDeclaration,
    backgroundPosition: 'center',
    backgroundSize: 'contain',
    maskPosition: 'center',
    maskSize: 'contain',
    height: '100%',
    opacity: 0,
    transition: '--framer-input-boolean-checked-transition',
    transitionProperty: 'opacity',
    width: '100%',
  },),
  // The BooleanInput component shows an svg check mark icon whenever an
  // image url isn't provided. That's not an intuitive system for radios
  // however, where we never want to show the default check mark.
  css2(`.${className}[type="checkbox"]::before`, {
    backgroundImage: css2.variable('--framer-input-icon-image',/* IconBackgroundImage */
    ),
    maskImage: css2.variable('--framer-input-icon-mask-image', `url('${defaultCheckedIcon}')`,),
  },),
  css2(`.${className}[type="radio"]::before`, {
    backgroundImage: css2.variable('--framer-input-icon-image',/* IconBackgroundImage */
    ),
    maskImage: css2.variable('--framer-input-icon-mask-image',/* IconMaskImage */
    ),
  },),
  css2(`.${className}:checked, .${className}.${forcedCheckedClassName}`, {
    // When not set, the styles when checked shouldn't clear the default
    // styles.
    backgroundColor: css2.variable('--framer-input-boolean-checked-background', '--framer-input-background',/* Background */
    ),
    boxShadow: css2.variable('--framer-input-boolean-checked-box-shadow', '--framer-input-box-shadow',/* BoxShadow */
    ),
  },),
  css2(`.${className}:checked::before, .${className}.${forcedCheckedClassName}::before`, {
    opacity: 1,
  },),
  css2(`.${className}:checked::after, .${className}.${forcedCheckedClassName}::after`, {
    // When not set, the styles when checked shouldn't clear the default
    // styles.
    borderColor: css2.variable('--framer-input-boolean-checked-border-color', '--framer-input-border-color', 'transparent',),
    borderStyle: css2.variable('--framer-input-boolean-checked-border-style', '--framer-input-border-style', 'solid',),
    borderWidth: css2.variable('--framer-input-boolean-checked-border-width', inputBorderAllSides,),
  },),
  css2(`.${className}:focus, .${className}.${forcedFocusClassName}`, {
    backgroundColor: css2.variable('--framer-input-focused-background', '--framer-input-background',/* Background */
    ),
    boxShadow: css2.variable('--framer-input-focused-box-shadow', '--framer-input-box-shadow',/* BoxShadow */
    ),
  },),
  css2(`.${className}:focus-visible`, {
    outline: 'none',
  },),
  css2(`.${className}:focus::after, .${className}.${forcedFocusClassName}::after`, {
    // When not set, the styles when focused shouldn't clear the checked
    // styles.
    borderColor: css2.variable('--framer-input-focused-border-color', '--framer-input-border-color', 'transparent',),
    borderStyle: css2.variable('--framer-input-focused-border-style', '--framer-input-border-style', 'solid',),
    borderWidth: css2.variable('--framer-input-focused-border-width', inputBorderAllSides,),
  },),
  css2(`.${className}:focus:checked`, {
    backgroundColor: css2.variable(
      '--framer-input-focused-background',
      '--framer-input-boolean-checked-background',
      '--framer-input-background',
      /* Background */
    ),
    boxShadow: css2.variable(
      '--framer-input-focused-box-shadow',
      '--framer-input-boolean-checked-box-shadow',
      '--framer-input-box-shadow',
      /* BoxShadow */
    ),
  },),
  css2(`.${className}:focus:checked::after`, {
    borderStyle: css2.variable(
      '--framer-input-focused-border-style',
      '--framer-input-boolean-checked-border-style',
      '--framer-input-border-style',
      'solid',
    ),
    borderWidth: css2.variable('--framer-input-focused-border-width', '--framer-input-boolean-checked-border-width', inputBorderAllSides,),
  },),
])();
var FormBooleanInput = /* @__PURE__ */ withCSS(BooleanInput, styles2, 'framer-lib-form-boolean-input',);
var Select = /* @__PURE__ */ React4.forwardRef(function Select2(props, measureRef,) {
  const {
    autoFocus,
    className: className2,
    inputName,
    required,
    hidden,
    defaultValue,
    selectOptions,
    style: style2,
    onValid,
    onChange,
    onBlur,
    onInvalid,
    onFocus,
    ...rest
  } = props;
  const eventHandlers = useCustomValidity(onValid, onInvalid, onChange, onBlur, onFocus,);
  const key7 = Array.isArray(defaultValue,) ? defaultValue[0] : defaultValue;
  if (hidden) {
    return /* @__PURE__ */ jsx3(motion.input, {
      type: 'hidden',
      name: inputName,
      defaultValue,
    },);
  }
  return /* @__PURE__ */ jsx3(motion.div, {
    ref: measureRef,
    style: style2,
    className: cx(inputWrapperClassName, selectWrapperClassName, className2,),
    ...rest,
    children: /* @__PURE__ */ jsx3(motion.select, {
      name: inputName,
      autoFocus,
      required,
      className: inputClassName,
      defaultValue,
      ...eventHandlers,
      children: selectOptions == null ? void 0 : selectOptions.map((option, index,) => {
        switch (option.type) {
          case 'divider':
            return /* @__PURE__ */ jsx3('hr', {}, index,);
          case 'option':
            return (
              // biome-ignore lint/suspicious/noArrayIndexKey: Values can be duplicated, so we could only use UUIDs here (but that isn't really better)
              /* @__PURE__ */
              jsx3('option', {
                value: option.value ?? option.title,
                disabled: option.disabled,
                children: option.title ?? option.value,
              }, index,)
            );
        }
      },),
    }, key7,),
  },);
},);
var selectWrapperClassName = 'framer-form-select-wrapper';
var selectArrowSize = 16;
var defaultSelectCaretMaskImage =
  /* @__PURE__ */ (() =>
    `data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="${selectArrowSize}" height="${selectArrowSize}"><path d="M 3.5 6 L 8 10.5 L 12.5 6" fill="transparent" stroke-width="1.5" stroke="rgb(153, 153, 153)" stroke-linecap="round" stroke-linejoin="round"></path></svg>`)();
var styles3 = /* @__PURE__ */ (() => [
  ...sharedInputCSS,
  ...inputBorderCSS,
  ...inputWrapperCSS,
  css2(`.${selectWrapperClassName}`, {
    // First we use the complete padding string, which may be any valid
    // padding string (10px, 10px 10px, 10px 10px 10px, or 10px 10px
    // 10px 10px), and use it to set only the right padding. This pushes
    // the actual select away from the arrow by 1x.
    padding: css2.variable('--framer-input-padding',/* Padding */
    ),
    paddingTop: 0,
    paddingBottom: 0,
    paddingLeft: 0,
    background: css2.variable('--framer-input-background',/* Background */
    ),
    borderTopLeftRadius: css2.variable('--framer-input-border-radius-top-left',/* BorderRadiusTopLeft */
    ),
    borderTopRightRadius: css2.variable('--framer-input-border-radius-top-right',/* BorderRadiusTopRight */
    ),
    borderBottomRightRadius: css2.variable('--framer-input-border-radius-bottom-right',/* BorderRadiusBottomRight */
    ),
    borderBottomLeftRadius: css2.variable('--framer-input-border-radius-bottom-left',/* BorderRadiusBottomLeft */
    ),
    boxShadow: css2.variable('--framer-input-box-shadow',/* BoxShadow */
    ),
    transition: css2.variable('--framer-input-focused-transition',/* FocusedTransition */
    ),
    transitionProperty: 'background, box-shadow',
  },),
  css2(`.${selectWrapperClassName} select`, {
    appearance: 'none',
    '-webkit-appearance': 'none',
    // Then we use the complete padding string again as the margin for
    // the select. This moves the select 2x the padding right away from
    // the arrow.
    padding: css2.variable('--framer-input-padding',/* Padding */
    ),
    // Overwrite the values inherited from .${inputClassName}. On a
    // select, these values are on the wrapper.
    background: 'transparent',
  },),
  css2(`.${selectWrapperClassName}::before`, {
    ...inputIconCSSDeclaration,
    paddingLeft: `${iconSpacing}px`,
    backgroundPosition: `${iconSpacing}px center`,
    maskPosition: `${iconSpacing}px center`,
    backgroundImage: css2.variable('--framer-input-icon-image',/* IconBackgroundImage */
    ),
    maskImage: css2.variable('--framer-input-icon-mask-image', `url('${defaultSelectCaretMaskImage}')`,),
  },),
  css2(`.${selectWrapperClassName} select:required:invalid`, {
    color: css2.variable('--framer-input-invalid-text-color',/* InvalidTextColor */
    ),
  },),
  css2(`.${selectWrapperClassName}:focus-within, .${selectWrapperClassName}.${forcedFocusClassName}`, {
    background: css2.variable('--framer-input-focused-background', '--framer-input-background',/* Background */
    ),
    boxShadow: css2.variable('--framer-input-focused-box-shadow', '--framer-input-box-shadow',/* BoxShadow */
    ),
  },),
  css2(`.${selectWrapperClassName}:focus-within::after, .${selectWrapperClassName}.${forcedFocusClassName}::after`, {
    borderColor: css2.variable('--framer-input-focused-border-color', '--framer-input-border-color',/* BorderColor */
    ),
    borderStyle: css2.variable('--framer-input-focused-border-style', '--framer-input-border-style',/* BorderStyle */
    ),
    borderWidth: css2.variable('--framer-input-focused-border-width', inputBorderAllSides,),
  },),
  // Enforcing a color on the native select options. On windows, browsers select options
  // inherit some style properties like color but not others so they might end up in a weird
  // state in which we can't read the options until we hover.
  // These are ignored on mac
  css2(`.${selectWrapperClassName} select option`, {
    color: '#000',
  },),
  css2(`.${selectWrapperClassName} select option:disabled`, {
    color: 'rgba(0, 0, 0, 0.4)',
  },),
])();
var FormSelect = /* @__PURE__ */ withCSS(Select, styles3, 'framer-lib-form-select',);
var Image2 = /* @__PURE__ */ React4.forwardRef(function Image3(props, ref,) {
  const {
    background,
    children,
    alt,
    draggable,
    style: styleFromProps,
    ...rest
  } = props;
  const style2 = {
    ...styleFromProps,
  };
  if (background) {
    delete style2.background;
  }
  const MotionComponent = htmlElementAsMotionComponent(props.as,);
  return /* @__PURE__ */ jsxs(MotionComponent, {
    ...rest,
    style: style2,
    ref,
    children: [
      background && /* @__PURE__ */ jsx3(BackgroundImageComponent, {
        image: background,
        alt,
        draggable,
      },),
      children,
    ],
  },);
},);
var nonSlugCharactersRegExp = /[^\p{Letter}\p{Number}()]+/gu;
var trimSlugRegExp = /^-+|-+$/gu;
function slugify(value,) {
  return value.toLowerCase().replace(nonSlugCharactersRegExp, '-',).replace(trimSlugRegExp, '',);
}
var frameFromElement = (element) => {
  const frame2 = Rect.fromRect(element.getBoundingClientRect(),);
  frame2.x = frame2.x + safeWindow.scrollX;
  frame2.y = frame2.y + safeWindow.scrollY;
  return frame2;
};
var frameFromElements = (elements) => {
  return Rect.merge(...elements.map(frameFromElement,),);
};
var convertToPageFrame = (frame2, element,) => {
  const point2 = convertToPagePoint(frame2, element,);
  return {
    x: point2.x,
    y: point2.y,
    width: frame2.width,
    height: frame2.height,
  };
};
var convertFromPageFrame = (frame2, element,) => {
  const point2 = convertFromPagePoint(frame2, element,);
  return {
    x: point2.x,
    y: point2.y,
    width: frame2.width,
    height: frame2.height,
  };
};
var getPageFrame = (element) => {
  const rect = element.getBoundingClientRect();
  return {
    x: rect.left + safeWindow.scrollX,
    y: rect.top + safeWindow.scrollY,
    width: rect.width,
    height: rect.height,
  };
};
var fromEventForPage = (event) => {
  return {
    x: event.pageX,
    y: event.pageY,
  };
};
var fromEventForClient = (event) => {
  return {
    x: event.clientX,
    y: event.clientY,
  };
};
var convertToPagePoint = (point2, element,) => {
  const frame2 = getPageFrame(element,);
  return {
    x: point2.x + frame2.x,
    y: point2.y + frame2.y,
  };
};
var convertFromPagePoint = (point2, element,) => {
  const frame2 = getPageFrame(element,);
  return {
    x: point2.x - frame2.x,
    y: point2.y - frame2.y,
  };
};
var dispatchKeyDownEvent = (keyCode, options = {},) => {
  const keyboardEvent = new KeyboardEvent('keydown', {
    bubbles: true,
    keyCode,
    ...options,
  },);
  const activeElement = document.activeElement;
  if (activeElement) {
    activeElement.dispatchEvent(keyboardEvent,);
  }
};
var DOM = {
  frameFromElement,
  frameFromElements,
  convertToPageFrame,
  convertFromPageFrame,
  getPageFrame,
  fromEventForPage,
  fromEventForClient,
  convertToPagePoint,
  convertFromPagePoint,
};
var parser;
var supportsNativeParseHTML = /* @__PURE__ */ (() =>
  // Firefox has rare-random issues with the native parser: https://framer-team.slack.com/archives/C01B14R6E22/p1724159313153969
  !isFirefox() && typeof Document !== 'undefined' && typeof Document.parseHTMLUnsafe === 'function')();
function domParser(html, type,) {
  if (supportsNativeParseHTML && !type) return Document.parseHTMLUnsafe(html,);
  parser ??= new DOMParser();
  return parser.parseFromString(html, type ?? 'text/html',);
}
function escapeHTML(value,) {
  return value.replaceAll('&', '&amp;',).replaceAll('<', '&lt;',).replaceAll('>', '&gt;',).replaceAll('"', '&quot;',).replaceAll(
    '\'',
    '&#39;',
  );
}
var regex =
  /(<([a-z]+)(?:\s+(?!href[\s=])[^=\s]+=(?:'[^']*'|"[^"]*"))*)(?:(\s+href\s*=)(?:'([^']*)'|"([^"]*)"))?((?:\s+[^=\s]+=(?:'[^']*'|"[^"]*"))*>)/gi;
function replaceFramerPageLinks(rawHTML, getRoute, currentRoute, implicitPathVariables,) {
  return rawHTML.replace(regex, (original, pre1, tag, pre2, value1, value2, post,) => {
    var _a, _b;
    if (tag.toLowerCase() !== 'a') return original;
    const href = value1 || value2;
    const pageLink = parseFramerPageLink(href.replace(/&amp;/gu, '&',),);
    if (!pageLink || !pageLink.target) return original;
    const targetRoute = getRoute(pageLink.target,);
    if (!isRoute(targetRoute,) || !isRoute(currentRoute,)) return original;
    const targetPath = targetRoute.path;
    const currentPath = currentRoute.path;
    if (!targetPath || !currentPath) return original;
    let attributes = ` ${'data-framer-page-link-target'}="${pageLink.target}"`;
    const elementId = getRouteElementId(targetRoute, pageLink.element ?? void 0,);
    if (elementId) {
      attributes += ` ${'data-framer-page-link-element'}="${pageLink.element}"`;
    }
    const link = linkFromFramerPageLink(href,);
    if (!link || isString(link,)) return original;
    if (linkMatchesRoute(currentRoute, link, implicitPathVariables,)) {
      attributes += ` ${'data-framer-page-link-current'}`;
    }
    let relativePath = targetPath;
    const pathVariables = Object.assign({}, implicitPathVariables, (_a = pageLink.collectionItem) == null ? void 0 : _a.pathVariables,);
    if (Object.keys(pathVariables,).length > 0) {
      relativePath = relativePath.replace(pathVariablesRegExp2, (_, key7,) => '' + pathVariables[key7],);
    }
    if ((_b = pageLink.collectionItem) == null ? void 0 : _b.pathVariables) {
      const params = new URLSearchParams(pageLink.collectionItem.pathVariables,);
      attributes += ` ${'data-framer-page-link-path-variables'}="${params}"`;
    }
    relativePath = computeRelativePath(currentPath, relativePath,);
    return pre1 + pre2 + `"${escapeHTML(relativePath + (elementId ? `#${elementId}` : ''),)}"` + attributes + post;
  },);
}
function isShallowEqualArray(a, b,) {
  return a.length === b.length && a.every((v, i,) => v === b[i]);
}
var deprecatedRichTextPlaceholder = '{{ text-placeholder }}';
var richTextWrapperClassName = 'rich-text-wrapper';
var DeprecatedRichText = /* @__PURE__ */ React2.forwardRef(function Text(props, forwardedRef,) {
  const {
    id: id3,
    name,
    html,
    htmlFromDesign,
    text,
    textFromDesign,
    fonts = [],
    width,
    height,
    left,
    right,
    top,
    bottom,
    center,
    className: className2,
    stylesPresetsClassName,
    visible = true,
    opacity,
    rotation = 0,
    verticalAlignment = 'top',
    isEditable = false,
    environment: environment2 = RenderTarget.current,
    withExternalLayout = false,
    positionSticky,
    positionStickyTop,
    positionStickyRight,
    positionStickyBottom,
    positionStickyLeft,
    __htmlStructure,
    __fromCanvasComponent = false,
    _forwardedOverrideId,
    _forwardedOverrides,
    _usesDOMRect,
    children: _children,
    ...rest
  } = props;
  const parentSize = useParentSize();
  const layoutId = useLayoutId2(props,);
  const fallbackLayoutRef = useRef3(null,);
  const layoutRef = forwardedRef ?? fallbackLayoutRef;
  const {
    navigate,
    getRoute,
  } = useRouter();
  const currentRoute = useCurrentRoute();
  useRoutePreloader(props.preload ?? [],);
  useMeasureLayout(props, layoutRef,);
  const inCodeComponent = React2.useContext(ComponentContainerContext,);
  const isOnCanvas = useIsOnFramerCanvas();
  let textOrOverride = text;
  const forwardedOverrideId = _forwardedOverrideId ?? id3;
  if (forwardedOverrideId && _forwardedOverrides) {
    const override = _forwardedOverrides[forwardedOverrideId];
    if (typeof override === 'string') {
      textOrOverride = override;
    }
  }
  let innerHTML = '';
  if (textOrOverride) {
    const escapedText = escapeHTML(textOrOverride,);
    innerHTML = __htmlStructure ? __htmlStructure.replace(deprecatedRichTextPlaceholder, escapedText,) : `<p>${escapedText}</p>`;
  } else if (html) {
    innerHTML = html;
  } else if (textFromDesign) {
    const escapedText = escapeHTML(textFromDesign,);
    innerHTML = __htmlStructure ? __htmlStructure.replace(deprecatedRichTextPlaceholder, escapedText,) : `<p>${escapedText}</p>`;
  } else if (htmlFromDesign) {
    innerHTML = htmlFromDesign;
  }
  const implicitPathVariables = useImplicitPathVariables();
  const innerHTMLWithReplacedFramerPageLinks = React2.useMemo(() => {
    if (isOnCanvas || !getRoute || !currentRoute) return innerHTML;
    return replaceFramerPageLinks(innerHTML, getRoute, currentRoute, implicitPathVariables,);
  }, [innerHTML, getRoute, currentRoute, implicitPathVariables,],);
  React2.useEffect(() => {
    const container = layoutRef.current;
    if (container === null) return;
    function interceptPageLinks(event,) {
      const anchorElement = findAnchorElement(event.target, layoutRef.current,);
      if (event.metaKey || !navigate || !anchorElement || anchorElement.getAttribute('target',) === '_blank') {
        return;
      }
      const didNavigate = navigateFromAttributes(navigate, anchorElement, implicitPathVariables,);
      if (didNavigate) {
        event.preventDefault();
      }
    }
    container.addEventListener('click', interceptPageLinks,);
    return () => {
      container.removeEventListener('click', interceptPageLinks,);
    };
  }, [navigate, implicitPathVariables,],);
  useLoadFonts(fonts, __fromCanvasComponent, layoutRef,);
  React2.useInsertionEffect(() => {
    injectComponentCSSRules();
  }, [],);
  if (!visible) return null;
  const isHidden = isEditable && environment2() === RenderTarget.canvas;
  const style2 = {
    outline: 'none',
    display: 'flex',
    flexDirection: 'column',
    justifyContent: convertVerticalAlignment(verticalAlignment,),
    opacity: isHidden ? 0 : opacity,
    flexShrink: 0,
  };
  const restrictedRenderTarget = RenderTarget.hasRestrictions();
  const frame2 = calculateRect(props, parentSize || 0, false,);
  const isAutoSized2 = _usesDOMRect && (width === 'auto' || height === 'auto');
  const hasTransformTemplate = !!props.transformTemplate || !frame2 || !restrictedRenderTarget || __fromCanvasComponent || isAutoSized2;
  const template = hasTransformTemplate ? props.transformTemplate ?? transformTemplate(center,) : void 0;
  if (!withExternalLayout) {
    if (frame2 && restrictedRenderTarget && !isAutoSized2) {
      const rotate2 = Animatable.getNumber(rotation,).toFixed(4,);
      style2.transform = `translate(${frame2.x}px, ${frame2.y}px) rotate(${rotate2}deg)`;
      style2.width = frame2.width;
      style2.minWidth = frame2.width;
      style2.height = frame2.height;
    } else {
      style2.left = left;
      style2.right = right;
      style2.top = top;
      style2.bottom = bottom;
      style2.width = width;
      style2.height = height;
      style2.rotate = rotation;
    }
    if (positionSticky) {
      if (!isOnCanvas || inCodeComponent) {
        style2.position = 'sticky';
        style2.willChange = 'transform';
        style2.zIndex = 1;
        style2.top = positionStickyTop;
        style2.right = positionStickyRight;
        style2.bottom = positionStickyBottom;
        style2.left = positionStickyLeft;
      }
    } else if (isOnCanvas && (props.positionFixed || props.positionAbsolute)) {
      style2.position = 'absolute';
    }
  }
  collectFiltersFromProps(props, style2,);
  collectTextShadowsForProps(props, style2,);
  Object.assign(style2, props.style,);
  return /* @__PURE__ */ jsx3(motion.div, {
    id: id3,
    ref: layoutRef,
    ...rest,
    style: style2,
    layoutId,
    'data-framer-name': name,
    'data-framer-component-type': 'DeprecatedRichText',
    'data-center': center,
    className: cx(className2, stylesPresetsClassName, richTextWrapperClassName,),
    transformTemplate: template,
    dangerouslySetInnerHTML: {
      __html: innerHTMLWithReplacedFramerPageLinks,
    },
  },);
},);
function convertVerticalAlignment(verticalAlignment,) {
  switch (verticalAlignment) {
    case 'top':
      return 'flex-start';
    case 'center':
      return 'center';
    case 'bottom':
      return 'flex-end';
  }
}
function useLoadFonts(fonts, fromCanvasComponent, containerRef,) {
  const prevFontsRef = useRef3([],);
  if (!isShallowEqualArray(prevFontsRef.current, fonts,)) {
    prevFontsRef.current = fonts;
    void fontStore.loadFonts(fonts,).then(({
      newlyLoadedFontCount,
    },) => {
      if (!fromCanvasComponent || !containerRef.current || RenderTarget.current() !== RenderTarget.canvas) return;
      if (newlyLoadedFontCount > 0) {
        measureClosestComponentContainer(containerRef.current,);
      }
    },);
  }
}
function newOverrideableRef() {
  return {
    current: null,
  };
}
async function patchAndWaitForChild(ref, controller,) {
  let current2 = ref.current;
  if (current2) return current2;
  let refCallbackResolve;
  const refCallbackPromise = new Promise((resolve, reject,) => {
    refCallbackResolve = resolve;
    controller.signal.addEventListener('abort', () => reject(),);
  },);
  Object.defineProperty(ref, 'current', {
    get() {
      return current2;
    },
    set(element,) {
      current2 = element;
      if (element === null) {
        controller.abort();
        return;
      }
      refCallbackResolve(element,);
    },
    configurable: true,
  },);
  return refCallbackPromise;
}
var defaultValues2 = {
  opacity: 1,
  y: 0,
  x: 0,
  scale: 1,
  rotate: 0,
  rotateX: 0,
  rotateY: 0,
  skewX: 0,
  skewY: 0,
  filter: 'none',
};
function isEffectKey(key7,) {
  return key7 in defaultValues2;
}
function createKeyframes(effect,) {
  const out = {};
  for (const key7 in effect) {
    if (!isEffectKey(key7,)) continue;
    const effectValue = effect[key7];
    const defaultValue = defaultValues2[key7];
    if (isUndefined(effectValue,) || isUndefined(defaultValue,)) continue;
    out[key7] = [effectValue, defaultValue,];
  }
  return out;
}
var emojiSplitRe = /* @__PURE__ */ (() => {
  return new RegExp(
    '\\p{Regional_Indicator}{2}|\\p{Emoji}\\p{Emoji_Modifier}?\\p{Variation_Selector}?(?:\\u{200d}\\p{Emoji}\\p{Emoji_Modifier}?\\p{Variation_Selector}?)*|.',
    'gu',
  );
})();
function tokenizeText(text, tokenization = 'character', elements, style2,) {
  switch (tokenization) {
    case 'character':
    // When we want to animate "lines" that aren't split by newlines, but
    // instead by wrapping, we have to split the text into characters, and
    // then measure the top offset of each character, creating groups of
    // characters every time the top offset changes
    // eslint-disable-next-line no-fallthrough
    case 'line': {
      const words = text.split(' ',);
      const lastWordIndex = words.length - 1;
      return words.map((word, wordIndex,) => {
        var _a;
        const isLastWord = wordIndex === lastWordIndex;
        const short = word.length <= 12;
        return /* @__PURE__ */ jsxs(React2.Fragment, {
          children: [
            /* @__PURE__ */ jsx3('span', {
              style: {
                whiteSpace: short ? 'nowrap' : 'unset',
              },
              children: (_a = word.match(emojiSplitRe,)) == null ? void 0 : _a.map((char, i,) => {
                const ref = newOverrideableRef();
                elements.add(ref,);
                return (
                  // biome-ignore lint/suspicious/noArrayIndexKey: We are combining index with char.
                  /* @__PURE__ */
                  jsx3('span', {
                    ref,
                    style: style2,
                    children: char,
                  }, char + i,)
                );
              },),
            },),
            isLastWord ? null : ' ',
          ],
        }, word + wordIndex + isLastWord,);
      },);
    }
    case 'word': {
      const words = text.split(' ',);
      const lastWordIndex = words.length - 1;
      return words.map((char, i,) => {
        const isLastWord = i === lastWordIndex;
        const ref = newOverrideableRef();
        elements.add(ref,);
        return /* @__PURE__ */ jsxs(React2.Fragment, {
          children: [
            /* @__PURE__ */ jsx3('span', {
              ref,
              style: style2,
              children: char,
            },),
            isLastWord ? null : ' ',
          ],
        }, char + i + isLastWord,);
      },);
    }
    // Per: Element doesn't require text to be split.
    case 'element':
    default:
      return text;
  }
}
function tokenizationForEffect(effect,) {
  const type = effect.type;
  switch (type) {
    case 'appear':
      return effect.tokenization ?? 'character';
    default:
      assertNever(type,);
  }
}
function transformString(effect,) {
  const transforms = [];
  if (isNumber2(effect.x,)) transforms.push(`translateX(${effect.x}px)`,);
  if (isNumber2(effect.y,)) transforms.push(`translateY(${effect.y}px)`,);
  if (isNumber2(effect.scale,)) transforms.push(`scale(${effect.scale})`,);
  if (isNumber2(effect.rotate,)) transforms.push(`rotate(${effect.rotate}deg)`,);
  if (isNumber2(effect.rotateX,)) transforms.push(`rotateX(${effect.rotateX}deg)`,);
  if (isNumber2(effect.rotateY,)) transforms.push(`rotateY(${effect.rotateY}deg)`,);
  if (isNumber2(effect.skewX,)) transforms.push(`skewX(${effect.skewX}deg)`,);
  if (isNumber2(effect.skewY,)) transforms.push(`skewY(${effect.skewY}deg)`,);
  return transforms.join(' ',);
}
function getInitialEffectStyle(canPlay, canAnimate2, effect,) {
  if (!effect || !effect.effect) return void 0;
  const type = effect.type;
  switch (type) {
    case 'appear':
      switch (effect.tokenization) {
        case 'element':
          if (!canPlay || !canAnimate2) return void 0;
          return {
            opacity: effect.effect.opacity,
            filter: effect.effect.filter,
            transform: transformString(effect.effect,),
          };
        case 'line':
        case 'word':
        case 'character':
        default:
          if (!canPlay || !canAnimate2) {
            return {
              display: 'inline-block',
            };
          }
          return {
            display: 'inline-block',
            opacity: effect.effect.opacity,
            filter: effect.effect.filter,
            transform: transformString(effect.effect,),
          };
      }
    default:
      assertNever(type,);
  }
}
function useTextEffect(config, ref, preview,) {
  const elements = useConstant2(() => /* @__PURE__ */ new Set());
  const isRenderingStaticContent = isStaticRenderer();
  const canPlay = preview || !isRenderingStaticContent;
  const state = React2.useRef({
    hasMounted: false,
    hasAnimatedOnce: false,
    isAnimating: false,
    effect: config,
  },);
  state.current.effect = config;
  const trigger = (config == null ? void 0 : config.trigger) ?? 'onMount';
  const target = config == null ? void 0 : config.target;
  const threshold = config == null ? void 0 : config.threshold;
  React2.useEffect(() => {
    if (!canPlay || preview) return;
    state.current.hasMounted = true;
    function play() {
      const {
        effect,
      } = state.current;
      if (!canPlay || !effect) return;
      if ((effect == null ? void 0 : effect.repeat) !== true && state.current.hasAnimatedOnce) return;
      if ((effect == null ? void 0 : effect.type) === 'appear' && state.current.isAnimating) return;
      Object.assign(state.current, {
        hasAnimatedOnce: true,
        isAnimating: true,
      },);
      const type = effect.type;
      switch (type) {
        case 'appear': {
          const {
            transition,
            startDelay,
            repeat,
            tokenization: tokenization2,
          } = effect;
          const cleanupRef = {
            current: void 0,
          };
          void runAppearEffect(tokenization2, effect.effect, elements, transition, startDelay, repeat, () => {
            Object.assign(state.current, {
              isAnimating: false,
            },);
          }, cleanupRef,);
          return () => {
            var _a;
            return (_a = cleanupRef.current) == null ? void 0 : _a.call(cleanupRef,);
          };
        }
        default:
          assertNever(type,);
      }
    }
    switch (trigger) {
      case 'onMount':
        play();
        return;
      case 'onInView': {
        const element = ref == null ? void 0 : ref.current;
        if (!element) return;
        return inView(element, play, {
          amount: threshold ?? 0,
        },);
      }
      case 'onScrollTarget': {
        const element = target == null ? void 0 : target.ref.current;
        if (!element) return;
        return inView(element, play, {
          amount: threshold ?? 0,
          root: document,
          margin: (target == null ? void 0 : target.offset) ? `${target.offset}px 0px 0px 0px` : void 0,
        },);
      }
      default:
        assertNever(trigger,);
    }
  }, [canPlay, elements, preview, ref, target, threshold, trigger,],);
  const effectEnabled = !!config;
  const tokenization = config ? tokenizationForEffect(config,) : void 0;
  return React2.useMemo(() => ({
    // The tokenizer is memoized such that it won't trigger RichText to
    // be rerendered if the effect changes in a way that doesn't effect
    // the tokenization.
    getTokenizer: () => {
      elements.clear();
      if (!effectEnabled) return void 0;
      const {
        hasMounted,
        hasAnimatedOnce,
        effect,
      } = state.current;
      const effectStyle = getInitialEffectStyle(
        canPlay,
        preview || mayAnimate(hasMounted, hasAnimatedOnce, effect,),
        state.current.effect,
      );
      return {
        text: (text) => tokenizeText(text, tokenization, elements, effectStyle,),
        props: (style2) => {
          if ((effect == null ? void 0 : effect.tokenization) !== 'element') return void 0;
          const r = newOverrideableRef();
          elements.add(r,);
          return {
            ref: r,
            style: {
              ...style2,
              ...effectStyle,
            },
          };
        },
      };
    },
    play: () => {
      const {
        effect,
      } = state.current;
      if (!effect) return;
      const type = effect.type;
      switch (type) {
        case 'appear': {
          const {
            transition,
            startDelay,
          } = effect;
          void runAppearEffect(tokenization, effect.effect, elements, transition, startDelay,);
          break;
        }
        default:
          assertNever(type,);
      }
    },
  }), [canPlay, effectEnabled, elements, preview, tokenization,],);
}
function mayAnimate(hasMounted, hasAnimatedOnce, effect,) {
  return !(
    // If either the component has mounted and the trigger is
    // onMount, or if the component has run an animation to
    // completion, the effect is not repeatable, and the trigger
    // is one that is impacted by repeated effects, we don't
    // need to set initial style again.
    hasMounted && (effect == null ? void 0 : effect.trigger) === 'onMount' ||
    hasAnimatedOnce && !(effect == null ? void 0 : effect.repeat) &&
      ((effect == null ? void 0 : effect.trigger) === 'onInView' || (effect == null ? void 0 : effect.trigger) === 'onScrollTarget')
  );
}
async function runAppearEffect(
  tokenization = 'character',
  effect,
  elements,
  transition,
  startDelay = 0,
  repeat = false,
  callback,
  cleanupRef,
) {
  const enter = createKeyframes(effect,);
  const controller = new AbortController();
  if (cleanupRef) cleanupRef.current = () => controller.abort();
  switch (tokenization) {
    case 'character':
    case 'element':
    case 'word': {
      const list = await createElementList(elements, controller,);
      if (list === null) return;
      void animate(list, enter, {
        ...transition,
        restDelta: 1e-3,
        delay: stagger((transition == null ? void 0 : transition.delay) ?? 0, {
          startDelay,
        },),
      },).then(() => callback == null ? void 0 : callback());
      if (!repeat || !cleanupRef) return;
      cleanupRef.current = () =>
        void animate(list, effect, {
          ...transition,
          restDelta: 1e-3,
          delay: stagger((transition == null ? void 0 : transition.delay) ?? 0, {
            startDelay,
          },),
        },);
      return;
    }
    case 'line': {
      try {
        for (const element of elements) {
          await patchAndWaitForChild(element, controller,);
        }
      } catch {
        return;
      }
      let list;
      frame.read(() => {
        list = createLineGroups(elements,);
        if (list.length === 0) return;
        frame.update(() => {
          const animations2 = list.map((group, i,) => {
            return animate(group, enter, {
              ...transition,
              restDelta: 1e-3,
              // Since text tokenized into lines are groups of individual
              // characters where each group is animated at once, we can't use
              // motion's built in `stagger()` function, and have to manage the
              // outer delay ourselves.
              delay: startDelay + i * ((transition == null ? void 0 : transition.delay) ?? 0),
            },);
          },);
          void Promise.all(animations2,).then(() => callback == null ? void 0 : callback());
        },);
      },);
      if (!repeat || !cleanupRef) return;
      cleanupRef.current = () => {
        if (list.length === 0) return;
        list.forEach((group, i,) => {
          void animate(group, effect, {
            ...transition,
            restDelta: 1e-3,
            delay: startDelay + i * ((transition == null ? void 0 : transition.delay) ?? 0),
          },);
        },);
      };
      return;
    }
    default:
      assertNever(tokenization,);
  }
}
async function createElementList(elements, controller,) {
  if (elements.size === 0) return null;
  const list = [];
  for (const element of elements) {
    try {
      const node = await patchAndWaitForChild(element, controller,);
      if (node) list.push(node,);
    } catch {
      return null;
    }
  }
  return list;
}
function createLineGroups(elements,) {
  const groups2 = [];
  let currentGroup = [];
  let lastOffset = null;
  for (const element of elements) {
    if (!element.current) continue;
    const top = element.current.offsetTop;
    const height = element.current.offsetHeight;
    if (!height || lastOffset === null || top === lastOffset) {
      currentGroup.push(element.current,);
    } else {
      groups2.push(currentGroup,);
      currentGroup = [element.current,];
    }
    if (height) lastOffset = top;
  }
  groups2.push(currentGroup,);
  return groups2;
}
var BaseSVG = /* @__PURE__ */ forwardRef(function BaseSVG2(props, forwardedRef,) {
  return (
    // biome-ignore lint/a11y/noSvgWithoutTitle: FIXME: FitText might be inaccessible to screen readers because it’s wrapped in an svg
    /* @__PURE__ */
    jsx3('svg', {
      ...props,
      ref: forwardedRef,
      children: props.children,
    },)
  );
},);
var MotionSVG = /* @__PURE__ */ motion.create(BaseSVG,);
var FitText = /* @__PURE__ */ forwardRef(function FitText2({
  viewBoxScale,
  viewBox,
  children,
  ...props
}, forwardedRef,) {
  return /* @__PURE__ */ jsx3(MotionSVG, {
    ...props,
    ref: forwardedRef,
    viewBox,
    children: /* @__PURE__ */ jsx3(motion.foreignObject, {
      width: '100%',
      height: '100%',
      className: 'framer-fit-text',
      transform: `scale(${viewBoxScale})`,
      style: {
        overflow: 'visible',
        transformOrigin: 'center center',
      },
      children,
    },),
  },);
},);
var defaultFonts = [];
var richTextContainerComponentType = 'RichTextContainer';
var RichTextContainer = /* @__PURE__ */ forwardRef(function RichTextContainer2(props, forwardedRef,) {
  const {
    __fromCanvasComponent = false,
    _forwardedOverrideId,
    _forwardedOverrides,
    _usesDOMRect,
    anchorLinkOffsetY,
    as: _as,
    bottom,
    center,
    children,
    environment: environment2 = RenderTarget.current,
    fonts = defaultFonts,
    height,
    isEditable = false,
    left,
    name,
    opacity,
    positionSticky,
    positionStickyBottom,
    positionStickyLeft,
    positionStickyRight,
    positionStickyTop,
    right,
    rotation = 0,
    style: style2,
    _initialStyle,
    stylesPresetsClassNames,
    text: plainText,
    top,
    verticalAlignment = 'top',
    visible = true,
    width,
    withExternalLayout = false,
    viewBox,
    viewBoxScale = 1,
    effect,
    ...rest
  } = props;
  const parentSize = useParentSize();
  const isOnCanvas = useIsOnFramerCanvas();
  const inCodeComponent = useContext(ComponentContainerContext,);
  const layoutId = useLayoutId2(props,);
  const fallbackRef = useRef3(null,);
  const containerRef = forwardedRef ?? fallbackRef;
  useMeasureLayout(props, containerRef,);
  useLoadFonts(fonts, __fromCanvasComponent, containerRef,);
  useInsertionEffect(() => {
    injectComponentCSSRules();
  }, [],);
  const textEffect = useTextEffect(effect, containerRef,);
  const processedChildren = useMemo2(() => {
    if (!children) return;
    return processRichTextChildren(children, stylesPresetsClassNames, plainText, anchorLinkOffsetY, void 0, textEffect.getTokenizer(),);
  }, [children, stylesPresetsClassNames, plainText, anchorLinkOffsetY, textEffect,],);
  if (!visible) return null;
  const isHidden = isEditable && environment2() === RenderTarget.canvas;
  const containerStyle = {
    outline: 'none',
    display: 'flex',
    flexDirection: 'column',
    justifyContent: convertVerticalAlignment(verticalAlignment,),
    opacity: isHidden ? 0 : opacity,
    flexShrink: 0,
  };
  const positionStyle = {};
  const restrictedRenderTarget = RenderTarget.hasRestrictions();
  const frame2 = calculateRect(props, parentSize || 0, false,);
  const isAutoSized2 = _usesDOMRect && (width === 'auto' || height === 'auto');
  const hasTransformTemplate = !!props.transformTemplate || !frame2 || !restrictedRenderTarget || __fromCanvasComponent || isAutoSized2;
  const template = hasTransformTemplate ? props.transformTemplate ?? transformTemplate(center,) : void 0;
  if (!withExternalLayout) {
    if (frame2 && restrictedRenderTarget && !isAutoSized2) {
      positionStyle.x = frame2.x + (isNumber2(style2 == null ? void 0 : style2.x,) ? style2.x : 0);
      positionStyle.y = frame2.y + (isNumber2(style2 == null ? void 0 : style2.y,) ? style2.y : 0);
      containerStyle.rotate = Animatable.getNumber(rotation,);
      containerStyle.width = frame2.width;
      containerStyle.minWidth = frame2.width;
      containerStyle.height = frame2.height;
    } else {
      containerStyle.left = left;
      containerStyle.right = right;
      containerStyle.top = top;
      containerStyle.bottom = bottom;
      containerStyle.width = width;
      containerStyle.height = height;
      containerStyle.rotate = rotation;
    }
    if (positionSticky) {
      if (!isOnCanvas || inCodeComponent) {
        containerStyle.position = 'sticky';
        containerStyle.willChange = 'transform';
        containerStyle.zIndex = 1;
        containerStyle.top = positionStickyTop;
        containerStyle.right = positionStickyRight;
        containerStyle.bottom = positionStickyBottom;
        containerStyle.left = positionStickyLeft;
      }
    } else if (isOnCanvas && (props.positionFixed || props.positionAbsolute)) {
      containerStyle.position = 'absolute';
    }
  }
  collectFiltersFromProps(props, containerStyle,);
  collectTextShadowsForProps(props, containerStyle,);
  Object.assign(containerStyle, _initialStyle, style2, positionStyle,);
  if (layoutId) {
    rest.layout = 'preserve-aspect';
  }
  const Component17 = htmlElementAsMotionComponent(props.as,);
  const dataFramerName = rest['data-framer-name'] ?? name;
  if (isString(props.viewBox,)) {
    if (props.as !== void 0) {
      return /* @__PURE__ */ jsx3(Component17, {
        ...rest,
        ref: containerRef,
        style: containerStyle,
        layoutId,
        transformTemplate: template,
        'data-framer-name': dataFramerName,
        'data-framer-component-type': richTextContainerComponentType,
        children: /* @__PURE__ */ jsx3(FitText, {
          viewBox,
          viewBoxScale,
          style: {
            width: '100%',
            height: '100%',
          },
          children: processedChildren,
        },),
      },);
    } else {
      return /* @__PURE__ */ jsx3(FitText, {
        ...rest,
        ref: containerRef,
        style: containerStyle,
        layoutId,
        viewBox,
        viewBoxScale,
        transformTemplate: template,
        'data-framer-name': dataFramerName,
        'data-framer-component-type': richTextContainerComponentType,
        children: processedChildren,
      },);
    }
  }
  return /* @__PURE__ */ jsx3(Component17, {
    ...rest,
    ref: containerRef,
    style: containerStyle,
    layoutId,
    transformTemplate: template,
    'data-framer-name': dataFramerName,
    'data-framer-component-type': richTextContainerComponentType,
    children: processedChildren,
  },);
},);
function isFragment(element,) {
  return element.type === Fragment;
}
function isLineBreak(element,) {
  return element.type === 'br';
}
function processRichTextChildren(
  element,
  stylesPresetsClassNames,
  plainText,
  anchorLinkOffsetY,
  slugCounters = {},
  tokenizer,
  depth = isFragment(element,) ? -1 : 0,
) {
  let children = Children.toArray(element.props.children,);
  if (isString(plainText,)) {
    children = children.slice(0, 1,);
  }
  let onlyLineBreaks = true;
  children = children.map((child) => {
    if (!isValidElement(child,) || !isLineBreak(child,)) onlyLineBreaks = false;
    if (isValidElement(child,)) {
      return processRichTextChildren(child, stylesPresetsClassNames, plainText, anchorLinkOffsetY, slugCounters, tokenizer, depth + 1,);
    }
    const text = isString(plainText,) ? plainText : child;
    return isString(text,) && tokenizer ? tokenizer.text(text,) : text;
  },);
  const {
    ['data-preset-tag']: dataPresetTag,
    ...props
  } = element.props;
  if (isString(element.type,) || isMotionComponent(element.type,)) {
    const elementType = unwrapMotionComponent(element.type,) || element.type;
    const tag = dataPresetTag || elementType;
    const stylesPresetClassName = isString(tag,) ? stylesPresetsClassNames == null ? void 0 : stylesPresetsClassNames[tag] : void 0;
    props.className = cx('framer-text', props.className, stylesPresetClassName,);
    if (tokenizer && depth === 0 && !onlyLineBreaks) Object.assign(props, tokenizer.props(props.style,),);
    const isHeading = elementType === 'h1' || elementType === 'h2' || elementType === 'h3' || elementType === 'h4' ||
      elementType === 'h5' || elementType === 'h6';
    const anchorLinkStylePresetClassName = stylesPresetsClassNames == null ? void 0 : stylesPresetsClassNames['anchor'];
    if (isHeading && anchorLinkStylePresetClassName) {
      const slug = generateHeadingSlug(children, slugCounters,);
      props.id = slug;
      const className2 = cx('framer-text', anchorLinkStylePresetClassName,);
      const anchorLink = /* @__PURE__ */ jsx3('a', {
        href: `#${slug}`,
        className: className2,
        children,
      },);
      props.style = {
        ...(props.style ?? {}),
        scrollMarginTop: anchorLinkOffsetY,
      };
      children = [anchorLink,];
    }
  }
  return cloneElement32(element, props, ...children,);
}
function generateHeadingSlug(children, slugCounters,) {
  const headingText = children.map(extractTextFromReactNode,).join('',);
  let slug = slugify(headingText,);
  const slugCounter = slugCounters[slug] ?? 0;
  if (slugCounter > 0) {
    slug += `-${slugCounter}`;
  }
  slugCounters[slug] = slugCounter + 1;
  return slug;
}
function extractTextFromReactNode(node,) {
  if (isString(node,) || isNumber2(node,)) {
    return node.toString();
  }
  if (isValidElement(node,)) {
    return extractTextFromReactNode(node.props.children,);
  }
  if (Array.isArray(node,)) {
    return node.map(extractTextFromReactNode,).join('',);
  }
  return '';
}
var RichText = /* @__PURE__ */ forwardRef(function RichText2({
  children,
  html,
  htmlFromDesign,
  ...props
}, forwardedRef,) {
  const content = html || children || htmlFromDesign;
  if (isString(content,)) {
    if (!props.stylesPresetsClassName && isObject2(props.stylesPresetsClassNames,)) {
      props.stylesPresetsClassName = Object.values(props.stylesPresetsClassNames,).join(' ',);
    }
    const contentProp = {
      // We need to use the original prop name.
      [isString(html,) ? 'html' : 'htmlFromDesign']: content,
    };
    return /* @__PURE__ */ jsx3(DeprecatedRichText, {
      ...props,
      ...contentProp,
      ref: forwardedRef,
    },);
  }
  if (!props.stylesPresetsClassNames && isString(props.stylesPresetsClassName,)) {
    const [h1, h2, h3, p, a,] = props.stylesPresetsClassName.split(' ',);
    if (h1 === void 0 || h2 === void 0 || h3 === void 0 || p === void 0 || a === void 0) {
      console.warn(`Encountered invalid stylesPresetsClassNames: ${props.stylesPresetsClassNames}`,);
    } else {
      props.stylesPresetsClassNames = {
        h1,
        h2,
        h3,
        p,
        a,
      };
    }
  }
  return /* @__PURE__ */ jsx3(RichTextContainer, {
    ...props,
    ref: forwardedRef,
    children: isValidElement(content,) ? content : void 0,
  },);
},);
function linearGradientLine(angle,) {
  var _a, _b;
  const rad = angle * Math.PI / 180;
  const offset = {
    x: -Math.sin(rad,) * 100,
    y: Math.cos(rad,) * 100,
  };
  const anglePoint = Point(offset.x, offset.y,);
  const angleLine = Line(Point(0.5, 0.5,), anglePoint,);
  const points = Rect.points({
    x: 0,
    y: 0,
    width: 1,
    height: 1,
  },);
  const sortedPoints = points.map((point2) => ({
    point: point2,
    distance: Point.distance(anglePoint, point2,),
  })).sort((a2, b2,) => a2.distance - b2.distance);
  const a = (_a = sortedPoints[0]) == null ? void 0 : _a.point;
  const b = (_b = sortedPoints[1]) == null ? void 0 : _b.point;
  assert(a && b, 'linearGradientLine: Must have 2 closest points.',);
  const [c, d,] = points.filter((point2) => !Point.isEqual(point2, a,) && !Point.isEqual(point2, b,));
  assert(c && d, 'linearGradientLine: Must have 2 opposing points.',);
  const start2 = Line.intersection(angleLine, Line(a, b,),);
  const end = Line.intersection(angleLine, Line(c, d,),);
  assert(start2 && end, 'linearGradientLine: Must have a start and end point.',);
  return Line(start2, end,);
}
function elementPropertiesForLinearGradient(gradient, id3,) {
  var _a, _b;
  const line = linearGradientLine(gradient.angle,);
  const stops = gradientColorStops(gradient,);
  const startPosition = ((_a = stops[0]) == null ? void 0 : _a.position) ?? 0;
  const endPosition = ((_b = stops[stops.length - 1]) == null ? void 0 : _b.position) ?? 1;
  const startPoint = Line.pointAtPercentDistance(line, startPosition,);
  const endPoint = Line.pointAtPercentDistance(line, endPosition,);
  const interpolator = interpolate([startPosition, endPosition,], [0, 1,],);
  return {
    id: `id${id3}g${LinearGradient.hash(gradient,)}`,
    x1: startPoint.x,
    y1: startPoint.y,
    x2: endPoint.x,
    y2: endPoint.y,
    stops: stops.map((stop) => ({
      color: stop.value,
      alpha: ConvertColor.getAlpha(stop.value,) * gradient.alpha,
      position: interpolator(stop.position,),
    })),
  };
}
function elementPropertiesForRadialGradient(gradient, id3,) {
  return {
    id: `id${id3}g${RadialGradient.hash(gradient,)}`,
    widthFactor: gradient.widthFactor,
    heightFactor: gradient.heightFactor,
    centerAnchorX: gradient.centerAnchorX,
    centerAnchorY: gradient.centerAnchorY,
    stops: gradientColorStops(gradient,).map((stop) => ({
      color: stop.value,
      alpha: ConvertColor.getAlpha(stop.value,) * gradient.alpha,
      position: stop.position,
    })),
  };
}
function isRelativeNumber(value,) {
  if (!isString(value,)) return false;
  const lastChar = value.charAt(value.length - 1,);
  if (lastChar !== '%') return false;
  const withoutLastChar = value.slice(0, -1,);
  const float = parseFloat(withoutLastChar,);
  return isNumber2(float,);
}
function getRelativeNumberValue(value,) {
  const withoutLastChar = value.slice(0, -1,);
  const float = parseFloat(withoutLastChar,);
  return isNumber2(float,) ? float : 50;
}
function getPositionXFraction(positionX,) {
  if (isRelativeNumber(positionX,)) return getRelativeNumberValue(positionX,) / 100;
  if (positionX === 'left') return 0;
  if (positionX === 'right') return 1;
  return 0.5;
}
function getPositionYFraction(positionY,) {
  if (isRelativeNumber(positionY,)) return getRelativeNumberValue(positionY,) / 100;
  if (positionY === 'top') return 0;
  if (positionY === 'bottom') return 1;
  return 0.5;
}
function imagePatternPropsForFill(fill, frame2, id3, includeTransform,) {
  fill = Animatable.get(fill, '#09F',);
  if (!BackgroundImage.isImageObject(fill,)) return void 0;
  if (!fill.pixelWidth || !fill.pixelHeight) return void 0;
  const imageWidth = fill.pixelWidth;
  const imageHeight = fill.pixelHeight;
  let transform2;
  const {
    fit,
  } = fill;
  let width = 1,
    height = 1;
  let offsetX = 0;
  let offsetY = 0;
  if (fit === 'fill' || fit === 'fit' || fit === 'tile' || !fit) {
    let scaleX2 = 1;
    let scaleY2 = 1;
    const imageRatio = imageWidth / imageHeight;
    const realWidth = frame2.height * imageRatio;
    const realHeight = frame2.width / imageRatio;
    const validScaleX = realWidth / frame2.width;
    const validScaleY = realHeight / frame2.height;
    if (fit === 'tile') {
      fill.backgroundSize ??= 1;
      width = Math.round(fill.backgroundSize * (imageWidth / 2),);
      height = Math.round(fill.backgroundSize * (imageHeight / 2),);
      const layerPositionX = frame2.x ?? 0;
      const layerPositionY = frame2.y ?? 0;
      let extraOffsetX = 0;
      let extraOffsetY = 0;
      if (includeTransform) {
        extraOffsetX = layerPositionX;
        extraOffsetY = layerPositionY;
      }
      offsetX = (frame2.width - width) * getPositionXFraction(fill.positionX,) + extraOffsetX;
      offsetY = (frame2.height - height) * getPositionYFraction(fill.positionY,) + extraOffsetY;
      transform2 = `translate(${offsetX + layerPositionX}, ${offsetY + layerPositionY})`;
    } else {
      if (fit === 'fill' || !fit ? validScaleY > validScaleX : validScaleY < validScaleX) {
        scaleY2 = validScaleY;
        offsetY = (1 - validScaleY) * getPositionYFraction(fill.positionY,);
      } else {
        scaleX2 = validScaleX;
        offsetX = (1 - validScaleX) * getPositionXFraction(fill.positionX,);
      }
      transform2 = `translate(${offsetX}, ${offsetY}) scale(${scaleX2}, ${scaleY2})`;
    }
  }
  const imageId = `id${id3}g${'-fillImage'}`;
  return {
    id: imageId,
    path: fill.src ?? '',
    transform: transform2,
    width,
    height,
    offsetX,
    offsetY,
  };
}
var mediaType2 = 'framer/asset-reference,';
function isAssetReference(value,) {
  return value.startsWith(`data:${mediaType2}`,);
}
function imageUrlForAsset(asset, pixelSize,) {
  if (/^\w+:/u.test(asset,) && !isAssetReference(asset,)) return asset;
  if (typeof pixelSize !== 'number') pixelSize = void 0;
  else if (pixelSize <= 512) pixelSize = 512;
  else if (pixelSize <= 1024) pixelSize = 1024;
  else if (pixelSize <= 2048) pixelSize = 2048;
  else pixelSize = 4096;
  const isExport = RenderTarget.current() === RenderTarget.export;
  return runtime.assetResolver(asset, {
    pixelSize,
    isExport,
  },) ?? '';
}
var ImagePatternElement = ({
  id: id3,
  path,
  transform: transform2,
  repeat,
  width,
  height,
  offsetX,
  offsetY,
},) => {
  const href = imageUrlForAsset(path,);
  return /* @__PURE__ */ jsx3('pattern', {
    id: id3,
    width: repeat ? width : '100%',
    height: repeat ? height : '100%',
    patternContentUnits: repeat ? void 0 : 'objectBoundingBox',
    patternUnits: repeat ? 'userSpaceOnUse' : void 0,
    x: repeat ? offsetX : void 0,
    y: repeat ? offsetY : void 0,
    children: /* @__PURE__ */ jsx3('image', {
      width: repeat ? width : 1,
      height: repeat ? height : 1,
      href,
      preserveAspectRatio: 'none',
      transform: repeat ? void 0 : transform2,
      x: repeat ? 0 : void 0,
      y: repeat ? 0 : void 0,
    }, href,),
  },);
};
var useDOM = /* @__PURE__ */ isBrowser2();
var SharedSVGEntry = class {
  constructor(id3, svg, innerHTML, viewBox, count = 0,) {
    this.id = id3;
    this.svg = svg;
    this.innerHTML = innerHTML;
    this.viewBox = viewBox;
    this.count = count;
  }
};
var visuallyHiddenStyle = 'position: absolute; overflow: hidden; bottom: 0; left: 0; width: 0; height: 0; z-index: 0; contain: strict';
var SharedSVGManager = class {
  constructor() {
    __publicField(this, 'entries', /* @__PURE__ */ new Map(),);
    __publicField(this, 'vectorSetItems', /* @__PURE__ */ new Map(),);
  }
  debugGetEntries() {
    return this.entries;
  }
  /** Request to render a svg, this will ensure there is a global instance and will return a
   * template referencing the image. Must be balanced with `unsubscribe()` calls using the same
   * svg. If called multiple times while the shared SVG exists, the generateUniqueIds and
   * contentId parameters are ignored. */
  subscribe(svg, generateUniqueIds, contentId, overflowVisible,) {
    if (!svg || svg === '') return '';
    let entry = this.entries.get(svg,);
    if (!entry) {
      if (!contentId) {
        contentId = `svg${String(hash(svg,),)}_${String(svg.length,)}`;
      }
      let uniqueSVG = svg;
      let svgSize;
      const svgDom = parseSVG(svg,);
      if (svgDom) {
        if (generateUniqueIds) {
          prefixIdsInSVG(svgDom, contentId,);
        }
        svgDom.id = contentId;
        svgSize = getSVGSize(svgDom,);
        svgDom.removeAttribute('xmlns',);
        svgDom.removeAttribute('xlink',);
        svgDom.removeAttribute('xmlns:xlink',);
        uniqueSVG = svgDom.outerHTML;
      }
      entry = this.createDOMElementFor(uniqueSVG, contentId, svgSize, overflowVisible,);
      this.entries.set(svg, entry,);
    }
    entry.count += 1;
    return entry.innerHTML;
  }
  /** Returns the viewBox for the svg, or undefined if there is no viewBox. */
  getViewBox(svg,) {
    if (!svg || svg === '') return;
    const entry = this.entries.get(svg,);
    return entry == null ? void 0 : entry.viewBox;
  }
  /** When no longer rendering an svg it must be unsubscribed from so resources can be cleaned up.
   * Pass in the same svg as used with `subscribe()`. */
  unsubscribe(svg,) {
    if (!svg || svg === '') return;
    const entry = this.entries.get(svg,);
    if (!entry) return;
    entry.count -= 1;
    if (entry.count > 0) return;
    setTimeout(() => this.maybeRemoveEntry(svg,), 5e3,);
  }
  maybeRemoveEntry(svg,) {
    const entry = this.entries.get(svg,);
    if (!entry) return;
    if (entry.count > 0) return;
    this.entries.delete(svg,);
    this.removeDOMElement(entry,);
  }
  removeDOMElement(entry,) {
    if (useDOM) {
      const container = document == null ? void 0 : document.getElementById(entry.id,);
      container == null ? void 0 : container.remove();
    }
  }
  getOrCreateTemplateContainer() {
    const container = document.getElementById('svg-templates',);
    if (container) return container;
    const newContainer = document.createElement('div',);
    newContainer.id = 'svg-templates';
    newContainer.ariaHidden = 'true';
    newContainer.style.cssText = visuallyHiddenStyle;
    document.body.appendChild(newContainer,);
    return newContainer;
  }
  maybeAppendTemplate(id3, svg,) {
    if (document.getElementById(id3,)) return;
    const container = document.createElement('div',);
    container.innerHTML = svg;
    const svgElement = container.firstElementChild;
    if (!svgElement) return;
    svgElement.id = id3;
    this.getOrCreateTemplateContainer().appendChild(svgElement,);
  }
  createDOMElementFor(svg, id3, size, overflowVisible,) {
    if (useDOM) this.maybeAppendTemplate(id3, svg,);
    const box = size ? `0 0 ${size.width} ${size.height}` : void 0;
    const viewBox = box ? ` viewBox="${box}"` : '';
    const innerHTML = `<svg style="width:100%;height:100%;${
      overflowVisible ? 'overflow: visible;' : ''
    }"${viewBox}><use href="#${id3}"/></svg>`;
    return new SharedSVGEntry(id3, svg, innerHTML, box,);
  }
  /**
   * Vectors are serialized in such a way that they don't need to be parsed again, instead they
   * just need to provide their template. The hash is already known.
   *
   * VECTOR @TODO - Unsubscribe from vector set items.
   */
  template(revision, svg,) {
    const entry = this.vectorSetItems.get(revision,);
    if (entry) return `#${revision}`;
    this.vectorSetItems.set(revision, {
      svg,
      count: 0,
    },);
    if (!useDOM) return `#${revision}`;
    this.maybeAppendTemplate(revision, svg,);
    return `#${revision}`;
  }
  subscribeToTemplate(revision,) {
    const entry = this.vectorSetItems.get(revision,);
    if (!entry) return;
    entry.count++;
    return () => {
      const latest = this.vectorSetItems.get(revision,);
      if (!latest) return;
      latest.count--;
      if (latest.count > 0) return;
      setTimeout(() => {
        var _a, _b;
        if ((_a = this.vectorSetItems.get(revision,)) == null ? void 0 : _a.count) return;
        this.vectorSetItems.delete(revision,);
        if (useDOM) (_b = document == null ? void 0 : document.getElementById(revision,)) == null ? void 0 : _b.remove();
      }, 5e3,);
    };
  }
  clear() {
    this.entries.clear();
  }
  /** Returns a string containing a div#svg-templates and all the current svg templates. Can be
   * used after running `ReactDOMServer.renderToString()` */
  generateTemplates() {
    const output = [];
    output.push(`<div id="svg-templates" style="${visuallyHiddenStyle}" aria-hidden="true">`,);
    this.entries.forEach((value) => output.push(value.svg,));
    this.vectorSetItems.forEach((value) => output.push(value.svg,));
    output.push('</div>',);
    return output.join('\n',);
  }
};
function useSVGTemplate(revision, svg,) {
  useEffect(() => sharedSVGManager.subscribeToTemplate(revision,), [revision,],);
  return sharedSVGManager.template(revision, svg,);
}
var sharedSVGManager = /* @__PURE__ */ new SharedSVGManager();
function parseSVG(svg,) {
  try {
    const doc = domParser(svg,);
    const node = doc.getElementsByTagName('svg',)[0];
    if (!node) throw Error('no svg element found',);
    return node;
  } catch {
    return;
  }
}
function prefixIdsInSVG(svg, prefix2,) {
  const sanitizedPrefix = sanitizeString(prefix2,);
  recursivelyPrefixId(svg, sanitizedPrefix,);
}
function sanitizeString(str,) {
  return str.replace(/[^\w\-:.]|^[^a-z]+/gi, '',);
}
function recursivelyPrefixId(el, prefix2,) {
  prefixId(el, prefix2,);
  const childNodes = Array.from(el.children,);
  childNodes.forEach((node) => {
    recursivelyPrefixId(node, prefix2,);
  },);
}
function prefixId(el, prefix2,) {
  const attributes = el.getAttributeNames();
  attributes.forEach((attr) => {
    const value = el.getAttribute(attr,);
    if (!value) return;
    if (attr === 'id') {
      el.setAttribute(attr, `${prefix2}_${value}`,);
    }
    if (attr === 'href' || attr === 'xlink:href') {
      const [base, fragmentIdentifier,] = value.split('#',);
      if (base) return;
      el.setAttribute(attr, `#${prefix2}_${fragmentIdentifier}`,);
      return;
    }
    const URL_REF = 'url(#';
    if (value.includes(URL_REF,)) {
      const prefixedValue = value.replace(URL_REF, `${URL_REF}${prefix2}_`,);
      el.setAttribute(attr, prefixedValue,);
    }
  },);
}
var unitsToPixels = /* @__PURE__ */ (() => ({
  cm: 96 / 2.54,
  mm: 96 / 2.54 / 10,
  Q: 96 / 2.54 / 40,
  in: 96,
  pc: 96 / 6,
  pt: 96 / 72,
  px: 1,
  // A few assumptions about relative units.
  em: 16,
  ex: 8,
  ch: 8,
  rem: 16,
}))();
function parseLength(value,) {
  var _a;
  if (!value) return;
  const m2 = /(-?[\d.]+)([a-z%]*)/u.exec(value,);
  if ((m2 == null ? void 0 : m2[1]) === void 0 || (m2 == null ? void 0 : m2[2]) === void 0) return;
  if ((_a = m2[2]) == null ? void 0 : _a.startsWith('%',)) return;
  return Math.round(parseFloat(m2[1],) * (unitsToPixels[m2[2]] || 1),);
}
function getSVGSize(svg,) {
  const width = parseLength(svg.getAttribute('width',),);
  const height = parseLength(svg.getAttribute('height',),);
  if (typeof width !== 'number' || typeof height !== 'number') return;
  if (width <= 0 || height <= 0) return;
  return {
    width,
    height,
  };
}
var SVG = /* @__PURE__ */ forwardRef(function SVG2(props, forwardedRef,) {
  const parentSize = useParentSize();
  const layoutId = useLayoutId2(props,);
  const layoutRef = React4.useRef(null,);
  const ref = forwardedRef ?? layoutRef;
  const providedWindow = useProvidedWindow();
  useMeasureLayout(props, layoutRef,);
  return /* @__PURE__ */ jsx3(SVGComponent, {
    ...props,
    innerRef: ref,
    parentSize,
    layoutId,
    providedWindow,
  },);
},);
var MAX_BACKGROUND_SVG_TEXT_LENGTH = 5e4;
function containsImageReference(svg,) {
  return svg.indexOf('image',) >= 0;
}
function containsCustomPropertyReference(svg,) {
  return svg.indexOf('var(--',) >= 0;
}
function hasBorderRadius(style2,) {
  return !!(style2.borderRadius || style2.borderBottomLeftRadius || style2.borderBottomRightRadius || style2.borderTopLeftRadius ||
    style2.borderTopRightRadius);
}
function sizeSVG(container, props,) {
  var _a, _b;
  const div = container.current;
  if (!div) return;
  const localWindow = props.providedWindow ?? safeWindow;
  const svg = div.firstElementChild;
  if (!svg || !(svg instanceof localWindow.SVGSVGElement)) return;
  if (!svg.getAttribute('viewBox',)) {
    const viewBox = sharedSVGManager.getViewBox(props.svg,);
    if (viewBox) {
      svg.setAttribute('viewBox', viewBox,);
    }
  }
  const {
    withExternalLayout,
    parentSize,
  } = props;
  const canUseCalculatedOnCanvasSize = !withExternalLayout && constraintsEnabled(props,) && parentSize !== 1 && parentSize !== 2;
  if (canUseCalculatedOnCanvasSize) return;
  const {
    intrinsicWidth,
    intrinsicHeight,
    _constraints,
  } = props;
  if (
    ((_a = svg.viewBox.baseVal) == null ? void 0 : _a.width) === 0 && ((_b = svg.viewBox.baseVal) == null ? void 0 : _b.height) === 0 &&
    isFiniteNumber(intrinsicWidth,) && isFiniteNumber(intrinsicHeight,)
  ) {
    svg.setAttribute('viewBox', `0 0 ${intrinsicWidth} ${intrinsicHeight}`,);
  }
  if (_constraints && _constraints.aspectRatio) {
    svg.setAttribute('preserveAspectRatio', '',);
  } else {
    svg.setAttribute('preserveAspectRatio', 'none',);
  }
  svg.setAttribute('width', '100%',);
  svg.setAttribute('height', '100%',);
}
function SVGStyleSheet() {
  React4.useInsertionEffect(() => {
    injectComponentCSSRules();
  }, [],);
  return null;
}
var SVGComponent = /* @__PURE__ */ (() => {
  var _a;
  return _a = class extends Layer {
    constructor() {
      super(...arguments,);
      __publicField(this, 'container', React4.createRef(),);
      __publicField(this, 'svgElement', null,);
      __publicField(this, 'setSVGElement', (element) => {
        this.svgElement = element;
        this.setLayerElement(element,);
      },);
      __publicField(this, 'previouslyRenderedSVG', '',);
      __publicField(this, 'unmountedSVG', '',);
    }
    static frame(props,) {
      return calculateRect(props, props.parentSize || 0,/* Unknown */
      );
    }
    get frame() {
      return calculateRect(this.props, this.props.parentSize || 0,/* Unknown */
      );
    }
    componentDidMount() {
      if (this.unmountedSVG) {
        const {
          svgContentId,
        } = this.props;
        const contentid = svgContentId ? `svg${svgContentId}` : null;
        sharedSVGManager.subscribe(this.unmountedSVG, !svgContentId, contentid,);
        this.previouslyRenderedSVG = this.unmountedSVG;
      }
      if (this.props.svgContentId) return;
      sizeSVG(this.container, this.props,);
    }
    componentWillUnmount() {
      sharedSVGManager.unsubscribe(this.previouslyRenderedSVG,);
      this.unmountedSVG = this.previouslyRenderedSVG;
      this.previouslyRenderedSVG = '';
    }
    componentDidUpdate(prevProps,) {
      super.componentDidUpdate(prevProps,);
      if (this.props.svgContentId) return;
      const {
        fill,
      } = this.props;
      if (BackgroundImage.isImageObject(fill,) && BackgroundImage.isImageObject(prevProps.fill,) && fill.src !== prevProps.fill.src) {
        resetSetStyle(this.svgElement, 'fill', null, false,);
      }
      sizeSVG(this.container, this.props,);
    }
    collectLayout(style2, innerStyle,) {
      if (this.props.withExternalLayout) {
        innerStyle.width = '100%';
        innerStyle.height = '100%';
        innerStyle.aspectRatio = 'inherit';
        return;
      }
      const frame2 = this.frame;
      const {
        rotation,
        intrinsicWidth,
        intrinsicHeight,
        width,
        height,
      } = this.props;
      const rotate2 = Animatable.getNumber(rotation,);
      style2.opacity = isFiniteNumber(this.props.opacity,) ? this.props.opacity : 1;
      if (RenderTarget.hasRestrictions() && frame2) {
        Object.assign(style2, {
          transform: `translate(${frame2.x}px, ${frame2.y}px) rotate(${rotate2.toFixed(4,)}deg)`,
          width: `${frame2.width}px`,
          height: `${frame2.height}px`,
        },);
        if (constraintsEnabled(this.props,)) {
          style2.position = 'absolute';
        }
        const xFactor = frame2.width / (intrinsicWidth || 1);
        const yFactor = frame2.height / (intrinsicHeight || 1);
        innerStyle.transformOrigin = 'top left';
        const {
          zoom,
          target,
        } = RenderEnvironment;
        if (target === RenderTarget.export) {
          const zoomFactor = zoom > 1 ? zoom : 1;
          innerStyle.transform = `scale(${xFactor * zoomFactor}, ${yFactor * zoomFactor})`;
          innerStyle.zoom = 1 / zoomFactor;
        } else {
          innerStyle.transform = `scale(${xFactor}, ${yFactor})`;
        }
        if (intrinsicWidth && intrinsicHeight) {
          innerStyle.width = intrinsicWidth;
          innerStyle.height = intrinsicHeight;
        }
        return;
      }
      const {
        left,
        right,
        top,
        bottom,
      } = this.props;
      Object.assign(style2, {
        left,
        right,
        top,
        bottom,
        width,
        height,
        rotate: rotate2,
      },);
      Object.assign(innerStyle, {
        left: 0,
        top: 0,
        bottom: 0,
        right: 0,
        position: 'absolute',
      },);
    }
    render() {
      countNodeRender();
      const {
        id: id3,
        visible,
        style: style2,
        fill,
        svg,
        intrinsicHeight,
        intrinsicWidth,
        title,
        description,
        layoutId,
        className: className2,
        variants,
        withExternalLayout,
        innerRef,
        svgContentId,
        height: _height,
        opacity: _opacity,
        width: _width,
        requiresOverflowVisible,
        ...rest
      } = this.props;
      if (!withExternalLayout && (!visible || !id3)) return null;
      const identifier = id3 ?? layoutId ?? 'svg';
      const frame2 = this.frame;
      const size = frame2 || {
        width: intrinsicWidth || 100,
        height: intrinsicHeight || 100,
      };
      const outerStyle = {
        ...style2,
        imageRendering: 'pixelated',
        flexShrink: 0,
      };
      const innerStyle = {};
      this.collectLayout(outerStyle, innerStyle,);
      collectOpacityFromProps(this.props, outerStyle,);
      collectFiltersFromProps(this.props, outerStyle,);
      Layer.applyWillChange(this.props, outerStyle, false,);
      let fillElement = null;
      if (typeof fill === 'string' || Color.isColorObject(fill,)) {
        const fillColor = Color.isColorObject(fill,) ? fill.initialValue || Color.toRgbString(fill,) : fill;
        outerStyle.fill = fillColor;
        outerStyle.color = fillColor;
      } else if (LinearGradient.isLinearGradient(fill,)) {
        const gradient = fill;
        const gradientId = `${encodeURI(id3 || '',)}g${LinearGradient.hash(gradient,)}`;
        outerStyle.fill = `url(#${gradientId})`;
        const {
          stops,
          x1,
          x2,
          y1,
          y2,
        } = elementPropertiesForLinearGradient(gradient, identifier,);
        fillElement = /* @__PURE__ */ jsx3('svg', {
          ref: this.setSVGElement,
          width: '100%',
          height: '100%',
          style: {
            position: 'absolute',
          },
          role: 'presentation',
          children: /* @__PURE__ */ jsx3('linearGradient', {
            id: gradientId,
            x1,
            x2,
            y1,
            y2,
            children: stops.map((stop, idx,) => {
              return /* @__PURE__ */ jsx3('stop', {
                offset: stop.position,
                stopColor: stop.color,
                stopOpacity: stop.alpha,
              }, idx,);
            },),
          },),
        },);
      } else if (RadialGradient.isRadialGradient(fill,)) {
        const gradient = fill;
        const gradientId = `${encodeURI(id3 || '',)}g${RadialGradient.hash(gradient,)}`;
        outerStyle.fill = `url(#${gradientId})`;
        const elementProperties = elementPropertiesForRadialGradient(gradient, identifier,);
        fillElement = /* @__PURE__ */ jsx3('svg', {
          ref: this.setSVGElement,
          width: '100%',
          height: '100%',
          style: {
            position: 'absolute',
          },
          role: 'presentation',
          children: /* @__PURE__ */ jsx3('radialGradient', {
            id: gradientId,
            cy: gradient.centerAnchorY,
            cx: gradient.centerAnchorX,
            r: gradient.widthFactor,
            children: elementProperties.stops.map((stop, idx,) => {
              return /* @__PURE__ */ jsx3('stop', {
                offset: stop.position,
                stopColor: stop.color,
                stopOpacity: stop.alpha,
              }, idx,);
            },),
          },),
        },);
      } else if (BackgroundImage.isImageObject(fill,)) {
        const imagePattern = imagePatternPropsForFill(fill, size, identifier,);
        if (imagePattern) {
          outerStyle.fill = `url(#${imagePattern.id})`;
          fillElement = /* @__PURE__ */ jsx3('svg', {
            ref: this.setSVGElement,
            width: '100%',
            height: '100%',
            style: {
              position: 'absolute',
            },
            role: 'presentation',
            children: /* @__PURE__ */ jsx3('defs', {
              children: /* @__PURE__ */ jsx3(ImagePatternElement, {
                ...imagePattern,
              },),
            },),
          },);
        }
      }
      const dataProps = {
        'data-framer-component-type': 'SVG',
      };
      const hasTransformTemplate = !frame2;
      if (hasTransformTemplate) {
        Object.assign(dataProps, layoutHintDataPropsForCenter(this.props.center,),);
      }
      const svgAsBackgroundImage =
        // If requiresOverflowVisible is true, we cannot safely render the SVG as background
        // images, as it might cropped any centered stroke that exceeds the bounding box.
        !requiresOverflowVisible && !fillElement && !outerStyle.fill && !outerStyle.background && !outerStyle.backgroundImage &&
        svg.length < MAX_BACKGROUND_SVG_TEXT_LENGTH && !containsImageReference(svg,) && !containsCustomPropertyReference(svg,);
      let content = null;
      if (svgAsBackgroundImage) {
        outerStyle.backgroundSize = '100% 100%';
        outerStyle.backgroundImage = encodeSVGForCSS(svg,);
        sharedSVGManager.unsubscribe(this.previouslyRenderedSVG,);
        this.previouslyRenderedSVG = '';
      } else {
        const contentid = svgContentId ? `svg${svgContentId}` : null;
        const __html = sharedSVGManager.subscribe(svg, !svgContentId, contentid, requiresOverflowVisible,);
        sharedSVGManager.unsubscribe(this.previouslyRenderedSVG,);
        this.previouslyRenderedSVG = svg;
        if (hasBorderRadius(outerStyle,)) {
          outerStyle.overflow = 'hidden';
        }
        content = /* @__PURE__ */ jsxs(Fragment, {
          children: [
            fillElement,
            /* @__PURE__ */ jsx3('div', {
              className: 'svgContainer', suppressHydrationWarning: true,
              style: innerStyle,
              ref: this.container,
              dangerouslySetInnerHTML: {
                __html,
              },
            }, BackgroundImage.isImageObject(fill,) ? fill.src : '',),
          ],
        },);
      }
      const MotionComponent = htmlElementAsMotionComponent(this.props.as,);
      const {
        href,
        target,
        rel,
        onClick,
        onTap,
      } = this.props;
      const hasTitleOrDescription = title || description;
      return /* @__PURE__ */ jsxs(MotionComponent, {
        ...dataProps,
        ...rest,
        layoutId,
        transformTemplate: hasTransformTemplate ? transformTemplate(this.props.center,) : void 0,
        id: id3,
        ref: innerRef,
        style: outerStyle,
        className: className2,
        variants,
        tabIndex: this.props.tabIndex,
        role: hasTitleOrDescription ? 'img' : void 0,
        'aria-label': title,
        'aria-description': description,
        'aria-hidden': hasTitleOrDescription ? void 0 : 'true',
        onTap,
        onClick,
        ...{
          href,
          target,
          rel,
        },
        children: [content, /* @__PURE__ */ jsx3(SVGStyleSheet, {},),],
      },);
    }
  },
    __publicField(_a, 'supportsConstraints', true,),
    __publicField(_a, 'defaultSVGProps', {
      left: void 0,
      right: void 0,
      top: void 0,
      bottom: void 0,
      style: void 0,
      _constraints: {
        enabled: true,
        aspectRatio: null,
      },
      parentSize: 0,
      rotation: 0,
      visible: true,
      svg: '',
      shadows: [],
    },),
    __publicField(_a, 'defaultProps', {
      ...Layer.defaultProps,
      ..._a.defaultSVGProps,
    },),
    _a;
})();
function useFontLoadStatus(fontSelectors = [], timeout = 5e3,) {
  const missingFontSelectors = fontSelectors.filter((s) => !fontStore.isSelectorLoaded(s,));
  const [fontLoadStatus, setFontLoadStatus,] = React4.useState(missingFontSelectors.length ? 'loading' : 'done',);
  React4.useEffect(() => {
    if (!missingFontSelectors.length) return;
    setFontLoadStatus('loading',);
    const timer = setTimeout(() => {
      setFontLoadStatus('timeout',);
    }, timeout,);
    fontStore.loadFonts(missingFontSelectors,).then(() => {
      clearTimeout(timer,);
      setFontLoadStatus('done',);
    },);
  }, [fontSelectors.join(', ',), missingFontSelectors.join(', ',),],);
  return fontLoadStatus;
}
function TextStyleSheet() {
  React4.useInsertionEffect(() => {
    injectComponentCSSRules();
  }, [],);
  return null;
}
var Text2 = /* @__PURE__ */ React4.forwardRef(function Text3(props, forwardedRef,) {
  const parentSize = useParentSize();
  const layoutId = useLayoutId2(props,);
  const fallbackLayoutRef = useRef3(null,);
  const layoutRef = forwardedRef ?? fallbackLayoutRef;
  const {
    navigate,
    getRoute,
  } = useRouter();
  const currentRoute = useCurrentRoute();
  useRoutePreloader(props.preload ?? [],);
  const onCanvas = useIsOnFramerCanvas();
  const matchesCurrentRoute = useLinkMatchesRoute(props.__link,);
  const fontLoadStatus = useFontLoadStatus(props.fonts,);
  useMeasureLayout(props, layoutRef,);
  const {
    fonts,
    __fromCanvasComponent,
  } = props;
  const prevFontsRef = useRef3([],);
  const fontsDidChange = !isShallowEqualArray(prevFontsRef.current ?? [], fonts ?? [],);
  prevFontsRef.current = fonts;
  useEffect(() => {
    if (!fontsDidChange || !fonts) return;
    void fontStore.loadFonts(fonts,).then(({
      newlyLoadedFontCount,
    },) => {
      if (!__fromCanvasComponent || !layoutRef.current || RenderTarget.current() !== RenderTarget.canvas) return;
      if (newlyLoadedFontCount === 0) return;
      measureClosestComponentContainer(layoutRef.current,);
    },);
  }, [fonts,],);
  const implicitPathVariables = useImplicitPathVariables();
  const interceptPageLinks = React4.useCallback((event) => {
    const anchorElement = findAnchorElement(event.target, layoutRef.current,);
    if (event.metaKey || !navigate || !anchorElement) return;
    const didNavigate = navigateFromAttributes(navigate, anchorElement, implicitPathVariables,);
    if (didNavigate) {
      event.preventDefault();
    }
  }, [navigate, implicitPathVariables,],);
  useEffect(() => {
    const ref = layoutRef.current;
    if (!ref) return;
    ref.addEventListener('click', interceptPageLinks,);
    return () => ref.removeEventListener('click', interceptPageLinks,);
  }, [interceptPageLinks,],);
  const rawHTML = React4.useMemo(() => {
    if (!props.rawHTML || onCanvas || !getRoute || !currentRoute) return props.rawHTML;
    return replaceFramerPageLinks(props.rawHTML, getRoute, currentRoute, implicitPathVariables,);
  }, [props.rawHTML, getRoute, currentRoute, implicitPathVariables,],);
  return /* @__PURE__ */ jsx3(TextComponent, {
    ...props,
    innerRef: layoutRef,
    layoutId,
    parentSize,
    fontLoadStatus,
    rawHTML,
    matchesCurrentRoute,
  },);
},);
var TextComponent = /* @__PURE__ */ (() => {
  var _a;
  return _a = class extends Layer {
    constructor() {
      super(...arguments,);
      __publicField(this, 'editorText',);
      __publicField(this, 'setElement', (element) => {
        if (this.props.innerRef) {
          this.props.innerRef.current = element;
        }
        this.setLayerElement(element,);
      },);
      __publicField(this, 'renderMain', (inCodeComponent) => {
        countNodeRender();
        const {
          font,
          visible,
          alignment,
          opacity,
          id: id3,
          layoutId,
          className: className2,
          transition,
          variants,
          name,
          __fromCanvasComponent,
          _initialStyle,
          widthType: _widthType,
          heightType: _heightType,
          _usesDOMRect,
          autoSize,
          style: styleProp,
          fontLoadStatus,
          matchesCurrentRoute,
          preload: _preload,
          tabIndex,
          ...rest
        } = this.props;
        if (!visible) {
          return null;
        }
        const isHidden = this.props.isEditable && this.props.environment() === RenderTarget.canvas;
        const justifyContent = convertVerticalAlignment2(this.props.verticalAlignment,);
        const style2 = {
          outline: 'none',
          display: 'flex',
          flexDirection: 'column',
          justifyContent,
          opacity: isHidden ? 0 : opacity,
          flexShrink: 0,
        };
        if (_initialStyle) {
          for (const key7 in _initialStyle) {
            if (key7.startsWith('--framer',)) {
              asRecord(style2,)[key7] = asRecord(_initialStyle,)[key7];
            }
          }
        }
        const dataProps = {
          'data-framer-component-type': 'Text',
          'data-framer-name': rest['data-framer-name'] ?? name,
        };
        if (autoSize) {
          asRecord(dataProps,)['data-framer-component-text-autosized'] = 'true';
        }
        this.collectLayout(style2, inCodeComponent,);
        collectFiltersFromProps(this.props, style2,);
        collectTextShadowsForProps(this.props, style2,);
        if (style2.opacity === 1 || style2.opacity === void 0) {
          delete style2.opacity;
        }
        let rawHTML = this.props.rawHTML;
        const text = this.getOverrideText() || this.props.text;
        if (isString(text,)) {
          if (rawHTML) {
            rawHTML = replaceDraftHTMLWithText(rawHTML, text,);
          } else {
            rawHTML = `<p style="font: ${font}">${text}</p>`;
          }
        }
        if (this.props.style) {
          Object.assign(style2, this.props.style,);
        }
        const centeringTransformTemplate = this.transformTemplate;
        if (centeringTransformTemplate) Object.assign(dataProps, layoutHintDataPropsForCenter(this.props.center,),);
        if (rawHTML) {
          style2.lineHeight = '1px';
          style2.fontSize = '0px';
          if (RenderTarget.current() === RenderTarget.canvas && fontLoadStatus === 'loading') {
            style2.visibility = 'hidden';
          }
          if (RenderTarget.current() === RenderTarget.canvas && fontLoadStatus === 'timeout') {
            style2.backgroundColor = 'rgba(255, 0, 0, 0.3)';
          }
          Object.assign(style2, styleProp,);
          if (alignment) asRecord(style2,)['--framer-text-alignment'] = alignment;
          const tabIndexProps = getTabIndexProps(tabIndex,);
          return /* @__PURE__ */ jsx3(motion.div, {
            layoutId,
            id: id3,
            ...tabIndexProps,
            ...dataProps,
            ...rest,
            style: style2,
            transformTemplate: centeringTransformTemplate,
            dangerouslySetInnerHTML: {
              __html: rawHTML,
            },
            'data-center': this.props.center,
            className: cx(className2, matchesCurrentRoute && 'isCurrent',),
            transition,
            variants,
            ref: this.setElement,
          },);
        }
      },);
    }
    get frame() {
      return calculateRect(this.props, this.props.parentSize || 0, false,);
    }
    getOverrideText() {
      const {
        _forwardedOverrideId,
        _forwardedOverrides,
        id: id3,
      } = this.props;
      const forwardedOverrideId = _forwardedOverrideId ?? id3;
      if (forwardedOverrideId && _forwardedOverrides) {
        const text = _forwardedOverrides[forwardedOverrideId];
        if (isString(text,)) {
          return text;
        }
      }
    }
    render() {
      return /* @__PURE__ */ jsxs(Fragment, {
        children: [
          /* @__PURE__ */ jsx3(ComponentContainerContext.Consumer, {
            children: this.renderMain,
          },),
          /* @__PURE__ */ jsx3(TextStyleSheet, {},),
        ],
      },);
    }
    collectLayout(style2, inCodeComponent,) {
      if (this.props.withExternalLayout) return;
      const frame2 = this.frame;
      const {
        rotation,
        autoSize,
        positionSticky,
        positionStickyTop,
        positionStickyRight,
        positionStickyBottom,
        positionStickyLeft,
        width: externalWidth,
        height: externalHeight,
        _usesDOMRect,
        positionFixed,
        positionAbsolute,
      } = this.props;
      const rotate2 = Animatable.getNumber(rotation,);
      const isDOMLayoutAutoSized = _usesDOMRect && (externalWidth === 'auto' || externalHeight === 'auto');
      if (frame2 && !isDOMLayoutAutoSized && RenderTarget.hasRestrictions()) {
        Object.assign(style2, {
          transform: `translate(${frame2.x}px, ${frame2.y}px) rotate(${rotate2.toFixed(4,)}deg)`,
          // Using “auto” fixes wrapping problems where our size calculation does not work out well when zooming the
          // text (due to rendering differences).
          // TODO: When the `autoSize` prop is removed, it's safe to leave
          // this at `${frame.width}px`, because all auto cases will be
          // handled by DOM layout in the `else` side of the conditional
          width: autoSize ? 'auto' : `${frame2.width}px`,
          minWidth: `${frame2.width}px`,
          height: `${frame2.height}px`,
        },);
      } else {
        const {
          left,
          right,
          top,
          bottom,
        } = this.props;
        let width;
        let height;
        if (autoSize) {
          width = 'auto';
          height = 'auto';
        } else {
          if (!isFiniteNumber(left,) || !isFiniteNumber(right,)) {
            width = externalWidth;
          }
          if (!isFiniteNumber(top,) || !isFiniteNumber(bottom,)) {
            height = externalHeight;
          }
        }
        Object.assign(style2, {
          left,
          right,
          top,
          bottom,
          width,
          height,
          rotate: rotate2,
        },);
      }
      const onCanvas = RenderTarget.current() === RenderTarget.canvas;
      if (positionSticky) {
        if (!onCanvas || inCodeComponent) {
          style2.position = 'sticky';
          style2.willChange = 'transform';
          style2.zIndex = 1;
          style2.top = positionStickyTop;
          style2.right = positionStickyRight;
          style2.bottom = positionStickyBottom;
          style2.left = positionStickyLeft;
        }
      } else if (onCanvas && (positionFixed || positionAbsolute)) {
        style2.position = 'absolute';
      }
    }
    // biome-ignore lint/suspicious/useGetterReturn: legacy text component
    get transformTemplate() {
      const {
        _usesDOMRect,
        widthType,
        heightType,
        __fromCanvasComponent,
      } = this.props;
      if (this.props.transformTemplate) return this.props.transformTemplate;
      const frame2 = this.frame;
      const isDOMLayoutAutoSized = _usesDOMRect && (widthType === 2 || heightType === 2);
      const hasTransformTemplate = !frame2 || !RenderTarget.hasRestrictions() || __fromCanvasComponent || isDOMLayoutAutoSized;
      if (hasTransformTemplate) return transformTemplate(this.props.center,);
    }
  },
    __publicField(_a, 'supportsConstraints', true,),
    __publicField(_a, 'defaultTextProps', {
      opacity: void 0,
      left: void 0,
      right: void 0,
      top: void 0,
      bottom: void 0,
      _constraints: {
        enabled: true,
        aspectRatio: null,
      },
      rotation: 0,
      visible: true,
      alignment: void 0,
      verticalAlignment: 'top',
      shadows: [],
      font: '16px ' + deviceFont(),
    },),
    __publicField(_a, 'defaultProps', {
      ...Layer.defaultProps,
      ..._a.defaultTextProps,
      isEditable: false,
      environment: RenderTarget.current,
      withExternalLayout: false,
      fontLoadStatus: 'loading',
    },),
    _a;
})();
var linkTag = '(?:<a[^>]*>)?';
var linkClosingTag = '(?:</a>)?';
var outerTag = '<[^>]+>';
var outerClosingTag = '</[^>]+>';
var blockTag = '<(?:div|span)[^>]*>';
var blockClosingTag = '</(?:div|span)>';
var inlineTag = '<[^>]+>';
var inlineClosingTag = '</[^>]+>';
var textContentRegex =
  /* @__PURE__ */ (() =>
    new RegExp(
      `^(${linkTag}${outerTag}${blockTag}${inlineTag}).*?(${inlineClosingTag}).*?(${blockClosingTag}${outerClosingTag}${linkClosingTag})$`,
      //                                              ^^^ this is the content we want to replace
      //                                                                      ^^^ this is the content we want to discard
      'su',
      // let the "." also match newlines
    ))();
function replaceDraftHTMLWithText(rawHTML, text,) {
  return rawHTML.replace(
    textContentRegex,
    (_, openingTags, inlineClosingTag2, closingTags,) => openingTags + text + inlineClosingTag2 + '<br>' + closingTags,
  );
}
function convertVerticalAlignment2(verticalAlignment,) {
  switch (verticalAlignment) {
    case 'top':
      return 'flex-start';
    case 'center':
      return 'center';
    case 'bottom':
      return 'flex-end';
  }
}
function getTabIndexProps(tabIndex,) {
  if (tabIndex === void 0) return {};
  return {
    tabIndex,
  };
}
var keys22 = /* @__PURE__ */ new Map();
var InternalID = class _InternalID {
  constructor(id3,) {
    this.id = id3;
    __publicField(this, '_link', null,);
    __publicField(this, '_urllink', null,);
  }
  add(str,) {
    return _InternalID.forKey(this.id + str,);
  }
  toString() {
    return this.id;
  }
  get link() {
    const res = this._link;
    if (res) return res;
    return this._link = '#' + this.id;
  }
  get urlLink() {
    const res = this._urllink;
    if (res) return res;
    return this._urllink = 'url(#' + this.id + ')';
  }
  static forKey(key7,) {
    let res = keys22.get(key7,);
    if (res) return res;
    res = new _InternalID('a' + (1e3 + keys22.size) + 'z',);
    keys22.set(key7, res,);
    return res;
  }
};
var PathSegmentOuter = /* @__PURE__ */ (() => {
  const _PathSegment = class _PathSegment {
    constructor(value,) {
      __publicField(this, '__class', 'PathSegment',);
      __publicField(this, 'x', 0,);
      __publicField(this, 'y', 0,);
      __publicField(this, 'handleMirroring', 'straight',);
      __publicField(this, 'handleOutX', 0,);
      __publicField(this, 'handleOutY', 0,);
      __publicField(this, 'handleInX', 0,);
      __publicField(this, 'handleInY', 0,);
      __publicField(this, 'radius', 0,);
      if (value) {
        Object.assign(this, value,);
      }
    }
    merge(value,) {
      return Object.assign(Object.create(Object.getPrototypeOf(this,),), this, value,);
    }
  };
  __publicField(_PathSegment, 'displayName', 'WithClassDiscriminatorMixin(PathSegment)',);
  __publicField(_PathSegment, 'point', (pathSegment) => {
    return {
      x: pathSegment.x,
      y: pathSegment.y,
    };
  },);
  __publicField(_PathSegment, 'handleOut', (pathSegment) => {
    return {
      x: pathSegment.handleOutX,
      y: pathSegment.handleOutY,
    };
  },);
  __publicField(_PathSegment, 'handleIn', (pathSegment) => {
    return {
      x: pathSegment.handleInX,
      y: pathSegment.handleInY,
    };
  },);
  __publicField(_PathSegment, 'calculatedHandleOut', (pathSegment) => {
    switch (pathSegment.handleMirroring) {
      case 'symmetric':
      case 'disconnected':
      case 'asymmetric':
        return Point.add(_PathSegment.point(pathSegment,), _PathSegment.handleOut(pathSegment,),);
      default:
        return {
          x: pathSegment.x,
          y: pathSegment.y,
        };
    }
  },);
  __publicField(_PathSegment, 'calculatedHandleIn', (pathSegment) => {
    switch (pathSegment.handleMirroring) {
      case 'symmetric':
        return Point.subtract(_PathSegment.point(pathSegment,), _PathSegment.handleOut(pathSegment,),);
      case 'disconnected':
      case 'asymmetric':
        return Point.add(_PathSegment.point(pathSegment,), _PathSegment.handleIn(pathSegment,),);
      default:
        return _PathSegment.point(pathSegment,);
    }
  },);
  __publicField(_PathSegment, 'curveDefault', (points, index,) => {
    if (points.length > 2) {
      let pointBefore;
      let pointAfter;
      if (index === 0) {
        pointBefore = points[points.length - 1];
      } else {
        pointBefore = points[index - 1];
      }
      if (index === points.length - 1) {
        pointAfter = points[0];
      } else {
        pointAfter = points[index + 1];
      }
      assert(pointBefore, 'pointBefore should be defined',);
      assert(pointAfter, 'pointAfter should be defined',);
      const delta = Point.subtract(_PathSegment.point(pointAfter,), _PathSegment.point(pointBefore,),);
      return {
        x: delta.x / 4,
        y: delta.y / 4,
      };
    }
    return {
      x: 10,
      y: 10,
    };
  },);
  let PathSegment2 = _PathSegment;

  PathSegment2.prototype.__class = 'PathSegment';
  return PathSegment2;
})();
var PathSegment = PathSegmentOuter;
var key5 = 'pathSegments';
function withPath(target,) {
  return key5 in target;
}
var pathDefaults = {
  pathSegments: [],
  pathClosed: false,
};
function toSVGPath(withPaths, translate = {
  x: 0,
  y: 0,
}, canvasMode = RenderTarget.canvas,) {
  let pathElements = [];
  let paths = [];
  if (Array.isArray(withPaths,)) {
    paths = withPaths;
  } else {
    paths = [withPaths,];
  }
  paths.forEach((path) => {
    const {
      pathClosed,
      pathSegments,
    } = path;
    const segmentCount = pathSegments.length;
    if (segmentCount === 0) return '';
    for (let i = 0; i < segmentCount; i++) {
      const segment = pathSegments[i];
      assert(segment, 'Path segment must be defined',);
      let nextSegment;
      let prevSegment;
      const isFirstSegment = i === 0;
      const isLastSegment = i === segmentCount - 1;
      if (!isLastSegment) {
        nextSegment = pathSegments[i + 1];
      } else if (pathClosed) {
        nextSegment = pathSegments[0];
      }
      if (!isFirstSegment) {
        prevSegment = pathSegments[i - 1];
      } else if (pathClosed) {
        prevSegment = pathSegments[segmentCount - 1];
      }
      if (i === 0) {
        pathElements.push('M',);
      } else if (prevSegment && isStraightCurve(prevSegment, segment,)) {
        pathElements.push('L',);
      }
      pathElements.push(segment.x + translate.x, segment.y + translate.y,);
      if (nextSegment && !isStraightCurve(segment, nextSegment,)) {
        const handleOut = PathSegment.calculatedHandleOut(segment,);
        const handleIn = PathSegment.calculatedHandleIn(nextSegment,);
        pathElements.push('C', handleOut.x + translate.x, handleOut.y + translate.y, handleIn.x + translate.x, handleIn.y + translate.y,);
      }
      if (isLastSegment && nextSegment) {
        if (isStraightCurve(segment, nextSegment,)) {
          pathElements.push('Z',);
        } else {
          pathElements.push(nextSegment.x + translate.x, nextSegment.y + translate.y, 'Z',);
        }
      }
    }
  },);
  if (canvasMode === RenderTarget.export || canvasMode === RenderTarget.preview) {
    pathElements = pathElements.map((value) => isFiniteNumber(value,) ? roundedNumberString(value, 3,) : value);
  }
  return pathElements.join(' ',);
}
function isStraightCurve(fromSegment, toSegment,) {
  const fromStraight = fromSegment.handleMirroring === 'straight' || fromSegment.handleOutX === 0 && fromSegment.handleOutY === 0;
  const toStraight = toSegment.handleMirroring === 'straight' || toSegment.handleInX === 0 && toSegment.handleInY === 0;
  return fromStraight && toStraight;
}
var svgElementAttributeDefaults = {
  stroke: 'none',
  strokeWidth: 1,
  strokeLinecap: 'butt',
  strokeLinejoin: 'miter',
  strokeMiterlimit: 4,
  strokeDasharray: '0',
  strokeDashoffset: 0,
  strokeOpacity: 1,
  fill: 'black',
  fillRule: 'nonzero',
  fillOpacity: 1,
};
function createTransformValues(baseTransform, mode,) {
  let {
    x,
    y,
  } = baseTransform;
  const {
    width,
    height,
    rotation,
  } = baseTransform;
  if (mode === 'resetXY') {
    x = 0;
    y = 0;
  }
  return {
    x,
    y,
    width,
    height,
    rotation,
  };
}
function getTransformMode(isRootVectorNode, includeTransform,) {
  if (includeTransform !== void 0) {
    if (includeTransform) {
      return 'asIs';
    }
  } else {
    if (!isRootVectorNode) {
      return 'asIs';
    }
  }
  return 'resetXY';
}
function transformValues(rect, rotation, isRootVectorNode, includeTransform,) {
  const transformMode = getTransformMode(isRootVectorNode, includeTransform,);
  const baseTransform = {
    ...rect,
    rotation: includeTransform === false ? 0 : rotation,
  };
  const transform2 = createTransformValues(baseTransform, transformMode,);
  return transform2;
}
function transformString2(transform2,) {
  if (transform2 === void 0) {
    return void 0;
  }
  const {
    x,
    y,
    rotation,
    width,
    height,
  } = transform2;
  let result;
  if (x !== 0 || y !== 0) {
    result = `translate(${roundedNumberString(x, 3,)} ${roundedNumberString(y, 3,)})`;
  }
  if (rotation !== 0) {
    const roundedRotation = roundedNumberString(rotation, 4,);
    const roundedWidth = roundedNumberString(width / 2, 3,);
    const roundedHeight = roundedNumberString(height / 2, 3,);
    const rotationString = `rotate(${roundedRotation} ${roundedWidth} ${roundedHeight})`;
    result = result ? `${result} ${rotationString}` : rotationString;
  }
  return result;
}
var LinearGradientElement = class extends Component2 {
  render() {
    const {
      id: id3,
      stops,
      x1,
      x2,
      y1,
      y2,
    } = this.props;
    return /* @__PURE__ */ jsx3('linearGradient', {
      id: id3,
      x1,
      x2,
      y1,
      y2,
      children: stops.map((stop, idx,) => {
        return /* @__PURE__ */ jsx3('stop', {
          offset: stop.position,
          stopColor: stop.color,
          stopOpacity: stop.alpha,
        }, idx,);
      },),
    },);
  }
};
var RadialGradientElement = class extends Component2 {
  render() {
    const {
      centerAnchorX,
      centerAnchorY,
      id: id3,
      widthFactor,
      heightFactor,
      stops,
    } = this.props;
    return /* @__PURE__ */ jsx3('radialGradient', {
      id: id3,
      cy: centerAnchorY,
      cx: centerAnchorX,
      r: widthFactor,
      gradientTransform: getRadialGradientTransform(heightFactor, widthFactor, centerAnchorX, centerAnchorY,),
      children: stops.map((stop, idx,) => {
        return /* @__PURE__ */ jsx3('stop', {
          offset: stop.position,
          stopColor: stop.color,
          stopOpacity: stop.alpha,
        }, idx,);
      },),
    },);
  }
};
function getRadialGradientTransform(heightFactor, widthFactor, centerAnchorX, centerAnchorY,) {
  const scaleWidth = widthFactor ? heightFactor / widthFactor : 1e3;
  return `translate(${centerAnchorX}, ${centerAnchorY}) scale(1 ${scaleWidth}) translate(-${centerAnchorX}, -${centerAnchorY})`;
}
var SVGRoot = (props) => {
  const {
    id: id3,
    children,
    left,
    width,
    height,
    top,
    style: style2,
    _needsMeasure,
  } = props;
  const inCodeComponent = React4.useContext(ComponentContainerContext,);
  const ref = React4.useRef(null,);
  useMeasureLayout({
    id: id3,
    // SVGRoot won't be rendered if the node is invisible.
    visible: true,
    _needsMeasure,
  }, ref,);
  const svgStyle = {
    position: 'absolute',
    width,
    height,
    left,
    top,
    overflow: 'visible',
    display: 'block',
    ...style2,
  };
  const svgProps = {
    // Avoid duplicating IDs when the SVG is rendered through slots. We only need the ID for
    // measurement so code component descendants don't matter.
    id: inCodeComponent ? void 0 : id3,
    viewBox: `0 0 ${width} ${height}`,
    ref,
  };
  const needsScale = isSafari() ? window.devicePixelRatio !== 1 : window.devicePixelRatio === 1;
  const needsTranslate = window.devicePixelRatio === 1;
  if (!needsScale && !needsTranslate) {
    return /* @__PURE__ */ jsx3('svg', {
      role: 'presentation',
      ...svgProps,
      style: svgStyle,
      children,
    },);
  }
  const svgTransform = needsScale
    ? {
      transform: 'scale(2)',
    }
    : void 0;
  return /* @__PURE__ */ jsx3('svg', {
    role: 'presentation',
    ...svgProps,
    style: {
      ...svgStyle,
      ...svgTransform,
    },
    children: /* @__PURE__ */ jsx3('g', {
      style: {
        // The default value of transform-origin is 0 0 for all SVG elements except
        // for root <svg> elements:
        // https://developer.mozilla.org/en-US/docs/Web/SVG/Reference/Attribute/transform-origin
        transformOrigin: 'center',
        transform: getShapeTransform(needsScale, needsTranslate, left, top,),
      },
      children,
    },),
  },);
};
function getShapeTransform(needsScale, needsTranslate, left, top,) {
  const l = Math.floor(left,) - left;
  const t = Math.floor(top,) - top;
  const transforms = [];
  if (needsScale) transforms.push('scale(0.5)',);
  if (needsTranslate && (l || t)) transforms.push(`translate(${l}px, ${t}px)`,);
  return transforms.length ? transforms.join(' ',) : void 0;
}
var Vector = /* @__PURE__ */ (() => {
  var _a;
  return _a = class extends Layer {
    render() {
      countNodeRender();
      const {
        opacity,
        calculatedPath,
        calculatedPathBoundingBox,
        d,
        insideStroke,
        strokeEnabled,
        strokeClipId,
        strokeWidth,
        idAttribute,
        shadows,
        name,
        includeTransform,
        isRootVectorNode,
        rotation,
        id: id3,
        lineCap,
        lineJoin,
        strokeColor,
        strokeMiterLimit,
        strokeDashArray,
        strokeDashOffset,
        fill,
        variants,
        transition,
        fillOpacity,
        visible,
        x,
        y,
        width,
        height,
      } = this.props;
      if (!visible) return null;
      if (!id3 || !strokeClipId) return null;
      const rotate2 = this.props.rotate ?? rotation ?? 0;
      const {
        target,
      } = RenderEnvironment;
      const rect = {
        x,
        y,
        width,
        height,
      };
      const transform2 = transformValues(rect, rotate2, isRootVectorNode, includeTransform,);
      let vectorFill;
      let fillAlpha = 0;
      let imagePattern;
      let linearGradient;
      let radialGradient;
      if (isString(fill,) || Color.isColorObject(fill,)) {
        const fillColor = Color.isColorObject(fill,) ? fill.initialValue || Color.toRgbString(fill,) : fill;
        if (fillColor !== 'transparent') {
          vectorFill = fillColor;
          fillAlpha = ConvertColor.getAlpha(vectorFill,);
        }
      } else if (LinearGradient.isLinearGradient(fill,)) {
        linearGradient = elementPropertiesForLinearGradient(fill, id3,);
        vectorFill = `url(#${linearGradient.id})`;
        fillAlpha = 1;
      } else if (RadialGradient.isRadialGradient(fill,)) {
        radialGradient = elementPropertiesForRadialGradient(fill, id3,);
        vectorFill = `url(#${radialGradient.id})`;
        fillAlpha = 1;
      } else if (BackgroundImage.isImageObject(fill,)) {
        imagePattern = imagePatternPropsForFill(fill, transform2, id3, includeTransform,);
        if (imagePattern) {
          vectorFill = `url(#${imagePattern.id})`;
          fillAlpha = 1;
        }
      }
      if (vectorFill === svgElementAttributeDefaults.fill) {
        vectorFill = void 0;
      }
      if (vectorFill === void 0) {
        vectorFill = 'transparent';
      }
      const fillEnabled = vectorFill !== void 0 && vectorFill !== 'transparent' && fillAlpha !== 0;
      if (!fillEnabled && !strokeEnabled) {
        fillAlpha = 1;
      }
      let mainElement;
      let strokeClipPath = null;
      let shapeReference = null;
      let strokeElement = null;
      let pathTranslate;
      let elementTransform;
      const translatePaths = target === RenderTarget.export;
      if (transform2.rotation === 0 && translatePaths) {
        pathTranslate = transform2;
      } else {
        pathTranslate = {
          x: 0,
          y: 0,
        };
        elementTransform = transformString2(transform2,);
      }
      const pathAttributes = {
        d: d ?? toSVGPath(calculatedPath, pathTranslate, target,),
        transform: elementTransform,
      };
      const svgStrokeAttributes = {};
      if (strokeEnabled && strokeWidth !== 0) {
        svgStrokeAttributes.strokeWidth = strokeWidth;
        svgStrokeAttributes.stroke = strokeColor;
        svgStrokeAttributes.strokeLinecap = lineCap;
        svgStrokeAttributes.strokeLinejoin = lineJoin;
        if (lineJoin === 'miter') {
          svgStrokeAttributes.strokeMiterlimit = strokeMiterLimit;
        }
        svgStrokeAttributes.strokeDasharray = strokeDashArray;
        if (strokeDashOffset !== 0) {
          svgStrokeAttributes.strokeDashoffset = strokeDashOffset;
        }
      }
      for (const key7 in svgElementAttributeDefaults) {
        if (asRecord(svgStrokeAttributes,)[key7] === asRecord(svgElementAttributeDefaults,)[key7]) {
          asRecord(svgStrokeAttributes,)[key7] = void 0;
        }
      }
      const internalShapeId = InternalID.forKey(id3,);
      const internalStrokeClipId = InternalID.forKey(strokeClipId,);
      const shadow = shadowForShape(
        shadows,
        // Shadow filter uses 'objectBoundingBox' as filter units, so calculations should be
        // relative to the referenced object itself (path), instead of the node rect, which
        // can be larger than the path bounding box.
        calculatedPathBoundingBox,
        internalShapeId,
        Boolean(fill,),
        strokeEnabled,
        strokeWidth,
        internalStrokeClipId,
        svgStrokeAttributes,
      );
      const currentName = target === RenderTarget.preview ? name || void 0 : void 0;
      if (shadow.insetElement !== null || shadow.outsetElement !== null || insideStroke) {
        pathAttributes.id = internalShapeId.id;
        shapeReference = /* @__PURE__ */ jsx3(motion.path, {
          ...{
            ...pathAttributes,
          },
          variants,
          transition,
        },);
        if (shadow.needsStrokeClip || insideStroke) {
          strokeClipPath = /* @__PURE__ */ jsx3('clipPath', {
            id: internalStrokeClipId.id,
            children: /* @__PURE__ */ jsx3('use', {
              xlinkHref: internalShapeId.link,
            },),
          },);
        }
        if (shadow.insetElement !== null && strokeEnabled && strokeWidth && strokeWidth > 0) {
          mainElement = /* @__PURE__ */ jsx3('use', {
            xlinkHref: internalShapeId.link,
            fill: vectorFill,
            fillOpacity,
            strokeOpacity: '0',
            name: currentName,
          },);
          strokeElement = /* @__PURE__ */ jsx3('use', {
            xlinkHref: internalShapeId.link,
            clipPath: internalStrokeClipId.urlLink,
            fill: 'transparent',
            ...svgStrokeAttributes,
            strokeWidth,
          },);
        } else {
          mainElement = /* @__PURE__ */ jsx3('use', {
            xlinkHref: internalShapeId.link,
            fill: vectorFill,
            fillOpacity,
            clipPath: internalStrokeClipId.urlLink,
            ...svgStrokeAttributes,
            strokeWidth,
            name: currentName,
          },);
        }
      } else {
        pathAttributes.id = idAttribute;
        mainElement = /* @__PURE__ */ jsx3(motion.path, {
          ...{
            ...pathAttributes,
            fill: vectorFill,
            ...svgStrokeAttributes,
          },
          name: currentName,
          fillOpacity,
          variants,
          transition,
        },);
      }
      const imagePatternElement = imagePattern
        ? /* @__PURE__ */ jsx3(ImagePatternElement, {
          ...imagePattern,
          repeat: BackgroundImage.isImageObject(fill,) && fill.fit === 'tile',
        },)
        : void 0;
      let gradient;
      if (linearGradient) {
        gradient = /* @__PURE__ */ jsx3(LinearGradientElement, {
          ...linearGradient,
        },);
      } else if (radialGradient) {
        gradient = /* @__PURE__ */ jsx3(RadialGradientElement, {
          ...radialGradient,
        },);
      }
      let defs = null;
      if (shapeReference || strokeClipPath || shadow.definition && shadow.definition.length || gradient || imagePatternElement) {
        defs = /* @__PURE__ */ jsxs('defs', {
          children: [shapeReference, strokeClipPath, shadow.definition, gradient, imagePatternElement,],
        },);
      }
      const opacityValue = opacity ?? (variants ? 1 : void 0);
      if (defs === null && shadow.outsetElement === null && shadow.insetElement === null && strokeElement === null) {
        mainElement = /* @__PURE__ */ jsx3(motion.path, {
          ...{
            ...pathAttributes,
            fill: vectorFill,
            ...svgStrokeAttributes,
          },
          fillOpacity,
          opacity: opacityValue,
          variants,
          transition,
          name: currentName,
        },);
        return this.renderElement(mainElement,);
      }
      return this.renderElement(/* @__PURE__ */ jsxs(motion.g, {
        opacity: opacityValue,
        variants,
        transition,
        children: [defs, shadow.maskElement, shadow.outsetElement, mainElement, shadow.insetElement, strokeElement,],
      },),);
    }
    renderElement(element,) {
      const {
        id: id3,
        isRootVectorNode,
        width,
        height,
        includeTransform,
        left,
        top,
        style: style2,
        _needsMeasure,
      } = this.props;
      if (!isRootVectorNode) return element;
      if (includeTransform) return element;
      return /* @__PURE__ */ jsx3(SVGRoot, {
        id: id3,
        width,
        height,
        left,
        top,
        style: style2,
        _needsMeasure,
        children: element,
      },);
    }
  },
    __publicField(_a, 'defaultVectorProps', {
      isRootVectorNode: false,
      name: null,
      includeTransform: void 0,
      defaultFillColor: void 0,
      defaultStrokeColor: void 0,
      defaultStrokeWidth: void 0,
      defaultStrokeAlignment: 'center',
      width: 100,
      height: 100,
      x: 0,
      y: 0,
      left: 0,
      top: 0,
      rotation: 0,
      rotate: void 0,
      opacity: void 0,
      calculatedPath: [],
      calculatedPathBoundingBox: {
        x: 0,
        y: 0,
        width: 0,
        height: 0,
      },
      d: void 0,
      insideStroke: false,
      strokeEnabled: true,
      strokeClipId: void 0,
      strokeWidth: void 0,
      idAttribute: void 0,
      transition: void 0,
      shadows: [],
      strokeAlpha: 1,
      lineCap: 'butt',
      strokeColor: '#0AF',
      lineJoin: 'miter',
      strokeMiterLimit: 4,
      strokeDashArray: '0',
      strokeDashOffset: 0,
      fill: 'rgba(0,170,255,0.5)',
      visible: void 0,
    },),
    __publicField(_a, 'defaultProps', {
      ...Layer.defaultProps,
      ..._a.defaultVectorProps,
    },),
    _a;
})();
var VectorGroup = /* @__PURE__ */ (() => {
  var _a;
  return _a = class extends Layer {
    render() {
      countNodeRender();
      const {
        name: nameProp,
        opacity,
        visible,
        targetName,
        defaultName,
        children,
        includeTransform,
        x,
        y,
        width,
        height,
        rotation,
        isRootVectorNode,
      } = this.props;
      if (!visible) return null;
      const {
        target,
      } = RenderEnvironment;
      const rect = {
        x,
        y,
        width,
        height,
      };
      const transform2 = transformValues(rect, rotation, isRootVectorNode, includeTransform,);
      const addNames = target === RenderTarget.preview;
      let name = void 0;
      if (addNames) {
        if (targetName) {
          name = targetName;
        } else if (nameProp) {
          name = nameProp;
        } else {
          name = defaultName;
        }
      }
      return this.renderElement(/* @__PURE__ */ jsx3('g', {
        transform: transformString2(transform2,),
        ...{
          name,
          opacity,
        },
        children,
      },),);
    }
    renderElement(element,) {
      const {
        id: id3,
        isRootVectorNode,
        width,
        height,
        includeTransform,
        left,
        top,
        style: style2,
        _needsMeasure,
      } = this.props;
      if (!isRootVectorNode) return element;
      if (includeTransform) return element;
      return /* @__PURE__ */ jsx3(SVGRoot, {
        id: id3,
        left,
        top,
        width,
        height,
        style: style2,
        _needsMeasure,
        children: element,
      },);
    }
  },
    __publicField(_a, 'defaultVectorGroupProps', {
      name: void 0,
      opacity: void 0,
      visible: true,
      x: 0,
      y: 0,
      left: 0,
      top: 0,
      rotation: 0,
      width: 100,
      height: 100,
      targetName: void 0,
      defaultName: '',
      isRootVectorNode: false,
      includeTransform: void 0,
    },),
    __publicField(_a, 'defaultProps', {
      ...Layer.defaultProps,
      ..._a.defaultVectorGroupProps,
    },),
    _a;
})();
var key6 = 'calculatedPaths';
function withShape(target,) {
  if (!isObject2(target,)) return false;
  return key6 in target;
}
var Size = /* @__PURE__ */ (() => {
  function Size2(width, height,) {
    return {
      width,
      height,
    };
  }
  Size2.equals = (sizeA, sizeB,) => {
    if (sizeA === sizeB) return true;
    if (!sizeA || !sizeB) return false;
    return sizeA.width === sizeB.width && sizeA.height === sizeB.height;
  };
  Size2.update = (fromSize, toSize, keepAspectRatio = false,) => {
    let {
      width,
      height,
    } = fromSize;
    const sizeRatio = width / height;
    width = toSize.width !== void 0 ? toSize.width : width;
    height = toSize.height !== void 0 ? toSize.height : height;
    if (keepAspectRatio) {
      if (toSize.width === void 0 && toSize.height !== void 0) {
        width = toSize.height * sizeRatio;
      }
      if (toSize.width !== void 0 && toSize.height === void 0 && sizeRatio !== 0) {
        height = toSize.width / sizeRatio;
      }
    }
    return {
      width,
      height,
    };
  };
  Size2.subtract = (sizeA, sizeB,) => {
    return {
      width: Math.max(0, sizeA.width - sizeB.width,),
      height: Math.max(0, sizeA.height - sizeB.height,),
    };
  };
  Size2.zero = Size2(0, 0,);
  Size2.isZero = function (size,) {
    return size === Size2.zero || size.width === 0 && size.height === 0;
  };
  Size2.defaultIfZero = function (width, height, size,) {
    if (Size2.isZero(size,)) {
      return Size2(width, height,);
    }
    return size;
  };
  return Size2;
})();
function annotateTypeOnStringify(ctor, typeName,) {
  const existingToJSON = ctor.prototype.toJSON;
  ctor.prototype.toJSON = function () {
    const base = existingToJSON ? existingToJSON.apply(this,) : this;
    return Object.assign({}, base, {
      __type__: typeName,
    },);
  };
  return ctor;
}
function isOfAnnotatedType(object, typeName,) {
  return object && object.__type__ && object.__type__ === typeName;
}
var LOADING_LAZY_THRESHOLD = 1e3;
function getLoadingLazyAtYPosition(offset,) {
  return offset > LOADING_LAZY_THRESHOLD ? 'lazy' : void 0;
}
function gradientForShape(nodeId, node,) {
  if (LinearGradient.isLinearGradient(node.fill,)) {
    return elementPropertiesForLinearGradient(node.fill, nodeId,);
  }
  if (RadialGradient.isRadialGradient(node.fill,)) {
    return elementPropertiesForRadialGradient(node.fill, nodeId,);
  }
  return void 0;
}
function throttle(fn, time2,) {
  let previous = 0;
  let timeout;
  const later = (...args) => {
    previous = Date.now();
    timeout = void 0;
    fn(...args,);
  };
  return (...args) => {
    const now2 = Date.now();
    const remaining = time2 - (now2 - previous);
    if (remaining <= 0 || remaining > time2) {
      if (timeout) {
        safeWindow.clearTimeout(timeout,);
        timeout = void 0;
      }
      previous = now2;
      fn(...args,);
    } else if (!timeout) {
      timeout = safeWindow.setTimeout(later, remaining, ...args,);
    }
  };
}
function addActionControls(action, title, controls,) {
  runtime.addActionControls(action, title, controls,);
}
function addFonts(component, passedFonts, flags,) {
  const fonts = convertMixedFontArrayToFontBundles(passedFonts,);
  if (
    !(flags == null ? void 0 : flags.supportsExplicitInterCodegen) &&
    // Only emit an `explicitInter: false` bundle if we don’t already have one.
    !fonts.some((font) => font.explicitInter === false)
  ) {
    fonts.push({
      explicitInter: false,
      fonts: [],
    },);
  }
  Object.assign(component, {
    fonts,
  },);
}
function getFonts(component,) {
  const fonts = component.fonts;
  return fonts ?? [];
}
function getFontsFromSharedStyle(fonts,) {
  if (fonts.length === 0) {
    return [{
      explicitInter: false,
      fonts: [],
    },];
  }
  return convertMixedFontArrayToFontBundles(fonts,);
}
function getFontsFromComponentPreset(fonts,) {
  if (fonts.length === 0) {
    return [{
      explicitInter: false,
      fonts: [],
    },];
  }
  return convertMixedFontArrayToFontBundles(fonts,);
}
function convertMixedFontArrayToFontBundles(fonts,) {
  const oldFontBundle = {
    explicitInter: false,
    fonts: [],
  };
  const fontBundles = [];
  for (const fontOrBundle of fonts) {
    if (isComponentFontBundle(fontOrBundle,)) {
      fontBundles.push(fontOrBundle,);
    } else {
      oldFontBundle.fonts.push(upgradeComponentFontV1(fontOrBundle,),);
    }
  }
  if (oldFontBundle.fonts.length > 0) fontBundles.push(oldFontBundle,);
  return fontBundles;
}
var componentFontBundleKey = 'explicitInter';
function isComponentFontBundle(font,) {
  return componentFontBundleKey in font;
}
function upgradeComponentFontV1(font,) {
  let source;
  if (font.url.startsWith('https://fonts.gstatic.com/s/',)) {
    source = 'google';
  } else if (font.url.startsWith('https://framerusercontent.com/third-party-assets/fontshare/',)) {
    source = 'fontshare';
  } else {
    source = 'custom';
  }
  return {
    ...font,
    source,
  };
}
function withPerformanceMarks(prefix2, callback,) {
  const markStart = `${prefix2}-start`;
  performance.mark(markStart,);
  callback();
  const markEnd = `${prefix2}-end`;
  performance.mark(markEnd,);
  performance.measure(prefix2, markStart, markEnd,);
}
function loadJSON(url,) {
  return fetch(url, {
    mode: 'cors',
  },).then((res) => res.json());
}
function inspectObjectType(item,) {
  let className2;
  if (
    (item.constructor !== null ? item.constructor.name : void 0) !== null &&
    (item.constructor !== null ? item.constructor.name : void 0) !== 'Object'
  ) {
    return item.constructor.name;
  }
  const extract = function (str,) {
    if (!str) {
      return null;
    }
    const regex2 = /\[object (\w+)\]/u;
    const match = regex2.exec(str,);
    if (match) {
      return match[1];
    }
    return null;
  };
  if (item.toString) {
    className2 = extract(item.toString(),);
    if (className2) {
      return className2;
    }
  }
  if (item.constructor !== null ? item.constructor.toString : void 0) {
    className2 = extract(item.constructor !== null ? item.constructor.toString() : void 0,);
    if (className2) {
      return className2.replace('Constructor', '',);
    }
  }
  return 'Object';
}
function inspect(item, max, l,) {
  if (max === void 0) {
    max = 5;
  }
  if (l === void 0) {
    l = 0;
  }
  if (item === null) {
    return 'null';
  }
  if (item === void 0) {
    return 'undefined';
  }
  if (isObject2(item,) && isFunction(item.toInspect,)) {
    return item.toInspect();
  }
  if (isString(item,)) {
    return `"${item}"`;
  }
  if (isNumber2(item,)) {
    return `${item}`;
  }
  if (isFunction(item,)) {
    let code = item.toString().slice('function '.length,).replace(/\n/gu, '',).replace(/\s+/gu, ' ',);
    const limit = 50;
    if (code.length > limit && l > 0) {
      code = `${code.slice(0, limit + 1,).trim()}\u2026 }`;
    }
    return `<Function ${code}>`;
  }
  if (isArray(item,)) {
    if (l > max) {
      return '[...]';
    }
    return `[${item.map((i) => inspect(i, max, (l || 0) + 1,)).join(', ',)}]`;
  }
  if (isObject2(item,)) {
    let objectInfo;
    const objectType = inspectObjectType(item,);
    if (/HTML\w+?Element/u.test(objectType,)) {
      return `<${objectType}>`;
    }
    if (l > max) {
      objectInfo = '{...}';
    } else {
      const itemKeys = Object.keys(item,);
      objectInfo = `{${itemKeys.map((k) => `${k}:${inspect(item[k], max, (l || 0) + 1,)}`).join(', ',)}}`;
    }
    if (objectType === 'Object') {
      return objectInfo;
    }
    return `<${objectType} ${objectInfo}>`;
  }
  return `${item}`;
}
function print(...args) {
  const line = args.map((arg) => {
    return inspect(arg,);
  },).join(', ',);
  console.log(line,);
}
function initialRouteComponent(component,) {
  if (!component) return null;
  if (withPreload(component,)) return null;
  return component;
}
function useInitialRouteComponent(routes, homeNodeId,) {
  var _a;
  const InitialRouteComponent = (_a = routes[homeNodeId]) == null ? void 0 : _a.page;
  const [RouteComponent, setRouteComponent,] = useState(initialRouteComponent(InitialRouteComponent,),);
  useEffect(() => {
    if (withPreload(InitialRouteComponent,)) {
      void InitialRouteComponent.preload().then(setRouteComponent,);
    }
  }, [],);
  return RouteComponent;
}
var package_default = {
  name: 'framer',
  version: '2.4.1',
  private: true,
  type: 'module',
  author: 'Framer',
  license: 'MIT',
  scripts: {
    coverage: 'yarn :jest --coverage',
    lint: 'yarn :eslint ./src --ext .ts,.tsx --format codeframe --quiet --cache',
    'lint:ci': 'yarn lint --cache-strategy content --cache-location $HOME/.cache/eslint/framer-library',
    'lint:fix': 'yarn lint --fix',
    test: 'yarn :jest',
    watch: 'yarn :jest --watch',
    postinstall: 'node postinstall.cjs',
  },
  dependencies: {
    eventemitter3: '^5.0.1',
    fontfaceobserver: '2.2.0',
    'hoist-non-react-statics': '^3.3.2',
    hsluv: '^1.0.1',
  },
  devDependencies: {
    '@juggle/resize-observer': '^3.4.0',
    '@microsoft/api-extractor': '^7.52.3',
    '@testing-library/dom': '^8.19.1',
    '@testing-library/jest-dom': '^5.16.5',
    '@testing-library/react': '^13.4.0',
    '@testing-library/user-event': '^14.4.3',
    '@types/dom-navigation': '^1.0.5',
    '@types/google.fonts': '^1.0.5',
    '@types/node': '^20.16.5',
    '@types/react': '^18.2.67',
    '@types/react-dom': '^18.2.22',
    '@types/yargs': '^17.0.33',
    '@typescript-eslint/eslint-plugin': '^8.32.1',
    '@typescript-eslint/parser': '^8.32.1',
    chalk: '^4.1.2',
    eslint: '^8.57.1',
    'eslint-plugin-framer-studio': 'workspace:*',
    immutable: '^3.8.2',
    'jest-diff': '^29.3.1',
    'jest-environment-jsdom': '^29.3.1',
    'jest-environment-jsdom-global': '^4.0.0',
    'jest-junit': '^15.0.0',
    react: '^18.2.0',
    'react-dom': '^18.2.0',
    semver: '^7.7.1',
    typescript: '^5.7.3',
    yargs: '^17.7.2',
  },
  peerDependencies: {
    'framer-motion': '12.14.0',
    react: '^18.2.0',
    'react-dom': '^18.2.0',
  },
  tsdoc: {
    tsdocFlavor: 'AEDoc',
  },
  browserslist: ['extends @framer/browserslist-config/sites',],
};
var version = /* @__PURE__ */ (() => package_default.version)();
MotionValue.prototype.addChild = function ({
  transformer = (v) => v,
},) {
  const child = motionValue(transformer(this.get(),),);
  this.onChange((v) => child.set(transformer(v,),));
  return child;
};
if (false) {
  MainLoop2.start();
}
export {
  _injectRuntime,
  acceleratedValues2 as acceleratedValues,
  activeAnimations,
  addActionControls,
  addAttrValue,
  addFonts,
  addPointerEvent,
  addPointerInfo,
  addPropertyControls,
  addScaleCorrector,
  addStyleValue,
  addUniqueItem,
  alpha,
  analyseComplexValue,
  AnchorLinkTarget,
  Animatable,
  animate2 as animate,
  animateMini,
  AnimatePresence,
  AnimateSharedLayout,
  animateValue,
  animateView,
  animateVisualElement,
  animationControls,
  animationMapKey,
  animations,
  annotateTypeOnStringify,
  anticipate,
  AnyInterpolation,
  applyPxDefaults,
  AsyncMotionValueAnimation,
  attachSpring,
  attrEffect,
  AutomaticLayoutIds,
  BackgroundImage,
  backgroundImageFromProps,
  backIn,
  backInOut,
  backOut,
  BezierAnimator,
  BoxShadow,
  buildTransform2 as buildTransform,
  calcGeneratorDuration,
  calcLength,
  calculateRect,
  callEach,
  cancelFrame,
  cancelMicrotask,
  cancelSync,
  ChildrenCanSuspend,
  circIn,
  circInOut,
  circOut,
  clamp,
  clampRGB,
  collectMotionValues,
  collectVisualStyleFromProps,
  Color,
  color,
  ColorFormat,
  ColorMixModelType,
  combinedCSSRulesForPreview,
  complex,
  ComponentContainerContext,
  ComponentPresetsConsumer,
  ComponentPresetsProvider,
  ComponentViewportProvider,
  ConstraintMask,
  constraintsEnabled,
  ConstraintValues,
  Container,
  ControlType,
  ConvertColor,
  convertOffsetToTimes,
  convertPropsToDeviceOptions,
  createBox,
  createData,
  createFramerPageLink,
  createGeneratorEasing,
  createRenderBatcher,
  createRendererMotionComponent,
  createScopedAnimate,
  cssBackgroundSize,
  cubicBezier,
  cubicBezierAsString,
  CustomCursorHost,
  CustomProperties,
  cx,
  CycleVariantState,
  Data,
  DataContext,
  DataObserver,
  DataObserverContext,
  debounce,
  defaultDeviceProps,
  defaultEasing,
  defaultOffset,
  defaultTransformValue,
  defaultValueTypes,
  degrees,
  degreesToRadians,
  delay,
  DeprecatedComponentContainer,
  DeprecatedFrameWithEvents,
  DeprecatedLayoutGroupContext,
  DeprecatedLayoutGroupContext as LayoutGroupContext,
  Device,
  DeviceCodeComponent,
  devicePresets,
  DimensionType,
  dimensionValueTypes,
  disableInstantTransitions,
  dispatchKeyDownEvent,
  distance,
  distance2D,
  DOM,
  domAnimation,
  DOMKeyframesResolver,
  domMax,
  domMin,
  DragControls,
  Draggable,
  easeIn,
  easeInOut,
  easeOut,
  easingDefinitionToFunction,
  EmptyState,
  environment,
  ErrorPlaceholder,
  executeInRenderEnvironment,
  Fetcher,
  fillOffset,
  fillWildcards,
  filterProps,
  findDimensionValueType,
  findValueType,
  finiteNumber,
  FlatTree,
  Floating,
  flushKeyframeResolvers,
  FontSourceNames,
  fontStore,
  forceLayerBackingWithCSSProperties,
  FormBooleanInput,
  FormContainer,
  FormPlainTextInput2 as FormPlainTextInput,
  FormSelect,
  fraction,
  Frame,
  frame,
  frameData,
  frameFromElement,
  frameFromElements,
  FramerAnimation,
  framerAppearAnimationScriptKey,
  framerAppearEffects,
  framerAppearIdKey,
  framerAppearTransformTemplateToken,
  framerCSSMarker,
  FramerEvent,
  FramerEventListener,
  FramerEventSession,
  frameSteps,
  FrameWithMotion,
  GamepadContext,
  GeneratedComponentContext,
  generateLinearEasing,
  getAnimatableNone2 as getAnimatableNone,
  getAnimationMap,
  getComponentSize,
  getComputedStyle2 as getComputedStyle,
  getDefaultValueType,
  getDevicePreset,
  getEasingForSegment,
  getFonts,
  getFontsFromComponentPreset,
  getFontsFromSharedStyle,
  getLoadingLazyAtYPosition,
  getMeasurableCodeComponentChildren,
  getMixer,
  getPropertyControls,
  getValueAsType,
  getValueTransition,
  getVariableValue,
  getWhereExpressionFromPathVariables,
  GracefullyDegradingErrorBoundary,
  gradientForShape,
  GroupAnimation,
  GroupAnimationWithThen,
  hasWarned,
  hex,
  hover,
  hsla,
  hslaToRgba,
  Image2 as Image,
  imagePatternPropsForFill,
  imageUrlForAsset,
  inertia,
  inferInitialRouteFromPath,
  injectComponentCSSRules,
  installFlexboxGapWorkaroundIfNeeded,
  Instance,
  InternalID,
  interpolate,
  invariant,
  inView,
  invisibleValues,
  isAnimatable2 as isAnimatable,
  isBezierDefinition,
  isBrowser,
  isCSSVariableName,
  isCSSVariableToken,
  isDesignDefinition,
  isDragActive,
  isDragging,
  isEasingArray,
  isEqual,
  isFiniteNumber,
  isFractionDimension,
  isFramerGamepadKeydownData,
  isFramerPageLink,
  isGapEnabled,
  isGenerator,
  isHTMLElement,
  isMotionComponent,
  isMotionValue2 as isMotionValue,
  isNodeOrChild,
  isNumericalString,
  isObject,
  isOfAnnotatedType,
  isOverride,
  isPrimaryPointer,
  isReactDefinition,
  isRelativeNumber,
  isShallowEqualArray,
  isStaticRenderer,
  isStraightCurve,
  isSVGElement,
  isSVGSVGElement,
  isValidMotionProp,
  isWaapiSupportedEasing,
  isZeroValueString,
  JSAnimation,
  KeyframeResolver,
  keyframes,
  Layer,
  LayoutGroup,
  LayoutIdContext,
  lazy,
  LazyMotion,
  LazyValue,
  LibraryFeaturesProvider,
  Line,
  LinearGradient,
  Link,
  loadFont,
  loadJSON,
  localPackageFallbackIdentifier,
  localShadowFrame,
  m,
  MainLoop,
  makePaddingString,
  makeUseVisualState,
  mapEasingToNativeEasing,
  mapValue,
  markHydrationStart,
  maxGeneratorDuration,
  memo,
  memoize2 as memoize,
  microtask,
  millisecondsToSeconds,
  mirrorEasing,
  mix,
  mixArray,
  mixColor,
  mixComplex,
  mixImmediate,
  mixLinearColor,
  mixNumber,
  mixObject,
  mixVisibility,
  modulate,
  motion,
  MotionConfig,
  MotionConfigContext,
  MotionContext,
  MotionGlobalConfig,
  MotionSetup,
  MotionValue,
  motionValue,
  moveItem,
  namespace_exports as Reorder,
  NativeAnimation,
  NativeAnimationExtended,
  NativeAnimationWrapper,
  NavigateTo,
  NavigationCallbackProvider,
  NavigationConsumer,
  NavigationTransitionType,
  NavigationWrapper as Navigation,
  nestedLinksCollector,
  noop,
  NotFoundError,
  number,
  numberValueTypes,
  ObservableObject,
  observeTimeline,
  optimizeAppear,
  optimizeAppearTransformTemplate,
  optimizedAppearDataAttribute,
  paddingFromProps,
  Page3 as Page,
  PageEffectsProvider,
  PageRoot,
  ParentSizeState,
  parseCSSVariable,
  parseFramerPageLink,
  parseValueFromTransform,
  patchRoutesForABTesting,
  pathDefaults,
  PathSegment,
  PathVariablesContext,
  percent,
  pipe,
  Point,
  Polygon,
  positionalKeys,
  preloadImage,
  PresenceContext,
  press,
  print,
  progress,
  progressPercentage,
  propEffect,
  PropertyOverrides2 as PropertyOverrides,
  PropertyStore,
  propsForLink,
  pushLoadMoreHistory,
  px,
  QueryCache,
  QueryEngine,
  RadialGradient,
  readTransformValue,
  recordStats,
  Rect,
  removeHiddenBreakpointLayers,
  removeHiddenBreakpointLayersV2,
  removeItem,
  RenderTarget,
  resize,
  resolveElements,
  resolveLink,
  ResolveLinks,
  resolveMotionValue,
  resolvePageScope,
  reverseEasing,
  rgba,
  rgbUnit,
  RichText,
  roundedNumber,
  roundedNumberString,
  roundWithOffset,
  safeCSSValue,
  scale,
  Scroll,
  scroll,
  scrollInfo,
  secondsToMilliseconds,
  setDragLock,
  setGlobalRenderEnvironment,
  setStyle,
  Shadow,
  sharedSVGManager,
  shouldOpenLinkInNewTab,
  Size,
  SmartComponentScopedContainer,
  spring,
  SpringAnimator,
  springValue,
  SSRVariants,
  Stack,
  stagger,
  startAnimation,
  startOptimizedAppearAnimation,
  startWaapiAnimation,
  statsBuffer,
  steps,
  styleEffect,
  StyleSheetContext,
  SubscriptionManager,
  supportedWaapiEasing,
  supportsBrowserAnimation,
  supportsFlags,
  supportsLinearEasing,
  supportsPartialKeyframes,
  supportsScrollTimeline,
  SVG,
  svgEffect,
  SwitchLayoutGroupContext,
  sync,
  systemFontFamilyName,
  testValueType,
  Text2 as Text,
  throttle,
  time,
  toFlexDirection,
  toJustifyOrAlignment,
  toSVGPath,
  transform,
  transformPropOrder,
  transformProps,
  transformString2 as transformString,
  transformTemplate,
  transformValue,
  transformValueTypes,
  turnOffReactEventHandling,
  unwrapMotionComponent,
  useActiveTargetCallback,
  useActiveVariantCallback,
  useAddVariantProps,
  useAnimate,
  useAnimatedState,
  useAnimatedState as useDeprecatedAnimatedState,
  useAnimateMini,
  useAnimation,
  useAnimationControls,
  useAnimationFrame,
  useBreakpointVariants,
  useComponentViewport,
  useConstant2 as useConstant,
  useCurrentPathVariables,
  useCurrentRoute,
  useCurrentRouteId,
  useCustomCursors,
  useCycle,
  useDataRecord,
  useDomEvent,
  useDragControls,
  useDynamicRefs,
  useElementScroll,
  useForceUpdate,
  useGamepad,
  useHotkey,
  useHydratedBreakpointVariants,
  useInitialRouteComponent,
  useInstantLayoutTransition,
  useInstantTransition,
  useInvertedScale,
  useInvertedScale as useDeprecatedInvertedScale,
  useInView,
  useIsInCurrentNavigationTarget,
  useIsomorphicLayoutEffect,
  useIsOnFramerCanvas,
  useIsPresent,
  useIsStaticRenderer,
  useLoadMorePaginatedQuery,
  useLoadMorePagination,
  useLocale,
  useLocaleCode,
  useLocaleInfo,
  useLocalesForCurrentRoute,
  useLocalizationInfo,
  useMeasureLayout,
  useMetadata,
  useMotionTemplate,
  useMotionValue,
  useMotionValueEvent,
  useNavigate,
  useNavigation,
  useObserveData,
  useOnAppear,
  useOnCurrentTargetChange,
  useOnVariantChange,
  useOverlayState,
  usePageEffects,
  usePrefetch,
  usePreloadQuery,
  usePresence,
  usePresenceData,
  usePrototypeNavigate,
  useProvidedWindow,
  useQueryData,
  useReducedMotion,
  useReducedMotionConfig,
  useRenderEnvironment,
  useResetProjection,
  useRoute,
  useRouteAnchor,
  useRouteElementId,
  useRouteHandler,
  useRouter,
  useScroll,
  useSiteRefs,
  useSpring,
  useSVGTemplate,
  useTime,
  useTransform,
  useUnmountEffect,
  useVariantState,
  useVelocity,
  useViewportScroll,
  useWillChange,
  ValueInterpolation,
  valueToDimensionType,
  VariantSelector,
  Vector,
  VectorGroup,
  velocityPerSecond,
  version,
  vh,
  ViewTransitionBuilder,
  VisualElement,
  visualElementStore,
  vw,
  warning,
  warnOnce,
  WillChangeMotionValue,
  WindowContext,
  withCodeBoundaryForOverrides,
  withCSS,
  withFX,
  withGeneratedLayoutId,
  withInfiniteScroll,
  withMappedReactProps,
  withMeasuredSize,
  WithNavigator,
  withOpacity,
  withOptimizedAppearEffect,
  WithOverride,
  withParallaxTransform,
  withPath,
  withPerformanceMarks,
  withShape,
  withStyleAppearEffect,
  withV1StrokeFX,
  withVariantAppearEffect,
  withVariantFX,
  wrap,
  yieldToMain,
};
//! Credit to Astro | MIT License
/**
 * @license Emotion v11.0.0
 * MIT License
 *
 * Copyright (c) Emotion team and other contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
/*! Bundled license information:

react-is/cjs/react-is.production.min.js:
  (** @license React v16.13.1
   * react-is.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
if (typeof document !== 'undefined') {
    const fragment = new DocumentFragment();
    for (const node of document.querySelectorAll('body style[data-framer-css-ssr]')) {
        let copy = node.cloneNode(true)
        // copy.removeAttribute('data-framer-css-ssr')
        fragment.appendChild(node);
        // node.remove()
    }
    document.head.appendChild(fragment);
}

if (typeof document !== 'undefined'){
    const clearCaches = () => {
        defaultSheet = undefined
        componentsWithServerRenderedStyles.clear()
        defaultCache.clear()
    };
    document.addEventListener('astro:before-preparation', clearCaches);
    document.addEventListener('astro:before-swap', clearCaches);
}

export { Link as FramerLink  }
export { Router, FetchClientProvider, FormContext, LocaleInfoContext }